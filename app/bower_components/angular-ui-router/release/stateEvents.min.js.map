{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**","webpack:///stateEvents.min.js","webpack:///webpack/bootstrap feacb251ed5f1f1eaed5?032b**","webpack:///./ng1/legacy/stateEvents.ts?01b5","webpack:///external \"angular\"?11d2**"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_57__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","0","angular","applyPairs","memo","keyValTuple","key","value","Array","isArray","isString","Error","stateChangeStartHandler","$transition$","options","notify","valid","ignored","$injector","injector","$stateEvents","get","$rootScope","$state","$urlRouter","enabledEvents","provider","enabled","toParams","params","fromParams","$stateChangeSuccess","startEvent","$broadcast","to","from","defaultPrevented","$stateChangeCancel","transition","update","promise","then","$stateChangeError","error","type","evt","stateNotFoundHandler","$to$","$from$","redirectFn","target","redirect","identifier","e","state","retry","isFunction","$StateEventsProvider","$stateProvider","assertNotRuntime","runtime","$get","$transitions","enabledStateEvents","onInvalid","$stateChangeStart","onBefore","priority","prototype","instance","allEvents","map","reduce","enable","events","_i","arguments","length","forEach","event","disable","$inject","run","57"],"mappings":"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","file":"stateEvents.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"angular-ui-router\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"angular-ui-router\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar angular = __webpack_require__(57);\r\n\t(function () {\r\n\t    var isFunction = angular.isFunction, isString = angular.isString;\r\n\t    function applyPairs(memo, keyValTuple) {\r\n\t        var key, value;\r\n\t        if (Array.isArray(keyValTuple))\r\n\t            key = keyValTuple[0], value = keyValTuple[1];\r\n\t        if (!isString(key))\r\n\t            throw new Error(\"invalid parameters to applyPairs\");\r\n\t        memo[key] = value;\r\n\t        return memo;\r\n\t    }\r\n\t    function stateChangeStartHandler($transition$) {\r\n\t        if (!$transition$.options().notify || !$transition$.valid() || $transition$.ignored())\r\n\t            return;\r\n\t        var $injector = $transition$.injector();\r\n\t        var $stateEvents = $injector.get('$stateEvents');\r\n\t        var $rootScope = $injector.get('$rootScope');\r\n\t        var $state = $injector.get('$state');\r\n\t        var $urlRouter = $injector.get('$urlRouter');\r\n\t        var enabledEvents = $stateEvents.provider.enabled();\r\n\t        var toParams = $transition$.params(\"to\");\r\n\t        var fromParams = $transition$.params(\"from\");\r\n\t        if (enabledEvents.$stateChangeSuccess) {\r\n\t            var startEvent = $rootScope.$broadcast('$stateChangeStart', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\r\n\t            if (startEvent.defaultPrevented) {\r\n\t                if (enabledEvents.$stateChangeCancel) {\r\n\t                    $rootScope.$broadcast('$stateChangeCancel', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\r\n\t                }\r\n\t                //Don't update and resync url if there's been a new transition started. see issue #2238, #600\r\n\t                if ($state.transition == null)\r\n\t                    $urlRouter.update();\r\n\t                return false;\r\n\t            }\r\n\t            $transition$.promise.then(function () {\r\n\t                $rootScope.$broadcast('$stateChangeSuccess', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\r\n\t            });\r\n\t        }\r\n\t        if (enabledEvents.$stateChangeError) {\r\n\t            $transition$.promise[\"catch\"](function (error) {\r\n\t                if (error && (error.type === 2 /* RejectType.SUPERSEDED */ || error.type === 3 /* RejectType.ABORTED */))\r\n\t                    return;\r\n\t                var evt = $rootScope.$broadcast('$stateChangeError', $transition$.to(), toParams, $transition$.from(), fromParams, error, $transition$.options(), $transition$);\r\n\t                if (!evt.defaultPrevented) {\r\n\t                    $urlRouter.update();\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    }\r\n\t    stateNotFoundHandler.$inject = ['$to$', '$from$', '$state', '$rootScope', '$urlRouter'];\r\n\t    function stateNotFoundHandler($to$, $from$, injector) {\r\n\t        var $state = injector.get('$state');\r\n\t        var $rootScope = injector.get('$rootScope');\r\n\t        var $urlRouter = injector.get('$urlRouter');\r\n\t        var redirect = { to: $to$.identifier(), toParams: $to$.params(), options: $to$.options() };\r\n\t        var e = $rootScope.$broadcast('$stateNotFound', redirect, $from$.state(), $from$.params());\r\n\t        if (e.defaultPrevented || e.retry)\r\n\t            $urlRouter.update();\r\n\t        function redirectFn() {\r\n\t            return $state.target(redirect.to, redirect.toParams, redirect.options);\r\n\t        }\r\n\t        if (e.defaultPrevented) {\r\n\t            return false;\r\n\t        }\r\n\t        else if (e.retry || !!$state.get(redirect.to)) {\r\n\t            return e.retry && isFunction(e.retry.then) ? e.retry.then(redirectFn) : redirectFn();\r\n\t        }\r\n\t    }\r\n\t    $StateEventsProvider.$inject = ['$stateProvider'];\r\n\t    function $StateEventsProvider($stateProvider) {\r\n\t        $StateEventsProvider.prototype.instance = this;\r\n\t        var runtime = false;\r\n\t        var allEvents = ['$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError'];\r\n\t        var enabledStateEvents = allEvents.map(function (e) { return [e, true]; }).reduce(applyPairs, {});\r\n\t        function assertNotRuntime() {\r\n\t            if (runtime)\r\n\t                throw new Error(\"Cannot enable events at runtime (use $stateEventsProvider\");\r\n\t        }\r\n\t        /**\r\n\t         * Enables the deprecated UI-Router 0.2.x State Events\r\n\t         * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]\r\n\t         */\r\n\t        this.enable = function () {\r\n\t            var events = [];\r\n\t            for (var _i = 0; _i < arguments.length; _i++) {\r\n\t                events[_i - 0] = arguments[_i];\r\n\t            }\r\n\t            assertNotRuntime();\r\n\t            if (!events || !events.length)\r\n\t                events = allEvents;\r\n\t            events.forEach(function (event) { return enabledStateEvents[event] = true; });\r\n\t        };\r\n\t        /**\r\n\t         * Disables the deprecated UI-Router 0.2.x State Events\r\n\t         * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]\r\n\t         */\r\n\t        this.disable = function () {\r\n\t            var events = [];\r\n\t            for (var _i = 0; _i < arguments.length; _i++) {\r\n\t                events[_i - 0] = arguments[_i];\r\n\t            }\r\n\t            assertNotRuntime();\r\n\t            if (!events || !events.length)\r\n\t                events = allEvents;\r\n\t            events.forEach(function (event) { return delete enabledStateEvents[event]; });\r\n\t        };\r\n\t        this.enabled = function () { return enabledStateEvents; };\r\n\t        this.$get = $get;\r\n\t        $get.$inject = ['$transitions'];\r\n\t        function $get($transitions) {\r\n\t            runtime = true;\r\n\t            if (enabledStateEvents[\"$stateNotFound\"])\r\n\t                $stateProvider.onInvalid(stateNotFoundHandler);\r\n\t            if (enabledStateEvents.$stateChangeStart)\r\n\t                $transitions.onBefore({}, stateChangeStartHandler, { priority: 1000 });\r\n\t            return {\r\n\t                provider: $StateEventsProvider.prototype.instance\r\n\t            };\r\n\t        }\r\n\t    }\r\n\t    angular.module('ui.router.state.events', ['ui.router.state'])\r\n\t        .provider(\"$stateEvents\", $StateEventsProvider)\r\n\t        .run(['$stateEvents', function ($stateEvents) {\r\n\t        }]);\r\n\t})();\r\n\n\n/***/ },\n\n/***/ 57:\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n/***/ }\n\n/******/ })\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** stateEvents.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap feacb251ed5f1f1eaed5\n **/","/**\n * Provides implementation of the UI-Router 0.2.x state events.\n *\n * The 0.2.x state events are deprecated.  We recommend moving to Transition Hooks instead, as they\n * provide much more flexibility, support async, and provide the context (the Transition, etc) necessary\n * to implement meaningful application behaviors.\n *\n * To enable these state events, include the `stateEvents.js` file in your project, e.g.,\n * ```\n * <script src=\"stateEvents.js\"></script>\n * ```\n * and also make sure you depend on the `ui.router.state.events` angular module, e.g.,\n * ```\n * angular.module(\"myApplication\", ['ui.router', 'ui.router.state.events']\n * ```\n *\n * @module ng1_state_events\n */ /** */\nimport {IServiceProviderFactory} from \"angular\";\nimport {Obj} from \"../../common/common\";\nimport {TargetState} from \"../../state/targetState\";\nimport {StateService} from \"../../state/stateService\";\nimport {StateProvider} from \"../stateProvider\";\nimport {Transition} from \"../../transition/transition\";\nimport IAngularEvent = angular.IAngularEvent;\nimport {TransitionService} from \"../../transition/transitionService\";\nimport {UrlRouter} from \"../../url/urlRouter\";\nimport * as angular from 'angular';\nimport IScope = angular.IScope;\nimport {HookResult} from \"../../transition/interface\";\nimport {UIInjector} from \"../../common/interface\";\n\n/**\n * An event broadcast on `$rootScope` when the state transition **begins**.\n *\n * You can use `event.preventDefault()`\n * to prevent the transition from happening and then the transition promise will be\n * rejected with a `'transition prevented'` value.\n *\n * Additional arguments to the event handler are provided:\n * - `toState`: the Transition Target state\n * - `toParams`: the Transition Target Params\n * - `fromState`: the state the transition is coming from\n * - `fromParams`: the parameters from the state the transition is coming from\n * - `options`: any Transition Options\n * - `$transition$`: the [[Transition]]\n *\n * @example\n * ```\n *\n * $rootScope.$on('$stateChangeStart', function(event, transition) {\n *   event.preventDefault();\n *   // transitionTo() promise will be rejected with\n *   // a 'transition prevented' error\n * })\n * ```\n *\n * @deprecated use [[TransitionService.onStart]]\n * @event $stateChangeStart\n */\nexport var $stateChangeStart: IAngularEvent;\n\n/**\n * An event broadcast on `$rootScope` if a transition is **cancelled**.\n *\n * Additional arguments to the event handler are provided:\n * - `toState`: the Transition Target state\n * - `toParams`: the Transition Target Params\n * - `fromState`: the state the transition is coming from\n * - `fromParams`: the parameters from the state the transition is coming from\n * - `options`: any Transition Options\n * - `$transition$`: the [[Transition]] that was cancelled\n *\n * @deprecated\n * @event $stateChangeCancel\n */\nexport var $stateChangeCancel: IAngularEvent;\n\n/**\n *\n * An event broadcast on `$rootScope` once the state transition is **complete**.\n *\n * Additional arguments to the event handler are provided:\n * - `toState`: the Transition Target state\n * - `toParams`: the Transition Target Params\n * - `fromState`: the state the transition is coming from\n * - `fromParams`: the parameters from the state the transition is coming from\n * - `options`: any Transition Options\n * - `$transition$`: the [[Transition]] that just succeeded\n *\n * @deprecated use [[TransitionService.onStart]] and [[Transition.promise]], or [[Transition.onSuccess]]\n * @event $stateChangeSuccess\n */\nexport var $stateChangeSuccess: IAngularEvent;\n\n/**\n * An event broadcast on `$rootScope` when an **error occurs** during transition.\n *\n * It's important to note that if you\n * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n * they will not throw traditionally. You must listen for this $stateChangeError event to\n * catch **ALL** errors.\n *\n * Additional arguments to the event handler are provided:\n * - `toState`: the Transition Target state\n * - `toParams`: the Transition Target Params\n * - `fromState`: the state the transition is coming from\n * - `fromParams`: the parameters from the state the transition is coming from\n * - `error`: The reason the transition errored.\n * - `options`: any Transition Options\n * - `$transition$`: the [[Transition]] that errored\n *\n * @deprecated use [[TransitionService.onStart]] and [[Transition.promise]], or [[Transition.onError]]\n * @event $stateChangeError\n */\nexport var $stateChangeError: IAngularEvent;\n\n/**\n * An event broadcast on `$rootScope` when a requested state **cannot be found** using the provided state name.\n *\n * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n * lazy-loading the unfound state). A `TargetState` object is passed to the listener handler,\n * you can see its properties in the example. You can use `event.preventDefault()` to abort the\n * transition and the promise returned from `transitionTo()` will be rejected with a\n * `'transition aborted'` error.\n *\n * Additional arguments to the event handler are provided:\n * - `unfoundState` Unfound State information. Contains: `to, toParams, options` properties.\n * - `fromState`: the state the transition is coming from\n * - `fromParams`: the parameters from the state the transition is coming from\n * - `options`: any Transition Options\n * @example\n *\n * <pre>\n * // somewhere, assume lazy.state has not been defined\n * $state.go(\"lazy.state\", { a: 1, b: 2 }, { inherit: false });\n *\n * // somewhere else\n * $scope.$on('$stateNotFound', function(event, transition) {\n * function(event, unfoundState, fromState, fromParams){\n *     console.log(unfoundState.to); // \"lazy.state\"\n *     console.log(unfoundState.toParams); // {a:1, b:2}\n *     console.log(unfoundState.options); // {inherit:false} + default options\n * });\n * </pre>\n *\n * @deprecated use [[StateProvider.onInvalid]] // TODO: Move to [[StateService.onInvalid]]\n * @event $stateNotFound\n */\nexport var $stateNotFound: IAngularEvent;\n\n\n(function() {\n  let {isFunction, isString} = angular;\n\n  function applyPairs(memo: Obj, keyValTuple: any[]) {\n    let key: string, value: any;\n    if (Array.isArray(keyValTuple)) [key, value] = keyValTuple;\n    if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n    memo[key] = value;\n    return memo;\n  }\n\n  function stateChangeStartHandler($transition$: Transition) {\n    if (!$transition$.options().notify || !$transition$.valid() || $transition$.ignored())\n      return;\n\n    let $injector = $transition$.injector();\n    let $stateEvents = $injector.get('$stateEvents');\n    let $rootScope = $injector.get('$rootScope');\n    let $state = $injector.get('$state');\n    let $urlRouter = $injector.get('$urlRouter');\n\n    let enabledEvents = $stateEvents.provider.enabled();\n\n\n    let toParams = $transition$.params(\"to\");\n    let fromParams = $transition$.params(\"from\");\n\n    if (enabledEvents.$stateChangeSuccess) {\n      let startEvent = $rootScope.$broadcast('$stateChangeStart', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\n\n      if (startEvent.defaultPrevented) {\n        if (enabledEvents.$stateChangeCancel) {\n          $rootScope.$broadcast('$stateChangeCancel', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\n        }\n        //Don't update and resync url if there's been a new transition started. see issue #2238, #600\n        if ($state.transition == null) $urlRouter.update();\n        return false;\n      }\n\n      $transition$.promise.then(function () {\n        $rootScope.$broadcast('$stateChangeSuccess', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);\n      });\n    }\n\n    if (enabledEvents.$stateChangeError) {\n      $transition$.promise[\"catch\"](function (error) {\n        if (error && (error.type === 2 /* RejectType.SUPERSEDED */ || error.type === 3 /* RejectType.ABORTED */))\n          return;\n\n\n        let evt = $rootScope.$broadcast('$stateChangeError', $transition$.to(), toParams, $transition$.from(), fromParams, error, $transition$.options(), $transition$);\n\n        if (!evt.defaultPrevented) {\n          $urlRouter.update();\n        }\n      });\n    }\n  }\n\n  stateNotFoundHandler.$inject = ['$to$', '$from$', '$state', '$rootScope', '$urlRouter'];\n  function stateNotFoundHandler($to$: TargetState, $from$: TargetState, injector: UIInjector): HookResult {\n    let $state: StateService  = injector.get('$state');\n    let $rootScope: IScope    = injector.get('$rootScope');\n    let $urlRouter: UrlRouter = injector.get('$urlRouter');\n\n    interface StateNotFoundEvent extends IAngularEvent {\n      retry: Promise<any>;\n    }\n\n    let redirect = {to: $to$.identifier(), toParams: $to$.params(), options: $to$.options()};\n    let e = <StateNotFoundEvent> $rootScope.$broadcast('$stateNotFound', redirect, $from$.state(), $from$.params());\n\n    if (e.defaultPrevented || e.retry)\n      $urlRouter.update();\n\n    function redirectFn(): TargetState {\n      return $state.target(redirect.to, redirect.toParams, redirect.options);\n    }\n\n    if (e.defaultPrevented) {\n      return false;\n    } else if (e.retry || !!$state.get(redirect.to)) {\n      return e.retry && isFunction(e.retry.then) ? e.retry.then(redirectFn) : redirectFn();\n    }\n  }\n\n  $StateEventsProvider.$inject = ['$stateProvider'];\n  function $StateEventsProvider($stateProvider: StateProvider) {\n    $StateEventsProvider.prototype.instance = this;\n\n    interface IEventsToggle {\n      [key: string]: boolean;\n      $stateChangeStart: boolean;\n      $stateNotFound: boolean;\n      $stateChangeSuccess: boolean;\n      $stateChangeError: boolean;\n    }\n\n    let runtime = false;\n    let allEvents = ['$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError'];\n    let enabledStateEvents = <IEventsToggle> allEvents.map(e => [e, true]).reduce(applyPairs, {});\n\n    function assertNotRuntime() {\n      if (runtime) throw new Error(\"Cannot enable events at runtime (use $stateEventsProvider\");\n    }\n\n    /**\n     * Enables the deprecated UI-Router 0.2.x State Events\n     * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]\n     */\n    this.enable = function (...events: string[]) {\n      assertNotRuntime();\n      if (!events || !events.length) events = allEvents;\n      events.forEach(event => enabledStateEvents[event] = true);\n    };\n\n    /**\n     * Disables the deprecated UI-Router 0.2.x State Events\n     * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]\n     */\n    this.disable = function (...events: string[]) {\n      assertNotRuntime();\n      if (!events || !events.length) events = allEvents;\n      events.forEach(event => delete enabledStateEvents[event]);\n    };\n\n    this.enabled = () => enabledStateEvents;\n\n    this.$get = $get;\n    $get.$inject = ['$transitions'];\n    function $get($transitions: TransitionService) {\n      runtime = true;\n\n      if (enabledStateEvents[\"$stateNotFound\"])\n        $stateProvider.onInvalid(stateNotFoundHandler);\n      if (enabledStateEvents.$stateChangeStart)\n        $transitions.onBefore({}, stateChangeStartHandler, {priority: 1000});\n\n      return {\n        provider: $StateEventsProvider.prototype.instance\n      };\n    }\n  }\n\n\n  angular.module('ui.router.state.events', ['ui.router.state'])\n      .provider(\"$stateEvents\", <IServiceProviderFactory> $StateEventsProvider)\n      .run(['$stateEvents', function ($stateEvents: any) { /* Invokes $get() */\n      }]);\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/legacy/stateEvents.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 57\n ** module chunks = 0 1 2 3\n **/"],"sourceRoot":""}