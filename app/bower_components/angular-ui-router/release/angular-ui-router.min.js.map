{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-ui-router.min.js","webpack:///webpack/bootstrap feacb251ed5f1f1eaed5?032b","webpack:///./ng1.ts?319c","webpack:///./core.ts?b26d","webpack:///./common/module.ts?216c","webpack:///./common/common.ts?a996","webpack:///./common/predicates.ts?3346","webpack:///./common/hof.ts?2590","webpack:///./common/coreservices.ts?cb79","webpack:///./common/glob.ts?9f85","webpack:///./common/queue.ts?8dfe","webpack:///./common/strings.ts?4a12","webpack:///./transition/rejectFactory.ts?39fa","webpack:///./transition/transition.ts?e0c6","webpack:///./common/trace.ts?3953","webpack:///./transition/transitionHook.ts?c175","webpack:///./state/targetState.ts?636d","webpack:///./transition/hookRegistry.ts?78c1","webpack:///./transition/hookBuilder.ts?5cba","webpack:///./resolve/resolveContext.ts?db0c","webpack:///./resolve/interface.ts?9672","webpack:///./resolve/resolvable.ts?7476","webpack:///./path/pathFactory.ts?5cf3","webpack:///./path/node.ts?f81c","webpack:///./params/param.ts?aa0b","webpack:///./url/urlMatcherConfig.ts?a46d","webpack:///./params/type.ts?5680","webpack:///./router.ts?40b8","webpack:///./url/urlMatcherFactory.ts?0f3e","webpack:///./url/urlMatcher.ts?0536","webpack:///./params/paramTypes.ts?33e0","webpack:///./url/urlRouter.ts?9e8a","webpack:///./transition/transitionService.ts?5ce0","webpack:///./hooks/resolve.ts?8bdd","webpack:///./hooks/views.ts?6163","webpack:///./hooks/url.ts?3bd9","webpack:///./hooks/redirectTo.ts?7129","webpack:///./hooks/onEnterExitRetain.ts?06b0","webpack:///./hooks/lazyLoadStates.ts?f120","webpack:///./view/view.ts?e0c9","webpack:///./state/stateRegistry.ts?fafa","webpack:///./state/stateMatcher.ts?e974","webpack:///./state/stateBuilder.ts?59db","webpack:///./state/stateQueueManager.ts?3dba","webpack:///./state/stateObject.ts?1897","webpack:///./state/stateService.ts?6000","webpack:///./globals.ts?3d7d","webpack:///./params/stateParams.ts?1d6b","webpack:///./params/module.ts?b035","webpack:///./path/module.ts?805c","webpack:///./resolve/module.ts?ed8e","webpack:///./state/module.ts?4f0c","webpack:///./transition/module.ts?dde7","webpack:///./url/module.ts?b91a","webpack:///./view/module.ts?7429","webpack:///./ng1/services.ts?ba07","webpack:///./ng1/legacy/resolveService.ts?1cac","webpack:///./ng1/statebuilders/views.ts?0d8c","webpack:///./ng1/templateFactory.ts?4945","webpack:///external \"angular\"?11d2","webpack:///./ng1/stateProvider.ts?22a4","webpack:///./ng1/statebuilders/onEnterExitRetain.ts?0160","webpack:///./ng1/directives/stateDirectives.ts?a57f","webpack:///./ng1/stateFilters.ts?ad8f","webpack:///./ng1/directives/viewDirective.ts?2925","webpack:///./ng1/viewScroll.ts?698f"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_57__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","Object","defineProperty","value","router_1","UIRouter","bindFunctions","from","to","bindTo","fnNames","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","key","ancestors","first","second","path","n","push","equalForKeys","a","b","i","k","pickOmitImpl","predicate","objCopy","inArray","restArgs","omit","notInArray","array","item","pluck","collection","propName","map","hof_1","prop","callback","arr","predicates_1","isArray","result","accept","x","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","coreservices_1","w","window","angular","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","inherit","parent","extra","prototype","args","slice","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","acc","token","unnest","flatten","pairs","silenceUncaughtInPromise","promise","e","silentRejection","error","services","$q","reject","isInjectable","val","head","not","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","start","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","is","ctor","constructor","eq","other","v","notImplemented","fnname","$injector","location","locationConfig","template","Glob","text","glob","regexpString","seg","join","regexp","RegExp","matches","test","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","rejectFactory_1","common_1","transition_1","resolvable_1","stringifyPatternFn","isTransitionRejectionPromise","Rejection","_transitionRejection","Transition","Resolvable","beforeAfterSubstr","char","strings_1","RejectType","type","message","detail","detailString","d","toPromise","then","superseded","options","rejection","SUPERSEDED","redirected","invalid","INVALID","IGNORED","aborted","ABORTED","errored","ERROR","trace_1","transitionHook_1","hookRegistry_1","hookBuilder_1","node_1","pathFactory_1","targetState_1","param_1","resolveContext_1","transitionCount","stateSelf","fromPath","targetState","router","_deferred","defer","treeChanges","_treeChanges","isActive","_options","_targetState","valid","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","reloadState","enteringStates","entering","node","state","applyViewConfigs","transitionService","$view","rootResolvables","params","rootNode","context","ResolveContext","addResolvables","onBefore","matchCriteria","onStart","onExit","onRetain","onEnter","onFinish","onSuccess","onError","$from","$to","self","compare","matchState","pathname","injector","subPath","getResolveTokens","getTokens","getResolveValue","resolveContext","getData","resolvable","getResolvable","data","addResolvable","stateName","topath","targetNode","redirectedFrom","exiting","retained","views","redirect","newOptions","source","TargetState","identifier","$state","newTransition","create","originalEnteringNodes","redirectEnteringNodes","nodeIsReloading","includes","matchingEnteringNodes","PathNode","matching","resolvables","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","globals","transitionHistory","syncResult","getOnBeforeHooks","rejectReason","trace","traceTransitionIgnored","transitionSuccess","traceSuccess","success","resolve","getOnSuccessHooks","transitionError","reason","traceError","_error","getOnErrorHooks","traceTransitionStart","appendHookToChain","prev","nextHook","invokeHook","asyncHooks","redirects","trans","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","diToken","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$context","$uiViewName","$uiViewContextAnchor","Trace","_enabled","approximateDigests","_set","enabled","categories","parseInt","isNaN","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","traceHookInvocation","step","HOOK","event","eventHook","traceHookResult","hookResult","transitionOptions","hookResultStr","traceResolvePath","when","RESOLVE","pathStr","traceResolvableResolved","resolvableStr","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUIViewEvent","defaultOptions","async","rejectIfSuperseded","traceData","stateContext","isSuperseded","synchronousHookResult","_deregistered","handleHookResult","isTargetState","hooks","swallowExceptions","results","hook","exception","errorHandler","stateService","defaultErrorHandler","rejections","chain","_identifier","_definition","_params","exists","base","relative","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","matchObject","EventHook","priority","_matchingNodes","nodes","mc","allMatched","_transitionEvents","getHooks","target","tupleSort","reverseDepthSort","l","r","factor","depthDelta","$transitions","baseHookOptions","_buildNodeHooks","getOnStartHooks","getOnExitHooks","stateHook","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","matchingHooks","_matchingHooks","makeTransitionHooks","matchingNodes","resolvePath","transitionHook","sort","tuple","hookName","reg","interface_1","resolvePolicies","ALL_WHENS","EAGER","LAZY","EAGER_WHENS","NATIVE_INJECTOR_TOKEN","_path","subContext","newResolvables","whenOption","matchedWhens","promises","matchesRequestedPolicy","getPolicy","nodeResolvables","getResult","get","_injector","UIInjectorImpl","findNode","getDependencies","availableResolvables","res","getDependency","fromInjector","getNative","deps","resolved","getAsync","WAIT","NOWAIT","RXWAIT","defaultResolvePolicy","arg1","resolveFn","policy","literal","thisPolicy","statePolicy","resolvePolicy","getResolvableDependencies","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","take","maybeWaitForRx","applyResolvedValue","resolvedValue","clone","fromData","makeTargetState","buildPath","applyRawParams","inheritParams","states","viewDecls","viewConfigs","view","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","applyToParams","retainedNode","cloned","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","elementIdx","stateOrPath","getParamVal","paramDef","pDef","parameter","paramValsEq","pathA","pathB","ignoreDynamicParams","changedParams","param","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes","type_1","ParamType","DefType","CONFIG","getSquashPolicy","config","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","isSearch","normalized","encoded","encode","exec","fromConfig","PATH","fromSearch","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","mode","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","paramTypeFn","wrapperFn","$arrayMode","def","decode","$subPattern","sub","urlMatcherFactory_1","urlRouter_1","urlRouter_2","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","viewService","ViewService","TransitionService","Globals","urlMatcherFactory","UrlMatcherFactory","urlRouterProvider","UrlRouterProvider","urlRouter","UrlRouter","stateRegistry","StateRegistry","StateService","rootContext","$current","getDefaultConfig","strict","urlMatcher_1","paramTypes_1","ParamTypes","UrlMatcher","compile","isMatcher","object","definition","definitionFn","$get","_flushTypeQueue","quoteRegExp","string","surroundPattern","predicates_2","param_2","common_2","common_3","memoizeTo","_cache","_children","_segments","_compiled","paramMap","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","nameValidator","matchDetails","substring","index","lastIndex","search","prefix","freeze","append","url","isRoot","hash","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","j","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","matcher","staticSegments","valToString","~","/","valFromString","~~","~2F","typeQueue","defaultTypes","String","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","makeType","types","regExpPrefix","re","interpolate","what","Number","handleIfMatch","$stateParams","handler","$match","appendBasePath","isHtml5","absolute","baseHref","update","rules","otherwiseFn","evt","check","rule","handled","$location","setUrl","defaultPrevented","$urlMatcherFactory","interceptDeferred","removeRule","otherwise","ruleCallback","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","sync","listen","listener","onChange","read","urlMatcher","href","html5Mode","hashPrefix","slash","port","protocol","host","resolve_1","views_1","url_1","redirectTo_1","onEnterExitRetain_1","lazyLoadStates_1","defaultTransOpts","notify","custom","_router","_deregisterHookFns","registerTransitionHooks","fns","redirectTo","registerRedirectToHook","registerOnExitHook","registerOnRetainHook","registerOnEnterHook","eagerResolve","registerEagerResolvePath","lazyResolve","registerLazyResolveState","loadViews","registerLoadEnteringViews","activateViews","registerActivateViews","updateUrl","registerUpdateUrl","lazyLoad","registerLazyLoadHook","eagerResolvePath","lazyResolveState","loadEnteringViews","enteringViews","load","exitingViews","vc","deactivateViewConfig","activateViewConfig","$urlRouter","navigable","urlOptions","redirectToHook","handleResult","makeEnterExitRetainHook","hookFn","onExitHook","onRetainHook","onEnterHook","lazyLoadHook","retryOriginalTransition","loc","path_1","search_1","hash_1","registry","s","$$state","orig","updateStateRegistry","deregister","register","cleanup","uiViews","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","$type","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUIView","configUpdated","_rootContext","viewConfigFactory","viewType","decl","cfgFactory","cfgs","registerUIView","fqnMatches","available","active","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","charAt","relativeMatch","anchor","stateMatcher_1","stateBuilder_1","stateQueueManager_1","listeners","StateMatcher","builder","StateBuilder","stateQueue","StateQueueManager","rootStateDef","#","abstract","_root","onStatesChanged","stateDefinition","_deregisterTree","getChildren","children","deregistered","_urlRule","stateOrName","deregisteredStates","found","decorator","func","_states","isRelative","isStr","baseState","splitName","pathLength","relName","nameBuilder","selfBuilder","dataBuilder","pathBuilder","includesBuilder","resolvablesBuilder","objects2Tuples","resolveObj","annotate","strictDi","isResolveLiteral","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","literal2Resolvable","dependencies","tuple2Resolvable","item2Resolvable","parseUrl","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","paramConfig","reloadOnSearch","getNavigableBuilder","getParamsBuilder","makeConfigParam","urlParams","nonUrlParams","parentBuilder","parentName","builders","build","parentFn","segments","lastSegment","pop","stateObject_1","$urlRouterProvider","queue","State","flush","registered","orphans","previousQueueLength","orphanIdx","attachRoute","autoFlush","transitionTo","ref","inherited","queue_1","invalidCallbacks","_defaultErrorHandler","$error$","stack","getters","boundFns","enumerable","configurable","_handleInvalidTargetState","invokeNextCallback","nextCallback","callbackQueue","callbackResult","checkForRedirect","latestThing","latest","onInvalid","go","defautGoOpts","transOpts","transHistory","latestSuccess","successfulTransitions","rootPath","currentPath","rejectedTransitionHandler","transitionToPromise","include","defaultHrefOpts","lossy","$inherit","nav","stateParams_1","StateParams","beforeNewTransition","$transition$","updateGlobalState","clearCurrentTransition","newParams","parentParams","parents","inheritList","annotateController","controllerExpression","$controller","oldInstantiate","instantiate","deps_1","constructorFunction","$scope","$uiRouter","$locationProvider","$browser","$sniffer","$rootScope","$http","$templateCache","$on","urlListeners","history","newUrl","headers","Accept","stateProvider","stateProvider_1","StateProvider","ng1ViewsBuilder","getStateHookBuilder","ng1ViewConfigFactory","$inject","runBlock","getUrlRouterProvider","getStateProvider","getTransitionsProvider","watchDigests","$watch","resolveService_1","templateFactory_1","provider","TemplateFactory","resolveFactory","service","getLocals","ctx","tokens","$resolve","invocables","locals","parentNode","resolveData","parentLocals","rewrap","_locals","local","tuples2ObjR","tplKeys","ctrlKeys","compKeys","nonCompKeys","allKeys","viewsObject","$default","component","templateProvider","resolveFor","bindings","version","minor","attributeTpl","attrName","resolveName","attrs","getComponentInputs","kebobName","resolveAs","$name","cmpDefs","getBindings","Ng1ViewConfig","scopeBindings","bindingsObj","bindToController","scope","hasTemplate","getTemplate","controller","getController","templateUrl","$factory","controllerProvider","providerFn","fromUrl","fromProvider","services_1","decoratedNg1Hook","$state$","parseStateRef","preparsed","paramExpr","el","$uiView","inheritedData","getTypeInfo","isSvg","isForm","nodeName","attr","isAnchor","clickable","clickHook","$timeout","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","uiSref","restrict","link","element","uiSrefActive","unlinkInfoFn","uiSrefOpts","$eval","$$addStateInfo","$set","on","off","uiState","runStateRefLink","group","uiStateParams","uiStateOpts","watch","$interpolate","$element","$attrs","updateAfterTransition","addState","stateParams","activeClass","stateHash","createStateHash","stateInfo","activeClasses","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","directive","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","$ViewDirectiveFill","$compile","getControllerAs","getResolveAs","tElement","initial","$cfg","contents","controllerAs","resolveCtx","controllerInstance","registerControllerCallbacks","cmp_1","kebobName_1","getComponentController","directiveEl","tagName","deregisterWatch_1","ctrlInstance","$onInit","hasComponentImpl","viewState","hookOptions","uiOnParamsChanged","viewCreationTrans_1","paramsUpdated","toSchema","fromSchema","changedToParams","changedKeys_1","uiCanExit","criteria","$animate","$uiViewScroll","getRenderer","enter","leave","configsEqual","config1","config2","rootData","terminal","transclude","tAttrs","$transclude","configUpdatedCallback","activeUIView","updateView","cleanupLastView","previousEl","currentScope","$destroy","currentEl","_viewData_1","renderer","$$animLeave","newScope","$new","animEnter","animLeave","$uiViewData","$uiViewAnim","$animEnter","$animLeave","$emit","autoScrollExp","onloadExp","unregister","$ViewScrollProvider","useAnchorScroll","$anchorScroll","scrollIntoView"],"mappings":"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","file":"angular-ui-router.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"angular-ui-router\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-ui-router\", [\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-ui-router\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"angular-ui-router\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Main entry point for angular 1.x build\r\n\t * @module ng1\r\n\t */\r\n\t/** for typedoc */\r\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\t__export(__webpack_require__(53));\r\n\t__export(__webpack_require__(55));\r\n\t__export(__webpack_require__(58));\r\n\t__webpack_require__(60);\r\n\t__webpack_require__(61);\r\n\t__webpack_require__(62);\r\n\t__webpack_require__(63);\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.default = \"ui.router\";\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\r\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(46));\r\n\t__export(__webpack_require__(47));\r\n\t__export(__webpack_require__(48));\r\n\t__export(__webpack_require__(49));\r\n\t__export(__webpack_require__(50));\r\n\t__export(__webpack_require__(51));\r\n\t__export(__webpack_require__(52));\r\n\t__export(__webpack_require__(44));\r\n\tvar router_1 = __webpack_require__(25);\r\n\texports.UIRouter = router_1.UIRouter;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module common */ /** for typedoc */\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(6));\r\n\t__export(__webpack_require__(7));\r\n\t__export(__webpack_require__(5));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(8));\r\n\t__export(__webpack_require__(9));\r\n\t__export(__webpack_require__(12));\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Random utility functions used in the UI-Router code\r\n\t *\r\n\t * @preferred @module common\r\n\t */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar w = typeof window === 'undefined' ? {} : window;\r\n\tvar angular = w.angular || {};\r\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\r\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\r\n\texports.copy = angular.copy || _copy;\r\n\texports.forEach = angular.forEach || _forEach;\r\n\texports.extend = angular.extend || _extend;\r\n\texports.equals = angular.equals || _equals;\r\n\texports.identity = function (x) { return x; };\r\n\texports.noop = function () { return undefined; };\r\n\t/**\r\n\t * Binds and copies functions onto an object\r\n\t *\r\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\r\n\t * on the 'to' object.\r\n\t *\r\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * class Foo {\r\n\t *   constructor(data) {\r\n\t *     // Binds all functions from Foo.prototype to 'this',\r\n\t *     // then copies them to 'this'\r\n\t *     bindFunctions(Foo.prototype, this, this);\r\n\t *     this.data = data;\r\n\t *   }\r\n\t *\r\n\t *   log() {\r\n\t *     console.log(this.data);\r\n\t *   }\r\n\t * }\r\n\t *\r\n\t * let myFoo = new Foo([1,2,3]);\r\n\t * var logit = myFoo.log;\r\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\r\n\t * ```\r\n\t *\r\n\t * This example creates a bound version of a service function, and copies it to another object\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * var SomeService = {\r\n\t *   this.data = [3, 4, 5];\r\n\t *   this.log = function() {\r\n\t *     console.log(this.data);\r\n\t *   }\r\n\t * }\r\n\t *\r\n\t * // Constructor fn\r\n\t * function OtherThing() {\r\n\t *   // Binds all functions from SomeService to SomeService,\r\n\t *   // then copies them to 'this'\r\n\t *   bindFunctions(SomeService, this, SomeService);\r\n\t * }\r\n\t *\r\n\t * let myOtherThing = new OtherThing();\r\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\r\n\t * ```\r\n\t *\r\n\t * @param from The object which contains the functions to be bound\r\n\t * @param to The object which will receive the bound functions\r\n\t * @param bindTo The object which the functions will be bound to\r\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\r\n\t */\r\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\r\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\r\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\r\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\r\n\t}\r\n\texports.bindFunctions = bindFunctions;\r\n\t/**\r\n\t * prototypal inheritance helper.\r\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\r\n\t */\r\n\texports.inherit = function (parent, extra) {\r\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\r\n\t};\r\n\t/**\r\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\r\n\t * This is similar to es6 rest parameters.\r\n\t *\r\n\t * Optionally, the argument at index idx may itself already be an array.\r\n\t *\r\n\t * For example,\r\n\t * given either:\r\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\r\n\t * or:\r\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\r\n\t * then:\r\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\r\n\t *\r\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\r\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\r\n\t *\r\n\t * given:\r\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\r\n\t * then:\r\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\r\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\r\n\t */\r\n\tvar restArgs = function (args, idx) {\r\n\t    if (idx === void 0) { idx = 0; }\r\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\r\n\t};\r\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\r\n\texports.inArray = function (array, obj) {\r\n\t    return array.indexOf(obj) !== -1;\r\n\t};\r\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\r\n\texports.removeFrom = hof_1.curry(function (array, obj) {\r\n\t    var idx = array.indexOf(obj);\r\n\t    if (idx >= 0)\r\n\t        array.splice(idx, 1);\r\n\t    return array;\r\n\t});\r\n\t/**\r\n\t * Applies a set of defaults to an options object.  The options object is filtered\r\n\t * to only those properties of the objects in the defaultsList.\r\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\r\n\t */\r\n\tfunction defaults(opts) {\r\n\t    if (opts === void 0) { opts = {}; }\r\n\t    var defaultsList = [];\r\n\t    for (var _i = 1; _i < arguments.length; _i++) {\r\n\t        defaultsList[_i - 1] = arguments[_i];\r\n\t    }\r\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\r\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\r\n\t}\r\n\texports.defaults = defaults;\r\n\t/**\r\n\t * Merges properties from the list of objects to the destination object.\r\n\t * If a property already exists in the destination object, then it is not overwritten.\r\n\t */\r\n\tfunction merge(dst) {\r\n\t    var objs = [];\r\n\t    for (var _i = 1; _i < arguments.length; _i++) {\r\n\t        objs[_i - 1] = arguments[_i];\r\n\t    }\r\n\t    exports.forEach(objs, function (obj) {\r\n\t        exports.forEach(obj, function (value, key) {\r\n\t            if (!dst.hasOwnProperty(key))\r\n\t                dst[key] = value;\r\n\t        });\r\n\t    });\r\n\t    return dst;\r\n\t}\r\n\texports.merge = merge;\r\n\t/** Reduce function that merges each element of the list into a single object, using extend */\r\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\r\n\t/**\r\n\t * Finds the common ancestor path between two states.\r\n\t *\r\n\t * @param {Object} first The first state.\r\n\t * @param {Object} second The second state.\r\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\r\n\t */\r\n\tfunction ancestors(first, second) {\r\n\t    var path = [];\r\n\t    for (var n in first.path) {\r\n\t        if (first.path[n] !== second.path[n])\r\n\t            break;\r\n\t        path.push(first.path[n]);\r\n\t    }\r\n\t    return path;\r\n\t}\r\n\texports.ancestors = ancestors;\r\n\t/**\r\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\r\n\t *\r\n\t * @param {Object} a The first object.\r\n\t * @param {Object} b The second object.\r\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\r\n\t *                     it defaults to the list of keys in `a`.\r\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\r\n\t */\r\n\tfunction equalForKeys(a, b, keys) {\r\n\t    if (keys === void 0) { keys = Object.keys(a); }\r\n\t    for (var i = 0; i < keys.length; i++) {\r\n\t        var k = keys[i];\r\n\t        if (a[k] != b[k])\r\n\t            return false; // Not '===', values aren't necessarily normalized\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\texports.equalForKeys = equalForKeys;\r\n\tfunction pickOmitImpl(predicate, obj) {\r\n\t    var keys = [];\r\n\t    for (var _i = 2; _i < arguments.length; _i++) {\r\n\t        keys[_i - 2] = arguments[_i];\r\n\t    }\r\n\t    var objCopy = {};\r\n\t    for (var key in obj) {\r\n\t        if (predicate(keys, key))\r\n\t            objCopy[key] = obj[key];\r\n\t    }\r\n\t    return objCopy;\r\n\t}\r\n\t/** Return a copy of the object only containing the whitelisted properties. */\r\n\tfunction pick(obj) {\r\n\t    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));\r\n\t}\r\n\texports.pick = pick;\r\n\t/** Return a copy of the object omitting the blacklisted properties. */\r\n\tfunction omit(obj) {\r\n\t    var notInArray = function (array, item) { return !exports.inArray(array, item); };\r\n\t    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\r\n\t}\r\n\texports.omit = omit;\r\n\t/**\r\n\t * Maps an array, or object to a property (by name)\r\n\t */\r\n\tfunction pluck(collection, propName) {\r\n\t    return map(collection, hof_1.prop(propName));\r\n\t}\r\n\texports.pluck = pluck;\r\n\t/** Filters an Array or an Object's properties based on a predicate */\r\n\tfunction filter(collection, callback) {\r\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\r\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\r\n\t    exports.forEach(collection, function (item, i) {\r\n\t        if (callback(item, i))\r\n\t            accept(item, i);\r\n\t    });\r\n\t    return result;\r\n\t}\r\n\texports.filter = filter;\r\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\r\n\tfunction find(collection, callback) {\r\n\t    var result;\r\n\t    exports.forEach(collection, function (item, i) {\r\n\t        if (result)\r\n\t            return;\r\n\t        if (callback(item, i))\r\n\t            result = item;\r\n\t    });\r\n\t    return result;\r\n\t}\r\n\texports.find = find;\r\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\r\n\texports.mapObj = map;\r\n\t/** Maps an array or object properties using a callback function */\r\n\tfunction map(collection, callback) {\r\n\t    var result = predicates_1.isArray(collection) ? [] : {};\r\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\r\n\t    return result;\r\n\t}\r\n\texports.map = map;\r\n\t/**\r\n\t * Given an object, return its enumerable property values\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let foo = { a: 1, b: 2, c: 3 }\r\n\t * let vals = values(foo); // [ 1, 2, 3 ]\r\n\t * ```\r\n\t */\r\n\texports.values = function (obj) {\r\n\t    return Object.keys(obj).map(function (key) { return obj[key]; });\r\n\t};\r\n\t/**\r\n\t * Reduce function that returns true if all of the values are truthy.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let vals = [ 1, true, {}, \"hello world\"];\r\n\t * vals.reduce(allTrueR, true); // true\r\n\t *\r\n\t * vals.push(0);\r\n\t * vals.reduce(allTrueR, true); // false\r\n\t * ```\r\n\t */\r\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\r\n\t/**\r\n\t * Reduce function that returns true if any of the values are truthy.\r\n\t *\r\n\t *  * @example\r\n\t * ```\r\n\t *\r\n\t * let vals = [ 0, null, undefined ];\r\n\t * vals.reduce(anyTrueR, true); // false\r\n\t *\r\n\t * vals.push(\"hello world\");\r\n\t * vals.reduce(anyTrueR, true); // true\r\n\t * ```\r\n\t */\r\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\r\n\t/**\r\n\t * Reduce function which un-nests a single level of arrays\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\r\n\t/**\r\n\t * Reduce function which recursively un-nests all arrays\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\r\n\t * ```\r\n\t */\r\n\texports.flattenR = function (memo, elem) {\r\n\t    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\r\n\t};\r\n\t/**\r\n\t * Reduce function that pushes an object to an array, then returns the array.\r\n\t * Mostly just for [[flattenR]] and [[uniqR]]\r\n\t */\r\n\tfunction pushR(arr, obj) {\r\n\t    arr.push(obj);\r\n\t    return arr;\r\n\t}\r\n\texports.pushR = pushR;\r\n\t/** Reduce function that filters out duplicates */\r\n\texports.uniqR = function (acc, token) {\r\n\t    return exports.inArray(acc, token) ? acc : pushR(acc, token);\r\n\t};\r\n\t/**\r\n\t * Return a new array with a single level of arrays unnested.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\r\n\t/**\r\n\t * Return a completely flattened version of an array.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\r\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\r\n\t * ```\r\n\t */\r\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\r\n\t/**\r\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let isNumber = (obj) => typeof(obj) === 'number';\r\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\r\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\r\n\t *\r\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\r\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\r\n\t * ```\r\n\t */\r\n\tfunction assertPredicate(predicate, errMsg) {\r\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\r\n\t    return function (obj) {\r\n\t        if (!predicate(obj)) {\r\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t}\r\n\texports.assertPredicate = assertPredicate;\r\n\t/**\r\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\r\n\t * ```\r\n\t */\r\n\texports.pairs = function (obj) {\r\n\t    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });\r\n\t};\r\n\t/**\r\n\t * Given two or more parallel arrays, returns an array of tuples where\r\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * let foo = [ 0, 2, 4, 6 ];\r\n\t * let bar = [ 1, 3, 5, 7 ];\r\n\t * let baz = [ 10, 30, 50, 70 ];\r\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\r\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\r\n\t * ```\r\n\t */\r\n\tfunction arrayTuples() {\r\n\t    var arrayArgs = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        arrayArgs[_i - 0] = arguments[_i];\r\n\t    }\r\n\t    if (arrayArgs.length === 0)\r\n\t        return [];\r\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\r\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\r\n\t}\r\n\texports.arrayTuples = arrayTuples;\r\n\t/**\r\n\t * Reduce function which builds an object from an array of [key, value] pairs.\r\n\t *\r\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\r\n\t *\r\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\r\n\t *\r\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\r\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\r\n\t *\r\n\t * // Or, more simply:\r\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\r\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\r\n\t * ```\r\n\t */\r\n\tfunction applyPairs(memo, keyValTuple) {\r\n\t    var key, value;\r\n\t    if (predicates_1.isArray(keyValTuple))\r\n\t        key = keyValTuple[0], value = keyValTuple[1];\r\n\t    if (!predicates_1.isString(key))\r\n\t        throw new Error(\"invalid parameters to applyPairs\");\r\n\t    memo[key] = value;\r\n\t    return memo;\r\n\t}\r\n\texports.applyPairs = applyPairs;\r\n\t/** Get the last element of an array */\r\n\tfunction tail(arr) {\r\n\t    return arr.length && arr[arr.length - 1] || undefined;\r\n\t}\r\n\texports.tail = tail;\r\n\t/**\r\n\t * shallow copy from src to dest\r\n\t *\r\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\r\n\t * ui-router uses `copy` only to make copies of state parameters.\r\n\t */\r\n\tfunction _copy(src, dest) {\r\n\t    if (dest)\r\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\r\n\t    if (!dest)\r\n\t        dest = {};\r\n\t    return exports.extend(dest, src);\r\n\t}\r\n\t/** Naive forEach implementation works with Objects or Arrays */\r\n\tfunction _forEach(obj, cb, _this) {\r\n\t    if (predicates_1.isArray(obj))\r\n\t        return obj.forEach(cb, _this);\r\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\r\n\t}\r\n\tfunction _copyProps(to, from) {\r\n\t    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });\r\n\t    return to;\r\n\t}\r\n\tfunction _extend(toObj) {\r\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\r\n\t}\r\n\tfunction _equals(o1, o2) {\r\n\t    if (o1 === o2)\r\n\t        return true;\r\n\t    if (o1 === null || o2 === null)\r\n\t        return false;\r\n\t    if (o1 !== o1 && o2 !== o2)\r\n\t        return true; // NaN === NaN\r\n\t    var t1 = typeof o1, t2 = typeof o2;\r\n\t    if (t1 !== t2 || t1 !== 'object')\r\n\t        return false;\r\n\t    var tup = [o1, o2];\r\n\t    if (hof_1.all(predicates_1.isArray)(tup))\r\n\t        return _arraysEq(o1, o2);\r\n\t    if (hof_1.all(predicates_1.isDate)(tup))\r\n\t        return o1.getTime() === o2.getTime();\r\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\r\n\t        return o1.toString() === o2.toString();\r\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\r\n\t        return true; // meh\r\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\r\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\r\n\t        return false;\r\n\t    var key, keys = {};\r\n\t    for (key in o1) {\r\n\t        if (!_equals(o1[key], o2[key]))\r\n\t            return false;\r\n\t        keys[key] = true;\r\n\t    }\r\n\t    for (key in o2) {\r\n\t        if (!keys[key])\r\n\t            return false;\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\tfunction _arraysEq(a1, a2) {\r\n\t    if (a1.length !== a2.length)\r\n\t        return false;\r\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\r\n\t}\r\n\t// issue #2676\r\n\texports.silenceUncaughtInPromise = function (promise) {\r\n\t    return promise.catch(function (e) { return 0; }) && promise;\r\n\t};\r\n\texports.silentRejection = function (error) {\r\n\t    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\r\n\t};\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** Predicates @module common_predicates */ /** */\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar toStr = Object.prototype.toString;\r\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\r\n\texports.isUndefined = tis('undefined');\r\n\texports.isDefined = hof_1.not(exports.isUndefined);\r\n\texports.isNull = function (o) { return o === null; };\r\n\texports.isFunction = tis('function');\r\n\texports.isNumber = tis('number');\r\n\texports.isString = tis('string');\r\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\r\n\texports.isArray = Array.isArray;\r\n\texports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\r\n\texports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\r\n\t/**\r\n\t * Predicate which checks if a value is injectable\r\n\t *\r\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\r\n\t * where all the elements in the array are Strings, except the last one, which is a Function\r\n\t */\r\n\tfunction isInjectable(val) {\r\n\t    if (exports.isArray(val) && val.length) {\r\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\r\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\r\n\t    }\r\n\t    return exports.isFunction(val);\r\n\t}\r\n\texports.isInjectable = isInjectable;\r\n\t/**\r\n\t * Predicate which checks if a value looks like a Promise\r\n\t *\r\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\r\n\t */\r\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t * Higher order functions\r\n\t *\r\n\t * @module common_hof\r\n\t */ /** */\r\n\t\"use strict\";\r\n\t/**\r\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\r\n\t *\r\n\t * Given a function with N parameters, returns a new function that supports partial application.\r\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\r\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\r\n\t * accept more parameters until all N parameters have been supplied.\r\n\t *\r\n\t *\r\n\t * This contrived example uses a partially applied function as an predicate, which returns true\r\n\t * if an object is found in both arrays.\r\n\t * @example\r\n\t * ```\r\n\t * // returns true if an object is in both of the two arrays\r\n\t * function inBoth(array1, array2, object) {\r\n\t *   return array1.indexOf(object) !== -1 &&\r\n\t *          array2.indexOf(object) !== 1;\r\n\t * }\r\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\r\n\t * let foos = [obj1, obj3]\r\n\t * let bars = [obj3, obj4, obj5]\r\n\t *\r\n\t * // A curried \"copy\" of inBoth\r\n\t * let curriedInBoth = curry(inBoth);\r\n\t * // Partially apply both the array1 and array2\r\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\r\n\t *\r\n\t * // Supply the final argument; since all arguments are\r\n\t * // supplied, the original inBoth function is then called.\r\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\r\n\t *\r\n\t * // Use the inFoosAndBars as a predicate.\r\n\t * // Filter, on each iteration, supplies the final argument\r\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\r\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\r\n\t *\r\n\t * ```\r\n\t *\r\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\r\n\t *\r\n\t * @param fn\r\n\t * @returns {*|function(): (*|any)}\r\n\t */\r\n\tfunction curry(fn) {\r\n\t    var initial_args = [].slice.apply(arguments, [1]);\r\n\t    var func_args_length = fn.length;\r\n\t    function curried(args) {\r\n\t        if (args.length >= func_args_length)\r\n\t            return fn.apply(null, args);\r\n\t        return function () {\r\n\t            return curried(args.concat([].slice.apply(arguments)));\r\n\t        };\r\n\t    }\r\n\t    return curried(initial_args);\r\n\t}\r\n\texports.curry = curry;\r\n\t/**\r\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\r\n\t * given: f(x), g(x), h(x)\r\n\t * let composed = compose(f,g,h)\r\n\t * then, composed is: f(g(h(x)))\r\n\t */\r\n\tfunction compose() {\r\n\t    var args = arguments;\r\n\t    var start = args.length - 1;\r\n\t    return function () {\r\n\t        var i = start, result = args[start].apply(this, arguments);\r\n\t        while (i--)\r\n\t            result = args[i].call(this, result);\r\n\t        return result;\r\n\t    };\r\n\t}\r\n\texports.compose = compose;\r\n\t/**\r\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\r\n\t * given: f(x), g(x), h(x)\r\n\t * let piped = pipe(f,g,h);\r\n\t * then, piped is: h(g(f(x)))\r\n\t */\r\n\tfunction pipe() {\r\n\t    var funcs = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        funcs[_i - 0] = arguments[_i];\r\n\t    }\r\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\r\n\t}\r\n\texports.pipe = pipe;\r\n\t/**\r\n\t * Given a property name, returns a function that returns that property from an object\r\n\t * let obj = { foo: 1, name: \"blarg\" };\r\n\t * let getName = prop(\"name\");\r\n\t * getName(obj) === \"blarg\"\r\n\t */\r\n\texports.prop = function (name) {\r\n\t    return function (obj) { return obj && obj[name]; };\r\n\t};\r\n\t/**\r\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\r\n\t * the passed object has a property that matches the value\r\n\t * let obj = { foo: 1, name: \"blarg\" };\r\n\t * let getName = propEq(\"name\", \"blarg\");\r\n\t * getName(obj) === true\r\n\t */\r\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\r\n\t/**\r\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\r\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\r\n\t * let getName = prop(\"nestedObj.name\");\r\n\t * getName(obj) === \"blarg\"\r\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\r\n\t * propNotFound(obj) === undefined\r\n\t */\r\n\texports.parse = function (name) {\r\n\t    return pipe.apply(null, name.split(\".\").map(exports.prop));\r\n\t};\r\n\t/**\r\n\t * Given a function that returns a truthy or falsey value, returns a\r\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\r\n\t */\r\n\texports.not = function (fn) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return !fn.apply(null, args);\r\n\t    };\r\n\t};\r\n\t/**\r\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\r\n\t * if both functions return truthy for the given arguments\r\n\t */\r\n\tfunction and(fn1, fn2) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\r\n\t    };\r\n\t}\r\n\texports.and = and;\r\n\t/**\r\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\r\n\t * if at least one of the functions returns truthy for the given arguments\r\n\t */\r\n\tfunction or(fn1, fn2) {\r\n\t    return function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\r\n\t    };\r\n\t}\r\n\texports.or = or;\r\n\t/**\r\n\t * Check if all the elements of an array match a predicate function\r\n\t *\r\n\t * @param fn1 a predicate function `fn1`\r\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\r\n\t */\r\n\texports.all = function (fn1) {\r\n\t    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };\r\n\t};\r\n\texports.any = function (fn1) {\r\n\t    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };\r\n\t};\r\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\r\n\texports.is = function (ctor) { return function (obj) {\r\n\t    return (obj != null && obj.constructor === ctor || obj instanceof ctor);\r\n\t}; };\r\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\r\n\texports.eq = function (val) { return function (other) {\r\n\t    return val === other;\r\n\t}; };\r\n\t/** Given a value, returns a function which returns the value */\r\n\texports.val = function (v) { return function () { return v; }; };\r\n\tfunction invoke(fnName, args) {\r\n\t    return function (obj) {\r\n\t        return obj[fnName].apply(obj, args);\r\n\t    };\r\n\t}\r\n\texports.invoke = invoke;\r\n\t/**\r\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\r\n\t *\r\n\t * See http://c2.com/cgi/wiki?PatternMatching\r\n\t *\r\n\t * This is a conditional construct which allows a series of predicates and output functions\r\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\r\n\t * returns truthy, then its matching output function (mapping function) is provided with\r\n\t * the input and, then the result is returned.\r\n\t *\r\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\r\n\t * of size 2: [ predicate, mapFn ]\r\n\t *\r\n\t * These 2-tuples should be put in an outer array.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * // Here's a 2-tuple where the first element is the isString predicate\r\n\t * // and the second element is a function that returns a description of the input\r\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\r\n\t *\r\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\r\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\r\n\t *\r\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\r\n\t *\r\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\r\n\t *\r\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\r\n\t *\r\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\r\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\r\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\r\n\t * ```\r\n\t *\r\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\r\n\t * with a Predicate and a mapping/output function\r\n\t * @returns {function(any): *}\r\n\t */\r\n\tfunction pattern(struct) {\r\n\t    return function (x) {\r\n\t        for (var i = 0; i < struct.length; i++) {\r\n\t            if (struct[i][0](x))\r\n\t                return struct[i][1](x);\r\n\t        }\r\n\t    };\r\n\t}\r\n\texports.pattern = pattern;\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar notImplemented = function (fnname) { return function () {\r\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\r\n\t}; };\r\n\tvar services = {\r\n\t    $q: undefined,\r\n\t    $injector: undefined,\r\n\t    location: {},\r\n\t    locationConfig: {},\r\n\t    template: {}\r\n\t};\r\n\texports.services = services;\r\n\t[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\r\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\r\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\r\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/** @module common */\r\n\t/**\r\n\t * Matches state names using glob-like pattern strings.\r\n\t *\r\n\t * Globs can be used in specific APIs including:\r\n\t *\r\n\t * - [[StateService.is]]\r\n\t * - [[StateService.includes]]\r\n\t * - [[HookMatchCriteria.to]]\r\n\t * - [[HookMatchCriteria.from]]\r\n\t * - [[HookMatchCriteria.exiting]]\r\n\t * - [[HookMatchCriteria.retained]]\r\n\t * - [[HookMatchCriteria.entering]]\r\n\t *\r\n\t * A `Glob` string is a pattern which matches state names.\r\n\t * Nested state names are split into segments (separated by a dot) when processing.\r\n\t * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\r\n\t *\r\n\t * Globs work according to the following rules:\r\n\t *\r\n\t * ### Exact match:\r\n\t *\r\n\t * The glob `'A.B'` matches the state named exactly `'A.B'`.\r\n\t *\r\n\t * | Glob        |Matches states named|Does not match state named|\r\n\t * |:------------|:--------------------|:---------------------|\r\n\t * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\r\n\t * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\r\n\t * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\r\n\t *\r\n\t * ### Single star (`*`)\r\n\t *\r\n\t * A single star (`*`) is a wildcard that matches exactly one segment.\r\n\t *\r\n\t * | Glob        |Matches states named  |Does not match state named |\r\n\t * |:------------|:---------------------|:--------------------------|\r\n\t * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\r\n\t * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\r\n\t * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\r\n\t *\r\n\t * ### Double star (`**`)\r\n\t *\r\n\t * A double star (`'**'`) is a wildcard that matches *zero or more segments*\r\n\t *\r\n\t * | Glob        |Matches states named                           |Does not match state named         |\r\n\t * |:------------|:----------------------------------------------|:----------------------------------|\r\n\t * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\r\n\t * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\r\n\t * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\r\n\t * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\r\n\t *\r\n\t */\r\n\tvar Glob = (function () {\r\n\t    function Glob(text) {\r\n\t        this.text = text;\r\n\t        this.glob = text.split('.');\r\n\t        var regexpString = this.text.split('.')\r\n\t            .map(function (seg) {\r\n\t            if (seg === '**')\r\n\t                return '(?:|(?:\\\\.[^.]*)*)';\r\n\t            if (seg === '*')\r\n\t                return '\\\\.[^.]*';\r\n\t            return '\\\\.' + seg;\r\n\t        }).join('');\r\n\t        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\r\n\t    }\r\n\t    Glob.prototype.matches = function (name) {\r\n\t        return this.regexp.test('.' + name);\r\n\t    };\r\n\t    /** @deprecated whats the point? */\r\n\t    Glob.is = function (text) {\r\n\t        return text.indexOf('*') > -1;\r\n\t    };\r\n\t    /** @deprecated whats the point? */\r\n\t    Glob.fromString = function (text) {\r\n\t        if (!this.is(text))\r\n\t            return null;\r\n\t        return new Glob(text);\r\n\t    };\r\n\t    return Glob;\r\n\t}());\r\n\texports.Glob = Glob;\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar Queue = (function () {\r\n\t    function Queue(_items, _limit) {\r\n\t        if (_items === void 0) { _items = []; }\r\n\t        if (_limit === void 0) { _limit = null; }\r\n\t        this._items = _items;\r\n\t        this._limit = _limit;\r\n\t    }\r\n\t    Queue.prototype.enqueue = function (item) {\r\n\t        var items = this._items;\r\n\t        items.push(item);\r\n\t        if (this._limit && items.length > this._limit)\r\n\t            items.shift();\r\n\t        return item;\r\n\t    };\r\n\t    Queue.prototype.dequeue = function () {\r\n\t        if (this.size())\r\n\t            return this._items.splice(0, 1)[0];\r\n\t    };\r\n\t    Queue.prototype.clear = function () {\r\n\t        var current = this._items;\r\n\t        this._items = [];\r\n\t        return current;\r\n\t    };\r\n\t    Queue.prototype.size = function () {\r\n\t        return this._items.length;\r\n\t    };\r\n\t    Queue.prototype.remove = function (item) {\r\n\t        var idx = this._items.indexOf(item);\r\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\r\n\t    };\r\n\t    Queue.prototype.peekTail = function () {\r\n\t        return this._items[this._items.length - 1];\r\n\t    };\r\n\t    Queue.prototype.peekHead = function () {\r\n\t        if (this.size())\r\n\t            return this._items[0];\r\n\t    };\r\n\t    return Queue;\r\n\t}());\r\n\texports.Queue = Queue;\r\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\r\n\t\"use strict\";\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar transition_1 = __webpack_require__(11);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\t/**\r\n\t * Returns a string shortened to a maximum length\r\n\t *\r\n\t * If the string is already less than the `max` length, return the string.\r\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\r\n\t *\r\n\t * @param max the maximum length of the string to return\r\n\t * @param str the input string\r\n\t */\r\n\tfunction maxLength(max, str) {\r\n\t    if (str.length <= max)\r\n\t        return str;\r\n\t    return str.substr(0, max - 3) + \"...\";\r\n\t}\r\n\texports.maxLength = maxLength;\r\n\t/**\r\n\t * Returns a string, with spaces added to the end, up to a desired str length\r\n\t *\r\n\t * If the string is already longer than the desired length, return the string.\r\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\r\n\t *\r\n\t * @param length the desired length of the string to return\r\n\t * @param str the input string\r\n\t */\r\n\tfunction padString(length, str) {\r\n\t    while (str.length < length)\r\n\t        str += \" \";\r\n\t    return str;\r\n\t}\r\n\texports.padString = padString;\r\n\tfunction kebobString(camelCase) {\r\n\t    return camelCase\r\n\t        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\r\n\t        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\r\n\t}\r\n\texports.kebobString = kebobString;\r\n\tfunction _toJson(obj) {\r\n\t    return JSON.stringify(obj);\r\n\t}\r\n\tfunction _fromJson(json) {\r\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\r\n\t}\r\n\tfunction promiseToString(p) {\r\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\r\n\t}\r\n\tfunction functionToString(fn) {\r\n\t    var fnStr = fnToString(fn);\r\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\r\n\t    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\r\n\t    var fnName = fn['name'] || \"\";\r\n\t    if (fnName && toStr.match(/function \\(/)) {\r\n\t        return 'function ' + fnName + toStr.substr(9);\r\n\t    }\r\n\t    return toStr;\r\n\t}\r\n\texports.functionToString = functionToString;\r\n\tfunction fnToString(fn) {\r\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\r\n\t    return _fn && _fn.toString() || \"undefined\";\r\n\t}\r\n\texports.fnToString = fnToString;\r\n\tvar stringifyPatternFn = null;\r\n\tvar stringifyPattern = function (value) {\r\n\t    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\r\n\t    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\r\n\t        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\r\n\t        [predicates_1.isNull, hof_1.val(\"null\")],\r\n\t        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\r\n\t        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\r\n\t        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\r\n\t        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\r\n\t        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\r\n\t        [predicates_1.isInjectable, functionToString],\r\n\t        [hof_1.val(true), common_1.identity]\r\n\t    ]);\r\n\t    return stringifyPatternFn(value);\r\n\t};\r\n\tfunction stringify(o) {\r\n\t    var seen = [];\r\n\t    function format(val) {\r\n\t        if (predicates_1.isObject(val)) {\r\n\t            if (seen.indexOf(val) !== -1)\r\n\t                return '[circular ref]';\r\n\t            seen.push(val);\r\n\t        }\r\n\t        return stringifyPattern(val);\r\n\t    }\r\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\r\n\t}\r\n\texports.stringify = stringify;\r\n\t/** Returns a function that splits a string on a character or substring */\r\n\texports.beforeAfterSubstr = function (char) { return function (str) {\r\n\t    if (!str)\r\n\t        return [\"\", \"\"];\r\n\t    var idx = str.indexOf(char);\r\n\t    if (idx === -1)\r\n\t        return [str, \"\"];\r\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\r\n\t}; };\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\t(function (RejectType) {\r\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\r\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\r\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\r\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\r\n\t    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\r\n\t})(exports.RejectType || (exports.RejectType = {}));\r\n\tvar RejectType = exports.RejectType;\r\n\tvar Rejection = (function () {\r\n\t    function Rejection(type, message, detail) {\r\n\t        this.type = type;\r\n\t        this.message = message;\r\n\t        this.detail = detail;\r\n\t    }\r\n\t    Rejection.prototype.toString = function () {\r\n\t        var detailString = function (d) {\r\n\t            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\r\n\t        };\r\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\r\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\r\n\t    };\r\n\t    Rejection.prototype.toPromise = function () {\r\n\t        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\r\n\t    };\r\n\t    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\r\n\t    Rejection.isTransitionRejectionPromise = function (obj) {\r\n\t        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to transition superseded */\r\n\t    Rejection.superseded = function (detail, options) {\r\n\t        var message = \"The transition has been superseded by a different transition\";\r\n\t        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\r\n\t        if (options && options.redirected) {\r\n\t            rejection.redirected = true;\r\n\t        }\r\n\t        return rejection;\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to redirected transition */\r\n\t    Rejection.redirected = function (detail) {\r\n\t        return Rejection.superseded(detail, { redirected: true });\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to invalid transition */\r\n\t    Rejection.invalid = function (detail) {\r\n\t        var message = \"This transition is invalid\";\r\n\t        return new Rejection(RejectType.INVALID, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to ignored transition */\r\n\t    Rejection.ignored = function (detail) {\r\n\t        var message = \"The transition was ignored\";\r\n\t        return new Rejection(RejectType.IGNORED, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to aborted transition */\r\n\t    Rejection.aborted = function (detail) {\r\n\t        // TODO think about how to encapsulate an Error() object\r\n\t        var message = \"The transition has been aborted\";\r\n\t        return new Rejection(RejectType.ABORTED, message, detail);\r\n\t    };\r\n\t    /** Returns a TransitionRejection due to aborted transition */\r\n\t    Rejection.errored = function (detail) {\r\n\t        // TODO think about how to encapsulate an Error() object\r\n\t        var message = \"The transition errored\";\r\n\t        return new Rejection(RejectType.ERROR, message, detail);\r\n\t    };\r\n\t    return Rejection;\r\n\t}());\r\n\texports.Rejection = Rejection;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module transition */ /** for typedoc */\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar transitionHook_1 = __webpack_require__(13);\r\n\tvar hookRegistry_1 = __webpack_require__(15);\r\n\tvar hookBuilder_1 = __webpack_require__(16);\r\n\tvar node_1 = __webpack_require__(21);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar transitionCount = 0;\r\n\tvar stateSelf = hof_1.prop(\"self\");\r\n\t/**\r\n\t * Represents a transition between two states.\r\n\t *\r\n\t * When navigating to a state, we are transitioning **from** the current state **to** the new state.\r\n\t *\r\n\t * This object contains all contextual information about the to/from states, parameters, resolves.\r\n\t * It has information about all states being entered and exited as a result of the transition.\r\n\t */\r\n\tvar Transition = (function () {\r\n\t    /**\r\n\t     * Creates a new Transition object.\r\n\t     *\r\n\t     * If the target state is not valid, an error is thrown.\r\n\t     *\r\n\t     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\r\n\t     *        encapsulates the \"from state\".\r\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\r\n\t     * @param router The [[UIRouter]] instance\r\n\t     */\r\n\t    function Transition(fromPath, targetState, router) {\r\n\t        var _this = this;\r\n\t        /** @hidden */\r\n\t        this._deferred = coreservices_1.services.$q.defer();\r\n\t        /**\r\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\r\n\t         *\r\n\t         * When the transition is successful, the promise is resolved\r\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\r\n\t         */\r\n\t        this.promise = this._deferred.promise;\r\n\t        this.treeChanges = function () { return _this._treeChanges; };\r\n\t        this.isActive = function () { return _this === _this._options.current(); };\r\n\t        this.router = router;\r\n\t        this._targetState = targetState;\r\n\t        if (!targetState.valid()) {\r\n\t            throw new Error(targetState.error());\r\n\t        }\r\n\t        // Makes the Transition instance a hook registry (onStart, etc)\r\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\r\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\r\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\r\n\t        this.$id = transitionCount++;\r\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\r\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\r\n\t        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\r\n\t        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\r\n\t        var rootResolvables = [\r\n\t            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\r\n\t            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\r\n\t            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\r\n\t            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\r\n\t        ];\r\n\t        var rootNode = this._treeChanges.to[0];\r\n\t        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\r\n\t        context.addResolvables(rootResolvables, rootNode.state);\r\n\t    }\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    Transition.prototype.$from = function () {\r\n\t        return common_1.tail(this._treeChanges.from).state;\r\n\t    };\r\n\t    Transition.prototype.$to = function () {\r\n\t        return common_1.tail(this._treeChanges.to).state;\r\n\t    };\r\n\t    /**\r\n\t     * Returns the \"from state\"\r\n\t     *\r\n\t     * @returns The state object for the Transition's \"from state\".\r\n\t     */\r\n\t    Transition.prototype.from = function () {\r\n\t        return this.$from().self;\r\n\t    };\r\n\t    /**\r\n\t     * Returns the \"to state\"\r\n\t     *\r\n\t     * @returns The state object for the Transition's target state (\"to state\").\r\n\t     */\r\n\t    Transition.prototype.to = function () {\r\n\t        return this.$to().self;\r\n\t    };\r\n\t    /**\r\n\t     * Gets the Target State\r\n\t     *\r\n\t     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\r\n\t     *\r\n\t     * @returns the [[TargetState]] of this Transition\r\n\t     */\r\n\t    Transition.prototype.targetState = function () {\r\n\t        return this._targetState;\r\n\t    };\r\n\t    /**\r\n\t     * Determines whether two transitions are equivalent.\r\n\t     */\r\n\t    Transition.prototype.is = function (compare) {\r\n\t        if (compare instanceof Transition) {\r\n\t            // TODO: Also compare parameters\r\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\r\n\t        }\r\n\t        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\r\n\t            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\r\n\t    };\r\n\t    /**\r\n\t     * Gets transition parameter values\r\n\t     *\r\n\t     * @param pathname Pick which treeChanges path to get parameters for:\r\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\r\n\t     * @returns transition parameter values for the desired path.\r\n\t     */\r\n\t    Transition.prototype.params = function (pathname) {\r\n\t        if (pathname === void 0) { pathname = \"to\"; }\r\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\r\n\t    };\r\n\t    /**\r\n\t     * Creates a [[UIInjector]] Dependency Injector\r\n\t     *\r\n\t     * Returns a Dependency Injector for the Transition's target state (to state).\r\n\t     * The injector provides resolve values which the target state has access to.\r\n\t     *\r\n\t     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\r\n\t     *\r\n\t     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\r\n\t     *\r\n\t     * @param state Limits the resolves provided to only the resolves the provided state has access to.\r\n\t     * @returns a [[UIInjector]]\r\n\t     */\r\n\t    Transition.prototype.injector = function (state) {\r\n\t        var path = this.treeChanges().to;\r\n\t        if (state)\r\n\t            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\r\n\t        return new resolveContext_1.ResolveContext(path).injector();\r\n\t    };\r\n\t    /**\r\n\t     * Gets all available resolve tokens (keys)\r\n\t     *\r\n\t     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\r\n\t     * available to the Transition.\r\n\t     *\r\n\t     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\r\n\t     * in the Transition's [[TreeChanges.to]] path.\r\n\t     *\r\n\t     * @returns an array of resolve tokens (keys)\r\n\t     */\r\n\t    Transition.prototype.getResolveTokens = function () {\r\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\r\n\t    };\r\n\t    /**\r\n\t     * Gets resolved values\r\n\t     *\r\n\t     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\r\n\t     * are available to the Transition.\r\n\t     *\r\n\t     * Given a token, returns the resolved data for that token.\r\n\t     * Given an array of tokens, returns an array of resolved data for those tokens.\r\n\t     *\r\n\t     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\r\n\t     * If a resolvable doesn't exist for the token, throws an error.\r\n\t     *\r\n\t     * @param token the token (or array of tokens)\r\n\t     *\r\n\t     * @returns an array of resolve tokens (keys)\r\n\t     */\r\n\t    Transition.prototype.getResolveValue = function (token) {\r\n\t        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\r\n\t        var getData = function (token) {\r\n\t            var resolvable = resolveContext.getResolvable(token);\r\n\t            if (resolvable === undefined) {\r\n\t                throw new Error(\"Dependency Injection token not found: \" + strings_1.stringify(token));\r\n\t            }\r\n\t            return resolvable.data;\r\n\t        };\r\n\t        if (predicates_1.isArray(token)) {\r\n\t            return token.map(getData);\r\n\t        }\r\n\t        return getData(token);\r\n\t    };\r\n\t    /**\r\n\t     * Gets a [[Resolvable]] primitive\r\n\t     *\r\n\t     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\r\n\t     *\r\n\t     * @param token the DI token\r\n\t     *\r\n\t     * @returns the [[Resolvable]] in the transition's to path, or undefined\r\n\t     */\r\n\t    Transition.prototype.getResolvable = function (token) {\r\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);\r\n\t    };\r\n\t    /**\r\n\t     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\r\n\t     *\r\n\t     * @param resolvable an [[Resolvable]] object\r\n\t     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\r\n\t     */\r\n\t    Transition.prototype.addResolvable = function (resolvable, state) {\r\n\t        if (state === void 0) { state = \"\"; }\r\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\r\n\t        var topath = this._treeChanges.to;\r\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\r\n\t        var resolveContext = new resolveContext_1.ResolveContext(topath);\r\n\t        resolveContext.addResolvables([resolvable], targetNode.state);\r\n\t    };\r\n\t    /**\r\n\t     * If the current transition is a redirect, returns the transition that was redirected.\r\n\t     *\r\n\t     * Gets the transition from which this transition was redirected.\r\n\t     *\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * let transitionA = $state.go('A').transitionA\r\n\t     * transitionA.onStart({}, () => $state.target('B'));\r\n\t     * $transitions.onSuccess({ to: 'B' }, (trans) => {\r\n\t     *   trans.to().name === 'B'; // true\r\n\t     *   trans.redirectedFrom() === transitionA; // true\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\r\n\t     */\r\n\t    Transition.prototype.redirectedFrom = function () {\r\n\t        return this._options.redirectedFrom || null;\r\n\t    };\r\n\t    /**\r\n\t     * Get the transition options\r\n\t     *\r\n\t     * @returns the options for this Transition.\r\n\t     */\r\n\t    Transition.prototype.options = function () {\r\n\t        return this._options;\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being entered.\r\n\t     *\r\n\t     * @returns an array of states that will be entered during this transition.\r\n\t     */\r\n\t    Transition.prototype.entering = function () {\r\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being exited.\r\n\t     *\r\n\t     * @returns an array of states that will be exited during this transition.\r\n\t     */\r\n\t    Transition.prototype.exiting = function () {\r\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\r\n\t    };\r\n\t    /**\r\n\t     * Gets the states being retained.\r\n\t     *\r\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\r\n\t     *    exited during this Transition\r\n\t     */\r\n\t    Transition.prototype.retained = function () {\r\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\r\n\t    };\r\n\t    /**\r\n\t     * Get the [[ViewConfig]]s associated with this Transition\r\n\t     *\r\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\r\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\r\n\t     *\r\n\t     * @param pathname the name of the path to fetch views for:\r\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\r\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\r\n\t     *\r\n\t     * @returns a list of ViewConfig objects for the given path.\r\n\t     */\r\n\t    Transition.prototype.views = function (pathname, state) {\r\n\t        if (pathname === void 0) { pathname = \"entering\"; }\r\n\t        var path = this._treeChanges[pathname];\r\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\r\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Creates a new transition that is a redirection of the current one.\r\n\t     *\r\n\t     * This transition can be returned from a [[TransitionService]] hook to\r\n\t     * redirect a transition to a new state and/or set of parameters.\r\n\t     *\r\n\t     * @returns Returns a new [[Transition]] instance.\r\n\t     */\r\n\t    Transition.prototype.redirect = function (targetState) {\r\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\r\n\t        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\r\n\t        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\r\n\t        var originalEnteringNodes = this.treeChanges().entering;\r\n\t        var redirectEnteringNodes = newTransition.treeChanges().entering;\r\n\t        // --- Re-use resolve data from original transition ---\r\n\t        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\r\n\t        // (because of the redirect), the resolves fetched by the original transition are still valid in the\r\n\t        // redirected transition.\r\n\t        //\r\n\t        // This allows you to define a redirect on a parent state which depends on an async resolve value.\r\n\t        // You can wait for the resolve, then redirect to a child state based on the result.\r\n\t        // The redirected transition does not have to re-fetch the resolve.\r\n\t        // ---------------------------------------------------------\r\n\t        var nodeIsReloading = function (reloadState) { return function (node) {\r\n\t            return reloadState && node.state.includes[reloadState.name];\r\n\t        }; };\r\n\t        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\r\n\t        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\r\n\t            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\r\n\t        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\r\n\t        matchingEnteringNodes.forEach(function (node, idx) {\r\n\t            node.resolvables = originalEnteringNodes[idx].resolvables;\r\n\t        });\r\n\t        return newTransition;\r\n\t    };\r\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\r\n\t    Transition.prototype._changedParams = function () {\r\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\r\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\r\n\t            return undefined;\r\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\r\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\r\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\r\n\t        return tuples.map(function (_a) {\r\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\r\n\t            return param_1.Param.changed(schema, toVals, fromVals);\r\n\t        }).reduce(common_1.unnestR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the transition is dynamic.\r\n\t     *\r\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\r\n\t     *\r\n\t     * @returns true if the Transition is dynamic\r\n\t     */\r\n\t    Transition.prototype.dynamic = function () {\r\n\t        var changes = this._changedParams();\r\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the transition is ignored.\r\n\t     *\r\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\r\n\t     *\r\n\t     * @returns true if the Transition is ignored.\r\n\t     */\r\n\t    Transition.prototype.ignored = function () {\r\n\t        var changes = this._changedParams();\r\n\t        return !changes ? false : changes.length === 0;\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     */\r\n\t    Transition.prototype.hookBuilder = function () {\r\n\t        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\r\n\t            transition: this,\r\n\t            current: this._options.current\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Runs the transition\r\n\t     *\r\n\t     * This method is generally called from the [[StateService.transitionTo]]\r\n\t     *\r\n\t     * @returns a promise for a successful transition.\r\n\t     */\r\n\t    Transition.prototype.run = function () {\r\n\t        var _this = this;\r\n\t        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\r\n\t        var hookBuilder = this.hookBuilder();\r\n\t        var globals = this.router.globals;\r\n\t        globals.transitionHistory.enqueue(this);\r\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\r\n\t        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\r\n\t            syncResult.catch(function () { return 0; }); // issue #2676\r\n\t            var rejectReason = syncResult._transitionRejection;\r\n\t            this._deferred.reject(rejectReason);\r\n\t            return this.promise;\r\n\t        }\r\n\t        if (!this.valid()) {\r\n\t            var error = new Error(this.error());\r\n\t            this._deferred.reject(error);\r\n\t            return this.promise;\r\n\t        }\r\n\t        if (this.ignored()) {\r\n\t            trace_1.trace.traceTransitionIgnored(this);\r\n\t            this._deferred.reject(rejectFactory_1.Rejection.ignored());\r\n\t            return this.promise;\r\n\t        }\r\n\t        // When the chain is complete, then resolve or reject the deferred\r\n\t        var transitionSuccess = function () {\r\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\r\n\t            _this.success = true;\r\n\t            _this._deferred.resolve(_this.to());\r\n\t            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\r\n\t        };\r\n\t        var transitionError = function (reason) {\r\n\t            trace_1.trace.traceError(reason, _this);\r\n\t            _this.success = false;\r\n\t            _this._deferred.reject(reason);\r\n\t            _this._error = reason;\r\n\t            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\r\n\t        };\r\n\t        trace_1.trace.traceTransitionStart(this);\r\n\t        // Chain the next hook off the previous\r\n\t        var appendHookToChain = function (prev, nextHook) {\r\n\t            return prev.then(function () { return nextHook.invokeHook(); });\r\n\t        };\r\n\t        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\r\n\t        hookBuilder.asyncHooks()\r\n\t            .reduce(appendHookToChain, syncResult)\r\n\t            .then(transitionSuccess, transitionError);\r\n\t        return this.promise;\r\n\t    };\r\n\t    /**\r\n\t     * Checks if the Transition is valid\r\n\t     *\r\n\t     * @returns true if the Transition is valid\r\n\t     */\r\n\t    Transition.prototype.valid = function () {\r\n\t        return !this.error() || this.success !== undefined;\r\n\t    };\r\n\t    /**\r\n\t     * The Transition error reason.\r\n\t     *\r\n\t     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\r\n\t     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\r\n\t     *\r\n\t     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\r\n\t     */\r\n\t    Transition.prototype.error = function () {\r\n\t        var state = this.$to();\r\n\t        var redirects = 0, trans = this;\r\n\t        while ((trans = trans.redirectedFrom()) != null) {\r\n\t            if (++redirects > 20)\r\n\t                return \"Too many Transition redirects (20+)\";\r\n\t        }\r\n\t        if (state.self.abstract)\r\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\r\n\t        if (!param_1.Param.validates(state.parameters(), this.params()))\r\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\r\n\t        if (this.success === false)\r\n\t            return this._error;\r\n\t    };\r\n\t    /**\r\n\t     * A string representation of the Transition\r\n\t     *\r\n\t     * @returns A string representation of the Transition\r\n\t     */\r\n\t    Transition.prototype.toString = function () {\r\n\t        var fromStateOrName = this.from();\r\n\t        var toStateOrName = this.to();\r\n\t        var avoidEmptyHash = function (params) {\r\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\r\n\t        };\r\n\t        // (X) means the to state is invalid.\r\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\r\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\r\n\t    };\r\n\t    Transition.diToken = Transition;\r\n\t    return Transition;\r\n\t}());\r\n\texports.Transition = Transition;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * UI-Router Transition Tracing\r\n\t *\r\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\r\n\t * Tracing logs detailed information about each Transition to your console.\r\n\t *\r\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\r\n\t *\r\n\t * ES6\r\n\t * ```\r\n\t *\r\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\r\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\r\n\t * ```\r\n\t *\r\n\t * CJS\r\n\t * ```\r\n\t *\r\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\r\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\r\n\t * ```\r\n\t *\r\n\t * Globals\r\n\t * ```\r\n\t *\r\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\r\n\t * trace.enable(); // Trace everything (very verbose)\r\n\t * ```\r\n\t *\r\n\t * @module trace\r\n\t */ /** for typedoc */\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\t/** @hidden */\r\n\tfunction uiViewString(viewData) {\r\n\t    if (!viewData)\r\n\t        return 'ui-view (defunct)';\r\n\t    return (\"[ui-view#\" + viewData.id + \" tag \") +\r\n\t        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\r\n\t        (\"fqn: '\" + viewData.fqn + \"', \") +\r\n\t        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\r\n\t}\r\n\t/** @hidden */\r\n\tvar viewConfigString = function (viewConfig) {\r\n\t    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\r\n\t};\r\n\t/** @hidden */\r\n\tfunction normalizedCat(input) {\r\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\r\n\t}\r\n\t/**\r\n\t * Trace categories\r\n\t *\r\n\t * [[Trace.enable]] or [[Trace.disable]] a category\r\n\t *\r\n\t * `trace.enable(Category.TRANSITION)`\r\n\t *\r\n\t * These can also be provided using a matching string, or position ordinal\r\n\t *\r\n\t * `trace.enable(\"TRANSITION\")`\r\n\t *\r\n\t * `trace.enable(1)`\r\n\t */\r\n\t(function (Category) {\r\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\r\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\r\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\r\n\t    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\r\n\t    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\r\n\t})(exports.Category || (exports.Category = {}));\r\n\tvar Category = exports.Category;\r\n\t/**\r\n\t * Prints UI-Router Transition trace information to the console.\r\n\t */\r\n\tvar Trace = (function () {\r\n\t    function Trace() {\r\n\t        /** @hidden */\r\n\t        this._enabled = {};\r\n\t        this.approximateDigests = 0;\r\n\t    }\r\n\t    /** @hidden */\r\n\t    Trace.prototype._set = function (enabled, categories) {\r\n\t        var _this = this;\r\n\t        if (!categories.length) {\r\n\t            categories = Object.keys(Category)\r\n\t                .map(function (k) { return parseInt(k, 10); })\r\n\t                .filter(function (k) { return !isNaN(k); })\r\n\t                .map(function (key) { return Category[key]; });\r\n\t        }\r\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\r\n\t    };\r\n\t    /**\r\n\t     * Enables a trace [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.enable(\"TRANSITION\");\r\n\t     * ```\r\n\t     *\r\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\r\n\t     *        Also takes strings (category name) or ordinal (category position)\r\n\t     */\r\n\t    Trace.prototype.enable = function () {\r\n\t        var categories = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            categories[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        this._set(true, categories);\r\n\t    };\r\n\t    /**\r\n\t     * Disables a trace [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.disable(\"VIEWCONFIG\");\r\n\t     * ```\r\n\t     *\r\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\r\n\t     *        Also takes strings (category name) or ordinal (category position)\r\n\t     */\r\n\t    Trace.prototype.disable = function () {\r\n\t        var categories = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            categories[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        this._set(false, categories);\r\n\t    };\r\n\t    /**\r\n\t     * Retrieves the enabled stateus of a [[Category]]\r\n\t     *\r\n\t     * ```\r\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\r\n\t     * ```\r\n\t     *\r\n\t     * @returns boolean true if the category is enabled\r\n\t     */\r\n\t    Trace.prototype.enabled = function (category) {\r\n\t        return !!this._enabled[normalizedCat(category)];\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceTransitionStart = function (transition) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceTransitionIgnored = function (trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\r\n\t        if (!this.enabled(Category.HOOK))\r\n\t            return;\r\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.eventHook.callback);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {\r\n\t        if (!this.enabled(Category.HOOK))\r\n\t            return;\r\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceResolvePath = function (path, when, trans) {\r\n\t        if (!this.enabled(Category.RESOLVE))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\r\n\t        if (!this.enabled(Category.RESOLVE))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceError = function (reason, trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + reason);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceSuccess = function (finalState, trans) {\r\n\t        if (!this.enabled(Category.TRANSITION))\r\n\t            return;\r\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\r\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\r\n\t        if (extra === void 0) { extra = \"\"; }\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceUIViewFill = function (viewData, html) {\r\n\t        if (!this.enabled(Category.UIVIEW))\r\n\t            return;\r\n\t        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\r\n\t        if (!this.enabled(Category.VIEWCONFIG))\r\n\t            return;\r\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\r\n\t    };\r\n\t    /** called by ui-router code */\r\n\t    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\r\n\t        if (!this.enabled(Category.VIEWCONFIG))\r\n\t            return;\r\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\r\n\t    };\r\n\t    return Trace;\r\n\t}());\r\n\texports.Trace = Trace;\r\n\t/**\r\n\t * The [[Trace]] singleton\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * import {trace} from \"angular-ui-router\";\r\n\t * trace.enable(1, 5);\r\n\t * ```\r\n\t */\r\n\tvar trace = new Trace();\r\n\texports.trace = trace;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar defaultOptions = {\r\n\t    async: true,\r\n\t    rejectIfSuperseded: true,\r\n\t    current: common_1.noop,\r\n\t    transition: null,\r\n\t    traceData: {},\r\n\t    bind: null\r\n\t};\r\n\t/** @hidden */\r\n\tvar TransitionHook = (function () {\r\n\t    function TransitionHook(transition, stateContext, eventHook, options) {\r\n\t        var _this = this;\r\n\t        this.transition = transition;\r\n\t        this.stateContext = stateContext;\r\n\t        this.eventHook = eventHook;\r\n\t        this.options = options;\r\n\t        this.isSuperseded = function () {\r\n\t            return _this.options.current() !== _this.options.transition;\r\n\t        };\r\n\t        this.options = common_1.defaults(options, defaultOptions);\r\n\t    }\r\n\t    TransitionHook.prototype.invokeHook = function () {\r\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\r\n\t        trace_1.trace.traceHookInvocation(this, options);\r\n\t        if (options.rejectIfSuperseded && this.isSuperseded()) {\r\n\t            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\r\n\t        }\r\n\t        var synchronousHookResult = !eventHook._deregistered\r\n\t            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\r\n\t            : undefined;\r\n\t        return this.handleHookResult(synchronousHookResult);\r\n\t    };\r\n\t    /**\r\n\t     * This method handles the return value of a Transition Hook.\r\n\t     *\r\n\t     * A hook can return false (cancel), a TargetState (redirect),\r\n\t     * or a promise (which may later resolve to false or a redirect)\r\n\t     *\r\n\t     * This also handles \"transition superseded\" -- when a new transition\r\n\t     * was started while the hook was still running\r\n\t     */\r\n\t    TransitionHook.prototype.handleHookResult = function (result) {\r\n\t        // This transition is no longer current.\r\n\t        // Another transition started while this hook was still running.\r\n\t        if (this.isSuperseded()) {\r\n\t            // Abort this transition\r\n\t            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();\r\n\t        }\r\n\t        // Hook returned a promise\r\n\t        if (predicates_1.isPromise(result)) {\r\n\t            // Wait for the promise, then reprocess the resolved value\r\n\t            return result.then(this.handleHookResult.bind(this));\r\n\t        }\r\n\t        trace_1.trace.traceHookResult(result, this.options);\r\n\t        // Hook returned false\r\n\t        if (result === false) {\r\n\t            // Abort this Transition\r\n\t            return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise();\r\n\t        }\r\n\t        var isTargetState = hof_1.is(targetState_1.TargetState);\r\n\t        // hook returned a TargetState\r\n\t        if (isTargetState(result)) {\r\n\t            // Halt the current Transition and start a redirected Transition (to the TargetState).\r\n\t            return rejectFactory_1.Rejection.redirected(result).toPromise();\r\n\t        }\r\n\t    };\r\n\t    TransitionHook.prototype.toString = function () {\r\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\r\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(eventHook.callback);\r\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\r\n\t    };\r\n\t    /**\r\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\r\n\t     *\r\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\r\n\t     */\r\n\t    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\r\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\r\n\t        var results = [];\r\n\t        for (var i = 0; i < hooks.length; i++) {\r\n\t            var hook = hooks[i];\r\n\t            try {\r\n\t                results.push(hook.invokeHook());\r\n\t            }\r\n\t            catch (exception) {\r\n\t                if (!swallowExceptions) {\r\n\t                    return rejectFactory_1.Rejection.errored(exception).toPromise();\r\n\t                }\r\n\t                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();\r\n\t                errorHandler(exception);\r\n\t            }\r\n\t        }\r\n\t        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\r\n\t        if (rejections.length)\r\n\t            return rejections[0];\r\n\t        return results\r\n\t            .filter(predicates_1.isPromise)\r\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\r\n\t    };\r\n\t    return TransitionHook;\r\n\t}());\r\n\texports.TransitionHook = TransitionHook;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.type:TargetState\r\n\t *\r\n\t * @description\r\n\t * Encapsulate the desired target of a transition.\r\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\r\n\t *\r\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\r\n\t *            used to define the state.\r\n\t * @param {IState} _definition The `State` object definition.\r\n\t * @param {ParamsOrArray} _params Parameters for the target state\r\n\t * @param {TransitionOptions} _options Transition options.\r\n\t */\r\n\tvar TargetState = (function () {\r\n\t    function TargetState(_identifier, _definition, _params, _options) {\r\n\t        if (_params === void 0) { _params = {}; }\r\n\t        if (_options === void 0) { _options = {}; }\r\n\t        this._identifier = _identifier;\r\n\t        this._definition = _definition;\r\n\t        this._options = _options;\r\n\t        this._params = _params || {};\r\n\t    }\r\n\t    TargetState.prototype.name = function () {\r\n\t        return this._definition && this._definition.name || this._identifier;\r\n\t    };\r\n\t    TargetState.prototype.identifier = function () {\r\n\t        return this._identifier;\r\n\t    };\r\n\t    TargetState.prototype.params = function () {\r\n\t        return this._params;\r\n\t    };\r\n\t    TargetState.prototype.$state = function () {\r\n\t        return this._definition;\r\n\t    };\r\n\t    TargetState.prototype.state = function () {\r\n\t        return this._definition && this._definition.self;\r\n\t    };\r\n\t    TargetState.prototype.options = function () {\r\n\t        return this._options;\r\n\t    };\r\n\t    TargetState.prototype.exists = function () {\r\n\t        return !!(this._definition && this._definition.self);\r\n\t    };\r\n\t    TargetState.prototype.valid = function () {\r\n\t        return !this.error();\r\n\t    };\r\n\t    TargetState.prototype.error = function () {\r\n\t        var base = this.options().relative;\r\n\t        if (!this._definition && !!base) {\r\n\t            var stateName = base.name ? base.name : base;\r\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\r\n\t        }\r\n\t        if (!this._definition)\r\n\t            return \"No such state '\" + this.name() + \"'\";\r\n\t        if (!this._definition.self)\r\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\r\n\t    };\r\n\t    TargetState.prototype.toString = function () {\r\n\t        return \"'\" + this.name() + \"'\" + common_1.toJson(this.params());\r\n\t    };\r\n\t    return TargetState;\r\n\t}());\r\n\texports.TargetState = TargetState;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module transition */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\t/**\r\n\t * Determines if the given state matches the matchCriteria\r\n\t *\r\n\t * @hidden\r\n\t *\r\n\t * @param state a State Object to test against\r\n\t * @param criterion\r\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\r\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\r\n\t *   and returns a positive match if any of the globs match.\r\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction matchState(state, criterion) {\r\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\r\n\t    function matchGlobs(_state) {\r\n\t        var globStrings = toMatch;\r\n\t        for (var i = 0; i < globStrings.length; i++) {\r\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\r\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return false;\r\n\t    }\r\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\r\n\t    return !!matchFn(state);\r\n\t}\r\n\texports.matchState = matchState;\r\n\t/** @hidden */\r\n\tvar EventHook = (function () {\r\n\t    function EventHook(matchCriteria, callback, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        this.callback = callback;\r\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\r\n\t        this.priority = options.priority || 0;\r\n\t        this.bind = options.bind || null;\r\n\t        this._deregistered = false;\r\n\t    }\r\n\t    EventHook._matchingNodes = function (nodes, criterion) {\r\n\t        if (criterion === true)\r\n\t            return nodes;\r\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\r\n\t        return matching.length ? matching : null;\r\n\t    };\r\n\t    /**\r\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\r\n\t     *\r\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\r\n\t     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\r\n\t     */\r\n\t    EventHook.prototype.matches = function (treeChanges) {\r\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\r\n\t        var matches = {\r\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\r\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\r\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\r\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\r\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\r\n\t        };\r\n\t        // Check if all the criteria matched the TreeChanges object\r\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\r\n\t            .map(function (prop) { return matches[prop]; })\r\n\t            .reduce(common_1.allTrueR, true);\r\n\t        return allMatched ? matches : null;\r\n\t    };\r\n\t    return EventHook;\r\n\t}());\r\n\texports.EventHook = EventHook;\r\n\t/** @hidden Return a registration function of the requested type. */\r\n\tfunction makeHookRegistrationFn(hooks, name) {\r\n\t    return function (matchObject, callback, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var eventHook = new EventHook(matchObject, callback, options);\r\n\t        hooks[name].push(eventHook);\r\n\t        return function deregisterEventHook() {\r\n\t            eventHook._deregistered = true;\r\n\t            common_1.removeFrom(hooks[name])(eventHook);\r\n\t        };\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * Mixin class acts as a Transition Hook registry.\r\n\t *\r\n\t * Holds the registered [[HookFn]] objects.\r\n\t * Exposes functions to register new hooks.\r\n\t *\r\n\t * This is a Mixin class which can be applied to other objects.\r\n\t *\r\n\t * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\r\n\t *\r\n\t * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\r\n\t * Global hooks are added to the [[TransitionService]].\r\n\t * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\r\n\t * (note: the hook criteria still must match the Transition).\r\n\t */\r\n\tvar HookRegistry = (function () {\r\n\t    function HookRegistry() {\r\n\t        var _this = this;\r\n\t        this._transitionEvents = {\r\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\r\n\t        };\r\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\r\n\t        /** @inheritdoc */\r\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\r\n\t        /** @inheritdoc */\r\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\r\n\t        /** @inheritdoc */\r\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\r\n\t        /** @inheritdoc */\r\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\r\n\t        /** @inheritdoc */\r\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\r\n\t        /** @inheritdoc */\r\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\r\n\t        /** @inheritdoc */\r\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\r\n\t        /** @inheritdoc */\r\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\r\n\t    }\r\n\t    HookRegistry.mixin = function (source, target) {\r\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\r\n\t    };\r\n\t    return HookRegistry;\r\n\t}());\r\n\texports.HookRegistry = HookRegistry;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar transitionHook_1 = __webpack_require__(13);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\t/**\r\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\r\n\t *\r\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\r\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\r\n\t * determined by the type of hook)\r\n\t *\r\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\r\n\t *\r\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\r\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\r\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\r\n\t *\r\n\t */\r\n\tvar HookBuilder = (function () {\r\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\r\n\t        var _this = this;\r\n\t        this.$transitions = $transitions;\r\n\t        this.transition = transition;\r\n\t        this.baseHookOptions = baseHookOptions;\r\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\r\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\r\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\r\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\r\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\r\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\r\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\r\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\r\n\t        this.treeChanges = transition.treeChanges();\r\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\r\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\r\n\t        this.transitionOptions = transition.options();\r\n\t    }\r\n\t    HookBuilder.prototype.asyncHooks = function () {\r\n\t        var onStartHooks = this.getOnStartHooks();\r\n\t        var onExitHooks = this.getOnExitHooks();\r\n\t        var onRetainHooks = this.getOnRetainHooks();\r\n\t        var onEnterHooks = this.getOnEnterHooks();\r\n\t        var onFinishHooks = this.getOnFinishHooks();\r\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\r\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\r\n\t    };\r\n\t    /**\r\n\t     * Returns an array of newly built TransitionHook objects.\r\n\t     *\r\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\r\n\t     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\r\n\t     * - For each of the [[PathNode]]s, creates a TransitionHook\r\n\t     *\r\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\r\n\t     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\r\n\t     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\r\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\r\n\t     * @param options any specific Transition Hook Options\r\n\t     */\r\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\r\n\t        var _this = this;\r\n\t        // Find all the matching registered hooks for a given hook type\r\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\r\n\t        if (!matchingHooks)\r\n\t            return [];\r\n\t        var makeTransitionHooks = function (hook) {\r\n\t            // Fetch the Nodes that caused this hook to match.\r\n\t            var matches = hook.matches(_this.treeChanges);\r\n\t            // Select the PathNode[] that will be used as TransitionHook context objects\r\n\t            var matchingNodes = matches[matchingNodesProp];\r\n\t            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\r\n\t            // Everything else gets the \"to path\"\r\n\t            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\r\n\t            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\r\n\t            // Return an array of HookTuples\r\n\t            return matchingNodes.map(function (node) {\r\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\r\n\t                var state = _options.stateHook ? node.state : null;\r\n\t                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);\r\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\r\n\t            });\r\n\t        };\r\n\t        return matchingHooks.map(makeTransitionHooks)\r\n\t            .reduce(common_1.unnestR, [])\r\n\t            .sort(sortHooksFn)\r\n\t            .map(function (tuple) { return tuple.transitionHook; });\r\n\t    };\r\n\t    /**\r\n\t     * Finds all IEventHooks from:\r\n\t     * - The Transition object instance hook registry\r\n\t     * - The TransitionService ($transitions) global hook registry\r\n\t     *\r\n\t     * which matched:\r\n\t     * - the eventType\r\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\r\n\t     *\r\n\t     * @returns an array of matched [[IEventHook]]s\r\n\t     */\r\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\r\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\r\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\r\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\r\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\r\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\r\n\t    };\r\n\t    return HookBuilder;\r\n\t}());\r\n\texports.HookBuilder = HookBuilder;\r\n\t/**\r\n\t * A factory for a sort function for HookTuples.\r\n\t *\r\n\t * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\r\n\t * the EventHook priority.\r\n\t *\r\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\r\n\t * @returns a tuple sort function\r\n\t */\r\n\tfunction tupleSort(reverseDepthSort) {\r\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\r\n\t    return function nodeDepthThenPriority(l, r) {\r\n\t        var factor = reverseDepthSort ? -1 : 1;\r\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\r\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\r\n\t    };\r\n\t}\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module resolve */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar interface_1 = __webpack_require__(18);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar when = interface_1.resolvePolicies.when;\r\n\tvar ALL_WHENS = [when.EAGER, when.LAZY];\r\n\tvar EAGER_WHENS = [when.EAGER];\r\n\texports.NATIVE_INJECTOR_TOKEN = \"Native Injector\";\r\n\t/**\r\n\t * Encapsulates Depenency Injection for a path of nodes\r\n\t *\r\n\t * UI-Router states are organized as a tree.\r\n\t * A nested state has a path of ancestors to the root of the tree.\r\n\t * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\r\n\t * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\r\n\t *\r\n\t * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\r\n\t */\r\n\tvar ResolveContext = (function () {\r\n\t    function ResolveContext(_path) {\r\n\t        this._path = _path;\r\n\t    }\r\n\t    /** Gets all the tokens found in the resolve context, de-duplicated */\r\n\t    ResolveContext.prototype.getTokens = function () {\r\n\t        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the Resolvable that matches the token\r\n\t     *\r\n\t     * Gets the last Resolvable that matches the token in this context, or undefined.\r\n\t     * Throws an error if it doesn't exist in the ResolveContext\r\n\t     */\r\n\t    ResolveContext.prototype.getResolvable = function (token) {\r\n\t        var matching = this._path.map(function (node) { return node.resolvables; })\r\n\t            .reduce(common_1.unnestR, [])\r\n\t            .filter(function (r) { return r.token === token; });\r\n\t        return common_1.tail(matching);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a ResolveContext that includes a portion of this one\r\n\t     *\r\n\t     * Given a state, this method creates a new ResolveContext from this one.\r\n\t     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\r\n\t     *\r\n\t     * #### Why\r\n\t     *\r\n\t     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\r\n\t     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\r\n\t     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\r\n\t     * This method is used to create a narrower context when injecting ancestor nodes.\r\n\t     *\r\n\t     * @example\r\n\t     * `let ABCD = new ResolveContext([A, B, C, D]);`\r\n\t     *\r\n\t     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\r\n\t     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\r\n\t     * However, `B` should only be able to access resolvables from `A`, `B`.\r\n\t     *\r\n\t     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\r\n\t     * `let AB = ABCD.subcontext(a)`\r\n\t     */\r\n\t    ResolveContext.prototype.subContext = function (state) {\r\n\t        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\r\n\t    };\r\n\t    /**\r\n\t     * Adds Resolvables to the node that matches the state\r\n\t     *\r\n\t     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\r\n\t     * The resolvable is added to the node matching the `state` parameter.\r\n\t     *\r\n\t     * These new resolvables are not automatically fetched.\r\n\t     * The calling code should either fetch them, fetch something that depends on them,\r\n\t     * or rely on [[resolvePath]] being called when some state is being entered.\r\n\t     *\r\n\t     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\r\n\t     *\r\n\t     * @param newResolvables the new Resolvables\r\n\t     * @param state Used to find the node to put the resolvable on\r\n\t     */\r\n\t    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\r\n\t        var node = common_1.find(this._path, hof_1.propEq('state', state));\r\n\t        var keys = newResolvables.map(function (r) { return r.token; });\r\n\t        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a promise for an array of resolved path Element promises\r\n\t     *\r\n\t     * @param when\r\n\t     * @param trans\r\n\t     * @returns {Promise<any>|any}\r\n\t     */\r\n\t    ResolveContext.prototype.resolvePath = function (when, trans) {\r\n\t        var _this = this;\r\n\t        if (when === void 0) { when = \"LAZY\"; }\r\n\t        // This option determines which 'when' policy Resolvables we are about to fetch.\r\n\t        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\r\n\t        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\r\n\t        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\r\n\t        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\r\n\t        // get the subpath to the state argument, if provided\r\n\t        trace_1.trace.traceResolvePath(this._path, when, trans);\r\n\t        var promises = this._path.reduce(function (acc, node) {\r\n\t            var matchesRequestedPolicy = function (resolvable) {\r\n\t                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\r\n\t            };\r\n\t            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\r\n\t            var subContext = _this.subContext(node.state);\r\n\t            // For the matching Resolvables, start their async fetch process.\r\n\t            var getResult = function (r) { return r.get(subContext, trans)\r\n\t                .then(function (value) { return ({ token: r.token, value: value }); }); };\r\n\t            return acc.concat(nodeResolvables.map(getResult));\r\n\t        }, []);\r\n\t        return coreservices_1.services.$q.all(promises);\r\n\t    };\r\n\t    ResolveContext.prototype.injector = function () {\r\n\t        return this._injector || (this._injector = new UIInjectorImpl(this));\r\n\t    };\r\n\t    ResolveContext.prototype.findNode = function (resolvable) {\r\n\t        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\r\n\t    };\r\n\t    /**\r\n\t     * Gets the async dependencies of a Resolvable\r\n\t     *\r\n\t     * Given a Resolvable, returns its dependencies as a Resolvable[]\r\n\t     */\r\n\t    ResolveContext.prototype.getDependencies = function (resolvable) {\r\n\t        var _this = this;\r\n\t        var node = this.findNode(resolvable);\r\n\t        // Find which other resolvables are \"visible\" to the `resolvable` argument\r\n\t        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\r\n\t        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\r\n\t        var availableResolvables = subPath\r\n\t            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\r\n\t            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\r\n\t        var getDependency = function (token) {\r\n\t            var matching = availableResolvables.filter(function (r) { return r.token === token; });\r\n\t            if (matching.length)\r\n\t                return common_1.tail(matching);\r\n\t            var fromInjector = _this.injector().getNative(token);\r\n\t            if (!fromInjector) {\r\n\t                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\r\n\t            }\r\n\t            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\r\n\t        };\r\n\t        return resolvable.deps.map(getDependency);\r\n\t    };\r\n\t    return ResolveContext;\r\n\t}());\r\n\texports.ResolveContext = ResolveContext;\r\n\tvar UIInjectorImpl = (function () {\r\n\t    function UIInjectorImpl(context) {\r\n\t        this.context = context;\r\n\t        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;\r\n\t    }\r\n\t    UIInjectorImpl.prototype.get = function (token) {\r\n\t        var resolvable = this.context.getResolvable(token);\r\n\t        if (resolvable) {\r\n\t            if (!resolvable.resolved) {\r\n\t                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\r\n\t            }\r\n\t            return resolvable.data;\r\n\t        }\r\n\t        return this.native && this.native.get(token);\r\n\t    };\r\n\t    UIInjectorImpl.prototype.getAsync = function (token) {\r\n\t        var resolvable = this.context.getResolvable(token);\r\n\t        if (resolvable)\r\n\t            return resolvable.get(this.context);\r\n\t        return coreservices_1.services.$q.when(this.native.get(token));\r\n\t    };\r\n\t    UIInjectorImpl.prototype.getNative = function (token) {\r\n\t        return this.native.get(token);\r\n\t    };\r\n\t    return UIInjectorImpl;\r\n\t}());\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\texports.resolvePolicies = {\r\n\t    when: {\r\n\t        LAZY: \"LAZY\",\r\n\t        EAGER: \"EAGER\"\r\n\t    },\r\n\t    async: {\r\n\t        WAIT: \"WAIT\",\r\n\t        NOWAIT: \"NOWAIT\",\r\n\t        RXWAIT: \"RXWAIT\"\r\n\t    }\r\n\t};\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module resolve */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\t// TODO: explicitly make this user configurable\r\n\texports.defaultResolvePolicy = {\r\n\t    when: \"LAZY\",\r\n\t    async: \"WAIT\"\r\n\t};\r\n\t/**\r\n\t * The basic building block for the resolve system.\r\n\t *\r\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\r\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\r\n\t *\r\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\r\n\t * resolveFn) and returns the resulting promise.\r\n\t *\r\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\r\n\t * parameter to those fns.\r\n\t */\r\n\tvar Resolvable = (function () {\r\n\t    function Resolvable(arg1, resolveFn, deps, policy, data) {\r\n\t        this.resolved = false;\r\n\t        this.promise = undefined;\r\n\t        if (arg1 instanceof Resolvable) {\r\n\t            common_1.extend(this, arg1);\r\n\t        }\r\n\t        else if (predicates_1.isFunction(resolveFn)) {\r\n\t            if (arg1 == null || arg1 == undefined)\r\n\t                throw new Error(\"new Resolvable(): token argument is required\");\r\n\t            if (!predicates_1.isFunction(resolveFn))\r\n\t                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\r\n\t            this.token = arg1;\r\n\t            this.policy = policy;\r\n\t            this.resolveFn = resolveFn;\r\n\t            this.deps = deps || [];\r\n\t            this.data = data;\r\n\t            this.resolved = data !== undefined;\r\n\t            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\r\n\t        }\r\n\t        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\r\n\t            var literal = arg1;\r\n\t            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\r\n\t        }\r\n\t    }\r\n\t    Resolvable.prototype.getPolicy = function (state) {\r\n\t        var thisPolicy = this.policy || {};\r\n\t        var statePolicy = state && state.resolvePolicy || {};\r\n\t        return {\r\n\t            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\r\n\t            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * Asynchronously resolve this Resolvable's data\r\n\t     *\r\n\t     * Given a ResolveContext that this Resolvable is found in:\r\n\t     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\r\n\t     * and update the Resolvable's state\r\n\t     */\r\n\t    Resolvable.prototype.resolve = function (resolveContext, trans) {\r\n\t        var _this = this;\r\n\t        var $q = coreservices_1.services.$q;\r\n\t        // Gets all dependencies from ResolveContext and wait for them to be resolved\r\n\t        var getResolvableDependencies = function () {\r\n\t            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\r\n\t                return r.get(resolveContext, trans);\r\n\t            }));\r\n\t        };\r\n\t        // Invokes the resolve function passing the resolved dependencies as arguments\r\n\t        var invokeResolveFn = function (resolvedDeps) {\r\n\t            return _this.resolveFn.apply(null, resolvedDeps);\r\n\t        };\r\n\t        /**\r\n\t         * For RXWAIT policy:\r\n\t         *\r\n\t         * Given an observable returned from a resolve function:\r\n\t         * - enables .cache() mode (this allows multicast subscribers)\r\n\t         * - then calls toPromise() (this triggers subscribe() and thus fetches)\r\n\t         * - Waits for the promise, then return the cached observable (not the first emitted value).\r\n\t         */\r\n\t        var waitForRx = function (observable$) {\r\n\t            var cached = observable$.cache(1);\r\n\t            return cached.take(1).toPromise().then(function () { return cached; });\r\n\t        };\r\n\t        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\r\n\t        var node = resolveContext.findNode(this);\r\n\t        var state = node && node.state;\r\n\t        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : common_1.identity;\r\n\t        // After the final value has been resolved, update the state of the Resolvable\r\n\t        var applyResolvedValue = function (resolvedValue) {\r\n\t            _this.data = resolvedValue;\r\n\t            _this.resolved = true;\r\n\t            trace_1.trace.traceResolvableResolved(_this, trans);\r\n\t            return _this.data;\r\n\t        };\r\n\t        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\r\n\t        return this.promise = $q.when()\r\n\t            .then(getResolvableDependencies)\r\n\t            .then(invokeResolveFn)\r\n\t            .then(maybeWaitForRx)\r\n\t            .then(applyResolvedValue);\r\n\t    };\r\n\t    /**\r\n\t     * Gets a promise for this Resolvable's data.\r\n\t     *\r\n\t     * Fetches the data and returns a promise.\r\n\t     * Returns the existing promise if it has already been fetched once.\r\n\t     */\r\n\t    Resolvable.prototype.get = function (resolveContext, trans) {\r\n\t        return this.promise || this.resolve(resolveContext, trans);\r\n\t    };\r\n\t    Resolvable.prototype.toString = function () {\r\n\t        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\r\n\t    };\r\n\t    Resolvable.prototype.clone = function () {\r\n\t        return new Resolvable(this);\r\n\t    };\r\n\t    Resolvable.fromData = function (token, data) {\r\n\t        return new Resolvable(token, function () { return data; }, null, null, data);\r\n\t    };\r\n\t    return Resolvable;\r\n\t}());\r\n\texports.Resolvable = Resolvable;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar node_1 = __webpack_require__(21);\r\n\t/**\r\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\r\n\t */\r\n\tvar PathFactory = (function () {\r\n\t    function PathFactory() {\r\n\t    }\r\n\t    /** Given a PathNode[], create an TargetState */\r\n\t    PathFactory.makeTargetState = function (path) {\r\n\t        var state = common_1.tail(path).state;\r\n\t        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\r\n\t    };\r\n\t    PathFactory.buildPath = function (targetState) {\r\n\t        var toParams = targetState.params();\r\n\t        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\r\n\t    };\r\n\t    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\r\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\r\n\t        var toPath = PathFactory.buildPath(targetState);\r\n\t        if (targetState.options().inherit) {\r\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\r\n\t        }\r\n\t        return toPath;\r\n\t    };\r\n\t    /**\r\n\t     * Creates ViewConfig objects and adds to nodes.\r\n\t     *\r\n\t     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\r\n\t     */\r\n\t    PathFactory.applyViewConfigs = function ($view, path, states) {\r\n\t        // Only apply the viewConfigs to the nodes for the given states\r\n\t        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\r\n\t            var viewDecls = common_1.values(node.state.views || {});\r\n\t            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\r\n\t            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\r\n\t            node.views = viewConfigs.reduce(common_1.unnestR, []);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\r\n\t     *\r\n\t     * For a parameter in a node to be inherited from the from path:\r\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\r\n\t     * - The parameter name must not be found in the toKeys parameter array.\r\n\t     *\r\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\r\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\r\n\t     * it is not inherited from the fromPath.\r\n\t     */\r\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\r\n\t        if (toKeys === void 0) { toKeys = []; }\r\n\t        function nodeParamVals(path, state) {\r\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\r\n\t            return common_1.extend({}, node && node.paramValues);\r\n\t        }\r\n\t        /**\r\n\t         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\r\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\r\n\t         */\r\n\t        function makeInheritedParamsNode(toNode) {\r\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\r\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\r\n\t            // limited to only those keys found in toParams\r\n\t            var incomingParamVals = common_1.pick(toParamVals, toKeys);\r\n\t            toParamVals = common_1.omit(toParamVals, toKeys);\r\n\t            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\r\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\r\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\r\n\t            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\r\n\t        }\r\n\t        // The param keys specified by the incoming toParams\r\n\t        return toPath.map(makeInheritedParamsNode);\r\n\t    };\r\n\t    /**\r\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\r\n\t     */\r\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\r\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\r\n\t        var staticParams = function (state) {\r\n\t            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));\r\n\t        };\r\n\t        var nodesMatch = function (node1, node2) {\r\n\t            return node1.equals(node2, staticParams(node1.state));\r\n\t        };\r\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\r\n\t            keep++;\r\n\t        }\r\n\t        /** Given a retained node, return a new node which uses the to node's param values */\r\n\t        function applyToParams(retainedNode, idx) {\r\n\t            var cloned = node_1.PathNode.clone(retainedNode);\r\n\t            cloned.paramValues = toPath[idx].paramValues;\r\n\t            return cloned;\r\n\t        }\r\n\t        var from, retained, exiting, entering, to;\r\n\t        from = fromPath;\r\n\t        retained = from.slice(0, keep);\r\n\t        exiting = from.slice(keep);\r\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\r\n\t        var retainedWithToParams = retained.map(applyToParams);\r\n\t        entering = toPath.slice(keep);\r\n\t        to = (retainedWithToParams).concat(entering);\r\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\r\n\t    };\r\n\t    /**\r\n\t     * Return a subpath of a path, which stops at the first matching node\r\n\t     *\r\n\t     * Given an array of nodes, returns a subset of the array starting from the first node,\r\n\t     * stopping when the first node matches the predicate.\r\n\t     *\r\n\t     * @param path a path of [[PathNode]]s\r\n\t     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\r\n\t     * @returns a subpath up to the matching node, or undefined if no match is found\r\n\t     */\r\n\t    PathFactory.subPath = function (path, predicate) {\r\n\t        var node = common_1.find(path, predicate);\r\n\t        var elementIdx = path.indexOf(node);\r\n\t        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\r\n\t    };\r\n\t    /** Gets the raw parameter values from a path */\r\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\r\n\t    return PathFactory;\r\n\t}());\r\n\texports.PathFactory = PathFactory;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module path */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar param_1 = __webpack_require__(22);\r\n\t/**\r\n\t * A node in a [[TreeChanges]] path\r\n\t *\r\n\t * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\r\n\t * Each PathNode corresponds to a state being entered, exited, or retained.\r\n\t * The stateful information includes parameter values and resolve data.\r\n\t */\r\n\tvar PathNode = (function () {\r\n\t    function PathNode(stateOrPath) {\r\n\t        if (stateOrPath instanceof PathNode) {\r\n\t            var node = stateOrPath;\r\n\t            this.state = node.state;\r\n\t            this.paramSchema = node.paramSchema.slice();\r\n\t            this.paramValues = common_1.extend({}, node.paramValues);\r\n\t            this.resolvables = node.resolvables.slice();\r\n\t            this.views = node.views && node.views.slice();\r\n\t        }\r\n\t        else {\r\n\t            var state = stateOrPath;\r\n\t            this.state = state;\r\n\t            this.paramSchema = state.parameters({ inherit: false });\r\n\t            this.paramValues = {};\r\n\t            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\r\n\t        }\r\n\t    }\r\n\t    /** Sets [[paramValues]] for the node, from the values of an object hash */\r\n\t    PathNode.prototype.applyRawParams = function (params) {\r\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\r\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\r\n\t        return this;\r\n\t    };\r\n\t    /** Gets a specific [[Param]] metadata that belongs to the node */\r\n\t    PathNode.prototype.parameter = function (name) {\r\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\r\n\t    };\r\n\t    /**\r\n\t     * @returns true if the state and parameter values for another PathNode are\r\n\t     * equal to the state and param values for this PathNode\r\n\t     */\r\n\t    PathNode.prototype.equals = function (node, keys) {\r\n\t        var _this = this;\r\n\t        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }\r\n\t        var paramValsEq = function (key) {\r\n\t            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);\r\n\t        };\r\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    /** Returns a clone of the PathNode */\r\n\t    PathNode.clone = function (node) {\r\n\t        return new PathNode(node);\r\n\t    };\r\n\t    /**\r\n\t     * Returns a new path which is a subpath of the first path which matched the second path.\r\n\t     *\r\n\t     * The new path starts from root and contains any nodes that match the nodes in the second path.\r\n\t     * Nodes are compared using their state property and parameter values.\r\n\t     *\r\n\t     * @param pathA the first path\r\n\t     * @param pathB the second path\r\n\t     * @param ignoreDynamicParams don't compare dynamic parameter values\r\n\t     */\r\n\t    PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {\r\n\t        if (ignoreDynamicParams === void 0) { ignoreDynamicParams = true; }\r\n\t        var matching = [];\r\n\t        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\r\n\t            var a = pathA[i], b = pathB[i];\r\n\t            if (a.state !== b.state)\r\n\t                break;\r\n\t            var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues)\r\n\t                .filter(function (param) { return !(ignoreDynamicParams && param.dynamic); });\r\n\t            if (changedParams.length)\r\n\t                break;\r\n\t            matching.push(a);\r\n\t        }\r\n\t        return matching;\r\n\t    };\r\n\t    return PathNode;\r\n\t}());\r\n\texports.PathNode = PathNode;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\r\n\tvar type_1 = __webpack_require__(24);\r\n\tvar hasOwn = Object.prototype.hasOwnProperty;\r\n\tvar isShorthand = function (cfg) {\r\n\t    return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\r\n\t};\r\n\t(function (DefType) {\r\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\r\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\r\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\r\n\t})(exports.DefType || (exports.DefType = {}));\r\n\tvar DefType = exports.DefType;\r\n\tfunction unwrapShorthand(cfg) {\r\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\r\n\t    return common_1.extend(cfg, {\r\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\r\n\t    });\r\n\t}\r\n\tfunction getType(cfg, urlType, location, id, paramTypes) {\r\n\t    if (cfg.type && urlType && urlType.name !== 'string')\r\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\r\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\r\n\t        return paramTypes.type(cfg.type);\r\n\t    if (urlType)\r\n\t        return urlType;\r\n\t    if (!cfg.type)\r\n\t        return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\r\n\t    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\r\n\t}\r\n\t/**\r\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\r\n\t */\r\n\tfunction getSquashPolicy(config, isOptional) {\r\n\t    var squash = config.squash;\r\n\t    if (!isOptional || squash === false)\r\n\t        return false;\r\n\t    if (!predicates_1.isDefined(squash) || squash == null)\r\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\r\n\t    if (squash === true || predicates_1.isString(squash))\r\n\t        return squash;\r\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\r\n\t}\r\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\r\n\t    var replace, configuredKeys, defaultPolicy = [\r\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\r\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\r\n\t    ];\r\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\r\n\t    if (predicates_1.isString(squash))\r\n\t        replace.push({ from: squash, to: undefined });\r\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\r\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\r\n\t}\r\n\tvar Param = (function () {\r\n\t    function Param(id, type, config, location, paramTypes) {\r\n\t        config = unwrapShorthand(config);\r\n\t        type = getType(config, type, location, id, paramTypes);\r\n\t        var arrayMode = getArrayMode();\r\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\r\n\t        var isOptional = config.value !== undefined;\r\n\t        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\r\n\t        var squash = getSquashPolicy(config, isOptional);\r\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\r\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\r\n\t        function getArrayMode() {\r\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\r\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\r\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\r\n\t        }\r\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\r\n\t    }\r\n\t    Param.prototype.isDefaultValue = function (value) {\r\n\t        return this.isOptional && this.type.equals(this.value(), value);\r\n\t    };\r\n\t    /**\r\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\r\n\t     * default value, which may be the result of an injectable function.\r\n\t     */\r\n\t    Param.prototype.value = function (value) {\r\n\t        var _this = this;\r\n\t        /**\r\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\r\n\t         */\r\n\t        var $$getDefaultValue = function () {\r\n\t            if (!coreservices_1.services.$injector)\r\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\r\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\r\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\r\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\r\n\t            return defaultValue;\r\n\t        };\r\n\t        var $replace = function (val) {\r\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\r\n\t            return replacement.length ? replacement[0] : val;\r\n\t        };\r\n\t        value = $replace(value);\r\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\r\n\t    };\r\n\t    Param.prototype.isSearch = function () {\r\n\t        return this.location === DefType.SEARCH;\r\n\t    };\r\n\t    Param.prototype.validates = function (value) {\r\n\t        // There was no parameter value, but the param is optional\r\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\r\n\t            return true;\r\n\t        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\r\n\t        var normalized = this.type.$normalize(value);\r\n\t        if (!this.type.is(normalized))\r\n\t            return false;\r\n\t        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\r\n\t        var encoded = this.type.encode(normalized);\r\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\r\n\t    };\r\n\t    Param.prototype.toString = function () {\r\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a CONFIG block */\r\n\t    Param.fromConfig = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.CONFIG, paramTypes);\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a url PATH */\r\n\t    Param.fromPath = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.PATH, paramTypes);\r\n\t    };\r\n\t    /** Creates a new [[Param]] from a url SEARCH */\r\n\t    Param.fromSearch = function (id, type, config, paramTypes) {\r\n\t        return new Param(id, type, config, DefType.SEARCH, paramTypes);\r\n\t    };\r\n\t    Param.values = function (params, values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\r\n\t    };\r\n\t    /**\r\n\t     * Finds [[Param]] objects which have different param values\r\n\t     *\r\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\r\n\t     *\r\n\t     * @param params: The list of Param objects to filter\r\n\t     * @param values1: The first set of parameter values\r\n\t     * @param values2: the second set of parameter values\r\n\t     *\r\n\t     * @returns any Param objects whose values were different between values1 and values2\r\n\t     */\r\n\t    Param.changed = function (params, values1, values2) {\r\n\t        if (values1 === void 0) { values1 = {}; }\r\n\t        if (values2 === void 0) { values2 = {}; }\r\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\r\n\t    };\r\n\t    /**\r\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\r\n\t     *\r\n\t     * @param params The list of [[Param]] objects to check\r\n\t     * @param values1 The first set of param values\r\n\t     * @param values2 The second set of param values\r\n\t     *\r\n\t     * @returns true if the param values in values1 and values2 are equal\r\n\t     */\r\n\t    Param.equals = function (params, values1, values2) {\r\n\t        if (values1 === void 0) { values1 = {}; }\r\n\t        if (values2 === void 0) { values2 = {}; }\r\n\t        return Param.changed(params, values1, values2).length === 0;\r\n\t    };\r\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\r\n\t    Param.validates = function (params, values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    return Param;\r\n\t}());\r\n\texports.Param = Param;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar MatcherConfig = (function () {\r\n\t    function MatcherConfig() {\r\n\t        this._isCaseInsensitive = false;\r\n\t        this._isStrictMode = true;\r\n\t        this._defaultSquashPolicy = false;\r\n\t    }\r\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\r\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\r\n\t    };\r\n\t    MatcherConfig.prototype.strictMode = function (value) {\r\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\r\n\t    };\r\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\r\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\r\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\r\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\r\n\t    };\r\n\t    return MatcherConfig;\r\n\t}());\r\n\texports.MatcherConfig = MatcherConfig;\r\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\r\n\texports.matcherConfig = new MatcherConfig();\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\t/**\r\n\t * Wraps up a `ParamType` object to handle array values.\r\n\t */\r\n\tfunction ArrayType(type, mode) {\r\n\t    var _this = this;\r\n\t    // Wrap non-array value as array\r\n\t    function arrayWrap(val) {\r\n\t        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);\r\n\t    }\r\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\r\n\t    function arrayUnwrap(val) {\r\n\t        switch (val.length) {\r\n\t            case 0: return undefined;\r\n\t            case 1: return mode === \"auto\" ? val[0] : val;\r\n\t            default: return val;\r\n\t        }\r\n\t    }\r\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\r\n\t    function arrayHandler(callback, allTruthyMode) {\r\n\t        return function handleArray(val) {\r\n\t            if (predicates_1.isArray(val) && val.length === 0)\r\n\t                return val;\r\n\t            var arr = arrayWrap(val);\r\n\t            var result = common_1.map(arr, callback);\r\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\r\n\t        };\r\n\t    }\r\n\t    // Wraps type (.equals) functions to operate on each value of an array\r\n\t    function arrayEqualsHandler(callback) {\r\n\t        return function handleArray(val1, val2) {\r\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\r\n\t            if (left.length !== right.length)\r\n\t                return false;\r\n\t            for (var i = 0; i < left.length; i++) {\r\n\t                if (!callback(left[i], right[i]))\r\n\t                    return false;\r\n\t            }\r\n\t            return true;\r\n\t        };\r\n\t    }\r\n\t    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\r\n\t        var paramTypeFn = type[name].bind(type);\r\n\t        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\r\n\t        _this[name] = wrapperFn(paramTypeFn);\r\n\t    });\r\n\t    common_1.extend(this, {\r\n\t        dynamic: type.dynamic,\r\n\t        name: type.name,\r\n\t        pattern: type.pattern,\r\n\t        is: arrayHandler(type.is.bind(type), true),\r\n\t        $arrayMode: mode\r\n\t    });\r\n\t}\r\n\t/**\r\n\t * A class that implements Custom Parameter Type functionality.\r\n\t *\r\n\t * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\r\n\t *\r\n\t * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\r\n\t *\r\n\t * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t *\r\n\t * {\r\n\t *   decode: function(val) { return parseInt(val, 10); },\r\n\t *   encode: function(val) { return val && val.toString(); },\r\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\r\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\r\n\t *   pattern: /\\d+/\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tvar ParamType = (function () {\r\n\t    /**\r\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\r\n\t     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\r\n\t     * @returns a new ParamType object\r\n\t     */\r\n\t    function ParamType(def) {\r\n\t        this.pattern = /.*/;\r\n\t        common_1.extend(this, def);\r\n\t    }\r\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.is = function (val, key) { return true; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.encode = function (val, key) { return val; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.decode = function (val, key) { return val; };\r\n\t    /** @inheritdoc */\r\n\t    ParamType.prototype.equals = function (a, b) { return a == b; };\r\n\t    ParamType.prototype.$subPattern = function () {\r\n\t        var sub = this.pattern.toString();\r\n\t        return sub.substr(1, sub.length - 2);\r\n\t    };\r\n\t    ParamType.prototype.toString = function () {\r\n\t        return \"{ParamType:\" + this.name + \"}\";\r\n\t    };\r\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\r\n\t    ParamType.prototype.$normalize = function (val) {\r\n\t        return this.is(val) ? val : this.decode(val);\r\n\t    };\r\n\t    /**\r\n\t     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\r\n\t     * e.g.:\r\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\r\n\t     * - url: \"/path?queryParam=1&queryParam=2\r\n\t     * - $stateParams.queryParam will be [1, 2]\r\n\t     * if `mode` is \"auto\", then\r\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\r\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\r\n\t     */\r\n\t    ParamType.prototype.$asArray = function (mode, isSearch) {\r\n\t        if (!mode)\r\n\t            return this;\r\n\t        if (mode === \"auto\" && !isSearch)\r\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\r\n\t        return new ArrayType(this, mode);\r\n\t    };\r\n\t    return ParamType;\r\n\t}());\r\n\texports.ParamType = ParamType;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module core */ /** */\r\n\tvar urlMatcherFactory_1 = __webpack_require__(26);\r\n\tvar urlRouter_1 = __webpack_require__(29);\r\n\tvar urlRouter_2 = __webpack_require__(29);\r\n\tvar transitionService_1 = __webpack_require__(30);\r\n\tvar view_1 = __webpack_require__(37);\r\n\tvar stateRegistry_1 = __webpack_require__(38);\r\n\tvar stateService_1 = __webpack_require__(43);\r\n\tvar globals_1 = __webpack_require__(44);\r\n\t/**\r\n\t * The master class used to instantiate an instance of UI-Router.\r\n\t *\r\n\t * This class instantiates and wires the global UI-Router services.\r\n\t *\r\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\r\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\r\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\r\n\t */\r\n\tvar UIRouter = (function () {\r\n\t    function UIRouter() {\r\n\t        this.viewService = new view_1.ViewService();\r\n\t        this.transitionService = new transitionService_1.TransitionService(this);\r\n\t        this.globals = new globals_1.Globals(this.transitionService);\r\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\r\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\r\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\r\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\r\n\t        this.stateService = new stateService_1.StateService(this);\r\n\t        this.viewService.rootContext(this.stateRegistry.root());\r\n\t        this.globals.$current = this.stateRegistry.root();\r\n\t        this.globals.current = this.globals.$current.self;\r\n\t    }\r\n\t    return UIRouter;\r\n\t}());\r\n\texports.UIRouter = UIRouter;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar urlMatcher_1 = __webpack_require__(27);\r\n\tvar urlMatcherConfig_1 = __webpack_require__(23);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar paramTypes_1 = __webpack_require__(28);\r\n\t/** @hidden */\r\n\tfunction getDefaultConfig() {\r\n\t    return {\r\n\t        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\r\n\t        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * Factory for [[UrlMatcher]] instances.\r\n\t *\r\n\t * The factory is available to ng1 services as\r\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\r\n\t */\r\n\tvar UrlMatcherFactory = (function () {\r\n\t    function UrlMatcherFactory() {\r\n\t        this.paramTypes = new paramTypes_1.ParamTypes();\r\n\t        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\r\n\t    }\r\n\t    /**\r\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\r\n\t     *\r\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\r\n\t     * @returns the current value of caseInsensitive\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\r\n\t    };\r\n\t    /**\r\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\r\n\t     *\r\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\r\n\t     * @returns the current value of strictMode\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.strictMode(value);\r\n\t    };\r\n\t    /**\r\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\r\n\t     *\r\n\t     * @param value A string that defines the default parameter URL squashing behavior.\r\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\r\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\r\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\r\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\r\n\t     *             the parameter value from the URL and replace it with this string.\r\n\t     * @returns the current value of defaultSquashPolicy\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\r\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\r\n\t    };\r\n\t    /**\r\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\r\n\t     *\r\n\t     * @param pattern  The URL pattern.\r\n\t     * @param config  The config object hash.\r\n\t     * @returns The UrlMatcher.\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\r\n\t        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));\r\n\t    };\r\n\t    /**\r\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\r\n\t     *\r\n\t     * @param object  The object to perform the type check against.\r\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\r\n\t     *          implementing all the same methods.\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\r\n\t        // TODO: typeof?\r\n\t        if (!predicates_1.isObject(object))\r\n\t            return false;\r\n\t        var result = true;\r\n\t        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\r\n\t            if (predicates_1.isFunction(val))\r\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\r\n\t        });\r\n\t        return result;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates and registers a custom [[ParamType]] object\r\n\t     *\r\n\t     * A [[ParamType]] can be used to generate URLs with typed parameters.\r\n\t     *\r\n\t     * @param name  The type name.\r\n\t     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\r\n\t     * @param definitionFn A function that is injected before the app runtime starts.\r\n\t     *        The result of this function should be a [[ParamTypeDefinition]].\r\n\t     *        The result is merged into the existing `definition`.\r\n\t     *        See [[ParamType]] for information on the values accepted.\r\n\t     *\r\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\r\n\t     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\r\n\t     *\r\n\t     * Note: Register custom types *before using them* in a state definition.\r\n\t     *\r\n\t     * See [[ParamTypeDefinition]] for examples\r\n\t     */\r\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\r\n\t        var type = this.paramTypes.type(name, definition, definitionFn);\r\n\t        return !predicates_1.isDefined(definition) ? type : this;\r\n\t    };\r\n\t    ;\r\n\t    /** @hidden */\r\n\t    UrlMatcherFactory.prototype.$get = function () {\r\n\t        this.paramTypes.enqueue = false;\r\n\t        this.paramTypes._flushTypeQueue();\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    return UrlMatcherFactory;\r\n\t}());\r\n\texports.UrlMatcherFactory = UrlMatcherFactory;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar predicates_2 = __webpack_require__(4);\r\n\tvar param_2 = __webpack_require__(22);\r\n\tvar common_2 = __webpack_require__(3);\r\n\tvar common_3 = __webpack_require__(3);\r\n\t/** @hidden */\r\n\tfunction quoteRegExp(string, param) {\r\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\r\n\t    if (!param)\r\n\t        return result;\r\n\t    switch (param.squash) {\r\n\t        case false:\r\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\r\n\t            break;\r\n\t        case true:\r\n\t            result = result.replace(/\\/$/, '');\r\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\r\n\t            break;\r\n\t        default:\r\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\r\n\t            break;\r\n\t    }\r\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\r\n\t}\r\n\t/** @hidden */\r\n\tvar memoizeTo = function (obj, prop, fn) {\r\n\t    return obj[prop] = obj[prop] || fn();\r\n\t};\r\n\t/**\r\n\t * Matches URLs against patterns.\r\n\t *\r\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\r\n\t * part of the URL.\r\n\t *\r\n\t * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\r\n\t * parameters. Multiple search parameter names are separated by '&'. Search parameters\r\n\t * do not influence whether or not a URL is matched, but their values are passed through into\r\n\t * the matched parameters returned by [[UrlMatcher.exec]].\r\n\t *\r\n\t * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\r\n\t * or colon placeholders (`/somePath/:param`).\r\n\t *\r\n\t * - *A parameter RegExp* may be defined for a param after a colon\r\n\t * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\r\n\t * The regexp must match for the url to be matched.\r\n\t * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\r\n\t *\r\n\t * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\r\n\t * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\r\n\t *\r\n\t * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\r\n\t * parameter value will contain the remainder of the URL.\r\n\t *\r\n\t * ---\r\n\t *\r\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\r\n\t * must be unique within the pattern (across both path and search parameters).\r\n\t * A path parameter matches any number of characters other than '/'. For catch-all\r\n\t * placeholders the path parameter matches any number of characters.\r\n\t *\r\n\t * Examples:\r\n\t *\r\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\r\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\r\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\r\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\r\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\r\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\r\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\r\n\t *   parameter consists of 1 to 8 hex digits.\r\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\r\n\t *   path into the parameter 'path'.\r\n\t * * `'/files/*path'` - ditto.\r\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\r\n\t *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\r\n\t *\r\n\t */\r\n\tvar UrlMatcher = (function () {\r\n\t    /**\r\n\t     * @param pattern The pattern to compile into a matcher.\r\n\t     * @param paramTypes The [[ParamTypes]] registry\r\n\t     * @param config  A configuration object\r\n\t     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\r\n\t     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\r\n\t     */\r\n\t    function UrlMatcher(pattern, paramTypes, config) {\r\n\t        var _this = this;\r\n\t        this.config = config;\r\n\t        /** @hidden */\r\n\t        this._cache = { path: [], pattern: null };\r\n\t        /** @hidden */\r\n\t        this._children = [];\r\n\t        /** @hidden */\r\n\t        this._params = [];\r\n\t        /** @hidden */\r\n\t        this._segments = [];\r\n\t        /** @hidden */\r\n\t        this._compiled = [];\r\n\t        this.pattern = pattern;\r\n\t        this.config = common_1.defaults(this.config, {\r\n\t            params: {},\r\n\t            strict: true,\r\n\t            caseInsensitive: false,\r\n\t            paramMap: common_1.identity\r\n\t        });\r\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\r\n\t        //   '*' name\r\n\t        //   ':' name\r\n\t        //   '{' name '}'\r\n\t        //   '{' name ':' regexp '}'\r\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\r\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\r\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\r\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\r\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\r\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\r\n\t        //    \\\\.                            - a backslash escape\r\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\r\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\r\n\t        var checkParamErrors = function (id) {\r\n\t            if (!UrlMatcher.nameValidator.test(id))\r\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\r\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\r\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\r\n\t        };\r\n\t        // Split into static segments separated by path parameter placeholders.\r\n\t        // The number of segments is always 1 more than the number of parameters.\r\n\t        var matchDetails = function (m, isSearch) {\r\n\t            // IE[78] returns '' for unmatched groups instead of null\r\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\r\n\t            return {\r\n\t                id: id,\r\n\t                regexp: regexp,\r\n\t                cfg: _this.config.params[id],\r\n\t                segment: pattern.substring(last, m.index),\r\n\t                type: !regexp ? null : paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes.type(\"string\"), {\r\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\r\n\t                })\r\n\t            };\r\n\t        };\r\n\t        var p, segment;\r\n\t        while ((m = placeholder.exec(pattern))) {\r\n\t            p = matchDetails(m, false);\r\n\t            if (p.segment.indexOf('?') >= 0)\r\n\t                break; // we're into the search part\r\n\t            checkParamErrors(p.id);\r\n\t            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\r\n\t            this._segments.push(p.segment);\r\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\r\n\t            last = placeholder.lastIndex;\r\n\t        }\r\n\t        segment = pattern.substring(last);\r\n\t        // Find any search parameter names and remove them from the last segment\r\n\t        var i = segment.indexOf('?');\r\n\t        if (i >= 0) {\r\n\t            var search = segment.substring(i);\r\n\t            segment = segment.substring(0, i);\r\n\t            if (search.length > 0) {\r\n\t                last = 0;\r\n\t                while ((m = searchPlaceholder.exec(search))) {\r\n\t                    p = matchDetails(m, true);\r\n\t                    checkParamErrors(p.id);\r\n\t                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\r\n\t                    last = placeholder.lastIndex;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this._segments.push(segment);\r\n\t        common_1.extend(this, {\r\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\r\n\t            prefix: this._segments[0]\r\n\t        });\r\n\t        Object.freeze(this);\r\n\t    }\r\n\t    /**\r\n\t     * Creates a new concatenated UrlMatcher\r\n\t     *\r\n\t     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\r\n\t     *\r\n\t     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\r\n\t     */\r\n\t    UrlMatcher.prototype.append = function (url) {\r\n\t        this._children.push(url);\r\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\r\n\t        url._cache.path = this._cache.path.concat(this);\r\n\t        return url;\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.prototype.isRoot = function () {\r\n\t        return this._cache.path.length === 0;\r\n\t    };\r\n\t    /** Returns the input pattern string */\r\n\t    UrlMatcher.prototype.toString = function () {\r\n\t        return this.pattern;\r\n\t    };\r\n\t    /**\r\n\t     * Tests the specified url/path against this matcher.\r\n\t     *\r\n\t     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\r\n\t     * parameter values.  Returns null if the path does not match.\r\n\t     *\r\n\t     * The returned object contains the values\r\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\r\n\t     * they are not present in `search`. This means that search parameters are always treated\r\n\t     * as optional.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\r\n\t     *   x: '1', q: 'hello'\r\n\t     * });\r\n\t     * // returns { id: 'bob', q: 'hello', r: null }\r\n\t     * ```\r\n\t     *\r\n\t     * @param path    The URL path to match, e.g. `$location.path()`.\r\n\t     * @param search  URL search parameters, e.g. `$location.search()`.\r\n\t     * @param hash    URL hash e.g. `$location.hash()`.\r\n\t     * @param options\r\n\t     *\r\n\t     * @returns The captured parameter values.\r\n\t     */\r\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\r\n\t        var _this = this;\r\n\t        if (search === void 0) { search = {}; }\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\r\n\t            return new RegExp([\r\n\t                '^',\r\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\r\n\t                _this.config.strict === false ? '\\/?' : '',\r\n\t                '$'\r\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\r\n\t        }).exec(path);\r\n\t        if (!match)\r\n\t            return null;\r\n\t        //options = defaults(options, { isolate: false });\r\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\r\n\t        if (nPathSegments !== match.length - 1)\r\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\r\n\t        function decodePathArray(string) {\r\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\r\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\r\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\r\n\t            var allReversed = common_1.map(split, reverseString);\r\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\r\n\t        }\r\n\t        for (var i = 0; i < nPathSegments; i++) {\r\n\t            var param = pathParams[i];\r\n\t            var value = match[i + 1];\r\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\r\n\t            for (var j = 0; j < param.replace.length; j++) {\r\n\t                if (param.replace[j].from === value)\r\n\t                    value = param.replace[j].to;\r\n\t            }\r\n\t            if (value && param.array === true)\r\n\t                value = decodePathArray(value);\r\n\t            if (predicates_2.isDefined(value))\r\n\t                value = param.type.decode(value);\r\n\t            values[param.id] = param.value(value);\r\n\t        }\r\n\t        searchParams.forEach(function (param) {\r\n\t            var value = search[param.id];\r\n\t            for (var j = 0; j < param.replace.length; j++) {\r\n\t                if (param.replace[j].from === value)\r\n\t                    value = param.replace[j].to;\r\n\t            }\r\n\t            if (predicates_2.isDefined(value))\r\n\t                value = param.type.decode(value);\r\n\t            values[param.id] = param.value(value);\r\n\t        });\r\n\t        if (hash)\r\n\t            values[\"#\"] = hash;\r\n\t        return values;\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\r\n\t     *\r\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\r\n\t     *    pattern has no parameters, an empty array is returned.\r\n\t     */\r\n\t    UrlMatcher.prototype.parameters = function (opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        if (opts.inherit === false)\r\n\t            return this._params;\r\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\r\n\t    };\r\n\t    /**\r\n\t     * @hidden\r\n\t     * Returns a single parameter from this UrlMatcher by id\r\n\t     *\r\n\t     * @param id\r\n\t     * @param opts\r\n\t     * @returns {T|Param|any|boolean|UrlMatcher|null}\r\n\t     */\r\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        var parent = common_1.tail(this._cache.path);\r\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\r\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\r\n\t            null);\r\n\t    };\r\n\t    /**\r\n\t     * Validates the input parameter values against this UrlMatcher\r\n\t     *\r\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\r\n\t     * types of this `UrlMatcher`.\r\n\t     *\r\n\t     * @param params The object hash of parameters to validate.\r\n\t     * @returns Returns `true` if `params` validates, otherwise `false`.\r\n\t     */\r\n\t    UrlMatcher.prototype.validates = function (params) {\r\n\t        var _this = this;\r\n\t        var validParamVal = function (param, val) {\r\n\t            return !param || param.validates(val);\r\n\t        };\r\n\t        return common_1.pairs(params || {}).map(function (_a) {\r\n\t            var key = _a[0], val = _a[1];\r\n\t            return validParamVal(_this.parameter(key), val);\r\n\t        }).reduce(common_1.allTrueR, true);\r\n\t    };\r\n\t    /**\r\n\t     * Given a set of parameter values, creates a URL from this UrlMatcher.\r\n\t     *\r\n\t     * Creates a URL that matches this pattern by substituting the specified values\r\n\t     * for the path and search parameters.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\r\n\t     * // returns '/user/bob?q=yes'\r\n\t     * ```\r\n\t     *\r\n\t     * @param values  the values to substitute for the parameters in this pattern.\r\n\t     * @returns the formatted URL (path and optionally search part).\r\n\t     */\r\n\t    UrlMatcher.prototype.format = function (values) {\r\n\t        if (values === void 0) { values = {}; }\r\n\t        if (!this.validates(values))\r\n\t            return null;\r\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\r\n\t        var urlMatchers = this._cache.path.slice().concat(this);\r\n\t        // Extract all the static segments and Params into an ordered array\r\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\r\n\t        // Extract the query params into a separate array\r\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\r\n\t        /**\r\n\t         * Given a Param,\r\n\t         * Applies the parameter value, then returns details about it\r\n\t         */\r\n\t        function getDetails(param) {\r\n\t            // Normalize to typed value\r\n\t            var value = param.value(values[param.id]);\r\n\t            var isDefaultValue = param.isDefaultValue(value);\r\n\t            // Check if we're in squash mode for the parameter\r\n\t            var squash = isDefaultValue ? param.squash : false;\r\n\t            // Allow the Parameter's Type to encode the value\r\n\t            var encoded = param.type.encode(value);\r\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\r\n\t        }\r\n\t        // Build up the path-portion from the list of static segments and parameters\r\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\r\n\t            // The element is a static segment (a raw string); just append it\r\n\t            if (predicates_1.isString(x))\r\n\t                return acc + x;\r\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\r\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\r\n\t            // If squash is === true, try to remove a slash from the path\r\n\t            if (squash === true)\r\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\r\n\t            // If squash is a string, use the string for the param value\r\n\t            if (predicates_1.isString(squash))\r\n\t                return acc + squash;\r\n\t            if (squash !== false)\r\n\t                return acc; // ?\r\n\t            if (encoded == null)\r\n\t                return acc;\r\n\t            // If this parameter value is an array, encode the value using encodeDashes\r\n\t            if (predicates_1.isArray(encoded))\r\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\r\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\r\n\t            if (param.type.raw)\r\n\t                return acc + encoded;\r\n\t            // Encode the value\r\n\t            return acc + encodeURIComponent(encoded);\r\n\t        }, \"\");\r\n\t        // Build the query string by applying parameter values (array or regular)\r\n\t        // then mapping to key=value, then flattening and joining using \"&\"\r\n\t        var queryString = queryParams.map(function (param) {\r\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\r\n\t            if (encoded == null || (isDefaultValue && squash !== false))\r\n\t                return;\r\n\t            if (!predicates_1.isArray(encoded))\r\n\t                encoded = [encoded];\r\n\t            if (encoded.length === 0)\r\n\t                return;\r\n\t            if (!param.type.raw)\r\n\t                encoded = common_1.map(encoded, encodeURIComponent);\r\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\r\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\r\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\r\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.encodeDashes = function (str) {\r\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\r\n\t    };\r\n\t    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\r\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\r\n\t        var staticSegments = matcher._segments;\r\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\r\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\r\n\t    };\r\n\t    /** @hidden Given a matcher, return an array with the matcher's query params */\r\n\t    UrlMatcher.queryParams = function (matcher) {\r\n\t        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\r\n\t    };\r\n\t    /** @hidden */\r\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\r\n\t    return UrlMatcher;\r\n\t}());\r\n\texports.UrlMatcher = UrlMatcher;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar type_1 = __webpack_require__(24);\r\n\t// Use tildes to pre-encode slashes.\r\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\r\n\t// and bidirectional encoding/decoding fails.\r\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\r\n\tfunction valToString(val) { return val != null ? val.toString().replace(/(~|\\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val; }\r\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val; }\r\n\tvar ParamTypes = (function () {\r\n\t    function ParamTypes() {\r\n\t        this.enqueue = true;\r\n\t        this.typeQueue = [];\r\n\t        this.defaultTypes = {\r\n\t            \"hash\": {\r\n\t                encode: valToString,\r\n\t                decode: valFromString,\r\n\t                is: hof_1.is(String),\r\n\t                pattern: /.*/,\r\n\t                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\r\n\t            },\r\n\t            \"string\": {\r\n\t                encode: valToString,\r\n\t                decode: valFromString,\r\n\t                is: hof_1.is(String),\r\n\t                pattern: /[^/]*/\r\n\t            },\r\n\t            \"int\": {\r\n\t                encode: valToString,\r\n\t                decode: function (val) { return parseInt(val, 10); },\r\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\r\n\t                pattern: /-?\\d+/\r\n\t            },\r\n\t            \"bool\": {\r\n\t                encode: function (val) { return val && 1 || 0; },\r\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\r\n\t                is: hof_1.is(Boolean),\r\n\t                pattern: /0|1/\r\n\t            },\r\n\t            \"date\": {\r\n\t                encode: function (val) {\r\n\t                    return !this.is(val) ? undefined : [\r\n\t                        val.getFullYear(),\r\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\r\n\t                        ('0' + val.getDate()).slice(-2)\r\n\t                    ].join(\"-\");\r\n\t                },\r\n\t                decode: function (val) {\r\n\t                    if (this.is(val))\r\n\t                        return val;\r\n\t                    var match = this.capture.exec(val);\r\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\r\n\t                },\r\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\r\n\t                equals: function (l, r) {\r\n\t                    return ['getFullYear', 'getMonth', 'getDate']\r\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\r\n\t                },\r\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\r\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\r\n\t            },\r\n\t            \"json\": {\r\n\t                encode: common_1.toJson,\r\n\t                decode: common_1.fromJson,\r\n\t                is: hof_1.is(Object),\r\n\t                equals: common_1.equals,\r\n\t                pattern: /[^/]*/\r\n\t            },\r\n\t            \"any\": {\r\n\t                encode: common_1.identity,\r\n\t                decode: common_1.identity,\r\n\t                equals: common_1.equals,\r\n\t                pattern: /.*/\r\n\t            }\r\n\t        };\r\n\t        // Register default types. Store them in the prototype of this.types.\r\n\t        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\r\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\r\n\t    }\r\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\r\n\t        if (!predicates_1.isDefined(definition))\r\n\t            return this.types[name];\r\n\t        if (this.types.hasOwnProperty(name))\r\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\r\n\t        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\r\n\t        if (definitionFn) {\r\n\t            this.typeQueue.push({ name: name, def: definitionFn });\r\n\t            if (!this.enqueue)\r\n\t                this._flushTypeQueue();\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    ParamTypes.prototype._flushTypeQueue = function () {\r\n\t        while (this.typeQueue.length) {\r\n\t            var type = this.typeQueue.shift();\r\n\t            if (type.pattern)\r\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\r\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\r\n\t        }\r\n\t    };\r\n\t    return ParamTypes;\r\n\t}());\r\n\texports.ParamTypes = ParamTypes;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module url */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/** @hidden */\r\n\tvar $location = coreservices_1.services.location;\r\n\t/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\r\n\tfunction regExpPrefix(re) {\r\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\r\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\r\n\t}\r\n\t/** @hidden Interpolates matched values into a String.replace()-style pattern */\r\n\tfunction interpolate(pattern, match) {\r\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\r\n\t        return match[what === '$' ? 0 : Number(what)];\r\n\t    });\r\n\t}\r\n\t/** @hidden */\r\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\r\n\t    if (!match)\r\n\t        return false;\r\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\r\n\t    return predicates_1.isDefined(result) ? result : true;\r\n\t}\r\n\t/** @hidden */\r\n\tfunction appendBasePath(url, isHtml5, absolute) {\r\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\r\n\t    if (baseHref === '/')\r\n\t        return url;\r\n\t    if (isHtml5)\r\n\t        return baseHref.slice(0, -1) + url;\r\n\t    if (absolute)\r\n\t        return baseHref.slice(1) + url;\r\n\t    return url;\r\n\t}\r\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\r\n\t/** @hidden */\r\n\tfunction update(rules, otherwiseFn, evt) {\r\n\t    if (evt && evt.defaultPrevented)\r\n\t        return;\r\n\t    function check(rule) {\r\n\t        var handled = rule(coreservices_1.services.$injector, $location);\r\n\t        if (!handled)\r\n\t            return false;\r\n\t        if (predicates_1.isString(handled)) {\r\n\t            $location.setUrl(handled, true);\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\t    var n = rules.length;\r\n\t    for (var i = 0; i < n; i++) {\r\n\t        if (check(rules[i]))\r\n\t            return;\r\n\t    }\r\n\t    // always check otherwise last to allow dynamic updates to the set of rules\r\n\t    if (otherwiseFn)\r\n\t        check(otherwiseFn);\r\n\t}\r\n\t/**\r\n\t * Manages rules for client-side URL\r\n\t *\r\n\t * This class manages the router rules for what to do when the URL changes.\r\n\t */\r\n\tvar UrlRouterProvider = (function () {\r\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\r\n\t        /** @hidden */\r\n\t        this.rules = [];\r\n\t        /** @hidden */\r\n\t        this.interceptDeferred = false;\r\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\r\n\t        this.$stateParams = $stateParams;\r\n\t    }\r\n\t    /**\r\n\t     * Registers a url handler function.\r\n\t     *\r\n\t     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\r\n\t     * a redirect, or performs some action.\r\n\t     *\r\n\t     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // Here's an example of how you might allow case insensitive urls\r\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\r\n\t     *     var path = $location.path(),\r\n\t     *         normalized = path.toLowerCase();\r\n\t     *\r\n\t     *     if (path !== normalized) {\r\n\t     *       return normalized;\r\n\t     *     }\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param rule\r\n\t     * Handler function that takes `$injector` and `$location` services as arguments.\r\n\t     * You can use them to detect a url and return a different url as a string.\r\n\t     *\r\n\t     * @return [[$urlRouterProvider]] (`this`)\r\n\t     */\r\n\t    UrlRouterProvider.prototype.rule = function (rule) {\r\n\t        if (!predicates_1.isFunction(rule))\r\n\t            throw new Error(\"'rule' must be a function\");\r\n\t        this.rules.push(rule);\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Remove a rule previously registered\r\n\t     *\r\n\t     * @param rule the matcher rule that was previously registered using [[rule]]\r\n\t     * @return true if the rule was found (and removed)\r\n\t     */\r\n\t    UrlRouterProvider.prototype.removeRule = function (rule) {\r\n\t        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;\r\n\t    };\r\n\t    /**\r\n\t     * Defines the path or behavior to use when no url can be matched.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // if the path doesn't match any of the urls you configured\r\n\t     *   // otherwise will take care of routing the user to the\r\n\t     *   // specified url\r\n\t     *   $urlRouterProvider.otherwise('/index');\r\n\t     *\r\n\t     *   // Example of using function rule as param\r\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\r\n\t     *     return '/a/valid/url';\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param rule\r\n\t     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\r\n\t     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\r\n\t     *\r\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\r\n\t     */\r\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\r\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\r\n\t            throw new Error(\"'rule' must be a string or function\");\r\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\r\n\t        return this;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Registers a handler for a given url matching.\r\n\t     *\r\n\t     * If the handler is a string, it is\r\n\t     * treated as a redirect, and is interpolated according to the syntax of match\r\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\r\n\t     *\r\n\t     * If the handler is a function, it is injectable.\r\n\t     * It gets invoked if `$location` matches.\r\n\t     * You have the option of inject the match object as `$match`.\r\n\t     *\r\n\t     * The handler can return\r\n\t     *\r\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\r\n\t     *   will continue trying to find another one that matches.\r\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\r\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\r\n\t     *     if ($state.$current.navigable !== state ||\r\n\t     *         !equalForKeys($match, $stateParams) {\r\n\t     *      $state.transitionTo(state, $match, false);\r\n\t     *     }\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\r\n\t     * @param handler The path (or function that returns a path) that you want to redirect your user to.\r\n\t     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\r\n\t     *\r\n\t     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\r\n\t     */\r\n\t    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {\r\n\t        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }\r\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\r\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\r\n\t        // @todo Queue this\r\n\t        if (predicates_1.isString(what))\r\n\t            what = $urlMatcherFactory.compile(what);\r\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\r\n\t            throw new Error(\"invalid 'handler' in when()\");\r\n\t        var strategies = {\r\n\t            matcher: function (_what, _handler) {\r\n\t                if (handlerIsString) {\r\n\t                    redirect = $urlMatcherFactory.compile(_handler);\r\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\r\n\t                }\r\n\t                return common_1.extend(function () {\r\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\r\n\t                }, {\r\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\r\n\t                });\r\n\t            },\r\n\t            regex: function (_what, _handler) {\r\n\t                if (_what.global || _what.sticky)\r\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\r\n\t                if (handlerIsString) {\r\n\t                    redirect = _handler;\r\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\r\n\t                }\r\n\t                return common_1.extend(function () {\r\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\r\n\t                }, {\r\n\t                    prefix: regExpPrefix(_what)\r\n\t                });\r\n\t            }\r\n\t        };\r\n\t        var check = {\r\n\t            matcher: $urlMatcherFactory.isMatcher(what),\r\n\t            regex: what instanceof RegExp\r\n\t        };\r\n\t        for (var n in check) {\r\n\t            if (check[n]) {\r\n\t                var rule = strategies[n](what, handler);\r\n\t                ruleCallback(rule);\r\n\t                return this.rule(rule);\r\n\t            }\r\n\t        }\r\n\t        throw new Error(\"invalid 'what' in when()\");\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Disables monitoring of the URL.\r\n\t     *\r\n\t     * Call this method before UI-Router has bootstrapped.\r\n\t     * It will stop UI-Router from performing the initial url sync.\r\n\t     *\r\n\t     * This can be useful to perform some asynchronous initialization before the router starts.\r\n\t     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * var app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.config(function ($urlRouterProvider) {\r\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\r\n\t     *   $urlRouterProvider.deferIntercept();\r\n\t     * })\r\n\t     *\r\n\t     * app.run(function (MyService, $urlRouter, $http) {\r\n\t     *   $http.get(\"/stuff\").then(function(resp) {\r\n\t     *     MyService.doStuff(resp.data);\r\n\t     *     $urlRouter.listen();\r\n\t     *     $urlRouter.sync();\r\n\t     *   });\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param defer Indicates whether to defer location change interception. Passing\r\n\t     *        no parameter is equivalent to `true`.\r\n\t     */\r\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\r\n\t        if (defer === undefined)\r\n\t            defer = true;\r\n\t        this.interceptDeferred = defer;\r\n\t    };\r\n\t    ;\r\n\t    return UrlRouterProvider;\r\n\t}());\r\n\texports.UrlRouterProvider = UrlRouterProvider;\r\n\tvar UrlRouter = (function () {\r\n\t    /** @hidden */\r\n\t    function UrlRouter(urlRouterProvider) {\r\n\t        this.urlRouterProvider = urlRouterProvider;\r\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\r\n\t    }\r\n\t    /**\r\n\t     * Checks the current URL for a matching rule\r\n\t     *\r\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\r\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\r\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\r\n\t     * with the transition by calling `$urlRouter.sync()`.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * angular.module('app', ['ui.router'])\r\n\t     *   .run(function($rootScope, $urlRouter) {\r\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\r\n\t     *       // Halt state change from even starting\r\n\t     *       evt.preventDefault();\r\n\t     *       // Perform custom logic\r\n\t     *       var meetsRequirement = ...\r\n\t     *       // Continue with the update and state transition if logic allows\r\n\t     *       if (meetsRequirement) $urlRouter.sync();\r\n\t     *     });\r\n\t     * });\r\n\t     * ```\r\n\t     */\r\n\t    UrlRouter.prototype.sync = function () {\r\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\r\n\t    };\r\n\t    /**\r\n\t     * Starts listening for URL changes\r\n\t     *\r\n\t     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\r\n\t     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\r\n\t     */\r\n\t    UrlRouter.prototype.listen = function () {\r\n\t        var _this = this;\r\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\r\n\t    };\r\n\t    /**\r\n\t     * Internal API.\r\n\t     */\r\n\t    UrlRouter.prototype.update = function (read) {\r\n\t        if (read) {\r\n\t            this.location = $location.path();\r\n\t            return;\r\n\t        }\r\n\t        if ($location.path() === this.location)\r\n\t            return;\r\n\t        $location.setUrl(this.location, true);\r\n\t    };\r\n\t    /**\r\n\t     * Internal API.\r\n\t     *\r\n\t     * Pushes a new location to the browser history.\r\n\t     *\r\n\t     * @param urlMatcher\r\n\t     * @param params\r\n\t     * @param options\r\n\t     */\r\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\r\n\t        var replace = options && !!options.replace;\r\n\t        $location.setUrl(urlMatcher.format(params || {}), replace);\r\n\t    };\r\n\t    /**\r\n\t     * Builds and returns a URL with interpolated parameters\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\r\n\t     *   person: \"bob\"\r\n\t     * });\r\n\t     * // $bob == \"/about/bob\";\r\n\t     * ```\r\n\t     *\r\n\t     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\r\n\t     * @param params An object of parameter values to fill the matcher's required parameters.\r\n\t     * @param options Options object. The options are:\r\n\t     *\r\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\r\n\t     *\r\n\t     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\r\n\t     */\r\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\r\n\t        if (!urlMatcher.validates(params))\r\n\t            return null;\r\n\t        var url = urlMatcher.format(params);\r\n\t        options = options || { absolute: false };\r\n\t        var cfg = coreservices_1.services.locationConfig;\r\n\t        var isHtml5 = cfg.html5Mode();\r\n\t        if (!isHtml5 && url !== null) {\r\n\t            url = \"#\" + cfg.hashPrefix() + url;\r\n\t        }\r\n\t        url = appendBasePath(url, isHtml5, options.absolute);\r\n\t        if (!options.absolute || !url) {\r\n\t            return url;\r\n\t        }\r\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\r\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\r\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\r\n\t    };\r\n\t    return UrlRouter;\r\n\t}());\r\n\texports.UrlRouter = UrlRouter;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar transition_1 = __webpack_require__(11);\r\n\tvar hookRegistry_1 = __webpack_require__(15);\r\n\tvar resolve_1 = __webpack_require__(31);\r\n\tvar views_1 = __webpack_require__(32);\r\n\tvar url_1 = __webpack_require__(33);\r\n\tvar redirectTo_1 = __webpack_require__(34);\r\n\tvar onEnterExitRetain_1 = __webpack_require__(35);\r\n\tvar lazyLoadStates_1 = __webpack_require__(36);\r\n\t/**\r\n\t * The default [[Transition]] options.\r\n\t *\r\n\t * Include this object when applying custom defaults:\r\n\t * let reloadOpts = { reload: true, notify: true }\r\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\r\n\t */\r\n\texports.defaultTransOpts = {\r\n\t    location: true,\r\n\t    relative: null,\r\n\t    inherit: false,\r\n\t    notify: true,\r\n\t    reload: false,\r\n\t    custom: {},\r\n\t    current: function () { return null; },\r\n\t    source: \"unknown\"\r\n\t};\r\n\t/**\r\n\t * This class provides services related to Transitions.\r\n\t *\r\n\t * - Most importantly, it allows global Transition Hooks to be registered.\r\n\t * - It allows the default transition error handler to be set.\r\n\t * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\r\n\t *\r\n\t * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\r\n\t */\r\n\tvar TransitionService = (function () {\r\n\t    function TransitionService(_router) {\r\n\t        this._router = _router;\r\n\t        this.$view = _router.viewService;\r\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\r\n\t        this._deregisterHookFns = {};\r\n\t        this.registerTransitionHooks();\r\n\t    }\r\n\t    /** @hidden */\r\n\t    TransitionService.prototype.registerTransitionHooks = function () {\r\n\t        var fns = this._deregisterHookFns;\r\n\t        // Wire up redirectTo hook\r\n\t        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\r\n\t        // Wire up onExit/Retain/Enter state hooks\r\n\t        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\r\n\t        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\r\n\t        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\r\n\t        // Wire up Resolve hooks\r\n\t        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\r\n\t        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\r\n\t        // Wire up the View management hooks\r\n\t        fns.loadViews = views_1.registerLoadEnteringViews(this);\r\n\t        fns.activateViews = views_1.registerActivateViews(this);\r\n\t        // After globals.current is updated at priority: 10000\r\n\t        fns.updateUrl = url_1.registerUpdateUrl(this);\r\n\t        // Lazy load state trees\r\n\t        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);\r\n\t    };\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /** @inheritdoc */\r\n\t    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates a new [[Transition]] object\r\n\t     *\r\n\t     * This is a factory function for creating new Transition objects.\r\n\t     * It is used internally by the [[StateService]] and should generally not be called by application code.\r\n\t     *\r\n\t     * @param fromPath the path to the current state (the from state)\r\n\t     * @param targetState the target state (destination)\r\n\t     * @returns a Transition\r\n\t     */\r\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\r\n\t        return new transition_1.Transition(fromPath, targetState, this._router);\r\n\t    };\r\n\t    return TransitionService;\r\n\t}());\r\n\texports.TransitionService = TransitionService;\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\t/**\r\n\t * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\r\n\t *\r\n\t * Registered using `transitionService.onStart({}, eagerResolvePath);`\r\n\t *\r\n\t * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\r\n\t *\r\n\t * See [[StateDeclaration.resolve]]\r\n\t */\r\n\tvar eagerResolvePath = function (trans) {\r\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\r\n\t        .resolvePath(\"EAGER\", trans)\r\n\t        .then(common_1.noop);\r\n\t};\r\n\texports.registerEagerResolvePath = function (transitionService) {\r\n\t    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\r\n\t};\r\n\t/**\r\n\t * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\r\n\t *\r\n\t * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\r\n\t *\r\n\t * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\r\n\t *\r\n\t * See [[StateDeclaration.resolve]]\r\n\t */\r\n\tvar lazyResolveState = function (trans, state) {\r\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\r\n\t        .subContext(state)\r\n\t        .resolvePath(\"LAZY\", trans)\r\n\t        .then(common_1.noop);\r\n\t};\r\n\texports.registerLazyResolveState = function (transitionService) {\r\n\t    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\r\n\t};\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/**\r\n\t * A [[TransitionHookFn]] which waits for the views to load\r\n\t *\r\n\t * Registered using `transitionService.onStart({}, loadEnteringViews);`\r\n\t *\r\n\t * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\r\n\t * In angular 1, this includes loading the templates.\r\n\t */\r\n\tvar loadEnteringViews = function (transition) {\r\n\t    var enteringViews = transition.views(\"entering\");\r\n\t    if (!enteringViews.length)\r\n\t        return;\r\n\t    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\r\n\t};\r\n\texports.registerLoadEnteringViews = function (transitionService) {\r\n\t    return transitionService.onStart({}, loadEnteringViews);\r\n\t};\r\n\t/**\r\n\t * A [[TransitionHookFn]] which activates the new views when a transition is successful.\r\n\t *\r\n\t * Registered using `transitionService.onSuccess({}, activateViews);`\r\n\t *\r\n\t * After a transition is complete, this hook deactivates the old views from the previous state,\r\n\t * and activates the new views from the destination state.\r\n\t *\r\n\t * See [[ViewService]]\r\n\t */\r\n\tvar activateViews = function (transition) {\r\n\t    var enteringViews = transition.views(\"entering\");\r\n\t    var exitingViews = transition.views(\"exiting\");\r\n\t    if (!enteringViews.length && !exitingViews.length)\r\n\t        return;\r\n\t    var $view = transition.router.viewService;\r\n\t    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\r\n\t    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\r\n\t    $view.sync();\r\n\t};\r\n\texports.registerActivateViews = function (transitionService) {\r\n\t    return transitionService.onSuccess({}, activateViews);\r\n\t};\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * A [[TransitionHookFn]] which updates the URL after a successful transition\r\n\t *\r\n\t * Registered using `transitionService.onSuccess({}, updateUrl);`\r\n\t */\r\n\tvar updateUrl = function (transition) {\r\n\t    var options = transition.options();\r\n\t    var $state = transition.router.stateService;\r\n\t    var $urlRouter = transition.router.urlRouter;\r\n\t    // Dont update the url in these situations:\r\n\t    // The transition was triggered by a URL sync (options.source === 'url')\r\n\t    // The user doesn't want the url to update (options.location === false)\r\n\t    // The destination state, and all parents have no navigable url\r\n\t    if (options.source !== 'url' && options.location && $state.$current.navigable) {\r\n\t        var urlOptions = { replace: options.location === 'replace' };\r\n\t        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\r\n\t    }\r\n\t    $urlRouter.update(true);\r\n\t};\r\n\texports.registerUpdateUrl = function (transitionService) {\r\n\t    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\r\n\t};\r\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module hooks */ /** */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\t/**\r\n\t * A [[TransitionHookFn]] that redirects to a different state or params\r\n\t *\r\n\t * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\r\n\t *\r\n\t * See [[StateDeclaration.redirectTo]]\r\n\t */\r\n\tvar redirectToHook = function (trans) {\r\n\t    var redirect = trans.to().redirectTo;\r\n\t    if (!redirect)\r\n\t        return;\r\n\t    function handleResult(result) {\r\n\t        var $state = trans.router.stateService;\r\n\t        if (result instanceof targetState_1.TargetState)\r\n\t            return result;\r\n\t        if (predicates_1.isString(result))\r\n\t            return $state.target(result, trans.params(), trans.options());\r\n\t        if (result['state'] || result['params'])\r\n\t            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\r\n\t    }\r\n\t    if (predicates_1.isFunction(redirect)) {\r\n\t        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\r\n\t    }\r\n\t    return handleResult(redirect);\r\n\t};\r\n\texports.registerRedirectToHook = function (transitionService) {\r\n\t    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\r\n\t};\r\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * A factory which creates an onEnter, onExit or onRetain transition hook function\r\n\t *\r\n\t * The returned function invokes the (for instance) state.onEnter hook when the\r\n\t * state is being entered.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\tfunction makeEnterExitRetainHook(hookName) {\r\n\t    return function (transition, state) {\r\n\t        var hookFn = state[hookName];\r\n\t        return hookFn(transition, state);\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onExit\r\n\t *\r\n\t * When the state is being exited, the state's .onExit function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onExit]]\r\n\t */\r\n\tvar onExitHook = makeEnterExitRetainHook('onExit');\r\n\texports.registerOnExitHook = function (transitionService) {\r\n\t    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\r\n\t};\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onRetain\r\n\t *\r\n\t * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onRetain]]\r\n\t */\r\n\tvar onRetainHook = makeEnterExitRetainHook('onRetain');\r\n\texports.registerOnRetainHook = function (transitionService) {\r\n\t    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\r\n\t};\r\n\t/**\r\n\t * The [[TransitionStateHookFn]] for onEnter\r\n\t *\r\n\t * When the state is being entered, the state's .onEnter function is invoked.\r\n\t *\r\n\t * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\r\n\t *\r\n\t * See: [[IHookRegistry.onEnter]]\r\n\t */\r\n\tvar onEnterHook = makeEnterExitRetainHook('onEnter');\r\n\texports.registerOnEnterHook = function (transitionService) {\r\n\t    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\r\n\t};\r\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\t/**\r\n\t * A [[TransitionHookFn]] that lazy loads a state tree.\r\n\t *\r\n\t * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\r\n\t * - Invoke the `lazyLoad` function\r\n\t *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\r\n\t * - Wait for the promise to resolve\r\n\t * - Deregister the original state \"abc\"\r\n\t *   - The original state definition is a placeholder for the lazy loaded states\r\n\t * - Register the new states\r\n\t * - Retry the transition\r\n\t *\r\n\t * See [[StateDeclaration.lazyLoad]]\r\n\t */\r\n\tvar lazyLoadHook = function (transition) {\r\n\t    var toState = transition.to();\r\n\t    var registry = transition.router.stateRegistry;\r\n\t    function retryOriginalTransition() {\r\n\t        if (transition.options().source === 'url') {\r\n\t            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();\r\n\t            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };\r\n\t            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {\r\n\t                var state = _a[0], params = _a[1];\r\n\t                return !!params;\r\n\t            });\r\n\t            if (matches.length) {\r\n\t                var _a = matches[0], state = _a[0], params = _a[1];\r\n\t                return transition.router.stateService.target(state, params, transition.options());\r\n\t            }\r\n\t            transition.router.urlRouter.sync();\r\n\t        }\r\n\t        // The original transition was not triggered via url sync\r\n\t        // The lazy state should be loaded now, so re-try the original transition\r\n\t        var orig = transition.targetState();\r\n\t        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\r\n\t    }\r\n\t    /**\r\n\t     * Replace the placeholder state with the newly loaded states from the NgModule.\r\n\t     */\r\n\t    function updateStateRegistry(result) {\r\n\t        // deregister placeholder state\r\n\t        registry.deregister(transition.$to());\r\n\t        if (result && Array.isArray(result.states)) {\r\n\t            result.states.forEach(function (state) { return registry.register(state); });\r\n\t        }\r\n\t    }\r\n\t    var hook = toState.lazyLoad;\r\n\t    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\r\n\t    var promise = hook['_promise'];\r\n\t    if (!promise) {\r\n\t        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\r\n\t        var cleanup = function () { return delete hook['_promise']; };\r\n\t        promise.then(cleanup, cleanup);\r\n\t    }\r\n\t    return promise.then(retryOriginalTransition);\r\n\t};\r\n\texports.registerLazyLoadHook = function (transitionService) {\r\n\t    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\r\n\t};\r\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module view */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\t/**\r\n\t * The View service\r\n\t */\r\n\tvar ViewService = (function () {\r\n\t    function ViewService() {\r\n\t        var _this = this;\r\n\t        this.uiViews = [];\r\n\t        this.viewConfigs = [];\r\n\t        this._viewConfigFactories = {};\r\n\t        this.sync = function () {\r\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\r\n\t            /**\r\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\r\n\t             *\r\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\r\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\r\n\t             *\r\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\r\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\r\n\t             *\r\n\t             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\r\n\t             *\r\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\r\n\t             * - the ui-view's name matches the ViewConfig's target name\r\n\t             * - the ui-view's context matches the ViewConfig's anchor\r\n\t             *\r\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\r\n\t             * - There exists a parent ui-view where:\r\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\r\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\r\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\r\n\t             *\r\n\t             * Example:\r\n\t             *\r\n\t             * DOM:\r\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\r\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\r\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\r\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\r\n\t             *       </div>\r\n\t             *     </div>\r\n\t             *   </div>\r\n\t             * </div>\r\n\t             *\r\n\t             * uiViews: [\r\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\r\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\r\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\r\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\r\n\t             * ]\r\n\t             *\r\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\r\n\t             *\r\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\r\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\r\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\r\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\r\n\t             *\r\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\r\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\r\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\r\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\r\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\r\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\r\n\t             *   the tail of the ui-view's fqn \"default.bar\"\r\n\t             */\r\n\t            var matches = function (uiView) { return function (viewConfig) {\r\n\t                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\r\n\t                if (uiView.$type !== viewConfig.viewDecl.$type)\r\n\t                    return false;\r\n\t                // Split names apart from both viewConfig and uiView into segments\r\n\t                var vc = viewConfig.viewDecl;\r\n\t                var vcSegments = vc.$uiViewName.split(\".\");\r\n\t                var uivSegments = uiView.fqn.split(\".\");\r\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\r\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\r\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\r\n\t                    return false;\r\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\r\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\r\n\t                var negOffset = (1 - vcSegments.length) || undefined;\r\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\r\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\r\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\r\n\t            }; };\r\n\t            // Return the number of dots in the fully qualified name\r\n\t            function uiViewDepth(uiView) {\r\n\t                return uiView.fqn.split(\".\").length;\r\n\t            }\r\n\t            // Return the ViewConfig's context's depth in the context tree.\r\n\t            function viewConfigDepth(config) {\r\n\t                var context = config.viewDecl.$context, count = 0;\r\n\t                while (++count && context.parent)\r\n\t                    context = context.parent;\r\n\t                return count;\r\n\t            }\r\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\r\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\r\n\t            var matchingConfigPair = function (uiView) {\r\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\r\n\t                if (matchingConfigs.length > 1)\r\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\r\n\t                return [uiView, matchingConfigs[0]];\r\n\t            };\r\n\t            var configureUIView = function (_a) {\r\n\t                var uiView = _a[0], viewConfig = _a[1];\r\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\r\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\r\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\r\n\t                    uiView.configUpdated(viewConfig);\r\n\t            };\r\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\r\n\t        };\r\n\t    }\r\n\t    ViewService.prototype.rootContext = function (context) {\r\n\t        return this._rootContext = context || this._rootContext;\r\n\t    };\r\n\t    ;\r\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\r\n\t        this._viewConfigFactories[viewType] = factory;\r\n\t    };\r\n\t    ViewService.prototype.createViewConfig = function (path, decl) {\r\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\r\n\t        if (!cfgFactory)\r\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\r\n\t        var cfgs = cfgFactory(path, decl);\r\n\t        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\r\n\t    };\r\n\t    /**\r\n\t     * De-registers a ViewConfig.\r\n\t     *\r\n\t     * @param viewConfig The ViewConfig view to deregister.\r\n\t     */\r\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\r\n\t        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\r\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\r\n\t    };\r\n\t    ;\r\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\r\n\t        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\r\n\t        this.viewConfigs.push(viewConfig);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\r\n\t     * be updated with a template, controller, and local variables.\r\n\t     *\r\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\r\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\r\n\t     *                   of the view.\r\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\r\n\t     */\r\n\t    ViewService.prototype.registerUIView = function (uiView) {\r\n\t        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\r\n\t        var uiViews = this.uiViews;\r\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\r\n\t        if (uiViews.filter(fqnMatches).length)\r\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\r\n\t        uiViews.push(uiView);\r\n\t        this.sync();\r\n\t        return function () {\r\n\t            var idx = uiViews.indexOf(uiView);\r\n\t            if (idx === -1) {\r\n\t                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\r\n\t                return;\r\n\t            }\r\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\r\n\t            common_1.removeFrom(uiViews)(uiView);\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\r\n\t     *\r\n\t     * @return {Array} Returns an array of fully-qualified view names.\r\n\t     */\r\n\t    ViewService.prototype.available = function () {\r\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\r\n\t    };\r\n\t    /**\r\n\t     * Returns the list of views on the page containing loaded content.\r\n\t     *\r\n\t     * @return {Array} Returns an array of fully-qualified view names.\r\n\t     */\r\n\t    ViewService.prototype.active = function () {\r\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\r\n\t    };\r\n\t    /**\r\n\t     * Normalizes a view's name from a state.views configuration block.\r\n\t     *\r\n\t     * @param context the context object (state declaration) that the view belongs to\r\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\r\n\t     *\r\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\r\n\t     */\r\n\t    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\r\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\r\n\t        // TODO: Validate incoming view name with a regexp to allow:\r\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\r\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\r\n\t        var viewAtContext = rawViewName.split(\"@\");\r\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\r\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\r\n\t        // Handle relative view-name sugar syntax.\r\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\r\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\r\n\t        if (relativeViewNameSugar) {\r\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\r\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\r\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\r\n\t        }\r\n\t        if (uiViewName.charAt(0) === '!') {\r\n\t            uiViewName = uiViewName.substr(1);\r\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\r\n\t        }\r\n\t        // handle parent relative targeting \"^.^.^\"\r\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\r\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\r\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\r\n\t            uiViewContextAnchor = anchor.name;\r\n\t        }\r\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\r\n\t    };\r\n\t    return ViewService;\r\n\t}());\r\n\texports.ViewService = ViewService;\r\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar stateMatcher_1 = __webpack_require__(39);\r\n\tvar stateBuilder_1 = __webpack_require__(40);\r\n\tvar stateQueueManager_1 = __webpack_require__(41);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateRegistry = (function () {\r\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\r\n\t        this.urlRouterProvider = urlRouterProvider;\r\n\t        this.states = {};\r\n\t        this.listeners = [];\r\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\r\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\r\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\r\n\t        var rootStateDef = {\r\n\t            name: '',\r\n\t            url: '^',\r\n\t            views: null,\r\n\t            params: {\r\n\t                '#': { value: null, type: 'hash', dynamic: true }\r\n\t            },\r\n\t            abstract: true\r\n\t        };\r\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\r\n\t        _root.navigable = null;\r\n\t    }\r\n\t    /**\r\n\t     * Listen for a State Registry events\r\n\t     *\r\n\t     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * let allStates = registry.get();\r\n\t     *\r\n\t     * // Later, invoke deregisterFn() to remove the listener\r\n\t     * let deregisterFn = registry.onStatesChanged((event, states) => {\r\n\t     *   switch(event) {\r\n\t     *     case: 'registered':\r\n\t     *       states.forEach(state => allStates.push(state));\r\n\t     *       break;\r\n\t     *     case: 'deregistered':\r\n\t     *       states.forEach(state => {\r\n\t     *         let idx = allStates.indexOf(state);\r\n\t     *         if (idx !== -1) allStates.splice(idx, 1);\r\n\t     *       });\r\n\t     *       break;\r\n\t     *   }\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param listener a callback function invoked when the registered states changes.\r\n\t     *        The function receives two parameters, `event` and `state`.\r\n\t     *        See [[StateRegistryListener]]\r\n\t     * @return a function that deregisters the listener\r\n\t     */\r\n\t    StateRegistry.prototype.onStatesChanged = function (listener) {\r\n\t        this.listeners.push(listener);\r\n\t        return function deregisterListener() {\r\n\t            common_1.removeFrom(this.listeners)(listener);\r\n\t        }.bind(this);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the implicit root state\r\n\t     *\r\n\t     * Gets the root of the state tree.\r\n\t     * The root state is implicitly created by UI-Router.\r\n\t     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\r\n\t     *\r\n\t     * @return the root [[State]]\r\n\t     */\r\n\t    StateRegistry.prototype.root = function () {\r\n\t        return this._root;\r\n\t    };\r\n\t    /**\r\n\t     * Adds a state to the registry\r\n\t     *\r\n\t     * Registers a [[StateDefinition]] or queues it for registration.\r\n\t     *\r\n\t     * Note: a state will be queued if the state's parent isn't yet registered.\r\n\t     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\r\n\t     *\r\n\t     * @param stateDefinition the definition of the state to register.\r\n\t     * @returns the internal [[State]] object.\r\n\t     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\r\n\t     *          If the state was only queued, then the object is not fully built.\r\n\t     */\r\n\t    StateRegistry.prototype.register = function (stateDefinition) {\r\n\t        return this.stateQueue.register(stateDefinition);\r\n\t    };\r\n\t    /** @hidden */\r\n\t    StateRegistry.prototype._deregisterTree = function (state) {\r\n\t        var _this = this;\r\n\t        var all = this.get().map(function (s) { return s.$$state(); });\r\n\t        var getChildren = function (states) {\r\n\t            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\r\n\t            return children.length === 0 ? children : children.concat(getChildren(children));\r\n\t        };\r\n\t        var children = getChildren([state]);\r\n\t        var deregistered = [state].concat(children).reverse();\r\n\t        deregistered.forEach(function (state) {\r\n\t            _this.urlRouterProvider.removeRule(state._urlRule);\r\n\t            delete _this.states[state.name];\r\n\t        });\r\n\t        return deregistered;\r\n\t    };\r\n\t    /**\r\n\t     * Removes a state from the registry\r\n\t     *\r\n\t     * This removes a state from the registry.\r\n\t     * If the state has children, they are are also removed from the registry.\r\n\t     *\r\n\t     * @param stateOrName the state's name or object representation\r\n\t     * @returns {State[]} a list of removed states\r\n\t     */\r\n\t    StateRegistry.prototype.deregister = function (stateOrName) {\r\n\t        var _state = this.get(stateOrName);\r\n\t        if (!_state)\r\n\t            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\r\n\t        var deregisteredStates = this._deregisterTree(_state.$$state());\r\n\t        this.listeners.forEach(function (listener) { return listener(\"deregistered\", deregisteredStates.map(function (s) { return s.self; })); });\r\n\t        return deregisteredStates;\r\n\t    };\r\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\r\n\t        var _this = this;\r\n\t        if (arguments.length === 0)\r\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\r\n\t        var found = this.matcher.find(stateOrName, base);\r\n\t        return found && found.self || null;\r\n\t    };\r\n\t    StateRegistry.prototype.decorator = function (name, func) {\r\n\t        return this.builder.builder(name, func);\r\n\t    };\r\n\t    return StateRegistry;\r\n\t}());\r\n\texports.StateRegistry = StateRegistry;\r\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateMatcher = (function () {\r\n\t    function StateMatcher(_states) {\r\n\t        this._states = _states;\r\n\t    }\r\n\t    StateMatcher.prototype.isRelative = function (stateName) {\r\n\t        stateName = stateName || \"\";\r\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\r\n\t    };\r\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\r\n\t        if (!stateOrName && stateOrName !== \"\")\r\n\t            return undefined;\r\n\t        var isStr = predicates_1.isString(stateOrName);\r\n\t        var name = isStr ? stateOrName : stateOrName.name;\r\n\t        if (this.isRelative(name))\r\n\t            name = this.resolvePath(name, base);\r\n\t        var state = this._states[name];\r\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\r\n\t            return state;\r\n\t        }\r\n\t        else if (isStr) {\r\n\t            var matches = common_1.values(this._states)\r\n\t                .filter(function (state) { return new glob_1.Glob(state.name).matches(name); });\r\n\t            if (matches.length > 1) {\r\n\t                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\r\n\t            }\r\n\t            return matches[0];\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\r\n\t        if (!base)\r\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\r\n\t        var baseState = this.find(base);\r\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\r\n\t        for (; i < pathLength; i++) {\r\n\t            if (splitName[i] === \"\" && i === 0) {\r\n\t                current = baseState;\r\n\t                continue;\r\n\t            }\r\n\t            if (splitName[i] === \"^\") {\r\n\t                if (!current.parent)\r\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\r\n\t                current = current.parent;\r\n\t                continue;\r\n\t            }\r\n\t            break;\r\n\t        }\r\n\t        var relName = splitName.slice(i).join(\".\");\r\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\r\n\t    };\r\n\t    return StateMatcher;\r\n\t}());\r\n\texports.StateMatcher = StateMatcher;\r\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar parseUrl = function (url) {\r\n\t    if (!predicates_1.isString(url))\r\n\t        return false;\r\n\t    var root = url.charAt(0) === '^';\r\n\t    return { val: root ? url.substring(1) : url, root: root };\r\n\t};\r\n\tfunction nameBuilder(state) {\r\n\t    if (state.lazyLoad)\r\n\t        state.name = state.self.name + \".**\";\r\n\t    return state.name;\r\n\t}\r\n\tfunction selfBuilder(state) {\r\n\t    state.self.$$state = function () { return state; };\r\n\t    return state.self;\r\n\t}\r\n\tfunction dataBuilder(state) {\r\n\t    if (state.parent && state.parent.data) {\r\n\t        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\r\n\t    }\r\n\t    return state.data;\r\n\t}\r\n\tvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\r\n\t    return function urlBuilder(state) {\r\n\t        var stateDec = state;\r\n\t        if (stateDec && stateDec.url && stateDec.lazyLoad) {\r\n\t            stateDec.url += \"{remainder:any}\"; // match any path (.*)\r\n\t        }\r\n\t        var parsed = parseUrl(stateDec.url), parent = state.parent;\r\n\t        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\r\n\t            params: state.params || {},\r\n\t            paramMap: function (paramConfig, isSearch) {\r\n\t                if (stateDec.reloadOnSearch === false && isSearch)\r\n\t                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\r\n\t                return paramConfig;\r\n\t            }\r\n\t        });\r\n\t        if (!url)\r\n\t            return null;\r\n\t        if (!$urlMatcherFactoryProvider.isMatcher(url))\r\n\t            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\r\n\t        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\r\n\t    };\r\n\t};\r\n\tvar getNavigableBuilder = function (isRoot) {\r\n\t    return function navigableBuilder(state) {\r\n\t        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\r\n\t    };\r\n\t};\r\n\tvar getParamsBuilder = function (paramTypes) {\r\n\t    return function paramsBuilder(state) {\r\n\t        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };\r\n\t        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\r\n\t        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\r\n\t        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\r\n\t    };\r\n\t};\r\n\tfunction pathBuilder(state) {\r\n\t    return state.parent ? state.parent.path.concat(state) : [state];\r\n\t}\r\n\tfunction includesBuilder(state) {\r\n\t    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\r\n\t    includes[state.name] = true;\r\n\t    return includes;\r\n\t}\r\n\t/**\r\n\t * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\r\n\t *\r\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\r\n\t * validates the `resolve` property and converts it to a [[Resolvable]] array.\r\n\t *\r\n\t * resolve: input value can be:\r\n\t *\r\n\t * {\r\n\t *   // analyzed but not injected\r\n\t *   myFooResolve: function() { return \"myFooData\"; },\r\n\t *\r\n\t *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\r\n\t *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\r\n\t *\r\n\t *   // Array split; \"DependencyName\" dep as string\r\n\t *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\r\n\t *\r\n\t *   // Array split; DependencyType dep as token (compared using ===)\r\n\t *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\r\n\t *\r\n\t *   // val.$inject used as deps\r\n\t *   // where:\r\n\t *   //     corgeResolve.$inject = [\"DependencyName\"];\r\n\t *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\r\n\t *   // then \"DependencyName\" dep as string\r\n\t *   myCorgeResolve: corgeResolve,\r\n\t *\r\n\t *  // inject service by name\r\n\t *  // When a string is found, desugar creating a resolve that injects the named service\r\n\t *   myGraultResolve: \"SomeService\"\r\n\t * }\r\n\t *\r\n\t * or:\r\n\t *\r\n\t * [\r\n\t *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\r\n\t *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\r\n\t *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\r\n\t * ]\r\n\t */\r\n\tfunction resolvablesBuilder(state) {\r\n\t    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\r\n\t    var objects2Tuples = function (resolveObj, resolvePolicies) {\r\n\t        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });\r\n\t    };\r\n\t    /** fetch DI annotations from a function or ng1-style array */\r\n\t    var annotate = function (fn) {\r\n\t        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);\r\n\t    };\r\n\t    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\r\n\t    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\r\n\t    /** true if the object looks like a provide literal, or a ng2 Provider */\r\n\t    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\r\n\t    /** true if the object looks like a tuple from obj2Tuples */\r\n\t    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\r\n\t    /** extracts the token from a Provider or provide literal */\r\n\t    var token = function (p) { return p.provide || p.token; };\r\n\t    /** Given a literal resolve or provider object, returns a Resolvable */\r\n\t    var literal2Resolvable = hof_1.pattern([\r\n\t        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\r\n\t        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\r\n\t        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\r\n\t        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\r\n\t        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],\r\n\t    ]);\r\n\t    var tuple2Resolvable = hof_1.pattern([\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\r\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\r\n\t    ]);\r\n\t    var item2Resolvable = hof_1.pattern([\r\n\t        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\r\n\t        [isResolveLiteral, literal2Resolvable],\r\n\t        [isLikeNg2Provider, literal2Resolvable],\r\n\t        [isTupleFromObj, tuple2Resolvable],\r\n\t        [hof_1.val(true), function (obj) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(obj)); }]\r\n\t    ]);\r\n\t    // If resolveBlock is already an array, use it as-is.\r\n\t    // Otherwise, assume it's an object and convert to an Array of tuples\r\n\t    var decl = state.resolve;\r\n\t    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\r\n\t    return items.map(item2Resolvable);\r\n\t}\r\n\texports.resolvablesBuilder = resolvablesBuilder;\r\n\t/**\r\n\t * @internalapi A internal global service\r\n\t *\r\n\t * StateBuilder is a factory for the internal [[State]] objects.\r\n\t *\r\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\r\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\r\n\t * [[State]] object, which has an API and is used internally.\r\n\t *\r\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\r\n\t * using the [[builder]] method.\r\n\t */\r\n\tvar StateBuilder = (function () {\r\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\r\n\t        this.matcher = matcher;\r\n\t        var self = this;\r\n\t        var root = function () { return matcher.find(\"\"); };\r\n\t        var isRoot = function (state) { return state.name === \"\"; };\r\n\t        function parentBuilder(state) {\r\n\t            if (isRoot(state))\r\n\t                return null;\r\n\t            return matcher.find(self.parentName(state)) || root();\r\n\t        }\r\n\t        this.builders = {\r\n\t            name: [nameBuilder],\r\n\t            self: [selfBuilder],\r\n\t            parent: [parentBuilder],\r\n\t            data: [dataBuilder],\r\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\r\n\t            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\r\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\r\n\t            navigable: [getNavigableBuilder(isRoot)],\r\n\t            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],\r\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\r\n\t            // e.g., src/ng1/statebuilders/views.ts\r\n\t            views: [],\r\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\r\n\t            path: [pathBuilder],\r\n\t            // Speed up $state.includes() as it's used a lot\r\n\t            includes: [includesBuilder],\r\n\t            resolvables: [resolvablesBuilder]\r\n\t        };\r\n\t    }\r\n\t    /**\r\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\r\n\t     * More than one BuilderFunction can be registered for a given property.\r\n\t     *\r\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\r\n\t     *\r\n\t     * @param name The name of the State property being registered for.\r\n\t     * @param fn The BuilderFunction which will be used to build the State property\r\n\t     * @returns a function which deregisters the BuilderFunction\r\n\t     */\r\n\t    StateBuilder.prototype.builder = function (name, fn) {\r\n\t        var builders = this.builders;\r\n\t        var array = builders[name] || [];\r\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\r\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\r\n\t            return array.length > 1 ? array : array[0];\r\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\r\n\t            return;\r\n\t        builders[name] = array;\r\n\t        builders[name].push(fn);\r\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\r\n\t    };\r\n\t    /**\r\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\r\n\t     * properties and API built.\r\n\t     *\r\n\t     * @param state an uninitialized State object\r\n\t     * @returns the built State object\r\n\t     */\r\n\t    StateBuilder.prototype.build = function (state) {\r\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\r\n\t        var parent = this.parentName(state);\r\n\t        if (parent && !matcher.find(parent))\r\n\t            return null;\r\n\t        for (var key in builders) {\r\n\t            if (!builders.hasOwnProperty(key))\r\n\t                continue;\r\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\r\n\t            state[key] = chain(state);\r\n\t        }\r\n\t        return state;\r\n\t    };\r\n\t    StateBuilder.prototype.parentName = function (state) {\r\n\t        var name = state.name || \"\";\r\n\t        var segments = name.split('.');\r\n\t        if (segments.length > 1) {\r\n\t            if (state.parent) {\r\n\t                throw new Error(\"States that specify the 'parent:' property should not have a '.' in their name (\" + name + \")\");\r\n\t            }\r\n\t            var lastSegment = segments.pop();\r\n\t            if (lastSegment === '**')\r\n\t                segments.pop();\r\n\t            return segments.join(\".\");\r\n\t        }\r\n\t        if (!state.parent)\r\n\t            return \"\";\r\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\r\n\t    };\r\n\t    StateBuilder.prototype.name = function (state) {\r\n\t        var name = state.name;\r\n\t        if (name.indexOf('.') !== -1 || !state.parent)\r\n\t            return name;\r\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\r\n\t        return parentName ? parentName + \".\" + name : name;\r\n\t    };\r\n\t    return StateBuilder;\r\n\t}());\r\n\texports.StateBuilder = StateBuilder;\r\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar stateObject_1 = __webpack_require__(42);\r\n\tvar StateQueueManager = (function () {\r\n\t    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {\r\n\t        this.states = states;\r\n\t        this.builder = builder;\r\n\t        this.$urlRouterProvider = $urlRouterProvider;\r\n\t        this.listeners = listeners;\r\n\t        this.queue = [];\r\n\t    }\r\n\t    StateQueueManager.prototype.register = function (config) {\r\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\r\n\t        // Wrap a new object around the state so we can store our private details easily.\r\n\t        // @TODO: state = new State(extend({}, config, { ... }))\r\n\t        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\r\n\t            self: config,\r\n\t            resolve: config.resolve || [],\r\n\t            toString: function () { return config.name; }\r\n\t        }));\r\n\t        if (!predicates_1.isString(state.name))\r\n\t            throw new Error(\"State must have a valid name\");\r\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\r\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\r\n\t        queue.push(state);\r\n\t        if (this.$state) {\r\n\t            this.flush($state);\r\n\t        }\r\n\t        return state;\r\n\t    };\r\n\t    StateQueueManager.prototype.flush = function ($state) {\r\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\r\n\t        var registered = [], // states that got registered\r\n\t        orphans = [], // states that dodn't yet have a parent registered\r\n\t        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\r\n\t        while (queue.length > 0) {\r\n\t            var state = queue.shift();\r\n\t            var result = builder.build(state);\r\n\t            var orphanIdx = orphans.indexOf(state);\r\n\t            if (result) {\r\n\t                if (states.hasOwnProperty(state.name))\r\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\r\n\t                states[state.name] = state;\r\n\t                this.attachRoute($state, state);\r\n\t                if (orphanIdx >= 0)\r\n\t                    orphans.splice(orphanIdx, 1);\r\n\t                registered.push(state);\r\n\t                continue;\r\n\t            }\r\n\t            var prev = previousQueueLength[state.name];\r\n\t            previousQueueLength[state.name] = queue.length;\r\n\t            if (orphanIdx >= 0 && prev === queue.length) {\r\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\r\n\t                // throw new Error(`Cannot register orphaned state '${state.name}'`);\r\n\t                queue.push(state);\r\n\t                return states;\r\n\t            }\r\n\t            else if (orphanIdx < 0) {\r\n\t                orphans.push(state);\r\n\t            }\r\n\t            queue.push(state);\r\n\t        }\r\n\t        if (registered.length) {\r\n\t            this.listeners.forEach(function (listener) { return listener(\"registered\", registered.map(function (s) { return s.self; })); });\r\n\t        }\r\n\t        return states;\r\n\t    };\r\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\r\n\t        this.$state = $state;\r\n\t        this.flush($state);\r\n\t    };\r\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\r\n\t        var $urlRouterProvider = this.$urlRouterProvider;\r\n\t        if (state.abstract || !state.url)\r\n\t            return;\r\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\r\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\r\n\t                    $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\r\n\t                }\r\n\t            }], function (rule) { return state._urlRule = rule; });\r\n\t    };\r\n\t    return StateQueueManager;\r\n\t}());\r\n\texports.StateQueueManager = StateQueueManager;\r\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.type:State\r\n\t *\r\n\t * @description\r\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\r\n\t *\r\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\r\n\t *        values, as well as values from `StateBuilder`.\r\n\t *\r\n\t * @returns {Object}  Returns a new `State` object.\r\n\t */\r\n\tvar State = (function () {\r\n\t    function State(config) {\r\n\t        common_1.extend(this, config);\r\n\t        // Object.freeze(this);\r\n\t    }\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#is\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Compares the identity of the state against the passed value, which is either an object\r\n\t     * reference to the actual `State` instance, the original definition object passed to\r\n\t     * `$stateProvider.state()`, or the fully-qualified name.\r\n\t     *\r\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\r\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\r\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\r\n\t     */\r\n\t    State.prototype.is = function (ref) {\r\n\t        return this === ref || this.self === ref || this.fqn() === ref;\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#fqn\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\r\n\t     *\r\n\t     * @returns {string} Returns a dot-separated name of the state.\r\n\t     */\r\n\t    State.prototype.fqn = function () {\r\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\r\n\t            return this.name;\r\n\t        var name = this.parent.fqn();\r\n\t        return name ? name + \".\" + this.name : this.name;\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.type:State#root\r\n\t     * @methodOf ui.router.state.type:State\r\n\t     *\r\n\t     * @description\r\n\t     * Returns the root node of this state's tree.\r\n\t     *\r\n\t     * @returns {State} The root of this state's tree.\r\n\t     */\r\n\t    State.prototype.root = function () {\r\n\t        return this.parent && this.parent.root() || this;\r\n\t    };\r\n\t    State.prototype.parameters = function (opts) {\r\n\t        opts = common_1.defaults(opts, { inherit: true });\r\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\r\n\t        return inherited.concat(common_1.values(this.params));\r\n\t    };\r\n\t    State.prototype.parameter = function (id, opts) {\r\n\t        if (opts === void 0) { opts = {}; }\r\n\t        return (this.url && this.url.parameter(id, opts) ||\r\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\r\n\t            opts.inherit && this.parent && this.parent.parameter(id));\r\n\t    };\r\n\t    State.prototype.toString = function () {\r\n\t        return this.fqn();\r\n\t    };\r\n\t    return State;\r\n\t}());\r\n\texports.State = State;\r\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module state */ /** */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar queue_1 = __webpack_require__(8);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar pathFactory_1 = __webpack_require__(20);\r\n\tvar node_1 = __webpack_require__(21);\r\n\tvar transitionService_1 = __webpack_require__(30);\r\n\tvar rejectFactory_1 = __webpack_require__(10);\r\n\tvar targetState_1 = __webpack_require__(14);\r\n\tvar param_1 = __webpack_require__(22);\r\n\tvar glob_1 = __webpack_require__(7);\r\n\tvar common_2 = __webpack_require__(3);\r\n\tvar common_3 = __webpack_require__(3);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar StateService = (function () {\r\n\t    /** @hidden */\r\n\t    function StateService(router) {\r\n\t        this.router = router;\r\n\t        this.invalidCallbacks = [];\r\n\t        /** @hidden */\r\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\r\n\t            if ($error$ instanceof Error && $error$.stack) {\r\n\t                console.error($error$);\r\n\t                console.error($error$.stack);\r\n\t            }\r\n\t            else if ($error$ instanceof rejectFactory_1.Rejection) {\r\n\t                console.error($error$.toString());\r\n\t                if ($error$.detail && $error$.detail.stack)\r\n\t                    console.error($error$.detail.stack);\r\n\t            }\r\n\t            else {\r\n\t                console.error($error$);\r\n\t            }\r\n\t        };\r\n\t        var getters = ['current', '$current', 'params', 'transition'];\r\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\r\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\r\n\t    }\r\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\r\n\t        get: function () { return this.router.globals.transition; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"params\", {\r\n\t        get: function () { return this.router.globals.params; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"current\", {\r\n\t        get: function () { return this.router.globals.current; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\r\n\t        get: function () { return this.router.globals.$current; },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    /**\r\n\t     * Handler for when [[transitionTo]] is called with an invalid state.\r\n\t     *\r\n\t     * Invokes the [[onInvalid]] callbacks, in natural order.\r\n\t     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\r\n\t     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\r\n\t     *\r\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\r\n\t     */\r\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {\r\n\t        var _this = this;\r\n\t        var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);\r\n\t        var globals = this.router.globals;\r\n\t        var latestThing = function () { return globals.transitionHistory.peekTail(); };\r\n\t        var latest = latestThing();\r\n\t        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());\r\n\t        var injector = new resolveContext_1.ResolveContext(fromPath).injector();\r\n\t        var checkForRedirect = function (result) {\r\n\t            if (!(result instanceof targetState_1.TargetState)) {\r\n\t                return;\r\n\t            }\r\n\t            var target = result;\r\n\t            // Recreate the TargetState, in case the state is now defined.\r\n\t            target = _this.target(target.identifier(), target.params(), target.options());\r\n\t            if (!target.valid())\r\n\t                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\r\n\t            if (latestThing() !== latest)\r\n\t                return rejectFactory_1.Rejection.superseded().toPromise();\r\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\r\n\t        };\r\n\t        function invokeNextCallback() {\r\n\t            var nextCallback = callbackQueue.dequeue();\r\n\t            if (nextCallback === undefined)\r\n\t                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();\r\n\t            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));\r\n\t            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\r\n\t        }\r\n\t        return invokeNextCallback();\r\n\t    };\r\n\t    /**\r\n\t     * Registers an Invalid State handler\r\n\t     *\r\n\t     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\r\n\t     * has been called with an invalid state reference parameter\r\n\t     *\r\n\t     * Example:\r\n\t     * ```js\r\n\t     * stateService.onInvalid(function(to, from, injector) {\r\n\t     *   if (to.name() === 'foo') {\r\n\t     *     let lazyLoader = injector.get('LazyLoadService');\r\n\t     *     return lazyLoader.load('foo')\r\n\t     *         .then(() => stateService.target('foo'));\r\n\t     *   }\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param {function} callback invoked when the toState is invalid\r\n\t     *   This function receives the (invalid) toState, the fromState, and an injector.\r\n\t     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\r\n\t     *   If one is returned, it is treated as a redirect.\r\n\t     *\r\n\t     * @returns a function which deregisters the callback\r\n\t     */\r\n\t    StateService.prototype.onInvalid = function (callback) {\r\n\t        this.invalidCallbacks.push(callback);\r\n\t        return function deregisterListener() {\r\n\t            common_1.removeFrom(this.invalidCallbacks)(callback);\r\n\t        }.bind(this);\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#reload\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\r\n\t     * controllers reinstantiated, and events re-fired.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.reload = function(){\r\n\t     *     $state.reload();\r\n\t     *   }\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * `reload()` is just an alias for:\r\n\t     * <pre>\r\n\t     * $state.transitionTo($state.current, $stateParams, {\r\n\t     *   reload: true, inherit: false, notify: true\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\r\n\t     * //and current state is 'contacts.detail.item'\r\n\t     * let app angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.reload = function(){\r\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\r\n\t     *     $state.reload('contact.detail');\r\n\t     *   }\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition. See\r\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\r\n\t     */\r\n\t    StateService.prototype.reload = function (reloadState) {\r\n\t        return this.transitionTo(this.current, this.params, {\r\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\r\n\t            inherit: false,\r\n\t            notify: false\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#go\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\r\n\t     * `$state.transitionTo` internally but automatically sets options to\r\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\r\n\t     * This allows you to easily use an absolute or relative to path and specify\r\n\t     * only the parameters you'd like to update (while letting unspecified parameters\r\n\t     * inherit from the currently active ancestor states).\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.changeState = function () {\r\n\t     *     $state.go('contact.detail');\r\n\t     *   };\r\n\t     * });\r\n\t     * </pre>\r\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\r\n\t     *\r\n\t     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\r\n\t     *\r\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\r\n\t     * - `$state.go('^')` - will go to a parent state\r\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\r\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\r\n\t     *\r\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\r\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\r\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\r\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\r\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\r\n\t     * will get you all current parameters, etc.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\r\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\r\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\r\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\r\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\r\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition.\r\n\t     *\r\n\t     * Possible success values:\r\n\t     *\r\n\t     * - $state.current\r\n\t     *\r\n\t     * <br/>Possible rejection values:\r\n\t     *\r\n\t     * - 'transition superseded' - when a newer transition has been started after this one\r\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\r\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\r\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\r\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\r\n\t     * - *resolve error* - when an error has occurred with a `resolve`\r\n\t     *\r\n\t     */\r\n\t    StateService.prototype.go = function (to, params, options) {\r\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\r\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\r\n\t        return this.transitionTo(to, params, transOpts);\r\n\t    };\r\n\t    ;\r\n\t    /** Factory method for creating a TargetState */\r\n\t    StateService.prototype.target = function (identifier, params, options) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        // If we're reloading, find the state object to reload from\r\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\r\n\t            throw new Error('Invalid reload state object');\r\n\t        var reg = this.router.stateRegistry;\r\n\t        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\r\n\t        if (options.reload && !options.reloadState)\r\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\r\n\t        var stateDefinition = reg.matcher.find(identifier, options.relative);\r\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#transitionTo\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\r\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * let app = angular.module('app', ['ui.router']);\r\n\t     *\r\n\t     * app.controller('ctrl', function ($scope, $state) {\r\n\t     *   $scope.changeState = function () {\r\n\t     *     $state.transitionTo('contact.detail');\r\n\t     *   };\r\n\t     * });\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} to State name or state object.\r\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\r\n\t     * will populate $stateParams.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\r\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\r\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\r\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\r\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\r\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\r\n\t     *\r\n\t     * @returns {promise} A promise representing the state of the new transition. See\r\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\r\n\t     */\r\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\r\n\t        var _this = this;\r\n\t        if (toParams === void 0) { toParams = {}; }\r\n\t        if (options === void 0) { options = {}; }\r\n\t        var router = this.router;\r\n\t        var globals = router.globals;\r\n\t        var transHistory = globals.transitionHistory;\r\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\r\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\r\n\t        var ref = this.target(to, toParams, options);\r\n\t        var latestSuccess = globals.successfulTransitions.peekTail();\r\n\t        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\r\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\r\n\t        if (!ref.exists())\r\n\t            return this._handleInvalidTargetState(currentPath, ref);\r\n\t        if (!ref.valid())\r\n\t            return common_1.silentRejection(ref.error());\r\n\t        /**\r\n\t         * Special handling for Ignored, Aborted, and Redirected transitions\r\n\t         *\r\n\t         * The semantics for the transition.run() promise and the StateService.transitionTo()\r\n\t         * promise differ. For instance, the run() promise may be rejected because it was\r\n\t         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\r\n\t         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\r\n\t         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\r\n\t         */\r\n\t        var rejectedTransitionHandler = function (transition) { return function (error) {\r\n\t            if (error instanceof rejectFactory_1.Rejection) {\r\n\t                if (error.type === rejectFactory_1.RejectType.IGNORED) {\r\n\t                    // Consider ignored `Transition.run()` as a successful `transitionTo`\r\n\t                    router.urlRouter.update();\r\n\t                    return coreservices_1.services.$q.when(globals.current);\r\n\t                }\r\n\t                var detail = error.detail;\r\n\t                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {\r\n\t                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\r\n\t                    // by returning the promise for the new (redirect) `Transition.run()`.\r\n\t                    var redirect = transition.redirect(detail);\r\n\t                    return redirect.run().catch(rejectedTransitionHandler(redirect));\r\n\t                }\r\n\t                if (error.type === rejectFactory_1.RejectType.ABORTED) {\r\n\t                    router.urlRouter.update();\r\n\t                }\r\n\t            }\r\n\t            var errorHandler = _this.defaultErrorHandler();\r\n\t            errorHandler(error);\r\n\t            return coreservices_1.services.$q.reject(error);\r\n\t        }; };\r\n\t        var transition = this.router.transitionService.create(currentPath, ref);\r\n\t        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\r\n\t        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\r\n\t        // Return a promise for the transition, which also has the transition object on it.\r\n\t        return common_1.extend(transitionToPromise, { transition: transition });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#is\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\r\n\t     * but only checks for the full state name. If params is supplied then it will be\r\n\t     * tested for strict equality against the current active params object, so all params\r\n\t     * must match with none missing and no extras.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item';\r\n\t     *\r\n\t     * // absolute name\r\n\t     * $state.is('contact.details.item'); // returns true\r\n\t     * $state.is(contactDetailItemStateObject); // returns true\r\n\t     *\r\n\t     * // relative name (. and ^), typically from a template\r\n\t     * // E.g. from the 'contacts.details' template\r\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\r\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\r\n\t     * to test against the current active state.\r\n\t     * @param {object=} options An options object.  The options are:\r\n\t     *\r\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\r\n\t     * test relative to `options.relative` state (or name).\r\n\t     *\r\n\t     * @returns {boolean} Returns true if it is the state.\r\n\t     */\r\n\t    StateService.prototype.is = function (stateOrName, params, options) {\r\n\t        options = common_1.defaults(options, { relative: this.$current });\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return undefined;\r\n\t        if (this.$current !== state)\r\n\t            return false;\r\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#includes\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A method to determine if the current active state is equal to or is the child of the\r\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\r\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\r\n\t     *\r\n\t     * @example\r\n\t     * Partial and relative names\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item';\r\n\t     *\r\n\t     * // Using partial names\r\n\t     * $state.includes(\"contacts\"); // returns true\r\n\t     * $state.includes(\"contacts.details\"); // returns true\r\n\t     * $state.includes(\"contacts.details.item\"); // returns true\r\n\t     * $state.includes(\"contacts.list\"); // returns false\r\n\t     * $state.includes(\"about\"); // returns false\r\n\t     *\r\n\t     * // Using relative names (. and ^), typically from a template\r\n\t     * // E.g. from the 'contacts.details' template\r\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\r\n\t     * </pre>\r\n\t     *\r\n\t     * Basic globbing patterns\r\n\t     * <pre>\r\n\t     * $state.$current.name = 'contacts.details.item.url';\r\n\t     *\r\n\t     * $state.includes(\"*.details.*.*\"); // returns true\r\n\t     * $state.includes(\"*.details.**\"); // returns true\r\n\t     * $state.includes(\"**.item.**\"); // returns true\r\n\t     * $state.includes(\"*.details.item.url\"); // returns true\r\n\t     * $state.includes(\"*.details.*.url\"); // returns true\r\n\t     * $state.includes(\"*.details.*\"); // returns false\r\n\t     * $state.includes(\"item.**\"); // returns false\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName A partial name, relative name, glob pattern,\r\n\t     * or state object to be searched for within the current state name.\r\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\r\n\t     * that you'd like to test against the current active state.\r\n\t     * @param {object=} options An options object.  The options are:\r\n\t     *\r\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\r\n\t     * .includes will test relative to `options.relative` state (or name).\r\n\t     *\r\n\t     * @returns {boolean} Returns true if it does include the state\r\n\t     */\r\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\r\n\t        options = common_1.defaults(options, { relative: this.$current });\r\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\r\n\t        if (glob) {\r\n\t            if (!glob.matches(this.$current.name))\r\n\t                return false;\r\n\t            stateOrName = this.$current.name;\r\n\t        }\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return undefined;\r\n\t        if (!predicates_1.isDefined(include[state.name]))\r\n\t            return false;\r\n\t        // @TODO Replace with Param.equals() ?\r\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$state#href\r\n\t     * @methodOf ui.router.state.$state\r\n\t     *\r\n\t     * @description\r\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\r\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\r\n\t     * @param {object=} options Options object. The options are:\r\n\t     *\r\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\r\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\r\n\t     *    ancestor with a valid url).\r\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\r\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\r\n\t     *    defines which state to be relative from.\r\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\r\n\t     *\r\n\t     * @returns {string} compiled state url\r\n\t     */\r\n\t    StateService.prototype.href = function (stateOrName, params, options) {\r\n\t        var defaultHrefOpts = {\r\n\t            lossy: true,\r\n\t            inherit: true,\r\n\t            absolute: false,\r\n\t            relative: this.$current\r\n\t        };\r\n\t        options = common_1.defaults(options, defaultHrefOpts);\r\n\t        params = params || {};\r\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\r\n\t        if (!predicates_1.isDefined(state))\r\n\t            return null;\r\n\t        if (options.inherit)\r\n\t            params = this.params.$inherit(params, this.$current, state);\r\n\t        var nav = (state && options.lossy) ? state.navigable : state;\r\n\t        if (!nav || nav.url === undefined || nav.url === null) {\r\n\t            return null;\r\n\t        }\r\n\t        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\r\n\t            absolute: options.absolute\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Sets or gets the default [[transitionTo]] error handler.\r\n\t     *\r\n\t     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\r\n\t     * This includes errors caused by resolves and transition hooks.\r\n\t     *\r\n\t     * Note:\r\n\t     * This handler does not receive certain Transition rejections.\r\n\t     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\r\n\t     *\r\n\t     * The built-in default error handler logs the error to the console.\r\n\t     *\r\n\t     * You can provide your own custom handler.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * stateService.defaultErrorHandler(function() {\r\n\t     *   // Do not log transitionTo errors\r\n\t     * });\r\n\t     * ```\r\n\t     *\r\n\t     * @param handler a global error handler function\r\n\t     * @returns the current global error handler\r\n\t     */\r\n\t    StateService.prototype.defaultErrorHandler = function (handler) {\r\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\r\n\t    };\r\n\t    StateService.prototype.get = function (stateOrName, base) {\r\n\t        var reg = this.router.stateRegistry;\r\n\t        if (arguments.length === 0)\r\n\t            return reg.get();\r\n\t        return reg.get(stateOrName, base || this.$current);\r\n\t    };\r\n\t    return StateService;\r\n\t}());\r\n\texports.StateService = StateService;\r\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module core */ /** */\r\n\tvar stateParams_1 = __webpack_require__(45);\r\n\tvar queue_1 = __webpack_require__(8);\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * Global mutable state\r\n\t */\r\n\tvar Globals = (function () {\r\n\t    function Globals(transitionService) {\r\n\t        var _this = this;\r\n\t        this.params = new stateParams_1.StateParams();\r\n\t        this.transitionHistory = new queue_1.Queue([], 1);\r\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\r\n\t        var beforeNewTransition = function ($transition$) {\r\n\t            _this.transition = $transition$;\r\n\t            _this.transitionHistory.enqueue($transition$);\r\n\t            var updateGlobalState = function () {\r\n\t                _this.successfulTransitions.enqueue($transition$);\r\n\t                _this.$current = $transition$.$to();\r\n\t                _this.current = _this.$current.self;\r\n\t                common_1.copy($transition$.params(), _this.params);\r\n\t            };\r\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\r\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\r\n\t                _this.transition = null; };\r\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\r\n\t        };\r\n\t        transitionService.onBefore({}, beforeNewTransition);\r\n\t    }\r\n\t    return Globals;\r\n\t}());\r\n\texports.Globals = Globals;\r\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module params */ /** for typedoc */\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar StateParams = (function () {\r\n\t    function StateParams(params) {\r\n\t        if (params === void 0) { params = {}; }\r\n\t        common_1.extend(this, params);\r\n\t    }\r\n\t    /**\r\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\r\n\t     * current state and a given destination state.\r\n\t     *\r\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\r\n\t     * @param {Object} $current Internal definition of object representing the current state.\r\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\r\n\t     */\r\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\r\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\r\n\t        for (var i in parents) {\r\n\t            if (!parents[i] || !parents[i].params)\r\n\t                continue;\r\n\t            parentParams = Object.keys(parents[i].params);\r\n\t            if (!parentParams.length)\r\n\t                continue;\r\n\t            for (var j in parentParams) {\r\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\r\n\t                    continue;\r\n\t                inheritList.push(parentParams[j]);\r\n\t                inherited[parentParams[j]] = this[parentParams[j]];\r\n\t            }\r\n\t        }\r\n\t        return common_1.extend({}, inherited, newParams);\r\n\t    };\r\n\t    ;\r\n\t    return StateParams;\r\n\t}());\r\n\texports.StateParams = StateParams;\r\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * This module contains code for State Parameters.\r\n\t *\r\n\t * See [[ParamDeclaration]]\r\n\t * @module params\r\n\t * @preferred doc\r\n\t */\r\n\t/** for typedoc */\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(28));\r\n\t__export(__webpack_require__(45));\r\n\t__export(__webpack_require__(24));\r\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module path */ /** for typedoc */\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(20));\r\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module resolve */ /** for typedoc */\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(17));\r\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module state */ /** for typedoc */\r\n\t__export(__webpack_require__(40));\r\n\t__export(__webpack_require__(42));\r\n\t__export(__webpack_require__(39));\r\n\t__export(__webpack_require__(41));\r\n\t__export(__webpack_require__(38));\r\n\t__export(__webpack_require__(43));\r\n\t__export(__webpack_require__(14));\r\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/**\r\n\t * This module contains APIs related to a Transition.\r\n\t *\r\n\t * See [[Transition]], [[$transitions]]\r\n\t *\r\n\t * @module transition\r\n\t * @preferred\r\n\t */\r\n\t/** for typedoc */\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(10));\r\n\t__export(__webpack_require__(11));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(30));\r\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module url */ /** for typedoc */\r\n\t__export(__webpack_require__(27));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(29));\r\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t/** @module view */ /** for typedoc */\r\n\t__export(__webpack_require__(37));\r\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * # UI-Router for Angular 1\r\n\t *\r\n\t * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\r\n\t * - Also registers some services with the angular 1 injector.\r\n\t * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\r\n\t *\r\n\t * @module ng1\r\n\t * @preferred\r\n\t */\r\n\t\"use strict\";\r\n\t/** for typedoc */\r\n\tvar router_1 = __webpack_require__(25);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar resolveService_1 = __webpack_require__(54);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar views_1 = __webpack_require__(55);\r\n\tvar templateFactory_1 = __webpack_require__(56);\r\n\tvar stateProvider_1 = __webpack_require__(58);\r\n\tvar onEnterExitRetain_1 = __webpack_require__(59);\r\n\tvar angular = __webpack_require__(57);\r\n\t/** @hidden */\r\n\tvar app = angular.module(\"ui.router.angular1\", []);\r\n\t/**\r\n\t * @ngdoc overview\r\n\t * @name ui.router.util\r\n\t *\r\n\t * @description\r\n\t * # ui.router.util sub-module\r\n\t *\r\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\r\n\t * in your angular app (use {@link ui.router} module instead).\r\n\t *\r\n\t */\r\n\tangular.module('ui.router.util', ['ng', 'ui.router.init']);\r\n\t/**\r\n\t * @ngdoc overview\r\n\t * @name ui.router.router\r\n\t *\r\n\t * @requires ui.router.util\r\n\t *\r\n\t * @description\r\n\t * # ui.router.router sub-module\r\n\t *\r\n\t * This module is a dependency of other sub-modules. Do not include this module as a dependency\r\n\t * in your angular app (use {@link ui.router} module instead).\r\n\t */\r\n\tangular.module('ui.router.router', ['ui.router.util']);\r\n\t/**\r\n\t * @ngdoc overview\r\n\t * @name ui.router.state\r\n\t *\r\n\t * @requires ui.router.router\r\n\t * @requires ui.router.util\r\n\t *\r\n\t * @description\r\n\t * # ui.router.state sub-module\r\n\t *\r\n\t * This module is a dependency of the main ui.router module. Do not include this module as a dependency\r\n\t * in your angular app (use {@link ui.router} module instead).\r\n\t *\r\n\t */\r\n\tangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\r\n\t/**\r\n\t * @ngdoc overview\r\n\t * @name ui.router\r\n\t *\r\n\t * @requires ui.router.state\r\n\t *\r\n\t * @description\r\n\t * # ui.router\r\n\t *\r\n\t * ## The main module for ui.router\r\n\t * There are several sub-modules included with the ui.router module, however only this module is needed\r\n\t * as a dependency within your angular app. The other modules are for organization purposes.\r\n\t *\r\n\t * The modules are:\r\n\t * * ui.router - the main \"umbrella\" module\r\n\t * * ui.router.router -\r\n\t *\r\n\t * *You'll need to include **only** this module as the dependency within your angular app.*\r\n\t *\r\n\t * <pre>\r\n\t * <!doctype html>\r\n\t * <html ng-app=\"myApp\">\r\n\t * <head>\r\n\t *   <script src=\"js/angular.js\"></script>\r\n\t *   <!-- Include the ui-router script -->\r\n\t *   <script src=\"js/angular-ui-router.min.js\"></script>\r\n\t *   <script>\r\n\t *     // ...and add 'ui.router' as a dependency\r\n\t *     var myApp = angular.module('myApp', ['ui.router']);\r\n\t *   </script>\r\n\t * </head>\r\n\t * <body>\r\n\t * </body>\r\n\t * </html>\r\n\t * </pre>\r\n\t */\r\n\tangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\r\n\tangular.module('ui.router.compat', ['ui.router']);\r\n\t/**\r\n\t * Annotates a controller expression (may be a controller function(), a \"controllername\",\r\n\t * or \"controllername as name\")\r\n\t *\r\n\t * - Temporarily decorates $injector.instantiate.\r\n\t * - Invokes $controller() service\r\n\t *   - Calls $injector.instantiate with controller constructor\r\n\t * - Annotate constructor\r\n\t * - Undecorate $injector\r\n\t *\r\n\t * returns an array of strings, which are the arguments of the controller expression\r\n\t */\r\n\tfunction annotateController(controllerExpression) {\r\n\t    var $injector = coreservices_1.services.$injector;\r\n\t    var $controller = $injector.get(\"$controller\");\r\n\t    var oldInstantiate = $injector.instantiate;\r\n\t    try {\r\n\t        var deps_1;\r\n\t        $injector.instantiate = function fakeInstantiate(constructorFunction) {\r\n\t            $injector.instantiate = oldInstantiate; // Un-decorate ASAP\r\n\t            deps_1 = $injector.annotate(constructorFunction);\r\n\t        };\r\n\t        $controller(controllerExpression, { $scope: {} });\r\n\t        return deps_1;\r\n\t    }\r\n\t    finally {\r\n\t        $injector.instantiate = oldInstantiate;\r\n\t    }\r\n\t}\r\n\texports.annotateController = annotateController;\r\n\tvar router = null;\r\n\t$uiRouter.$inject = ['$locationProvider'];\r\n\t/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\r\n\tfunction $uiRouter($locationProvider) {\r\n\t    // Create a new instance of the Router when the $uiRouterProvider is initialized\r\n\t    router = new router_1.UIRouter();\r\n\t    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);\r\n\t    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\r\n\t    router.stateRegistry.decorator(\"views\", views_1.ng1ViewsBuilder);\r\n\t    router.stateRegistry.decorator(\"onExit\", onEnterExitRetain_1.getStateHookBuilder(\"onExit\"));\r\n\t    router.stateRegistry.decorator(\"onRetain\", onEnterExitRetain_1.getStateHookBuilder(\"onRetain\"));\r\n\t    router.stateRegistry.decorator(\"onEnter\", onEnterExitRetain_1.getStateHookBuilder(\"onEnter\"));\r\n\t    router.viewService.viewConfigFactory('ng1', views_1.ng1ViewConfigFactory);\r\n\t    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\r\n\t    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);\r\n\t    // Create a LocationService.onChange registry\r\n\t    var urlListeners = [];\r\n\t    coreservices_1.services.location.onChange = function (callback) {\r\n\t        urlListeners.push(callback);\r\n\t        return function () { return common_1.removeFrom(urlListeners)(callback); };\r\n\t    };\r\n\t    this.$get = $get;\r\n\t    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\r\n\t    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\r\n\t        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\r\n\t        $rootScope.$on(\"$locationChangeSuccess\", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });\r\n\t        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\r\n\t        coreservices_1.services.locationConfig.html5Mode = function () {\r\n\t            var html5Mode = $locationProvider.html5Mode();\r\n\t            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;\r\n\t            return html5Mode && $sniffer.history;\r\n\t        };\r\n\t        coreservices_1.services.location.setUrl = function (newUrl, replace) {\r\n\t            if (replace === void 0) { replace = false; }\r\n\t            $location.url(newUrl);\r\n\t            if (replace)\r\n\t                $location.replace();\r\n\t        };\r\n\t        coreservices_1.services.template.get = function (url) {\r\n\t            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop(\"data\"));\r\n\t        };\r\n\t        // Bind these LocationService functions to $location\r\n\t        common_1.bindFunctions($location, coreservices_1.services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\r\n\t        // Bind these LocationConfig functions to $location\r\n\t        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);\r\n\t        // Bind these LocationConfig functions to $browser\r\n\t        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);\r\n\t        return router;\r\n\t    }\r\n\t}\r\n\t// The 'ui.router' ng1 module depends on 'ui.router.init' module.\r\n\tangular.module('ui.router.init', []).provider(\"$uiRouter\", $uiRouter);\r\n\trunBlock.$inject = ['$injector', '$q'];\r\n\tfunction runBlock($injector, $q) {\r\n\t    coreservices_1.services.$injector = $injector;\r\n\t    coreservices_1.services.$q = $q;\r\n\t}\r\n\tangular.module('ui.router.init').run(runBlock);\r\n\t// This effectively calls $get() to init when we enter runtime\r\n\tangular.module('ui.router.init').run(['$uiRouter', function ($uiRouter) { }]);\r\n\t// $urlMatcherFactory service and $urlMatcherFactoryProvider\r\n\tangular.module('ui.router.util').provider('$urlMatcherFactory', ['$uiRouterProvider', function () { return router.urlMatcherFactory; }]);\r\n\tangular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);\r\n\t// $urlRouter service and $urlRouterProvider\r\n\tfunction getUrlRouterProvider() {\r\n\t    router.urlRouterProvider[\"$get\"] = function () {\r\n\t        router.urlRouter.update(true);\r\n\t        if (!this.interceptDeferred)\r\n\t            router.urlRouter.listen();\r\n\t        return router.urlRouter;\r\n\t    };\r\n\t    return router.urlRouterProvider;\r\n\t}\r\n\tangular.module('ui.router.router').provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);\r\n\tangular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);\r\n\t// $state service and $stateProvider\r\n\t// $urlRouter service and $urlRouterProvider\r\n\tfunction getStateProvider() {\r\n\t    router.stateProvider[\"$get\"] = function () {\r\n\t        // Autoflush once we are in runtime\r\n\t        router.stateRegistry.stateQueue.autoFlush(router.stateService);\r\n\t        return router.stateService;\r\n\t    };\r\n\t    return router.stateProvider;\r\n\t}\r\n\tangular.module('ui.router.state').provider('$state', ['$uiRouterProvider', getStateProvider]);\r\n\tangular.module('ui.router.state').run(['$state', function ($state) { }]);\r\n\t// $stateParams service\r\n\tangular.module('ui.router.state').factory('$stateParams', ['$uiRouter', function ($uiRouter) {\r\n\t        return $uiRouter.globals.params;\r\n\t    }]);\r\n\t// $transitions service and $transitionsProvider\r\n\tfunction getTransitionsProvider() {\r\n\t    router.transitionService[\"$get\"] = function () { return router.transitionService; };\r\n\t    return router.transitionService;\r\n\t}\r\n\tangular.module('ui.router.state').provider('$transitions', ['$uiRouterProvider', getTransitionsProvider]);\r\n\t// $templateFactory service\r\n\tangular.module('ui.router.util').factory('$templateFactory', ['$uiRouter', function () { return new templateFactory_1.TemplateFactory(); }]);\r\n\t// The $view service\r\n\tangular.module('ui.router').factory('$view', function () { return router.viewService; });\r\n\t// The old $resolve service\r\n\tangular.module('ui.router').factory('$resolve', resolveService_1.resolveFactory);\r\n\t// $trace service\r\n\tangular.module(\"ui.router\").service(\"$trace\", function () { return trace_1.trace; });\r\n\twatchDigests.$inject = ['$rootScope'];\r\n\tfunction watchDigests($rootScope) {\r\n\t    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });\r\n\t}\r\n\texports.watchDigests = watchDigests;\r\n\tangular.module(\"ui.router\").run(watchDigests);\r\n\texports.getLocals = function (ctx) {\r\n\t    var tokens = ctx.getTokens().filter(predicates_1.isString);\r\n\t    var tuples = tokens.map(function (key) { return [key, ctx.getResolvable(key).data]; });\r\n\t    return tuples.reduce(common_1.applyPairs, {});\r\n\t};\r\n\t/** Injectable services */\r\n\t/**\r\n\t * An injectable service object which has the current state parameters\r\n\t *\r\n\t * This angular service (singleton object) holds the current state parameters.\r\n\t * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.\r\n\t *\r\n\t * This object can be injected into other services.\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * SomeService.$inject = ['$http', '$stateParams'];\r\n\t * function SomeService($http, $stateParams) {\r\n\t *   return {\r\n\t *     getUser: function() {\r\n\t *       return $http.get('/api/users/' + $stateParams.username);\r\n\t *     }\r\n\t *   }\r\n\t * };\r\n\t * angular.service('SomeService', SomeService);\r\n\t * ```\r\n\t *\r\n\t * ### Deprecation warning:\r\n\t *\r\n\t * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different\r\n\t * object than this global service object.  In those cases, the injected object has the parameter values for the\r\n\t * *pending* Transition.\r\n\t *\r\n\t * Because of these confusing details, this service is deprecated.\r\n\t *\r\n\t * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]\r\n\t * ```js\r\n\t * MyController.$inject = ['$transition$'];\r\n\t * function MyController($transition$) {\r\n\t *   var username = $transition$.params().username;\r\n\t *   // .. do something with username\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tvar $stateParams;\r\n\t/**\r\n\t * An injectable service primarily used to register transition hooks\r\n\t *\r\n\t * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\r\n\t *\r\n\t * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.\r\n\t */\r\n\tvar $transitions;\r\n\t/**\r\n\t * A config-time injectable provider primarily used to register transition hooks\r\n\t *\r\n\t * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\r\n\t *\r\n\t * The same object is also exposed as [[$transitions]] for injection at runtime.\r\n\t */\r\n\tvar $transitionsProvider;\r\n\t/**\r\n\t * An injectable service used to query for current state information.\r\n\t *\r\n\t * This angular service exposes the [[StateService]] singleton.\r\n\t */\r\n\tvar $state;\r\n\t/**\r\n\t * A config-time injectable provider used to register states.\r\n\t *\r\n\t * This angular service exposes the [[StateProvider]] singleton.\r\n\t */\r\n\tvar $stateProvider;\r\n\t/**\r\n\t * A config-time injectable provider used to manage the URL.\r\n\t *\r\n\t * This angular service exposes the [[UrlRouterProvider]] singleton.\r\n\t */\r\n\tvar $urlRouterProvider;\r\n\t/**\r\n\t * An injectable service used to configure URL redirects.\r\n\t *\r\n\t * This angular service exposes the [[UrlRouter]] singleton.\r\n\t */\r\n\tvar $urlRouter;\r\n\t/**\r\n\t * An injectable service used to configure the URL.\r\n\t *\r\n\t * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\r\n\t *\r\n\t * This angular service exposes the [[UrlMatcherFactory]] singleton.\r\n\t * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].\r\n\t */\r\n\tvar $urlMatcherFactory;\r\n\t/**\r\n\t * An injectable service used to configure the URL.\r\n\t *\r\n\t * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\r\n\t *\r\n\t * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.\r\n\t * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].\r\n\t */\r\n\tvar $urlMatcherFactoryProvider;\r\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module ng1 */ /** */\r\n\tvar stateObject_1 = __webpack_require__(42);\r\n\tvar node_1 = __webpack_require__(21);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar stateBuilder_1 = __webpack_require__(40);\r\n\t/**\r\n\t * Implementation of the legacy `$resolve` service for angular 1.\r\n\t */\r\n\tvar $resolve = {\r\n\t    /**\r\n\t     * Asynchronously injects a resolve block.\r\n\t     *\r\n\t     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\r\n\t     *\r\n\t     * Given an object `invocables`, where keys are strings and values are injectable functions,\r\n\t     * injects each function, and waits for the resulting promise to resolve.\r\n\t     * When all resulting promises are resolved, returns the results as an object.\r\n\t     *\r\n\t     * @example\r\n\t     * ```js\r\n\t     *\r\n\t     * let invocables = {\r\n\t     *   foo: [ '$http', ($http) =>\r\n\t     *            $http.get('/api/foo').then(resp => resp.data) ],\r\n\t     *   bar: [ 'foo', '$http', (foo, $http) =>\r\n\t     *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]\r\n\t     * }\r\n\t     * $resolve.resolve(invocables)\r\n\t     *     .then(results => console.log(results.foo, results.bar))\r\n\t     * // Logs foo and bar:\r\n\t     * // { id: 123, barId: 456, fooData: 'foo data' }\r\n\t     * // { id: 456, barData: 'bar data' }\r\n\t     * ```\r\n\t     *\r\n\t     * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions\r\n\t     * @param locals key/value pre-resolved data (locals)\r\n\t     * @param parent a promise for a \"parent resolve\"\r\n\t     */\r\n\t    resolve: function (invocables, locals, parent) {\r\n\t        if (locals === void 0) { locals = {}; }\r\n\t        var parentNode = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));\r\n\t        var node = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));\r\n\t        var context = new resolveContext_1.ResolveContext([parentNode, node]);\r\n\t        context.addResolvables(stateBuilder_1.resolvablesBuilder({ resolve: invocables }), node.state);\r\n\t        var resolveData = function (parentLocals) {\r\n\t            var rewrap = function (_locals) { return stateBuilder_1.resolvablesBuilder({ resolve: common_1.mapObj(_locals, function (local) { return function () { return local; }; }) }); };\r\n\t            context.addResolvables(rewrap(parentLocals), parentNode.state);\r\n\t            context.addResolvables(rewrap(locals), node.state);\r\n\t            var tuples2ObjR = function (acc, tuple) {\r\n\t                acc[tuple.token] = tuple.value;\r\n\t                return acc;\r\n\t            };\r\n\t            return context.resolvePath().then(function (results) { return results.reduce(tuples2ObjR, {}); });\r\n\t        };\r\n\t        return parent ? parent.then(resolveData) : resolveData({});\r\n\t    }\r\n\t};\r\n\t/** @hidden */\r\n\texports.resolveFactory = function () { return $resolve; };\r\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar view_1 = __webpack_require__(37);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar templateFactory_1 = __webpack_require__(56);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\tvar angular = __webpack_require__(57);\r\n\texports.ng1ViewConfigFactory = function (path, view) {\r\n\t    return [new Ng1ViewConfig(path, view)];\r\n\t};\r\n\t/**\r\n\t * This is a [[StateBuilder.builder]] function for angular1 `views`.\r\n\t *\r\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\r\n\t * handles the `views` property with logic specific to angular-ui-router (ng1).\r\n\t *\r\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\r\n\t * and applies the state-level configuration to a view named `$default`.\r\n\t */\r\n\tfunction ng1ViewsBuilder(state) {\r\n\t    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);\r\n\t    var views = {}, viewsObject = state.views || { \"$default\": common_1.pick(state, allKeys) };\r\n\t    common_1.forEach(viewsObject, function (config, name) {\r\n\t        // Account for views: { \"\": { template... } }\r\n\t        name = name || \"$default\";\r\n\t        // Account for views: { header: \"headerComponent\" }\r\n\t        if (predicates_1.isString(config))\r\n\t            config = { component: config };\r\n\t        if (!Object.keys(config).length)\r\n\t            return;\r\n\t        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\r\n\t        if (config.component) {\r\n\t            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {\r\n\t                throw new Error(\"Cannot combine: \" + compKeys.join(\"|\") + \" with: \" + nonCompKeys.join(\"|\") + \" in stateview: 'name@\" + state.name + \"'\");\r\n\t            }\r\n\t            // Dynamically build a template like \"<component-name input1='::$resolve.foo'></component-name>\"\r\n\t            config.templateProvider = ['$injector', function ($injector) {\r\n\t                    var resolveFor = function (key) {\r\n\t                        return config.bindings && config.bindings[key] || key;\r\n\t                    };\r\n\t                    var prefix = angular.version.minor >= 3 ? \"::\" : \"\";\r\n\t                    var attributeTpl = function (input) {\r\n\t                        var attrName = strings_1.kebobString(input.name);\r\n\t                        var resolveName = resolveFor(input.name);\r\n\t                        if (input.type === '@')\r\n\t                            return attrName + \"='{{\" + prefix + \"$resolve.\" + resolveName + \"}}'\";\r\n\t                        return attrName + \"='\" + prefix + \"$resolve.\" + resolveName + \"'\";\r\n\t                    };\r\n\t                    var attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(\" \");\r\n\t                    var kebobName = strings_1.kebobString(config.component);\r\n\t                    return \"<\" + kebobName + \" \" + attrs + \"></\" + kebobName + \">\";\r\n\t                }];\r\n\t        }\r\n\t        config.resolveAs = config.resolveAs || '$resolve';\r\n\t        config.$type = \"ng1\";\r\n\t        config.$context = state;\r\n\t        config.$name = name;\r\n\t        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\r\n\t        config.$uiViewName = normalized.uiViewName;\r\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\r\n\t        views[name] = config;\r\n\t    });\r\n\t    return views;\r\n\t}\r\n\texports.ng1ViewsBuilder = ng1ViewsBuilder;\r\n\t// for ng 1.2 style, process the scope: { input: \"=foo\" }\r\n\t// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\r\n\tvar scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})\r\n\t    .map(function (key) { return [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])]; })\r\n\t    .filter(function (tuple) { return predicates_1.isDefined(tuple) && predicates_1.isDefined(tuple[1]); })\r\n\t    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); };\r\n\t// Given a directive definition, find its object input attributes\r\n\t// Use different properties, depending on the type of directive (component, bindToController, normal)\r\n\tvar getBindings = function (def) {\r\n\t    if (predicates_1.isObject(def.bindToController))\r\n\t        return scopeBindings(def.bindToController);\r\n\t    return scopeBindings(def.scope);\r\n\t};\r\n\t// Gets all the directive(s)' inputs ('@', '=', and '<')\r\n\tfunction getComponentInputs($injector, name) {\r\n\t    var cmpDefs = $injector.get(name + \"Directive\"); // could be multiple\r\n\t    if (!cmpDefs || !cmpDefs.length)\r\n\t        throw new Error(\"Unable to find component named '\" + name + \"'\");\r\n\t    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);\r\n\t}\r\n\tvar id = 0;\r\n\tvar Ng1ViewConfig = (function () {\r\n\t    function Ng1ViewConfig(path, viewDecl) {\r\n\t        this.path = path;\r\n\t        this.viewDecl = viewDecl;\r\n\t        this.$id = id++;\r\n\t        this.loaded = false;\r\n\t    }\r\n\t    Ng1ViewConfig.prototype.load = function () {\r\n\t        var _this = this;\r\n\t        var $q = coreservices_1.services.$q;\r\n\t        if (!this.hasTemplate())\r\n\t            throw new Error(\"No template configuration specified for '\" + this.viewDecl.$uiViewName + \"@\" + this.viewDecl.$uiViewContextAnchor + \"'\");\r\n\t        var context = new resolveContext_1.ResolveContext(this.path);\r\n\t        var params = this.path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});\r\n\t        var promises = {\r\n\t            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), context)),\r\n\t            controller: $q.when(this.getController(context))\r\n\t        };\r\n\t        return $q.all(promises).then(function (results) {\r\n\t            trace_1.trace.traceViewServiceEvent(\"Loaded\", _this);\r\n\t            _this.controller = results.controller;\r\n\t            _this.template = results.template;\r\n\t            return _this;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * Checks a view configuration to ensure that it specifies a template.\r\n\t     *\r\n\t     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\r\n\t     */\r\n\t    Ng1ViewConfig.prototype.hasTemplate = function () {\r\n\t        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\r\n\t    };\r\n\t    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, context) {\r\n\t        return $factory.fromConfig(this.viewDecl, params, context);\r\n\t    };\r\n\t    /**\r\n\t     * Gets the controller for a view configuration.\r\n\t     *\r\n\t     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\r\n\t     */\r\n\t    Ng1ViewConfig.prototype.getController = function (context) {\r\n\t        var provider = this.viewDecl.controllerProvider;\r\n\t        if (!predicates_1.isInjectable(provider))\r\n\t            return this.viewDecl.controller;\r\n\t        var deps = coreservices_1.services.$injector.annotate(provider);\r\n\t        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;\r\n\t        var resolvable = new resolvable_1.Resolvable(\"\", providerFn, deps);\r\n\t        return resolvable.get(context);\r\n\t    };\r\n\t    return Ng1ViewConfig;\r\n\t}());\r\n\texports.Ng1ViewConfig = Ng1ViewConfig;\r\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module view */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar resolvable_1 = __webpack_require__(19);\r\n\t/**\r\n\t * Service which manages loading of templates from a ViewConfig.\r\n\t */\r\n\tvar TemplateFactory = (function () {\r\n\t    function TemplateFactory() {\r\n\t    }\r\n\t    /**\r\n\t     * Creates a template from a configuration object.\r\n\t     *\r\n\t     * @param config Configuration object for which to load a template.\r\n\t     * The following properties are search in the specified order, and the first one\r\n\t     * that is defined is used to create the template:\r\n\t     *\r\n\t     * @param params  Parameters to pass to the template function.\r\n\t     * @param context The resolve context associated with the template's view\r\n\t     *\r\n\t     * @return {string|object}  The template html as a string, or a promise for\r\n\t     * that string,or `null` if no template is configured.\r\n\t     */\r\n\t    TemplateFactory.prototype.fromConfig = function (config, params, context) {\r\n\t        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :\r\n\t            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\r\n\t                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :\r\n\t                    null);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates a template from a string or a function returning a string.\r\n\t     *\r\n\t     * @param template html template as a string or function that returns an html template as a string.\r\n\t     * @param params Parameters to pass to the template function.\r\n\t     *\r\n\t     * @return {string|object} The template html as a string, or a promise for that\r\n\t     * string.\r\n\t     */\r\n\t    TemplateFactory.prototype.fromString = function (template, params) {\r\n\t        return predicates_1.isFunction(template) ? template(params) : template;\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Loads a template from the a URL via `$http` and `$templateCache`.\r\n\t     *\r\n\t     * @param {string|Function} url url of the template to load, or a function\r\n\t     * that returns a url.\r\n\t     * @param {Object} params Parameters to pass to the url function.\r\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\r\n\t     * for that string.\r\n\t     */\r\n\t    TemplateFactory.prototype.fromUrl = function (url, params) {\r\n\t        if (predicates_1.isFunction(url))\r\n\t            url = url(params);\r\n\t        if (url == null)\r\n\t            return null;\r\n\t        return coreservices_1.services.template.get(url);\r\n\t    };\r\n\t    ;\r\n\t    /**\r\n\t     * Creates a template by invoking an injectable provider function.\r\n\t     *\r\n\t     * @param provider Function to invoke via `locals`\r\n\t     * @param {Function} injectFn a function used to invoke the template provider\r\n\t     * @return {string|Promise.<string>} The template html as a string, or a promise\r\n\t     * for that string.\r\n\t     */\r\n\t    TemplateFactory.prototype.fromProvider = function (provider, params, context) {\r\n\t        var deps = coreservices_1.services.$injector.annotate(provider);\r\n\t        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;\r\n\t        var resolvable = new resolvable_1.Resolvable(\"\", providerFn, deps);\r\n\t        return resolvable.get(context);\r\n\t    };\r\n\t    ;\r\n\t    return TemplateFactory;\r\n\t}());\r\n\texports.TemplateFactory = TemplateFactory;\r\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module ng1 */ /** for typedoc */\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.$stateProvider\r\n\t *\r\n\t * @requires ui.router.router.$urlRouterProvider\r\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\r\n\t *\r\n\t * @description\r\n\t * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\r\n\t * on state.\r\n\t *\r\n\t * A state corresponds to a \"place\" in the application in terms of the overall UI and\r\n\t * navigation. A state describes (via the controller / template / view properties) what\r\n\t * the UI looks like and does at that place.\r\n\t *\r\n\t * States often have things in common, and the primary way of factoring out these\r\n\t * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\r\n\t * nested states.\r\n\t *\r\n\t * The `$stateProvider` provides interfaces to declare these states for your app.\r\n\t */\r\n\tvar StateProvider = (function () {\r\n\t    function StateProvider(stateRegistry, stateService) {\r\n\t        this.stateRegistry = stateRegistry;\r\n\t        this.stateService = stateService;\r\n\t        common_1.bindFunctions(StateProvider.prototype, this, this);\r\n\t    }\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$stateProvider#decorator\r\n\t     * @methodOf ui.router.state.$stateProvider\r\n\t     *\r\n\t     * @description\r\n\t     * Allows you to extend (carefully) or override (at your own peril) the\r\n\t     * `stateBuilder` object used internally by `$stateProvider`. This can be used\r\n\t     * to add custom functionality to ui-router, for example inferring templateUrl\r\n\t     * based on the state name.\r\n\t     *\r\n\t     * When passing only a name, it returns the current (original or decorated) builder\r\n\t     * function that matches `name`.\r\n\t     *\r\n\t     * The builder functions that can be decorated are listed below. Though not all\r\n\t     * necessarily have a good use case for decoration, that is up to you to decide.\r\n\t     *\r\n\t     * In addition, users can attach custom decorators, which will generate new\r\n\t     * properties within the state's internal definition. There is currently no clear\r\n\t     * use-case for this beyond accessing internal states (i.e. $state.$current),\r\n\t     * however, expect this to become increasingly relevant as we introduce additional\r\n\t     * meta-programming features.\r\n\t     *\r\n\t     * **Warning**: Decorators should not be interdependent because the order of\r\n\t     * execution of the builder functions in non-deterministic. Builder functions\r\n\t     * should only be dependent on the state definition object and super function.\r\n\t     *\r\n\t     *\r\n\t     * Existing builder functions and current return values:\r\n\t     *\r\n\t     * - **parent** `{object}` - returns the parent state object.\r\n\t     * - **data** `{object}` - returns state data, including any inherited data that is not\r\n\t     *   overridden by own values (if any).\r\n\t     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\r\n\t     *   or `null`.\r\n\t     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\r\n\t     *   navigable).\r\n\t     * - **params** `{object}` - returns an array of state params that are ensured to\r\n\t     *   be a super-set of parent's params.\r\n\t     * - **views** `{object}` - returns a views object where each key is an absolute view\r\n\t     *   name (i.e. \"viewName@stateName\") and each value is the config object\r\n\t     *   (template, controller) for the view. Even when you don't use the views object\r\n\t     *   explicitly on a state config, one is still created for you internally.\r\n\t     *   So by decorating this builder function you have access to decorating template\r\n\t     *   and controller properties.\r\n\t     * - **ownParams** `{object}` - returns an array of params that belong to the state,\r\n\t     *   not including any params defined by ancestor states.\r\n\t     * - **path** `{string}` - returns the full path from the root down to this state.\r\n\t     *   Needed for state activation.\r\n\t     * - **includes** `{object}` - returns an object that includes every state that\r\n\t     *   would pass a `$state.includes()` test.\r\n\t     *\r\n\t     * @example\r\n\t     * <pre>\r\n\t     * // Override the internal 'views' builder with a function that takes the state\r\n\t     * // definition, and a reference to the internal function being overridden:\r\n\t     * $stateProvider.decorator('views', function (state, parent) {\r\n\t     *   let result = {},\r\n\t     *       views = parent(state);\r\n\t     *\r\n\t     *   angular.forEach(views, function (config, name) {\r\n\t     *     let autoName = (state.name + '.' + name).replace('.', '/');\r\n\t     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\r\n\t     *     result[name] = config;\r\n\t     *   });\r\n\t     *   return result;\r\n\t     * });\r\n\t     *\r\n\t     * $stateProvider.state('home', {\r\n\t     *   views: {\r\n\t     *     'contact.list': { controller: 'ListController' },\r\n\t     *     'contact.item': { controller: 'ItemController' }\r\n\t     *   }\r\n\t     * });\r\n\t     *\r\n\t     * // ...\r\n\t     *\r\n\t     * $state.go('home');\r\n\t     * // Auto-populates list and item views with /partials/home/contact/list.html,\r\n\t     * // and /partials/home/contact/item.html, respectively.\r\n\t     * </pre>\r\n\t     *\r\n\t     * @param {string} name The name of the builder function to decorate.\r\n\t     * @param {object} func A function that is responsible for decorating the original\r\n\t     * builder function. The function receives two parameters:\r\n\t     *\r\n\t     *   - `{object}` - state - The state config object.\r\n\t     *   - `{object}` - super - The original builder function.\r\n\t     *\r\n\t     * @return {object} $stateProvider - $stateProvider instance\r\n\t     */\r\n\t    StateProvider.prototype.decorator = function (name, func) {\r\n\t        return this.stateRegistry.decorator(name, func) || this;\r\n\t    };\r\n\t    StateProvider.prototype.state = function (name, definition) {\r\n\t        if (predicates_1.isObject(name)) {\r\n\t            definition = name;\r\n\t        }\r\n\t        else {\r\n\t            definition.name = name;\r\n\t        }\r\n\t        this.stateRegistry.register(definition);\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * Registers an invalid state handler\r\n\t     *\r\n\t     * This is a passthrough to [[StateService.onInvalid]] for ng1.\r\n\t     */\r\n\t    StateProvider.prototype.onInvalid = function (callback) {\r\n\t        return this.stateService.onInvalid(callback);\r\n\t    };\r\n\t    return StateProvider;\r\n\t}());\r\n\texports.StateProvider = StateProvider;\r\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar coreservices_1 = __webpack_require__(6);\r\n\tvar services_1 = __webpack_require__(53);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar common_1 = __webpack_require__(3);\r\n\t/**\r\n\t * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\r\n\t * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\r\n\t *\r\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\r\n\t * ensures that those hooks are injectable for angular-ui-router (ng1).\r\n\t */\r\n\texports.getStateHookBuilder = function (hookName) {\r\n\t    return function stateHookBuilder(state, parentFn) {\r\n\t        var hook = state[hookName];\r\n\t        function decoratedNg1Hook(trans, state) {\r\n\t            var resolveContext = new resolveContext_1.ResolveContext(trans.treeChanges().to);\r\n\t            return coreservices_1.services.$injector.invoke(hook, this, common_1.extend({ $state$: state }, services_1.getLocals(resolveContext)));\r\n\t        }\r\n\t        return hook ? decoratedNg1Hook : undefined;\r\n\t    };\r\n\t};\r\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * These are the UI-Router angular 1 directives.\r\n\t *\r\n\t * These directives are used in templates to create viewports and navigate to states\r\n\t *\r\n\t * @preferred @module ng1_directives\r\n\t */ /** for typedoc */\r\n\tvar angular = __webpack_require__(57);\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\t/** @hidden */\r\n\tfunction parseStateRef(ref, current) {\r\n\t    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\r\n\t    if (preparsed)\r\n\t        ref = current + '(' + preparsed[1] + ')';\r\n\t    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\r\n\t    if (!parsed || parsed.length !== 4)\r\n\t        throw new Error(\"Invalid state ref '\" + ref + \"'\");\r\n\t    return { state: parsed[1], paramExpr: parsed[3] || null };\r\n\t}\r\n\t/** @hidden */\r\n\tfunction stateContext(el) {\r\n\t    var $uiView = el.parent().inheritedData('$uiView');\r\n\t    var path = hof_1.parse('$cfg.path')($uiView);\r\n\t    return path ? common_1.tail(path).state.name : undefined;\r\n\t}\r\n\t/** @hidden */\r\n\tfunction getTypeInfo(el) {\r\n\t    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\r\n\t    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\r\n\t    var isForm = el[0].nodeName === \"FORM\";\r\n\t    return {\r\n\t        attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\r\n\t        isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\r\n\t        clickable: !isForm\r\n\t    };\r\n\t}\r\n\t/** @hidden */\r\n\tfunction clickHook(el, $state, $timeout, type, current) {\r\n\t    return function (e) {\r\n\t        var button = e.which || e.button, target = current();\r\n\t        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\r\n\t            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\r\n\t            var transition = $timeout(function () {\r\n\t                $state.go(target.state, target.params, target.options);\r\n\t            });\r\n\t            e.preventDefault();\r\n\t            // if the state has no URL, ignore one preventDefault from the <a> directive.\r\n\t            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\r\n\t            e.preventDefault = function () {\r\n\t                if (ignorePreventDefaultCount-- <= 0)\r\n\t                    $timeout.cancel(transition);\r\n\t            };\r\n\t        }\r\n\t    };\r\n\t}\r\n\t/** @hidden */\r\n\tfunction defaultOpts(el, $state) {\r\n\t    return {\r\n\t        relative: stateContext(el) || $state.$current,\r\n\t        inherit: true,\r\n\t        source: \"sref\"\r\n\t    };\r\n\t}\r\n\t/**\r\n\t * `ui-sref`: A directive for linking to a state\r\n\t *\r\n\t * A directive that binds a link (`<a>` tag) to a state.\r\n\t * If the state has an associated URL, the directive will automatically generate and\r\n\t * update the `href` attribute via the [[StateService.href]]  method.\r\n\t * Clicking the link will trigger a state transition with optional parameters.\r\n\t *\r\n\t * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\r\n\t * handled natively by the browser.\r\n\t *\r\n\t * You can also use relative state paths within ui-sref, just like the relative\r\n\t * paths passed to `$state.go()`.\r\n\t * You just need to be aware that the path is relative to the state that the link lives in.\r\n\t * In other words, the state that created the view containing the link.\r\n\t *\r\n\t * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.\r\n\t * Options are restricted to `location`, `inherit`, and `reload`.\r\n\t *\r\n\t * Here's an example of how you'd use ui-sref and how it would compile.\r\n\t * If you have the following template:\r\n\t *\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <pre>\r\n\t * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\r\n\t *\r\n\t * <ul>\r\n\t *     <li ng-repeat=\"contact in contacts\">\r\n\t *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\r\n\t *     </li>\r\n\t * </ul>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\r\n\t *\r\n\t * ```html\r\n\t *\r\n\t * <pre>\r\n\t * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\r\n\t *\r\n\t * <ul>\r\n\t *     <li ng-repeat=\"contact in contacts\">\r\n\t *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\r\n\t *     </li>\r\n\t *     <li ng-repeat=\"contact in contacts\">\r\n\t *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\r\n\t *     </li>\r\n\t *     <li ng-repeat=\"contact in contacts\">\r\n\t *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\r\n\t *     </li>\r\n\t * </ul>\r\n\t *\r\n\t * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\r\n\t * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\r\n\t */\r\n\tvar uiSref = ['$state', '$timeout',\r\n\t    function $StateRefDirective($state, $timeout) {\r\n\t        return {\r\n\t            restrict: 'A',\r\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\r\n\t            link: function (scope, element, attrs, uiSrefActive) {\r\n\t                var ref = parseStateRef(attrs.uiSref, $state.current.name);\r\n\t                var def = { state: ref.state, href: null, params: null, options: null };\r\n\t                var type = getTypeInfo(element);\r\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\r\n\t                var unlinkInfoFn = null;\r\n\t                var hookFn;\r\n\t                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\r\n\t                var update = function (val) {\r\n\t                    if (val)\r\n\t                        def.params = angular.copy(val);\r\n\t                    def.href = $state.href(ref.state, def.params, def.options);\r\n\t                    if (unlinkInfoFn)\r\n\t                        unlinkInfoFn();\r\n\t                    if (active)\r\n\t                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\r\n\t                    if (def.href !== null)\r\n\t                        attrs.$set(type.attr, def.href);\r\n\t                };\r\n\t                if (ref.paramExpr) {\r\n\t                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)\r\n\t                        update(val); }, true);\r\n\t                    def.params = angular.copy(scope.$eval(ref.paramExpr));\r\n\t                }\r\n\t                update();\r\n\t                if (!type.clickable)\r\n\t                    return;\r\n\t                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });\r\n\t                element.on(\"click\", hookFn);\r\n\t                scope.$on('$destroy', function () {\r\n\t                    element.off(\"click\", hookFn);\r\n\t                });\r\n\t            }\r\n\t        };\r\n\t    }];\r\n\t/**\r\n\t * `ui-state`: A dynamic version of `ui-sref`\r\n\t *\r\n\t * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\r\n\t * params and override options.\r\n\t *\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <li ng-repeat=\"nav in navlinks\">\r\n\t *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\r\n\t * </li>\r\n\t *\r\n\t * @param {string} ui-state 'stateName' can be any valid absolute or relative state\r\n\t * @param {Object} ui-state-params params to pass to [[StateService.href]]\r\n\t * @param {Object} ui-state-opts options to pass to [[StateService.go]]\r\n\t */\r\n\tvar uiState = ['$state', '$timeout',\r\n\t    function $StateRefDynamicDirective($state, $timeout) {\r\n\t        return {\r\n\t            restrict: 'A',\r\n\t            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\r\n\t            link: function (scope, element, attrs, uiSrefActive) {\r\n\t                var type = getTypeInfo(element);\r\n\t                var active = uiSrefActive[1] || uiSrefActive[0];\r\n\t                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\r\n\t                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';\r\n\t                var def = { state: null, params: null, options: null, href: null };\r\n\t                var unlinkInfoFn = null;\r\n\t                var hookFn;\r\n\t                function runStateRefLink(group) {\r\n\t                    def.state = group[0];\r\n\t                    def.params = group[1];\r\n\t                    def.options = group[2];\r\n\t                    def.href = $state.href(def.state, def.params, def.options);\r\n\t                    if (unlinkInfoFn)\r\n\t                        unlinkInfoFn();\r\n\t                    if (active)\r\n\t                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\r\n\t                    if (def.href)\r\n\t                        attrs.$set(type.attr, def.href);\r\n\t                }\r\n\t                scope.$watch(watch, runStateRefLink, true);\r\n\t                runStateRefLink(scope.$eval(watch));\r\n\t                if (!type.clickable)\r\n\t                    return;\r\n\t                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });\r\n\t                element.on(\"click\", hookFn);\r\n\t                scope.$on('$destroy', function () {\r\n\t                    element.off(\"click\", hookFn);\r\n\t                });\r\n\t            }\r\n\t        };\r\n\t    }];\r\n\t/**\r\n\t * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\r\n\t *\r\n\t * A directive working alongside ui-sref to add classes to an element when the\r\n\t * related ui-sref directive's state is active, and removing them when it is inactive.\r\n\t * The primary use-case is to simplify the special appearance of navigation menus\r\n\t * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\r\n\t * distinguishing it from the inactive menu items.\r\n\t *\r\n\t * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\r\n\t * ui-sref-active found at the same level or above the ui-sref will be used.\r\n\t *\r\n\t * Will activate when the ui-sref's target state or any child state is active. If you\r\n\t * need to activate only when the ui-sref target state is active and *not* any of\r\n\t * it's children, then you will use ui-sref-active-eq\r\n\t *\r\n\t * Given the following template:\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <pre>\r\n\t * <ul>\r\n\t *   <li ui-sref-active=\"active\" class=\"item\">\r\n\t *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\r\n\t *   </li>\r\n\t * </ul>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t *\r\n\t * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\r\n\t * the resulting HTML will appear as (note the 'active' class):\r\n\t *\r\n\t * ```html\r\n\t *\r\n\t * <pre>\r\n\t * <ul>\r\n\t *   <li ui-sref-active=\"active\" class=\"item active\">\r\n\t *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\r\n\t *   </li>\r\n\t * </ul>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t * The class name is interpolated **once** during the directives link time (any further changes to the\r\n\t * interpolated value are ignored).\r\n\t *\r\n\t * Multiple classes may be specified in a space-separated format:\r\n\t *\r\n\t * ```html\r\n\t * <pre>\r\n\t * <ul>\r\n\t *   <li ui-sref-active='class1 class2 class3'>\r\n\t *     <a ui-sref=\"app.user\">link</a>\r\n\t *   </li>\r\n\t * </ul>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t * It is also possible to pass ui-sref-active an expression that evaluates\r\n\t * to an object hash, whose keys represent active class names and whose\r\n\t * values represent the respective state names/globs.\r\n\t * ui-sref-active will match if the current active state **includes** any of\r\n\t * the specified state names/globs, even the abstract ones.\r\n\t *\r\n\t * Given the following template, with \"admin\" being an abstract state:\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <pre>\r\n\t * <div ui-sref-active=\"{'active': 'admin.*'}\">\r\n\t *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\r\n\t * </div>\r\n\t * </pre>\r\n\t * ```\r\n\t *\r\n\t * When the current state is \"admin.roles\" the \"active\" class will be applied\r\n\t * to both the <div> and <a> elements. It is important to note that the state\r\n\t * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\r\n\t */\r\n\tvar uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions', '$uiRouter',\r\n\t    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions, $uiRouter) {\r\n\t        return {\r\n\t            restrict: \"A\",\r\n\t            controller: ['$scope', '$element', '$attrs', '$timeout',\r\n\t                function ($scope, $element, $attrs, $timeout) {\r\n\t                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\r\n\t                    // There probably isn't much point in $observing this\r\n\t                    // uiSrefActive and uiSrefActiveEq share the same directive object with some\r\n\t                    // slight difference in logic routing\r\n\t                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\r\n\t                    try {\r\n\t                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\r\n\t                    }\r\n\t                    catch (e) {\r\n\t                    }\r\n\t                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\r\n\t                    if (predicates_1.isObject(uiSrefActive)) {\r\n\t                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {\r\n\t                            if (predicates_1.isString(stateOrName)) {\r\n\t                                var ref = parseStateRef(stateOrName, $state.current.name);\r\n\t                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\r\n\t                            }\r\n\t                        });\r\n\t                    }\r\n\t                    // Allow uiSref to communicate with uiSrefActive[Equals]\r\n\t                    this.$$addStateInfo = function (newState, newParams) {\r\n\t                        // we already got an explicit state provided by ui-sref-active, so we\r\n\t                        // shadow the one that comes from ui-sref\r\n\t                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {\r\n\t                            return;\r\n\t                        }\r\n\t                        var deregister = addState(newState, newParams, uiSrefActive);\r\n\t                        update();\r\n\t                        return deregister;\r\n\t                    };\r\n\t                    function updateAfterTransition(trans) { trans.promise.then(update); }\r\n\t                    $scope.$on('$stateChangeSuccess', update);\r\n\t                    $scope.$on('$destroy', $transitions.onStart({}, updateAfterTransition));\r\n\t                    if ($uiRouter.globals.transition) {\r\n\t                        updateAfterTransition($uiRouter.globals.transition);\r\n\t                    }\r\n\t                    function addState(stateName, stateParams, activeClass) {\r\n\t                        var state = $state.get(stateName, stateContext($element));\r\n\t                        var stateHash = createStateHash(stateName, stateParams);\r\n\t                        var stateInfo = {\r\n\t                            state: state || { name: stateName },\r\n\t                            params: stateParams,\r\n\t                            hash: stateHash\r\n\t                        };\r\n\t                        states.push(stateInfo);\r\n\t                        activeClasses[stateHash] = activeClass;\r\n\t                        return function removeState() {\r\n\t                            var idx = states.indexOf(stateInfo);\r\n\t                            if (idx !== -1)\r\n\t                                states.splice(idx, 1);\r\n\t                        };\r\n\t                    }\r\n\t                    /**\r\n\t                     * @param {string} state\r\n\t                     * @param {Object|string} [params]\r\n\t                     * @return {string}\r\n\t                     */\r\n\t                    function createStateHash(state, params) {\r\n\t                        if (!predicates_1.isString(state)) {\r\n\t                            throw new Error('state should be a string');\r\n\t                        }\r\n\t                        if (predicates_1.isObject(params)) {\r\n\t                            return state + common_1.toJson(params);\r\n\t                        }\r\n\t                        params = $scope.$eval(params);\r\n\t                        if (predicates_1.isObject(params)) {\r\n\t                            return state + common_1.toJson(params);\r\n\t                        }\r\n\t                        return state;\r\n\t                    }\r\n\t                    // Update route state\r\n\t                    function update() {\r\n\t                        for (var i = 0; i < states.length; i++) {\r\n\t                            if (anyMatch(states[i].state, states[i].params)) {\r\n\t                                addClass($element, activeClasses[states[i].hash]);\r\n\t                            }\r\n\t                            else {\r\n\t                                removeClass($element, activeClasses[states[i].hash]);\r\n\t                            }\r\n\t                            if (exactMatch(states[i].state, states[i].params)) {\r\n\t                                addClass($element, activeEqClass);\r\n\t                            }\r\n\t                            else {\r\n\t                                removeClass($element, activeEqClass);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\r\n\t                    function removeClass(el, className) { el.removeClass(className); }\r\n\t                    function anyMatch(state, params) { return $state.includes(state.name, params); }\r\n\t                    function exactMatch(state, params) { return $state.is(state.name, params); }\r\n\t                    update();\r\n\t                }]\r\n\t        };\r\n\t    }];\r\n\tangular.module('ui.router.state')\r\n\t    .directive('uiSref', uiSref)\r\n\t    .directive('uiSrefActive', uiSrefActive)\r\n\t    .directive('uiSrefActiveEq', uiSrefActive)\r\n\t    .directive('uiState', uiState);\r\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar angular = __webpack_require__(57);\r\n\t/**\r\n\t * @ngdoc filter\r\n\t * @name ui.router.state.filter:isState\r\n\t *\r\n\t * @requires ui.router.state.$state\r\n\t *\r\n\t * @description\r\n\t * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\r\n\t */\r\n\t$IsStateFilter.$inject = ['$state'];\r\n\tfunction $IsStateFilter($state) {\r\n\t    var isFilter = function (state, params, options) {\r\n\t        return $state.is(state, params, options);\r\n\t    };\r\n\t    isFilter.$stateful = true;\r\n\t    return isFilter;\r\n\t}\r\n\texports.$IsStateFilter = $IsStateFilter;\r\n\t/**\r\n\t * @ngdoc filter\r\n\t * @name ui.router.state.filter:includedByState\r\n\t *\r\n\t * @requires ui.router.state.$state\r\n\t *\r\n\t * @description\r\n\t * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\r\n\t */\r\n\t$IncludedByStateFilter.$inject = ['$state'];\r\n\tfunction $IncludedByStateFilter($state) {\r\n\t    var includesFilter = function (state, params, options) {\r\n\t        return $state.includes(state, params, options);\r\n\t    };\r\n\t    includesFilter.$stateful = true;\r\n\t    return includesFilter;\r\n\t}\r\n\texports.$IncludedByStateFilter = $IncludedByStateFilter;\r\n\tangular.module('ui.router.state')\r\n\t    .filter('isState', $IsStateFilter)\r\n\t    .filter('includedByState', $IncludedByStateFilter);\r\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module ng1_directives */ /** for typedoc */\r\n\t\"use strict\";\r\n\tvar common_1 = __webpack_require__(3);\r\n\tvar predicates_1 = __webpack_require__(4);\r\n\tvar trace_1 = __webpack_require__(12);\r\n\tvar views_1 = __webpack_require__(55);\r\n\tvar hof_1 = __webpack_require__(5);\r\n\tvar resolveContext_1 = __webpack_require__(17);\r\n\tvar strings_1 = __webpack_require__(9);\r\n\tvar services_1 = __webpack_require__(53);\r\n\tvar angular = __webpack_require__(57);\r\n\t/**\r\n\t * `ui-view`: A viewport directive which is filled in by a view from the active state.\r\n\t *\r\n\t * @param {string=} name A view name. The name should be unique amongst the other views in the\r\n\t * same state. You can have views of the same name that live in different states.\r\n\t *\r\n\t * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\r\n\t * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\r\n\t * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\r\n\t * scroll ui-view elements into view when they are populated during a state activation.\r\n\t *\r\n\t * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\r\n\t * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\r\n\t *\r\n\t * @param {string=} onload Expression to evaluate whenever the view updates.\r\n\t *\r\n\t * A view can be unnamed or named.\r\n\t * @example\r\n\t * ```html\r\n\t *\r\n\t * <!-- Unnamed -->\r\n\t * <div ui-view></div>\r\n\t *\r\n\t * <!-- Named -->\r\n\t * <div ui-view=\"viewName\"></div>\r\n\t * ```\r\n\t *\r\n\t * You can only have one unnamed view within any template (or root html). If you are only using a\r\n\t * single view and it is unnamed then you can populate it like so:\r\n\t * ```\r\n\t *\r\n\t * <div ui-view></div>\r\n\t * $stateProvider.state(\"home\", {\r\n\t *   template: \"<h1>HELLO!</h1>\"\r\n\t * })\r\n\t * ```\r\n\t *\r\n\t * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\r\n\t * config property, by name, in this case an empty name:\r\n\t * ```js\r\n\t *\r\n\t * $stateProvider.state(\"home\", {\r\n\t *   views: {\r\n\t *     \"\": {\r\n\t *       template: \"<h1>HELLO!</h1>\"\r\n\t *     }\r\n\t *   }\r\n\t * })\r\n\t * ```\r\n\t *\r\n\t * But typically you'll only use the views property if you name your view or have more than one view\r\n\t * in the same template. There's not really a compelling reason to name a view if its the only one,\r\n\t * but you could if you wanted, like so:\r\n\t *\r\n\t * ```html\r\n\t *\r\n\t * <div ui-view=\"main\"></div>\r\n\t * ```\r\n\t *\r\n\t * ```js\r\n\t *\r\n\t * $stateProvider.state(\"home\", {\r\n\t *   views: {\r\n\t *     \"main\": {\r\n\t *       template: \"<h1>HELLO!</h1>\"\r\n\t *     }\r\n\t *   }\r\n\t * })\r\n\t * ```\r\n\t *\r\n\t * Really though, you'll use views to set up multiple views:\r\n\t * ```html\r\n\t *\r\n\t * <div ui-view></div>\r\n\t * <div ui-view=\"chart\"></div>\r\n\t * <div ui-view=\"data\"></div>\r\n\t * ```\r\n\t *\r\n\t * ```js\r\n\t * $stateProvider.state(\"home\", {\r\n\t *   views: {\r\n\t *     \"\": {\r\n\t *       template: \"<h1>HELLO!</h1>\"\r\n\t *     },\r\n\t *     \"chart\": {\r\n\t *       template: \"<chart_thing/>\"\r\n\t *     },\r\n\t *     \"data\": {\r\n\t *       template: \"<data_thing/>\"\r\n\t *     }\r\n\t *   }\r\n\t * })\r\n\t * ```\r\n\t *\r\n\t * Examples for `autoscroll`:\r\n\t *\r\n\t * ```html\r\n\t *\r\n\t * <!-- If autoscroll present with no expression,\r\n\t *      then scroll ui-view into view -->\r\n\t * <ui-view autoscroll/>\r\n\t *\r\n\t * <!-- If autoscroll present with valid expression,\r\n\t *      then scroll ui-view into view if expression evaluates to true -->\r\n\t * <ui-view autoscroll='true'/>\r\n\t * <ui-view autoscroll='false'/>\r\n\t * <ui-view autoscroll='scopeVariable'/>\r\n\t * ```\r\n\t *\r\n\t * Resolve data:\r\n\t *\r\n\t * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\r\n\t * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\r\n\t *\r\n\t * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\r\n\t * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\r\n\t * depends on `$resolve` data.\r\n\t *\r\n\t * @example\r\n\t * ```js\r\n\t *\r\n\t * $stateProvider.state('home', {\r\n\t *   template: '<my-component user=\"$resolve.user\"></my-component>',\r\n\t *   resolve: {\r\n\t *     user: function(UserService) { return UserService.fetchUser(); }\r\n\t *   }\r\n\t * });\r\n\t * ```\r\n\t */\r\n\tvar uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\r\n\t    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {\r\n\t        function getRenderer(attrs, scope) {\r\n\t            return {\r\n\t                enter: function (element, target, cb) {\r\n\t                    if (angular.version.minor > 2) {\r\n\t                        $animate.enter(element, null, target).then(cb);\r\n\t                    }\r\n\t                    else {\r\n\t                        $animate.enter(element, null, target, cb);\r\n\t                    }\r\n\t                },\r\n\t                leave: function (element, cb) {\r\n\t                    if (angular.version.minor > 2) {\r\n\t                        $animate.leave(element).then(cb);\r\n\t                    }\r\n\t                    else {\r\n\t                        $animate.leave(element, cb);\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\t        }\r\n\t        function configsEqual(config1, config2) {\r\n\t            return config1 === config2;\r\n\t        }\r\n\t        var rootData = {\r\n\t            $cfg: { viewDecl: { $context: $view.rootContext() } },\r\n\t            $uiView: {}\r\n\t        };\r\n\t        var directive = {\r\n\t            count: 0,\r\n\t            restrict: 'ECA',\r\n\t            terminal: true,\r\n\t            priority: 400,\r\n\t            transclude: 'element',\r\n\t            compile: function (tElement, tAttrs, $transclude) {\r\n\t                return function (scope, $element, attrs) {\r\n\t                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs['onload'] || '', autoScrollExp = attrs['autoscroll'], renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\r\n\t                    var activeUIView = {\r\n\t                        $type: 'ng1',\r\n\t                        id: directive.count++,\r\n\t                        name: name,\r\n\t                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name,\r\n\t                        config: null,\r\n\t                        configUpdated: configUpdatedCallback,\r\n\t                        get creationContext() {\r\n\t                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);\r\n\t                        }\r\n\t                    };\r\n\t                    trace_1.trace.traceUIViewEvent(\"Linking\", activeUIView);\r\n\t                    function configUpdatedCallback(config) {\r\n\t                        if (config && !(config instanceof views_1.Ng1ViewConfig))\r\n\t                            return;\r\n\t                        if (configsEqual(viewConfig, config))\r\n\t                            return;\r\n\t                        trace_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\r\n\t                        viewConfig = config;\r\n\t                        updateView(config);\r\n\t                    }\r\n\t                    $element.data('$uiView', { $uiView: activeUIView });\r\n\t                    updateView();\r\n\t                    unregister = $view.registerUIView(activeUIView);\r\n\t                    scope.$on(\"$destroy\", function () {\r\n\t                        trace_1.trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\r\n\t                        unregister();\r\n\t                    });\r\n\t                    function cleanupLastView() {\r\n\t                        if (previousEl) {\r\n\t                            trace_1.trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\r\n\t                            previousEl.remove();\r\n\t                            previousEl = null;\r\n\t                        }\r\n\t                        if (currentScope) {\r\n\t                            trace_1.trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\r\n\t                            currentScope.$destroy();\r\n\t                            currentScope = null;\r\n\t                        }\r\n\t                        if (currentEl) {\r\n\t                            var _viewData_1 = currentEl.data('$uiViewAnim');\r\n\t                            trace_1.trace.traceUIViewEvent(\"Animate out\", _viewData_1);\r\n\t                            renderer.leave(currentEl, function () {\r\n\t                                _viewData_1.$$animLeave.resolve();\r\n\t                                previousEl = null;\r\n\t                            });\r\n\t                            previousEl = currentEl;\r\n\t                            currentEl = null;\r\n\t                        }\r\n\t                    }\r\n\t                    function updateView(config) {\r\n\t                        var newScope = scope.$new();\r\n\t                        var animEnter = $q.defer(), animLeave = $q.defer();\r\n\t                        var $uiViewData = {\r\n\t                            $cfg: config,\r\n\t                            $uiView: activeUIView,\r\n\t                        };\r\n\t                        var $uiViewAnim = {\r\n\t                            $animEnter: animEnter.promise,\r\n\t                            $animLeave: animLeave.promise,\r\n\t                            $$animLeave: animLeave\r\n\t                        };\r\n\t                        var cloned = $transclude(newScope, function (clone) {\r\n\t                            clone.data('$uiViewAnim', $uiViewAnim);\r\n\t                            clone.data('$uiView', $uiViewData);\r\n\t                            renderer.enter(clone, $element, function onUIViewEnter() {\r\n\t                                animEnter.resolve();\r\n\t                                if (currentScope)\r\n\t                                    currentScope.$emit('$viewContentAnimationEnded');\r\n\t                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\r\n\t                                    $uiViewScroll(clone);\r\n\t                                }\r\n\t                            });\r\n\t                            cleanupLastView();\r\n\t                        });\r\n\t                        currentEl = cloned;\r\n\t                        currentScope = newScope;\r\n\t                        /**\r\n\t                         * @ngdoc event\r\n\t                         * @name ui.router.state.directive:ui-view#$viewContentLoaded\r\n\t                         * @eventOf ui.router.state.directive:ui-view\r\n\t                         * @eventType emits on ui-view directive scope\r\n\t                         * @description           *\r\n\t                         * Fired once the view is **loaded**, *after* the DOM is rendered.\r\n\t                         *\r\n\t                         * @param {Object} event Event object.\r\n\t                         */\r\n\t                        currentScope.$emit('$viewContentLoaded', config || viewConfig);\r\n\t                        currentScope.$eval(onloadExp);\r\n\t                    }\r\n\t                };\r\n\t            }\r\n\t        };\r\n\t        return directive;\r\n\t    }];\r\n\t$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\r\n\t/** @hidden */\r\n\tfunction $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {\r\n\t    var getControllerAs = hof_1.parse('viewDecl.controllerAs');\r\n\t    var getResolveAs = hof_1.parse('viewDecl.resolveAs');\r\n\t    return {\r\n\t        restrict: 'ECA',\r\n\t        priority: -400,\r\n\t        compile: function (tElement) {\r\n\t            var initial = tElement.html();\r\n\t            return function (scope, $element) {\r\n\t                var data = $element.data('$uiView');\r\n\t                if (!data)\r\n\t                    return;\r\n\t                var cfg = data.$cfg || { viewDecl: {} };\r\n\t                $element.html(cfg.template || initial);\r\n\t                trace_1.trace.traceUIViewFill(data.$uiView, $element.html());\r\n\t                var link = $compile($element.contents());\r\n\t                var controller = cfg.controller;\r\n\t                var controllerAs = getControllerAs(cfg);\r\n\t                var resolveAs = getResolveAs(cfg);\r\n\t                var resolveCtx = cfg.path && new resolveContext_1.ResolveContext(cfg.path);\r\n\t                var locals = resolveCtx && services_1.getLocals(resolveCtx);\r\n\t                scope[resolveAs] = locals;\r\n\t                if (controller) {\r\n\t                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));\r\n\t                    if (controllerAs) {\r\n\t                        scope[controllerAs] = controllerInstance;\r\n\t                        scope[controllerAs][resolveAs] = locals;\r\n\t                    }\r\n\t                    // TODO: Use $view service as a central point for registering component-level hooks\r\n\t                    // Then, when a component is created, tell the $view service, so it can invoke hooks\r\n\t                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\r\n\t                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\r\n\t                    $element.data('$ngControllerController', controllerInstance);\r\n\t                    $element.children().data('$ngControllerController', controllerInstance);\r\n\t                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\r\n\t                }\r\n\t                // Wait for the component to appear in the DOM\r\n\t                if (predicates_1.isString(cfg.viewDecl.component)) {\r\n\t                    var cmp_1 = cfg.viewDecl.component;\r\n\t                    var kebobName_1 = strings_1.kebobString(cmp_1);\r\n\t                    var getComponentController = function () {\r\n\t                        var directiveEl = [].slice.call($element[0].children)\r\n\t                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });\r\n\t                        return directiveEl && angular.element(directiveEl).data(\"$\" + cmp_1 + \"Controller\");\r\n\t                    };\r\n\t                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {\r\n\t                        if (!ctrlInstance)\r\n\t                            return;\r\n\t                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\r\n\t                        deregisterWatch_1();\r\n\t                    });\r\n\t                }\r\n\t                link(scope);\r\n\t            };\r\n\t        }\r\n\t    };\r\n\t}\r\n\t/** @hidden */\r\n\tvar hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';\r\n\t/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\r\n\tfunction registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {\r\n\t    // Call $onInit() ASAP\r\n\t    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))\r\n\t        controllerInstance.$onInit();\r\n\t    var viewState = common_1.tail(cfg.path).state.self;\r\n\t    var hookOptions = { bind: controllerInstance };\r\n\t    // Add component-level hook for onParamsChange\r\n\t    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {\r\n\t        var resolveContext = new resolveContext_1.ResolveContext(cfg.path);\r\n\t        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;\r\n\t        // Fire callback on any successful transition\r\n\t        var paramsUpdated = function ($transition$) {\r\n\t            // Exit early if the $transition$ is the same as the view was created within.\r\n\t            // Exit early if the $transition$ will exit the state the view is for.\r\n\t            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)\r\n\t                return;\r\n\t            var toParams = $transition$.params(\"to\");\r\n\t            var fromParams = $transition$.params(\"from\");\r\n\t            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\r\n\t            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);\r\n\t            // Find the to params that have different values than the from params\r\n\t            var changedToParams = toSchema.filter(function (param) {\r\n\t                var idx = fromSchema.indexOf(param);\r\n\t                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\r\n\t            });\r\n\t            // Only trigger callback if a to param has changed or is new\r\n\t            if (changedToParams.length) {\r\n\t                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });\r\n\t                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\r\n\t                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);\r\n\t            }\r\n\t        };\r\n\t        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));\r\n\t    }\r\n\t    // Add component-level hook for uiCanExit\r\n\t    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {\r\n\t        var criteria = { exiting: viewState.name };\r\n\t        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\r\n\t    }\r\n\t}\r\n\tangular.module('ui.router.state').directive('uiView', uiView);\r\n\tangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\r\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/** @module ng1 */ /** */\r\n\tvar angular = __webpack_require__(57);\r\n\t/**\r\n\t * @ngdoc object\r\n\t * @name ui.router.state.$uiViewScrollProvider\r\n\t *\r\n\t * @description\r\n\t * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\r\n\t */\r\n\tfunction $ViewScrollProvider() {\r\n\t    var useAnchorScroll = false;\r\n\t    /**\r\n\t     * @ngdoc function\r\n\t     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\r\n\t     * @methodOf ui.router.state.$uiViewScrollProvider\r\n\t     *\r\n\t     * @description\r\n\t     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\r\n\t     * scrolling based on the url anchor.\r\n\t     */\r\n\t    this.useAnchorScroll = function () {\r\n\t        useAnchorScroll = true;\r\n\t    };\r\n\t    /**\r\n\t     * @ngdoc object\r\n\t     * @name ui.router.state.$uiViewScroll\r\n\t     *\r\n\t     * @requires $anchorScroll\r\n\t     * @requires $timeout\r\n\t     *\r\n\t     * @description\r\n\t     * When called with a jqLite element, it scrolls the element into view (after a\r\n\t     * `$timeout` so the DOM has time to refresh).\r\n\t     *\r\n\t     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\r\n\t     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\r\n\t     */\r\n\t    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\r\n\t            if (useAnchorScroll) {\r\n\t                return $anchorScroll;\r\n\t            }\r\n\t            return function ($element) {\r\n\t                return $timeout(function () {\r\n\t                    $element[0].scrollIntoView();\r\n\t                }, 0, false);\r\n\t            };\r\n\t        }];\r\n\t}\r\n\tangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-ui-router.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap feacb251ed5f1f1eaed5\n **/","/**\n * Main entry point for angular 1.x build\n * @module ng1\n */\n/** for typedoc */\n\nexport * from \"./core\";\n\nexport * from \"./ng1/interface\";\nexport * from \"./ng1/services\";\nexport * from \"./ng1/statebuilders/views\";\nexport * from \"./ng1/stateProvider\";\n\nimport \"./ng1/directives/stateDirectives\";\nimport \"./ng1/stateFilters\";\nimport \"./ng1/directives/viewDirective\";\nimport \"./ng1/viewScroll\";\n\nexport default \"ui.router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1.ts\n **/","/** @module common */ /** */\n\nexport * from \"./common/module\";\nexport * from \"./params/module\";\nexport * from \"./path/module\";\nexport * from \"./resolve/module\";\nexport * from \"./state/module\";\nexport * from \"./transition/module\";\nexport * from \"./url/module\";\nexport * from \"./view/module\";\nexport * from \"./globals\";\n\nexport { UIRouter } from \"./router\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./core.ts\n **/","/** @module common */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./common\";\nexport * from \"./coreservices\";\nexport * from \"./glob\";\nexport * from \"./hof\";\nexport * from \"./predicates\";\nexport * from \"./queue\";\nexport * from \"./strings\";\nexport * from \"./trace\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/module.ts\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\nimport {isFunction, isString, isArray, isRegExp, isDate} from \"./predicates\";\nimport { all, any, not, prop, curry } from \"./hof\";\nimport {services} from \"./coreservices\";\nimport {State} from \"../state/stateObject\";\n\nlet w: any = typeof window === 'undefined' ? {} : window;\nlet angular = w.angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = angular.extend || _extend;\nexport const equals = angular.equals || _equals;\nexport const identity = (x: any) => x;\nexport const noop = () => <any> undefined;\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (x: X) => boolean;\nexport type IInjectable = (Function|any[]);\n\nexport interface Obj extends Object {\n  [key: string]: any\n}\n\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nexport function bindFunctions(from: Obj, to: Obj, bindTo: Obj, fnNames: string[] = Object.keys(from)) {\n  return fnNames.filter(name => typeof from[name] === 'function')\n      .forEach(name => to[name] = from[name].bind(bindTo));\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra: Obj) =>\n    extend(new (extend(function() {}, { prototype: parent }))(), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args: IArguments, idx = 0) =>\n    Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray = (array: any[], obj: any) =>\n    array.indexOf(obj) !== -1;\n\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexport const removeFrom = curry((array: any[], obj: any) => {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n});\n\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts = {}, ...defaultsList: Obj[]) {\n  let defaults = merge.apply(null, [{}].concat(defaultsList));\n  return extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\n\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nexport function merge(dst: Obj, ...objs: Obj[]) {\n  forEach(objs, function(obj: Obj) {\n    forEach(obj, function(value: any, key: string) {\n      if (!dst.hasOwnProperty(key)) dst[key] = value;\n    });\n  });\n  return dst;\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: State, second: State) {\n  let path: State[] = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nexport function equalForKeys(a: Obj, b: Obj, keys: string[] = Object.keys(a)) {\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\ntype PickOmitPredicate = (keys: string[], key: string) => boolean;\nfunction pickOmitImpl(predicate: PickOmitPredicate, obj: Obj, ...keys: string[]) {\n  let objCopy = {};\n  for (let key in obj) {\n    if (predicate(keys, key)) objCopy[key] = obj[key];\n  }\n  return objCopy;\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, 'a', 'b'); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, ...propNames: string[]): Obj;\n/** Return a copy of the object only containing the whitelisted properties. */\nexport function pick(obj: Obj) {\n  return pickOmitImpl.apply(null, [inArray].concat(restArgs(arguments)));\n}\n\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj;\n/**\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, 'a', 'b'); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames 1..n strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, ...propNames: string[]): Obj;\n/** Return a copy of the object omitting the blacklisted properties. */\nexport function omit(obj: Obj) {\n  let notInArray = (array, item) => !inArray(array, item);\n  return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\n}\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck(collection: Obj[], propName: string): Obj[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj: Obj) =>\n    Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem: any) =>\n    isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T> (acc: T[], token: T): T[] =>\n    inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport function assertPredicate<T>(predicate: Predicate<T>, errMsg: (string|Function) = \"assert failure\"): Predicate<T> {\n  return (obj: T) => {\n    if (!predicate(obj)) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return true;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) =>\n    Object.keys(obj).map(key => [ key, obj[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...arrayArgs: any[]): any[] {\n  if (arrayArgs.length === 0) return [];\n  let length = arrayArgs.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  return Array.apply(null, Array(length)).map((ignored, idx) => arrayArgs.map(arr => arr[idx]));\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src: Obj, dest: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: (any[]|any), cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\nfunction _copyProps(to: Obj, from: Obj) {\n  Object.keys(from).forEach(key => to[key] = from[key]);\n  return to;\n}\nfunction _extend(toObj: Obj, fromObj: Obj): Obj;\nfunction _extend(toObj: Obj, ...fromObj: Obj[]): Obj;\nfunction _extend(toObj: Obj) {\n  return restArgs(arguments, 1).filter(identity).reduce(_copyProps, toObj);\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key: string, keys: { [i: string]: boolean } = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/common.ts\n **/","/** Predicates @module common_predicates */ /** */\nimport {and, not, pipe, prop} from \"./hof\";\nimport {Predicate} from \"./common\"; // has or is using\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isFunction: (x: any) => x is Function = <any> tis('function');\nexport const isNumber: (x: any) => x is number = <any> tis('number');\nexport const isString = <(x: any) => x is string> tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any> ((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any> ((x: any) => toStr.call(x) === '[object RegExp]');\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/predicates.ts\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */ /** */\n\nimport {Predicate} from \"./common\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args: any[]) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) =>\n    (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) =>\n    pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) =>\n    (...args: any[]) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\nexport const any = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = (ctor: Function): Predicate<any> => obj => \n    (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (val: any) => (other: any) =>\n    val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) =>\n      obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/hof.ts\n **/","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n/** for typedoc */\nimport {IInjectable, Obj} from \"./common\";\n\nlet notImplemented = (fnname: string) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n  location: <any> {},\n  locationConfig: <any> {},\n  template: <any> {}\n};\n\n[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(key => services.location[key] = notImplemented(key));\n\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\" ]\n    .forEach(key => services.locationConfig[key] = notImplemented(key));\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(val?: T): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  get(token: any): any;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n  strictDi?: boolean;\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n  /** Services related to getting or setting the browser location (url) */\n  location: LocationServices;\n  /** Retrieves configuration for how to construct a URL. */\n  locationConfig: LocationConfig;\n  template: TemplateServices;\n}\n\nexport interface LocationServices {\n  setUrl(newurl: string, replace?: boolean): void;\n  path(): string;\n  search(): string;\n  hash(): string;\n  onChange(callback: Function): Function;\n}\n\nexport interface LocationConfig {\n  port(): number;\n  protocol(): string;\n  host(): string;\n\n  baseHref(): string;\n  html5Mode(): boolean;\n  hashPrefix(): string;\n  hashPrefix(newprefix: string): string;\n}\n\nexport interface TemplateServices {\n  get(url: string): Promise<string>;\n}\n\n\nexport {services};\n\n\n/** WEBPACK FOOTER **\n ** ./common/coreservices.ts\n **/","/** @module common */ \n/** \n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - [[HookMatchCriteria.to]]\n * - [[HookMatchCriteria.from]]\n * - [[HookMatchCriteria.exiting]]\n * - [[HookMatchCriteria.retained]]\n * - [[HookMatchCriteria.entering]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    let regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n\n  /** @deprecated whats the point? */\n  static is(text: string) {\n    return text.indexOf('*') > -1;\n  }\n\n  /** @deprecated whats the point? */\n  static fromString(text: string) {\n    if (!this.is(text)) return null;\n    return new Glob(text);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/glob.ts\n **/","/** @module common */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/queue.ts\n **/","/** @module common_strings */ /** */\n\nimport {isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject} from \"./predicates\";\nimport {Rejection} from \"../transition/rejectFactory\";\nimport {IInjectable, identity, Obj} from \"./common\";\nimport {pattern, is, not, val, invoke} from \"./hof\";\nimport {Transition} from \"../transition/transition\";\nimport {Resolvable} from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Obj) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  let toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  let fnName = fn['name'] || \"\";\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet stringifyPatternFn: (val: any) => string = null;\nlet stringifyPattern = function(value: any) {\n  let isTransitionRejectionPromise = Rejection.isTransitionRejectionPromise;\n\n  stringifyPatternFn = <any> stringifyPatternFn || pattern([\n    [not(isDefined),                  val(\"undefined\")],\n    [isNull,                          val(\"null\")],\n    [isPromise,                       val(\"[Promise]\")],\n    [isTransitionRejectionPromise,    (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),                   invoke(\"toString\")],\n    [is(Transition),                  invoke(\"toString\")],\n    [is(Resolvable),                  invoke(\"toString\")],\n    [isInjectable,                    functionToString],\n    [val(true),                       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: any) {\n  var seen: any[] = [];\n\n  function format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\n\n/** WEBPACK FOOTER **\n ** ./common/strings.ts\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from \"../common/common\";\nimport {stringify} from \"../common/strings\";\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6\n}\n\nexport class Rejection {\n  type: number;\n  message: string;\n  detail: any;\n  redirected: boolean;\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => \n        d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let type = this.type, message = this.message, detail = detailString(this.detail);\n    return `TransitionRejection(type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise() {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isTransitionRejectionPromise(obj: any) {\n    return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n  }\n\n  /** Returns a TransitionRejection due to transition superseded */\n  static superseded(detail?: any, options?: any) {\n    let message = \"The transition has been superseded by a different transition\";\n    let rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a TransitionRejection due to redirected transition */\n  static redirected(detail?: any) {\n    return Rejection.superseded(detail, {redirected: true});\n  }\n\n  /** Returns a TransitionRejection due to invalid transition */\n  static invalid(detail?: any) {\n    let message = \"This transition is invalid\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to ignored transition */\n  static ignored(detail?: any) {\n    let message = \"The transition was ignored\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static aborted(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition has been aborted\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a TransitionRejection due to aborted transition */\n  static errored(detail?: any) {\n    // TODO think about how to encapsulate an Error() object\n    let message = \"The transition errored\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/rejectFactory.ts\n **/","/** @module transition */ /** for typedoc */\nimport {stringify} from \"../common/strings\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\nimport {\n    map, find, extend, mergeR,  tail,\n    omit, toJson, arrayTuples, unnestR, identity, anyTrueR\n} from \"../common/common\";\nimport { isObject, isArray } from \"../common/predicates\";\nimport { prop, propEq, val, not } from \"../common/hof\";\n\nimport {StateDeclaration, StateOrName} from \"../state/interface\";\nimport {\n    TransitionOptions, TransitionHookOptions, TreeChanges, IHookRegistry, IHookGetter,\n    HookMatchCriteria, TransitionHookFn, TransitionStateHookFn, HookRegOptions\n} from \"./interface\";\n\nimport {TransitionHook} from \"./transitionHook\";\nimport {HookRegistry, matchState} from \"./hookRegistry\";\nimport {HookBuilder} from \"./hookBuilder\";\nimport {PathNode} from \"../path/node\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\nimport {Rejection} from \"./rejectFactory\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {UIRouter} from \"../router\";\nimport {Globals} from \"../globals\";\nimport {UIInjector} from \"../common/interface\";\nimport {RawParams} from \"../params/interface\";\n\n\nlet transitionCount = 0;\nconst stateSelf: (_state: State) => StateDeclaration = prop(\"self\");\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n  static diToken = Transition;\n  \n  $id: number;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n  /**\n   * A boolean which indicates if the transition was successful\n   *\n   * After a successful transition, this value is set to true.\n   * After a failed transition, this value is set to false.\n   */\n  success: boolean;\n  /** @hidden */\n  private _error: any;\n\n  private _options: TransitionOptions;\n  private _treeChanges: TreeChanges;\n  private _targetState: TargetState;\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n  getHooks:   IHookGetter;\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // Makes the Transition instance a hook registry (onStart, etc)\n    HookRegistry.mixin(new HookRegistry(), this);\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = transitionCount++;\n    let toPath = PathFactory.buildToPath(fromPath, targetState);\n    this._treeChanges = PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n    let enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\n    let rootResolvables: Resolvable[] = [\n      new Resolvable(UIRouter, () => router, [], undefined, router),\n      new Resolvable(Transition, () => this, [], undefined, this),\n      new Resolvable('$transition$', () => this, [], undefined, this),\n      new Resolvable('$stateParams', () => this.params(), [], undefined, this.params())\n    ];\n\n    let rootNode: PathNode = this._treeChanges.to[0];\n    let context = new ResolveContext(this._treeChanges.to);\n    context.addResolvables(rootResolvables, rootNode.state);\n  }\n\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * @returns The state object for the Transition's \"from state\".\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * @returns The state object for the Transition's target state (\"to state\").\n   */\n  to() {\n    return this.$to().self;\n  }\n\n  /**\n   * Gets the Target State\n   *\n   * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\n   *\n   * @returns the [[TargetState]] of this Transition\n   */\n  targetState() {\n    return this._targetState;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   */\n  is(compare: (Transition|{to?: any, from?: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * @param pathname Pick which treeChanges path to get parameters for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname: string = \"to\"): { [key: string]: any } {\n    return this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {});\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName): UIInjector {\n    let path: PathNode[] = this.treeChanges().to;\n    if (state) path = PathFactory.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(): any[] {\n    return new ResolveContext(this._treeChanges.to).getTokens();\n  }\n\n\n  /**\n   * Gets resolved values\n   *\n   * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n   * are available to the Transition.\n   *\n   * Given a token, returns the resolved data for that token.\n   * Given an array of tokens, returns an array of resolved data for those tokens.\n   *\n   * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n   * If a resolvable doesn't exist for the token, throws an error.\n   *\n   * @param token the token (or array of tokens)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveValue(token: (any|any[])): (any|any[]) {\n    let resolveContext = new ResolveContext(this._treeChanges.to);\n    const getData = (token: any) => {\n      var resolvable = resolveContext.getResolvable(token);\n      if (resolvable === undefined) {\n        throw new Error(`Dependency Injection token not found: ${stringify(token)}`);\n      }\n      return resolvable.data;\n    };\n\n    if (isArray(token)) {\n      return token.map(getData);\n    }\n\n    return getData(token);\n  }\n\n  /**\n   * Gets a [[Resolvable]] primitive\n   *\n   * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\n   *\n   * @param token the DI token\n   *\n   * @returns the [[Resolvable]] in the transition's to path, or undefined\n   */\n  getResolvable(token: any): Resolvable {\n    return new ResolveContext(this._treeChanges.to).getResolvable(token);\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n   *\n   * @param resolvable an [[Resolvable]] object\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable, state: StateOrName = \"\"): void {\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    let resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable], targetNode.state);\n  }\n\n  /**\n   * If the current transition is a redirect, returns the transition that was redirected.\n   *\n   * Gets the transition from which this transition was redirected.\n   *\n   *\n   * @example\n   * ```js\n   *\n   * let transitionA = $state.go('A').transitionA\n   * transitionA.onStart({}, () => $state.target('B'));\n   * $transitions.onSuccess({ to: 'B' }, (trans) => {\n   *   trans.to().name === 'B'; // true\n   *   trans.redirectedFrom() === transitionA; // true\n   * });\n   * ```\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  redirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: State): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  treeChanges = () => this._treeChanges;\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let newOptions = extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let originalEnteringNodes = this.treeChanges().entering;\n    let redirectEnteringNodes = newTransition.treeChanges().entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: State) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let matchingEnteringNodes: PathNode[] = PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let {to, from} = this._treeChanges;\n    if (this._options.reload || tail(to).state !== tail(from).state) return undefined;\n\n    let nodeSchemas: Param[][] = to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [to, from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.length === 0;\n  }\n\n  /**\n   * @hidden\n   */\n  hookBuilder(): HookBuilder {\n    return new HookBuilder(this.router.transitionService, this, <TransitionHookOptions> {\n      transition: this,\n      current: this._options.current\n    });\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @returns a promise for a successful transition.\n   */\n  run(): Promise<any> {\n    let runSynchronousHooks = TransitionHook.runSynchronousHooks;\n    let hookBuilder = this.hookBuilder();\n    let globals = <Globals> this.router.globals;\n    globals.transitionHistory.enqueue(this);\n\n    let syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\n    if (Rejection.isTransitionRejectionPromise(syncResult)) {\n      syncResult.catch(() => 0); // issue #2676\n      let rejectReason = (<any> syncResult)._transitionRejection;\n      this._deferred.reject(rejectReason);\n      return this.promise;\n    }\n\n    if (!this.valid()) {\n      let error = new Error(this.error());\n      this._deferred.reject(error);\n      return this.promise;\n    }\n\n    if (this.ignored()) {\n      trace.traceTransitionIgnored(this);\n      this._deferred.reject(Rejection.ignored());\n      return this.promise;\n    }\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n    };\n\n    const transitionError = (reason: any) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n    };\n\n    trace.traceTransitionStart(this);\n\n    // Chain the next hook off the previous\n    const appendHookToChain = (prev: Promise<any>, nextHook: TransitionHook) =>\n        prev.then(() => nextHook.invokeHook());\n\n    // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n    hookBuilder.asyncHooks()\n        .reduce(appendHookToChain, syncResult)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  isActive = () => this === this._options.current();\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error() || this.success !== undefined;\n  }\n\n  /**\n   * The Transition error reason.\n   *\n   * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n   * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n   *\n   * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n   */\n  error() {\n    let state: State = this.$to();\n\n    let redirects = 0, trans: Transition = this;\n    while((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) return `Too many Transition redirects (20+)`;\n    }\n\n    if (state.self.abstract)\n      return `Cannot transition to abstract state '${state.name}'`;\n    if (!Param.validates(state.parameters(), this.params()))\n      return `Param values not valid for state '${state.name}'`;\n    if (this.success === false)\n      return this._error;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params: RawParams) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, \"#\");\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transition.ts\n **/","/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig, ViewContext}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {PathNode} from \"../path/node\";\nimport {PolicyWhen} from \"../resolve/interface\";\nimport {TransitionHook} from \"../transition/transitionHook\";\nimport {HookResult} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\n\n/** @hidden */\nfunction uiViewString (viewData: ActiveUIView) {\n    if (!viewData) return 'ui-view (defunct)';\n    return `[ui-view#${viewData.id} tag ` +\n        `in template from '${viewData.creationContext && viewData.creationContext.name || '(root)'}' state]: ` +\n        `fqn: '${viewData.fqn}', ` +\n        `name: '${viewData.name}@${viewData.creationContext}')`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) =>\n    `[ViewConfig#${viewConfig.$id} from '${viewConfig.viewDecl.$context.name || '(root)'}' state]: target ui-view: '${viewConfig.viewDecl.$uiViewName}@${viewConfig.viewDecl.$uiViewContextAnchor}'`;\n\n/** @hidden */\nfunction normalizedCat(input: Category|string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, UIVIEW, VIEWCONFIG\n}\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  approximateDigests: number;\n\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = <any> Object.keys(Category)\n          .map(k => parseInt(k, 10))\n          .filter(k => !isNaN(k))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: Category[]) { this._set(true, categories) }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: Category[]) { this._set(false, categories) }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: Category): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** called by ui-router code */\n  traceTransitionStart(transition: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = transition.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(transition);\n    console.log(`Transition #${tid} Digest #${digest}: Started  -> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: Ignored  <> ${transitionStr}`);\n  }\n\n  /** called by ui-router code */\n  traceHookInvocation(step: TransitionHook, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(options),\n        digest = this.approximateDigests,\n        event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString((step as any).eventHook.callback);\n    console.log(`Transition #${tid} Digest #${digest}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** called by ui-router code */\n  traceHookResult(hookResult: HookResult, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let tid = parse(\"transition.$id\")(transitionOptions),\n        digest = this.approximateDigests,\n        hookResultStr = stringify(hookResult);\n    console.log(`Transition #${tid} Digest #${digest}:   <- Hook returned: ${maxLength(200, hookResultStr)}`);\n  }\n\n  /** called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        pathStr = path && path.toString();\n    console.log(`Transition #${tid} Digest #${digest}:         Resolving ${pathStr} (${when})`);\n  }\n\n  /** called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        resolvableStr = resolvable && resolvable.toString(),\n        result = stringify(resolvable.data);\n    console.log(`Transition #${tid} Digest #${digest}:               <- Resolved  ${resolvableStr} to: ${maxLength(200, result)}`);\n  }\n\n  /** called by ui-router code */\n  traceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Rejected ${transitionStr}, reason: ${reason}`);\n  }\n\n  /** called by ui-router code */\n  traceSuccess(finalState: State, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    let tid = trans && trans.$id,\n        digest = this.approximateDigests,\n        state = finalState.name,\n        transitionStr = stringify(trans);\n    console.log(`Transition #${tid} Digest #${digest}: <- Success  ${transitionStr}, final state: ${state}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n\n\n\n/** WEBPACK FOOTER **\n ** ./common/trace.ts\n **/","/** @module transition */ /** for typedoc */\nimport {TransitionHookOptions, IEventHook, HookResult} from \"./interface\";\nimport {defaults, noop} from \"../common/common\";\nimport {fnToString, maxLength} from \"../common/strings\";\nimport {isPromise} from \"../common/predicates\";\nimport {val, is, parse } from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services} from \"../common/coreservices\";\n\nimport {Rejection} from \"./rejectFactory\";\nimport {TargetState} from \"../state/targetState\";\nimport {Transition} from \"./transition\";\nimport {State} from \"../state/stateObject\";\n\nlet defaultOptions: TransitionHookOptions = {\n  async: true,\n  rejectIfSuperseded: true,\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null\n};\n\n/** @hidden */\nexport class TransitionHook {\n  constructor(private transition: Transition,\n              private stateContext: State,\n              private eventHook: IEventHook,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n  }\n\n  private isSuperseded = () =>\n    this.options.current() !== this.options.transition;\n\n  invokeHook(): Promise<HookResult> {\n    let { options, eventHook } = this;\n    trace.traceHookInvocation(this, options);\n    if (options.rejectIfSuperseded && this.isSuperseded()) {\n      return Rejection.superseded(options.current()).toPromise();\n    }\n\n    let synchronousHookResult = !eventHook._deregistered\n      ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\n      : undefined;\n\n    return this.handleHookResult(synchronousHookResult);\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false (cancel), a TargetState (redirect),\n   * or a promise (which may later resolve to false or a redirect)\n   *\n   * This also handles \"transition superseded\" -- when a new transition\n   * was started while the hook was still running\n   */\n  handleHookResult(result: HookResult): Promise<any> {\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess the resolved value\n      return result.then(this.handleHookResult.bind(this));\n    }\n\n    trace.traceHookResult(result, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted(\"Hook aborted transition\").toPromise();\n    }\n\n    const isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and start a redirected Transition (to the TargetState).\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n\n  toString() {\n    let { options, eventHook } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(eventHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n\n  /**\n   * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n   *\n   * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n   */\n  static runSynchronousHooks(hooks: TransitionHook[], swallowExceptions: boolean = false): Promise<any> {\n    let results: Promise<HookResult>[] = [];\n    for (let i = 0; i < hooks.length; i++) {\n      let hook = hooks[i];\n      try {\n        results.push(hook.invokeHook());\n      } catch (exception) {\n        if (!swallowExceptions) {\n          return Rejection.errored(exception).toPromise();\n        }\n\n        let errorHandler = hook.transition.router.stateService.defaultErrorHandler();\n        errorHandler(exception);\n      }\n    }\n\n    let rejections = results.filter(Rejection.isTransitionRejectionPromise);\n    if (rejections.length) return rejections[0];\n\n    return results\n        .filter(isPromise)\n        .reduce((chain: Promise<any>, promise: Promise<any>) => chain.then(val(promise)), services.$q.when());\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionHook.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, StateOrName} from \"./interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {TransitionOptions} from \"../transition/interface\";\n\nimport {State} from \"./stateObject\";\nimport {toJson} from \"../common/common\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: State,\n    _params: ParamsOrArray = {},\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  name() {\n    return this._definition && this._definition.name || this._identifier;\n  }\n\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  $state(): State {\n    return this._definition;\n  }\n\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  options() {\n    return this._options;\n  }\n\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  valid(): boolean {\n    return !this.error();\n  }\n\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${toJson(this.params())}`;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/targetState.ts\n **/","/** @module transition */ /** for typedoc */\nimport {extend, removeFrom, allTrueR, tail} from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"./interface\"; // has or is using\n\nimport {\n    HookRegOptions, HookMatchCriteria, IEventHook, IHookRegistry, IHookRegistration, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {State} from \"../state/stateObject\";\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: State, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state: State) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = Glob.fromString(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/** @hidden */\nexport class EventHook implements IEventHook {\n  callback: HookFn;\n  matchCriteria: HookMatchCriteria;\n  priority: number;\n  bind: any;\n  _deregistered: boolean;\n\n  constructor(matchCriteria: HookMatchCriteria, callback: HookFn, options: HookRegOptions = <any>{}) {\n    this.callback = callback;\n    this.matchCriteria = extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this._deregistered = false;\n  }\n\n  private static _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\n    let matches: IMatchingNodes = {\n      to: _matchingNodes([tail(treeChanges.to)], mc.to),\n      from: _matchingNodes([tail(treeChanges.from)], mc.from),\n      exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n      retained: _matchingNodes(treeChanges.retained, mc.retained),\n      entering: _matchingNodes(treeChanges.entering, mc.entering),\n    };\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched: boolean = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n        .map(prop => matches[prop])\n        .reduce(allTrueR, true);\n\n    return allMatched ? matches : null;\n  }\n}\n\n/** @hidden */\ninterface ITransitionEvents { [key: string]: IEventHook[]; }\n\n/** @hidden Return a registration function of the requested type. */\nfunction makeHookRegistrationFn(hooks: ITransitionEvents, name: string): IHookRegistration {\n  return function (matchObject, callback, options = {}) {\n    let eventHook = new EventHook(matchObject, callback, options);\n    hooks[name].push(eventHook);\n\n    return function deregisterEventHook() {\n      eventHook._deregistered = true;\n      removeFrom(hooks[name])(eventHook);\n    };\n  };\n}\n\n/**\n * Mixin class acts as a Transition Hook registry.\n *\n * Holds the registered [[HookFn]] objects.\n * Exposes functions to register new hooks.\n *\n * This is a Mixin class which can be applied to other objects.\n *\n * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n *\n * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n * Global hooks are added to the [[TransitionService]].\n * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n * (note: the hook criteria still must match the Transition).\n */\nexport class HookRegistry implements IHookRegistry {\n  static mixin(source: HookRegistry, target: IHookRegistry) {\n    Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(key => target[key] = source[key]);\n  }\n\n  private _transitionEvents: ITransitionEvents = {\n    onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n  };\n\n  getHooks = (name: string) => this._transitionEvents[name];\n\n  /** @inheritdoc */\n  onBefore  = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n  /** @inheritdoc */\n  onStart   = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n  /** @inheritdoc */\n  onEnter   = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n  /** @inheritdoc */\n  onRetain  = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n  /** @inheritdoc */\n  onExit    = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n  /** @inheritdoc */\n  onFinish  = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n  /** @inheritdoc */\n  onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n  /** @inheritdoc */\n  onError   = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookRegistry.ts\n **/","/** @module transition */ /** for typedoc */\n\nimport {extend, tail, assertPredicate, unnestR, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IEventHook, IMatchingNodes} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {TransitionHook} from \"./transitionHook\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\nimport {TransitionService} from \"./transitionService\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n\n  treeChanges: TreeChanges;\n  transitionOptions: TransitionOptions;\n\n  toState: State;\n  fromState: State;\n\n  constructor(private $transitions: TransitionService, private transition: Transition, private baseHookOptions: TransitionHookOptions) {\n    this.treeChanges        = transition.treeChanges();\n    this.toState            = tail(this.treeChanges.to).state;\n    this.fromState          = tail(this.treeChanges.from).state;\n    this.transitionOptions  = transition.options();\n  }\n\n  getOnBeforeHooks  = () => this._buildNodeHooks(\"onBefore\",  \"to\",       tupleSort(), { async: false });\n  getOnStartHooks   = () => this._buildNodeHooks(\"onStart\",   \"to\",       tupleSort());\n  getOnExitHooks    = () => this._buildNodeHooks(\"onExit\",    \"exiting\",  tupleSort(true),  { stateHook: true });\n  getOnRetainHooks  = () => this._buildNodeHooks(\"onRetain\",  \"retained\", tupleSort(false), { stateHook: true });\n  getOnEnterHooks   = () => this._buildNodeHooks(\"onEnter\",   \"entering\", tupleSort(false), { stateHook: true });\n  getOnFinishHooks  = () => this._buildNodeHooks(\"onFinish\",  \"to\",       tupleSort());\n  getOnSuccessHooks = () => this._buildNodeHooks(\"onSuccess\", \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n  getOnErrorHooks   = () => this._buildNodeHooks(\"onError\",   \"to\",       tupleSort(), { async: false, rejectIfSuperseded: false });\n\n  asyncHooks() {\n    let onStartHooks    = this.getOnStartHooks();\n    let onExitHooks     = this.getOnExitHooks();\n    let onRetainHooks   = this.getOnRetainHooks();\n    let onEnterHooks    = this.getOnEnterHooks();\n    let onFinishHooks   = this.getOnFinishHooks();\n\n    let asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n    return asyncHooks.reduce(unnestR, []).filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n   * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n   * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n   * @param options any specific Transition Hook Options\n   */\n  private _buildNodeHooks(hookType: string,\n                          matchingNodesProp: string,\n                          sortHooksFn: (l: HookTuple, r: HookTuple) => number,\n                          options?: TransitionHookOptions): TransitionHook[] {\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n    if (!matchingHooks) return [];\n\n     const makeTransitionHooks = (hook: IEventHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let matches: IMatchingNodes = hook.matches(this.treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let matchingNodes: PathNode[] = matches[matchingNodesProp];\n\n       // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n       // Everything else gets the \"to path\"\n       let resolvePath = matchingNodesProp === 'exiting' ? this.treeChanges.from : this.treeChanges.to;\n       let resolveContext = new ResolveContext(resolvePath);\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let _options = extend({ bind: hook.bind, traceData: { hookType, context: node} }, this.baseHookOptions, options);\n         let state = _options.stateHook ? node.state : null;\n         let transitionHook = new TransitionHook(this.transition, state, hook, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(sortHooksFn)\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all IEventHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[IEventHook]]s\n   */\n  private _matchingHooks(hookName: string, treeChanges: TreeChanges): IEventHook[] {\n    return [ this.transition, this.$transitions ]                             // Instance and Global hook registries\n        .map((reg: IHookRegistry) => reg.getHooks(hookName))                  // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookName}`))  // Sanity check\n        .reduce(unnestR, [])                                                  // Un-nest IEventHook[][] to IEventHook[] array\n        .filter(hook => hook.matches(treeChanges));                           // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: IEventHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./transition/hookBuilder.ts\n **/","/** @module resolve */ /** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {trace} from \"../common/trace\";\nimport {services, $InjectorLike} from \"../common/coreservices\";\nimport {resolvePolicies, PolicyWhen} from \"./interface\";\n\nimport {PathNode} from \"../path/node\";\nimport {Resolvable} from \"./resolvable\";\nimport {State} from \"../state/stateObject\";\nimport {PathFactory} from \"../path/pathFactory\";\nimport {stringify} from \"../common/strings\";\nimport {Transition} from \"../transition/transition\";\nimport {UIInjector} from \"../common/interface\";\n\nconst when = resolvePolicies.when;\nconst ALL_WHENS = [when.EAGER, when.LAZY];\nconst EAGER_WHENS = [when.EAGER];\n\nexport const NATIVE_INJECTOR_TOKEN = \"Native Injector\";\n\n/**\n * Encapsulates Depenency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token: any): Resolvable {\n    var matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: State): ResolveContext {\n    return new ResolveContext(PathFactory.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: State) {\n    var node = <PathNode> find(this._path, propEq('state', state));\n    var keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n  \n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    let promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      const matchesRequestedPolicy = (resolvable: Resolvable) =>\n          inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n      let nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n      let subContext = this.subContext(node.state);\n\n      // For the matching Resolvables, start their async fetch process.\n      var getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      return acc.concat(nodeResolvables.map(getResult));\n    }, []);\n\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    let node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    let subPath: PathNode[] = PathFactory.subPath(this._path, x => x === node) || this._path;\n    let availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = (token: any) => {\n      let matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let fromInjector = this.injector().getNative(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n\n  constructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n\n  get(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return this.native && this.native.get(token);\n  }\n\n  getAsync(token: any) {\n    var resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n\n  getNative(token: any) {\n    return this.native.get(token);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolveContext.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\nexport interface Resolvables {\n  [key: string]: Resolvable;\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be defined in [[StateDefinition.resolve]] blocks to declare\n * async data that the state or substates require.\n */\nexport interface ResolvableLiteral {\n  /** The Dependency Injection token that will be used to inject/access the resolvable */\n  token: any;\n\n  /**\n   * The function that returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /** A policy that defines when to invoke the resolve, and whether to wait for async and unwrap the data */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens for dependencies of the [[resolveFn]].\n   * The DI tokens are references to other `Resolvables`, or to global services.\n   */\n  deps?: any[];\n\n  /** Pre-resolved value. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * @example\n * ```js\n *\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * 1) Individual resolve definition\n * 2) State definition\n * 3) Global default\n *\n * @example\n * ```js\n *\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default) resolved as the resolve's state is being entered\n   * - `EAGER` resolved as the transition is starting\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default) if a promise is returned from the resolveFn, wait for the promise before proceeding\n   * - `NOWAIT` if a promise is returned from the resolve, do not wait for the promise.\n   *            The promise will not be unwrapped.\n   *            The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT` When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *            The Observable item will not be unwrapped.\n   *            The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/interface.ts\n **/","/** @module resolve */ /** for typedoc */\nimport {extend, equals, inArray, identity} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\nimport {stringify} from \"../common/strings\";\nimport {isFunction, isObject} from \"../common/predicates\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {PathNode} from \"../path/node\";\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /**\n   * This constructor creates a new `Resolvable`\n   *\n   * @example\n   * ```js\n   *\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (arg1 == null || arg1 == undefined) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state:State): ResolvePolicy {\n    let thisPolicy = this.policy || {};\n    let statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    }\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    let $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(r =>\n            r.get(resolveContext, trans))) as Promise<any[]>;\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = (resolvedDeps: any[]) =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = (observable$: any) => {\n      let cached = observable$.cache(1);\n      return cached.take(1).toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let node: PathNode = resolveContext.findNode(this);\n    let state: State = node && node.state;\n    let maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n  \n  static fromData = (token: any, data: any) =>  \n      new Resolvable(token, () => data, null, null, data);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/resolvable.ts\n **/","/** @module path */ /** for typedoc */\n\nimport {extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray} from \"../common/common\";\nimport {prop, propEq, not} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\nimport {ViewConfig} from \"../view/interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nimport {State} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {ViewService} from \"../view/view\";\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathFactory {\n\n  constructor() { }\n\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(path: PathNode[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let toPath: PathNode[] = PathFactory.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: State[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let subPath = PathFactory.subPath(path, n => n === node);\n      let viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: State): RawParams {\n      let node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: State): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n    const staticParams = (state: State) => \n        state.parameters({ inherit: false }).filter(not(prop('dynamic'))).map(prop('id'));\n    const nodesMatch = (node1: PathNode, node2: PathNode) =>\n        node1.equals(node2, staticParams(node1.state));\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let node = find(path, predicate);\n    let elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) => path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./path/pathFactory.ts\n **/","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, find, allTrueR} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {State} from \"../state/stateObject\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\n\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: State;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /** Creates a copy of a PathNode */\n  constructor(state: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: State);\n  constructor(stateOrPath: any) {\n    if (stateOrPath instanceof PathNode) {\n      let node: PathNode = stateOrPath;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      let state: State = stateOrPath;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, keys = this.paramSchema.map(p => p.id)): boolean {\n    const paramValsEq = (key: string) =>\n        this.parameter(key).type.equals(this.paramValues[key], node.paramValues[key]);\n    return this.state === node.state && keys.map(paramValsEq).reduce(allTrueR, true);\n  }\n\n  /** Returns a clone of the PathNode */\n  static clone(node: PathNode) {\n    return new PathNode(node);\n  }\n\n  /**\n   * Returns a new path which is a subpath of the first path which matched the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * Nodes are compared using their state property and parameter values.\n   *\n   * @param pathA the first path\n   * @param pathB the second path\n   * @param ignoreDynamicParams don't compare dynamic parameter values\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[], ignoreDynamicParams = true): PathNode[] {\n    let matching: PathNode[] = [];\n\n    for (let i = 0; i < pathA.length && i < pathB.length; i++) {\n      let a = pathA[i], b = pathB[i];\n\n      if (a.state !== b.state) break;\n\n      let changedParams = Param.changed(a.paramSchema, a.paramValues, b.paramValues)\n          .filter(param => !(ignoreDynamicParams && param.dynamic));\n      if (changedParams.length) break;\n\n      matching.push(a);\n    }\n\n    return matching\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./path/node.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map, applyPairs, allTrueR} from \"../common/common\";\nimport {prop, propEq} from \"../common/hof\";\nimport {isInjectable, isDefined, isString, isArray} from \"../common/predicates\";\nimport {RawParams, ParamDeclaration} from \"../params/interface\";\nimport {services} from \"../common/coreservices\";\nimport {matcherConfig} from \"../url/urlMatcherConfig\";\nimport {ParamType} from \"./type\";\nimport {ParamTypes} from \"./paramTypes\";\n\nlet hasOwn = Object.prototype.hasOwnProperty;\nlet isShorthand = (cfg: ParamDeclaration) =>\n    [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\nexport enum DefType {\n  PATH, SEARCH, CONFIG\n}\n\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) && { value: cfg } as any || cfg;\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : () => cfg.value\n  });\n}\n\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string)) return paramTypes.type(cfg.type as string);\n  if (urlType) return urlType;\n  if (!cfg.type) return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\n}\n\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return matcherConfig.defaultSquashPolicy();\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: (string|boolean)) {\n  let replace: any, configuredKeys: string[], defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")}\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  array: boolean;\n  squash: (boolean|string);\n  replace: any;\n  isOptional: boolean;\n  dynamic: boolean;\n  config: any;\n\n  constructor(id: string, type: ParamType, config: ParamDeclaration, location: DefType, paramTypes: ParamTypes) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id, paramTypes);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let squash = getSquashPolicy(config, isOptional);\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, squash, replace, isOptional, dynamic, config, array: arrayMode});\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const $$getDefaultValue = () => {\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n      return defaultValue;\n    };\n\n    const $replace = (val: any) => {\n      let replacement: any = map(filter(this.replace, propEq('from', val)), prop(\"to\"));\n      return replacement.length ? replacement[0] : val;\n    };\n\n    value = $replace(value);\n    return !isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((!isDefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  /** Creates a new [[Param]] from a CONFIG block */\n  static fromConfig(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.CONFIG, paramTypes);\n  }\n\n  /** Creates a new [[Param]] from a url PATH */\n  static fromPath(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.PATH, paramTypes);\n  }\n\n  /** Creates a new [[Param]] from a url SEARCH */\n  static fromSearch(id: string, type: ParamType, config: any, paramTypes: ParamTypes): Param {\n    return new Param(id, type, config, DefType.SEARCH, paramTypes);\n  }\n\n  static values(params: Param[], values: RawParams = {}): RawParams {\n    return <RawParams> params.map(param => [param.id, param.value(values[param.id])]).reduce(applyPairs, {});\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/param.ts\n **/","/** @module url */ /** for typedoc */\nimport {isDefined, isString} from \"../common/predicates\";\n\nexport class MatcherConfig {\n  _isCaseInsensitive: boolean = false;\n  _isStrictMode: boolean = true;\n  _defaultSquashPolicy: (boolean|string) = false;\n\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  defaultSquashPolicy(value?: (boolean|string)): (boolean|string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n}\n\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexport let matcherConfig = new MatcherConfig();\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherConfig.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n */\nfunction ArrayType(type: ParamType, mode: (boolean|\"auto\")) {\n  // Wrap non-array value as array\n  function arrayWrap(val: any): any[] {\n    return isArray(val) ? val : (isDefined(val) ? [ val ] : []);\n  }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach(name => {\n    var paramTypeFn = type[name].bind(type);\n    var wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n\n/**\n * A class that implements Custom Parameter Type functionality.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nexport class ParamType implements ParamTypeDefinition {\n  pattern: RegExp = /.*/;\n  name: string;\n  raw: boolean;\n  dynamic: boolean;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode: (boolean|\"auto\"), isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new (<any> ArrayType)(this, mode);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./params/type.ts\n **/","/** @module core */ /** */\nimport {UrlMatcherFactory} from \"./url/urlMatcherFactory\";\nimport {UrlRouterProvider} from \"./url/urlRouter\";\nimport {UrlRouter} from \"./url/urlRouter\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {ViewService} from \"./view/view\";\nimport {StateRegistry} from \"./state/stateRegistry\";\nimport {StateService} from \"./state/stateService\";\nimport {UIRouterGlobals, Globals} from \"./globals\";\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nexport class UIRouter {\n  viewService = new ViewService();\n\n  transitionService: TransitionService = new TransitionService(this);\n\n  globals: UIRouterGlobals = new Globals(this.transitionService);\n\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  urlRouterProvider: UrlRouterProvider = new UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\n  urlRouter: UrlRouter = new UrlRouter(this.urlRouterProvider);\n\n  stateRegistry: StateRegistry = new StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\n  stateService = new StateService(this);\n\n  constructor() {\n    this.viewService.rootContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./router.ts\n **/","/** @module url */ /** for typedoc */\nimport {forEach, extend} from \"../common/common\";\nimport {isObject, isDefined, isFunction} from \"../common/predicates\";\n\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {matcherConfig} from \"./urlMatcherConfig\";\nimport {Param} from \"../params/param\";\nimport {ParamTypes} from \"../params/paramTypes\";\nimport {ParamTypeDefinition} from \"../params/interface\";\n\n/** @hidden */\nfunction getDefaultConfig() {\n  return {\n    strict: matcherConfig.strictMode(),\n    caseInsensitive: matcherConfig.caseInsensitive()\n  };\n}\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory {\n  paramTypes = new ParamTypes();\n\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  caseInsensitive(value: boolean) {\n    return matcherConfig.caseInsensitive(value);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  strictMode(value: boolean) {\n    return matcherConfig.strictMode(value);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  defaultSquashPolicy(value: string) {\n    return matcherConfig.defaultSquashPolicy(value);\n  }\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, this.paramTypes, extend(getDefaultConfig(), config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any) {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A [[ParamType]] can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * Note: Register custom types *before using them* in a state definition.\n   *\n   * See [[ParamTypeDefinition]] for examples\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    let type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    this.paramTypes.enqueue = false;\n    this.paramTypes._flushTypeQueue();\n    return this;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcherFactory.ts\n **/","/** @module url */ /** for typedoc */\nimport {\n  map, defaults, extend, inherit, identity,\n  unnest, tail, forEach, find, Obj, pairs, allTrueR\n} from \"../common/common\";\nimport {prop, propEq } from \"../common/hof\";\nimport {isArray, isString} from \"../common/predicates\";\nimport {Param} from \"../params/param\";\nimport {ParamTypes} from \"../params/paramTypes\";\nimport {isDefined} from \"../common/predicates\";\nimport {DefType} from \"../params/param\";\nimport {unnestR} from \"../common/common\";\nimport {arrayTuples} from \"../common/common\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj: Obj, prop: string, fn: Function) =>\n    obj[prop] = obj[prop] || fn();\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: { path: UrlMatcher[], pattern?: RegExp } = { path: [], pattern: null };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /**\n   * A static prefix of this pattern.\n   *\n   * The matcher guarantees that any\n   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n   *   non-null) will start with this prefix.\n   */\n  public prefix: string;\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param config  A configuration object\n   * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, public config?: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m: RegExpExecArray, patterns: any[][] = [];\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp || \"string\") || inherit(paramTypes.type(\"string\"), {\n          pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n        })\n      };\n    }\n\n    let p: any, segment: string;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    extend(this, {\n      _compiled: patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment)),\n      prefix: this._segments[0]\n    });\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    forEach(url._cache, (val, key) => url._cache[key] = isArray(val) ? [] : null);\n    url._cache.path = this._cache.path.concat(this);\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path.length === 0;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.concat(this).map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.concat(this).map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.concat(this).map(prop('_params')));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const parent = tail(this._cache.path);\n\n    return (\n      find(this._params, propEq('id', id)) ||\n      (opts.inherit !== false && parent && parent.parameter(id)) ||\n      null\n    );\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) => \n        !param || param.validates(val);\n    return pairs(params || {}).map(([key, val]) => validParamVal(this.parameter(key), val)).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * @example\n   * ```js\n   *\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    if (!this.validates(values)) return null;\n\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path.slice().concat(this);\n\n    // Extract all the static segments and Params into an ordered array\n    let pathSegmentsAndParams: Array<string|Param> =\n        urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []);\n\n    // Extract the query params into a separate array\n    let queryParams: Array<Param> =\n        urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []);\n\n    /**\n     * Given a Param,\n     * Applies the parameter value, then returns details about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|Param) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a Param.  Fetch details about the parameter value\n      let {squash, encoded, param} = getDetails(<Param> x);\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.type.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((param: Param) => {\n      let {squash, encoded, isDefaultValue} = getDetails(param);\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.type.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  /** @hidden */\n  static encodeDashes(str: string) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlMatcher.ts\n **/","/** @module params */ /** for typedoc */\nimport {fromJson, toJson, identity, equals, inherit, map, extend} from \"../common/common\";\nimport {isDefined} from \"../common/predicates\";\nimport {is, val} from \"../common/hof\";\nimport {services} from \"../common/coreservices\";\nimport {ParamType} from \"./type\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val: any) { return val != null ? val.toString().replace(/(~|\\/)/g, m => ({'~':'~~', '/':'~2F'}[m])) : val; }\nfunction valFromString(val: string) { return val != null ? val.toString().replace(/(~~|~2F)/g, m => ({'~~':'~', '~2F':'/'}[m])) : val; }\n\nexport class ParamTypes {\n  types: any;\n  enqueue: boolean = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = {\n    \"hash\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a: any, b: any) => a == b // allow coersion for null/undefined/\"\"\n    },\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      is: is(String),\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode(val: string) { return parseInt(val, 10); },\n      is(val: any) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /-?\\d+/\n    },\n    \"bool\": {\n      encode: (val: any) => val && 1 || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode(val: any) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode(val: string) {\n        if (this.is(val)) return <any> val as Date;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: identity,\n      decode: identity,\n      equals: equals,\n      pattern: /.*/\n    }\n  };\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/paramTypes.ts\n **/","/** @module url */ /** for typedoc */\nimport {extend, bindFunctions, IInjectable, removeFrom} from \"../common/common\";\nimport {isFunction, isString, isDefined, isArray} from \"../common/predicates\";\nimport {UrlMatcher} from \"./urlMatcher\";\nimport {services, $InjectorLike, LocationServices} from \"../common/coreservices\";\nimport {UrlMatcherFactory} from \"./urlMatcherFactory\";\nimport {StateParams} from \"../params/stateParams\";\nimport {RawParams} from \"../params/interface\";\n\n/** @hidden */\nlet $location = services.location;\n\n/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\nfunction regExpPrefix(re: RegExp) {\n  let prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n  return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n\n/** @hidden Interpolates matched values into a String.replace()-style pattern */\nfunction interpolate(pattern: string, match: RegExpExecArray) {\n  return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n    return match[what === '$' ? 0 : Number(what)];\n  });\n}\n\n/** @hidden */\nfunction handleIfMatch($injector: $InjectorLike, $stateParams: RawParams, handler: IInjectable, match: RawParams) {\n  if (!match) return false;\n  let result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n  return isDefined(result) ? result : true;\n}\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean): string {\n  let baseHref = services.locationConfig.baseHref();\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n/** @hidden */\nfunction update(rules: Function[], otherwiseFn: Function, evt?: any) {\n  if (evt && evt.defaultPrevented) return;\n\n  function check(rule: Function) {\n    let handled = rule(services.$injector, $location);\n\n    if (!handled) return false;\n    if (isString(handled)) {\n      $location.setUrl(handled, true);\n    }\n    return true;\n  }\n  let n = rules.length;\n\n  for (let i = 0; i < n; i++) {\n    if (check(rules[i])) return;\n  }\n  // always check otherwise last to allow dynamic updates to the set of rules\n  if (otherwiseFn) check(otherwiseFn);\n}\n\n\n/**\n * Manages rules for client-side URL\n *\n * This class manages the router rules for what to do when the URL changes.\n */\nexport class UrlRouterProvider {\n  /** @hidden */\n  rules: Function[] = [];\n  /** @hidden */\n  otherwiseFn: ($injector: $InjectorLike, $location: LocationServices) => string;\n  /** @hidden */\n  interceptDeferred = false;\n\n  /** @hidden */\n  private $urlMatcherFactory: UrlMatcherFactory;\n  /** @hidden */\n  private $stateParams: StateParams;\n\n  constructor($urlMatcherFactory: UrlMatcherFactory, $stateParams: StateParams) {\n    this.$urlMatcherFactory = $urlMatcherFactory;\n    this.$stateParams = $stateParams;\n  }\n\n  /**\n   * Registers a url handler function.\n   *\n   * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n   * a redirect, or performs some action.\n   *\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param rule\n   * Handler function that takes `$injector` and `$location` services as arguments.\n   * You can use them to detect a url and return a different url as a string.\n   *\n   * @return [[$urlRouterProvider]] (`this`)\n   */\n  rule(rule: ($injector: $InjectorLike, $location: LocationServices) => string): UrlRouterProvider {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    this.rules.push(rule);\n    return this;\n  };\n\n  /**\n   * Remove a rule previously registered\n   *\n   * @param rule the matcher rule that was previously registered using [[rule]]\n   * @return true if the rule was found (and removed)\n   */\n  removeRule(rule): boolean {\n    return this.rules.length !== removeFrom(this.rules, rule).length;\n  }\n\n  /**\n   * Defines the path or behavior to use when no url can be matched.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * ```\n   *\n   * @param rule \n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`. \n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  otherwise(rule: string | (($injector: $InjectorLike, $location: LocationServices) => string)): UrlRouterProvider {\n    if (!isFunction(rule) && !isString(rule)) throw new Error(\"'rule' must be a string or function\");\n    this.otherwiseFn = isString(rule) ? () => rule : rule;\n    return this;\n  };\n\n  /**\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable.\n   * It gets invoked if `$location` matches.\n   * You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * ```js\n   * \n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * ```\n   *\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\n   * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n   *\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n   */\n  when(what: (RegExp|UrlMatcher|string), handler: string|IInjectable, ruleCallback = function(rule) {}) {\n    let {$urlMatcherFactory, $stateParams} = this;\n    let redirect, handlerIsString = isString(handler);\n\n    // @todo Queue this\n    if (isString(what)) what = $urlMatcherFactory.compile(<string> what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    let strategies = {\n      matcher: function (_what, _handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(_handler);\n          _handler = ['$match', redirect.format.bind(redirect)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n        }, {\n          prefix: isString(_what.prefix) ? _what.prefix : ''\n        });\n      },\n      regex: function (_what, _handler) {\n        if (_what.global || _what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = _handler;\n          _handler = ['$match', ($match) => interpolate(redirect, $match)];\n        }\n        return extend(function () {\n          return handleIfMatch(services.$injector, $stateParams, _handler, _what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(_what)\n        });\n      }\n    };\n\n    let check = {\n      matcher: $urlMatcherFactory.isMatcher(what),\n      regex: what instanceof RegExp\n    };\n\n    for (var n in check) {\n      if (check[n]) {\n        let rule = strategies[n](what, handler);\n        ruleCallback(rule);\n        return this.rule(rule);\n      }\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * @example\n   * ```js\n   *\n   * var app = angular.module('app', ['ui.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   $urlRouterProvider.deferIntercept();\n   * })\n   *\n   * app.run(function (MyService, $urlRouter, $http) {\n   *   $http.get(\"/stuff\").then(function(resp) {\n   *     MyService.doStuff(resp.data);\n   *     $urlRouter.listen();\n   *     $urlRouter.sync();\n   *   });\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception. Passing\n   *        no parameter is equivalent to `true`.\n   */\n  deferIntercept(defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nexport class UrlRouter {\n  /** @hidden */\n  private location: string;\n  /** @hidden */\n  private listener: Function;\n  /** @hidden */\n  private urlRouterProvider: UrlRouterProvider;\n\n\n  /** @hidden */\n  constructor(urlRouterProvider: UrlRouterProvider) {\n    this.urlRouterProvider = urlRouterProvider;\n    bindFunctions(UrlRouter.prototype, this, this);\n  }\n\n  /**\n   * Checks the current URL for a matching rule\n   *\n   * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n   * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n   * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n   * with the transition by calling `$urlRouter.sync()`.\n   *\n   * @example\n   * ```js\n   *\n   * angular.module('app', ['ui.router'])\n   *   .run(function($rootScope, $urlRouter) {\n   *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n   *       // Halt state change from even starting\n   *       evt.preventDefault();\n   *       // Perform custom logic\n   *       var meetsRequirement = ...\n   *       // Continue with the update and state transition if logic allows\n   *       if (meetsRequirement) $urlRouter.sync();\n   *     });\n   * });\n   * ```\n   */\n  sync() {\n    update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n  }\n\n  /**\n   * Starts listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n   */\n  listen(): Function {\n    return this.listener = this.listener || $location.onChange(evt => update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn, evt));\n  }\n\n  /**\n   * Internal API.\n   */\n  update(read?: boolean) {\n    if (read) {\n      this.location = $location.path();\n      return;\n    }\n    if ($location.path() === this.location) return;\n\n    $location.setUrl(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params: StateParams, options: { replace?: (string|boolean) }) {\n    let replace = options && !!options.replace;\n    $location.setUrl(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * @example\n   * ```js\n   *\n   * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n   *   person: \"bob\"\n   * });\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params: any, options: { absolute: boolean }): string {\n    if (!urlMatcher.validates(params)) return null;\n\n    let url = urlMatcher.format(params);\n    options = options || { absolute: false };\n\n    let cfg = services.locationConfig;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute);\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/urlRouter.ts\n **/","/** @module transition */ /** for typedoc */\nimport {\n    IHookRegistry, TransitionOptions, HookMatchCriteria, HookRegOptions,\n    TransitionStateHookFn, TransitionHookFn\n} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {HookRegistry} from \"./hookRegistry\";\nimport {TargetState} from \"../state/targetState\";\nimport {PathNode} from \"../path/node\";\nimport {IEventHook} from \"./interface\";\nimport {ViewService} from \"../view/view\";\nimport {UIRouter} from \"../router\";\n\nimport {registerEagerResolvePath, registerLazyResolveState} from \"../hooks/resolve\";\nimport {registerLoadEnteringViews, registerActivateViews} from \"../hooks/views\";\nimport {registerUpdateUrl} from \"../hooks/url\";\nimport {registerRedirectToHook} from \"../hooks/redirectTo\";\nimport {registerOnExitHook, registerOnRetainHook, registerOnEnterHook} from \"../hooks/onEnterExitRetain\";\nimport {registerLazyLoadHook} from \"../hooks/lazyLoadStates\";\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : \"unknown\"\n};\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry {\n  /** @hidden */\n  public $view: ViewService;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  constructor(private _router: UIRouter) {\n    this.$view = _router.viewService;\n    HookRegistry.mixin(new HookRegistry(), this);\n    this._deregisterHookFns = <any> {};\n    this.registerTransitionHooks();\n  }\n\n  /** @hidden */\n  private registerTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    // Wire up redirectTo hook\n    fns.redirectTo    = registerRedirectToHook(this);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit        = registerOnExitHook(this);\n    fns.onRetain      = registerOnRetainHook(this);\n    fns.onEnter       = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve  = registerEagerResolvePath(this);\n    fns.lazyResolve   = registerLazyResolveState(this);\n\n    // Wire up the View management hooks\n    fns.loadViews     = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl     = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad      = registerLazyLoadHook(this);\n  }\n\n  /** @inheritdoc */\n  onBefore (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onStart (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onExit (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onRetain (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onEnter (matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onFinish (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onSuccess (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n  /** @inheritdoc */\n  onError (matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions) : Function { throw \"\"; };\n\n\n  /** @hidden */\n  getHooks  : (hookName: string) => IEventHook[];\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/transitionService.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {Transition} from \"../transition/transition\";\nimport {State} from \"../state/stateObject\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {TransitionStateHookFn, TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {val} from \"../common/hof\";\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n    transitionService.onStart({}, eagerResolvePath, {priority: 1000});\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: State) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state)\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/resolve.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {Transition} from \"../transition/transition\";\nimport {ViewService} from \"../view/view\";\nimport {ViewConfig} from \"../view/interface\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return services.$q.all(enteringViews.map(view => view.load())).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n    transitionService.onStart({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, activateViews);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/views.ts\n **/","/** @module hooks */ /** */\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {StateService} from \"../state/stateService\";\nimport {Transition} from \"../transition/transition\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n/** \n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, updateUrl, {priority: 9999});\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/url.ts\n **/","/** @module hooks */ /** */\nimport {isString, isFunction} from \"../common/predicates\"\nimport {Transition} from \"../transition/transition\";\nimport {services} from \"../common/coreservices\";\nimport {TargetState} from \"../state/targetState\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  function handleResult(result: any) {\n    let $state = trans.router.stateService;\n\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n    transitionService.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/redirectTo.ts\n **/","/** @module hooks */ /** for typedoc */\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {State} from \"../state/stateObject\";\nimport {Transition} from \"../transition/transition\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: State) => {\n    let hookFn: TransitionStateHookFn = state[hookName];\n    return hookFn(transition, state);\n  }\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n    transitionService.onExit({exiting: state => !!state.onExit}, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n    transitionService.onRetain({retained: state => !!state.onRetain}, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n    transitionService.onEnter({entering: state => !!state.onEnter}, onEnterHook);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/onEnterExitRetain.ts\n **/","/** @module hooks */ /** */\nimport {Transition} from \"../transition/transition\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {StateDeclaration, LazyLoadResult} from \"../state/interface\";\nimport {State} from \"../state/stateObject\";\nimport {services} from \"../common/coreservices\";\n\n/**\n * A [[TransitionHookFn]] that lazy loads a state tree.\n *\n * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function\n *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\n * - Wait for the promise to resolve\n * - Deregister the original state \"abc\"\n *   - The original state definition is a placeholder for the lazy loaded states\n * - Register the new states\n * - Retry the transition\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  var toState = transition.to();\n  let registry = transition.router.stateRegistry;\n\n  function retryOriginalTransition() {\n    if (transition.options().source === 'url') {\n      let loc = services.location, path = loc.path(), search = loc.search(), hash = loc.hash();\n\n      let matchState = state => [state, state.url && state.url.exec(path, search, hash)];\n      let matches = registry.get().map(s => s.$$state()).map(matchState).filter(([state, params]) => !!params);\n\n      if (matches.length) {\n        let [state, params] = matches[0];\n        return transition.router.stateService.target(state, params, transition.options());\n      }\n      transition.router.urlRouter.sync();\n    }\n\n    // The original transition was not triggered via url sync\n    // The lazy state should be loaded now, so re-try the original transition\n    let orig = transition.targetState();\n    return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\n  }\n\n  /**\n   * Replace the placeholder state with the newly loaded states from the NgModule.\n   */\n  function updateStateRegistry(result: LazyLoadResult) {\n    // deregister placeholder state\n    registry.deregister(transition.$to());\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach(state => registry.register(state));\n    }\n  }\n\n  let hook = toState.lazyLoad;\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let promise = hook['_promise'];\n  if (!promise) {\n    promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\n    const cleanup = () => delete hook['_promise'];\n    promise.then(cleanup, cleanup);\n  }\n\n  return promise.then(retryOriginalTransition);\n};\n\nexport const registerLazyLoadHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({ to: (state) => !!state.lazyLoad }, lazyLoadHook);\n\n\n\n/** WEBPACK FOOTER **\n ** ./hooks/lazyLoadStates.ts\n **/","/** @module view */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString, isArray} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {PathNode} from \"../path/node\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\n/**\n * The View service\n */\nexport class ViewService {\n  private uiViews: ActiveUIView[] = [];\n  private viewConfigs: ViewConfig[] = [];\n  private _rootContext: ViewContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  rootContext(context?: ViewContext): ViewContext {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n  \n  /**\n   * De-registers a ViewConfig.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this.viewConfigs, viewConfig);\n  };\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this.viewConfigs.push(viewConfig);\n  };\n\n  sync = () => {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this.uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </div>\n     *     </div>\n     *   </div>\n     * </div>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     */\n    const matches = (uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n      // Split names apart from both viewConfig and uiView into segments\n      let vc = viewConfig.viewDecl;\n      let vcSegments = vc.$uiViewName.split(\".\");\n      let uivSegments = uiView.fqn.split(\".\");\n\n      // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n\n      // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n      let negOffset = (1 - vcSegments.length) || undefined;\n      let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n      let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n\n    // Return the number of dots in the fully qualified name\n    function uiViewDepth(uiView: ActiveUIView) {\n      return uiView.fqn.split(\".\").length;\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = uiView => {\n      let matchingConfigs = this.viewConfigs.filter(matches(uiView));\n      if (matchingConfigs.length > 1)\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this.uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n  };\n\n  /**\n   * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n   * be updated with a template, controller, and local variables.\n   *\n   * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n   * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n   *                   of the view.\n   * @return {Function} Returns a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let uiViews = this.uiViews;\n    const fqnMatches = uiv => uiv.fqn === uiView.fqn;\n    if (uiViews.filter(fqnMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this.uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this.uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./view/view.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateQueueManager} from \"./stateQueueManager\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {StateDeclaration} from \"./interface\";\nimport {BuilderFunction} from \"./stateBuilder\";\nimport {StateOrName} from \"./interface\";\nimport {UrlRouterProvider} from \"../url/urlRouter\";\nimport {removeFrom} from \"../common/common\";\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStateRegistryEvent]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: \"registered\"|\"deregistered\", states: StateDeclaration[]) => void;\n\nexport class StateRegistry {\n  private _root: State;\n  private states: { [key: string]: State } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n\n  constructor(urlMatcherFactory: UrlMatcherFactory, private urlRouterProvider: UrlRouterProvider) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\n\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * @example\n   * ```js\n   *\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[State]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDefinition]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[State]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: StateDeclaration): State {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @hidden */\n  private _deregisterTree(state: State) {\n    let all = this.get().map(s => s.$$state());\n    const getChildren = (states: State[]) => {\n      let children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return children.length === 0 ? children : children.concat(getChildren(children));\n    };\n\n    let children = getChildren([state]);\n    let deregistered = [state].concat(children).reverse();\n\n    deregistered.forEach(state => {\n      this.urlRouterProvider.removeRule(state._urlRule);\n      delete this.states[state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {State[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    let _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    let deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener(\"deregistered\", deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateRegistry.ts\n **/","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {Glob} from \"../common/glob\";\nimport {values} from \"../common/common\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: State }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName): State {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr) {\n      let matches = values(this._states)\n          .filter(state => new Glob(state.name).matches(name));\n\n      if (matches.length > 1) {\n        console.log(`stateMatcher.find: Found multiple matches for ${name} using glob: `, matches.map(match => match.name));\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: State = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateMatcher.ts\n **/","/** @module state */ /** for typedoc */\nimport {Obj, omit, noop, extend, inherit, values, applyPairs, tail, mapObj, identity} from \"../common/common\";\nimport {isDefined, isFunction, isString, isArray} from \"../common/predicates\";\nimport {stringify} from \"../common/strings\";\nimport {prop, pattern, is, pipe, val} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {State} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {services} from \"../common/coreservices\";\nimport {ResolvePolicy} from \"../resolve/interface\";\nimport {ParamTypes} from \"../params/paramTypes\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: State, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction nameBuilder(state: State) {\n  if (state.lazyLoad)\n    state.name = state.self.name + \".**\";\n  return state.name;\n}\n\nfunction selfBuilder(state: State) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: State) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => State) =>\nfunction urlBuilder(state: State) {\n  let stateDec: StateDeclaration = <any> state;\n\n  if (stateDec && stateDec.url && stateDec.lazyLoad) {\n    stateDec.url += \"{remainder:any}\"; // match any path (.*)\n  }\n\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig: any, isSearch: boolean) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot: (state: State) => boolean) =>\nfunction navigableBuilder(state: State) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nconst getParamsBuilder = (paramTypes: ParamTypes) => \nfunction paramsBuilder(state: State): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => Param.fromConfig(id, null, config, paramTypes);\n  let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n};\n\nfunction pathBuilder(state: State) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: State) {\n  let includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: State): Resolvable[] {\n  interface Tuple { token: any, val: any, deps: any[], policy: ResolvePolicy }\n  \n  /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n  const objects2Tuples    = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n      Object.keys(resolveObj || {}).map(token => ({token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token]}));\n\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = (fn: Function)  =>\n      fn['$inject'] || services.$injector.annotate(fn, services.$injector.strictDi);\n\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = (obj: any) => !!(obj.token && obj.resolveFn);\n\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = (obj: any) => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = (obj: any) => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n\n  /** extracts the token from a Provider or provide literal */\n  const token             = (p: any) => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(obj: any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     (obj: any) => { throw new Error(\"Invalid resolve value: \" + stringify(obj)) }]\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let decl = state.resolve;\n  let items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, $urlMatcherFactoryProvider: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state: State) => state.name === \"\";\n\n    function parentBuilder(state: State) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [ nameBuilder ],\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder($urlMatcherFactoryProvider, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ getParamsBuilder($urlMatcherFactoryProvider.paramTypes) ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction): (BuilderFunction|BuilderFunction[]|Function) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: State): State {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n    if (parent && !matcher.find(parent)) return null;\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state: State) {\n    let name = state.name || \"\";\n\n    let segments = name.split('.');\n    if (segments.length > 1) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n      var lastSegment = segments.pop();\n      if (lastSegment === '**') segments.pop();\n      return segments.join(\".\");\n    }\n\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state: State) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateBuilder.ts\n **/","/** @module state */ /** for typedoc */\nimport {extend, inherit, pluck, equalForKeys} from \"../common/common\";\nimport {isString} from \"../common/predicates\";\nimport {StateDeclaration} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {StateBuilder} from \"./stateBuilder\";\nimport {StateService} from \"./stateService\";\nimport {UrlRouterProvider} from \"../url/urlRouter\";\nimport {RawParams} from \"../params/interface\";\nimport {StateRegistry, StateRegistryListener} from \"./stateRegistry\";\n\nexport class StateQueueManager {\n  queue: State[];\n  private $state: StateService;\n\n  constructor(\n      public states: { [key: string]: State; },\n      public builder: StateBuilder,\n      public $urlRouterProvider: UrlRouterProvider,\n      public listeners: StateRegistryListener[]) {\n    this.queue = [];\n  }\n\n  register(config: StateDeclaration) {\n    let {states, queue, $state} = this;\n    // Wrap a new object around the state so we can store our private details easily.\n    // @TODO: state = new State(extend({}, config, { ... }))\n    let state = inherit(new State(), extend({}, config, {\n      self: config,\n      resolve: config.resolve || [],\n      toString: () => config.name\n    }));\n\n    if (!isString(state.name)) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(state.name) || pluck(queue, 'name').indexOf(state.name) !== -1)\n      throw new Error(`State '${state.name}' is already defined`);\n\n    queue.push(state);\n\n    if (this.$state) {\n      this.flush($state);\n    }\n    return state;\n  }\n\n  flush($state: StateService) {\n    let {queue, states, builder} = this;\n    let registered: State[] = [], // states that got registered\n        orphans: State[] = [], // states that dodn't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n\n    while (queue.length > 0) {\n      let state: State = queue.shift();\n      let result: State = builder.build(state);\n      let orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        if (states.hasOwnProperty(state.name))\n          throw new Error(`State '${name}' is already defined`);\n        states[state.name] = state;\n        this.attachRoute($state, state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      let prev = previousQueueLength[state.name];\n      previousQueueLength[state.name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${state.name}'`);\n        queue.push(state);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    if (registered.length) {\n      this.listeners.forEach(listener => listener(\"registered\", registered.map(s => s.self)));\n    }\n\n    return states;\n  }\n\n  autoFlush($state: StateService) {\n    this.$state = $state;\n    this.flush($state);\n  }\n\n  attachRoute($state: StateService, state: State) {\n    let {$urlRouterProvider} = this;\n    if (state.abstract || !state.url) return;\n\n    $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match: RawParams, $stateParams: RawParams) {\n      if ($state.$current.navigable !== state || !equalForKeys($match, $stateParams)) {\n        $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\n      }\n    }], (rule) => state._urlRule = rule);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateQueueManager.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {StateDeclaration, _ViewDeclaration} from \"./interface\";\nimport {extend, defaults, values, find} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {TransitionStateHookFn} from \"../transition/interface\";\nimport {TargetState} from \"./targetState\";\nimport {Transition} from \"../transition/transition\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nexport class State {\n\n  public parent: State;\n  public name: string;\n  public abstract: boolean;\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n  public resolvables: Resolvable[];\n  public resolvePolicy: any;\n  public url: UrlMatcher;\n  /** @hidden temporary place to put the rule registered with $urlRouter.when() */\n  public _urlRule: any;\n  public params: { [key: string]: Param };\n  public views: { [key: string]: _ViewDeclaration; };\n  public self: StateDeclaration;\n  public navigable: State;\n  public path: State[];\n  public data: any;\n  public includes: { [name: string] : boolean };\n\n  public onExit: TransitionStateHookFn;\n  public onRetain: TransitionStateHookFn;\n  public onEnter: TransitionStateHookFn;\n  public lazyLoad: (transition: Transition) => Promise<StateDeclaration[]>;\n\n  redirectTo: (\n      string |\n      (($transition$: Transition) => TargetState) |\n      { state: (string|StateDeclaration), params: { [key: string]: any }}\n  );\n\n\n  constructor(config?: StateDeclaration) {\n    extend(this, config);\n    // Object.freeze(this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#is\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: State|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#fqn\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the fully-qualified name of the state, based on its current position in the tree.\n   *\n   * @returns {string} Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.type:State#root\n   * @methodOf ui.router.state.type:State\n   *\n   * @description\n   * Returns the root node of this state's tree.\n   *\n   * @returns {State} The root of this state's tree.\n   */\n  root(): State {\n    return this.parent && this.parent.root() || this;\n  }\n\n  parameters(opts?: { inherit: boolean }): Param[] {\n    opts = defaults(opts, { inherit: true });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params));\n  }\n\n  parameter(id: string, opts: any = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateObject.ts\n **/","/** @module state */ /** */\nimport {extend, defaults, silentRejection, silenceUncaughtInPromise, removeFrom} from \"../common/common\";\nimport {isDefined, isObject, isString} from \"../common/predicates\";\nimport {Queue} from \"../common/queue\";\nimport {services} from \"../common/coreservices\";\n\nimport {PathFactory} from \"../path/pathFactory\";\nimport {PathNode} from \"../path/node\";\n\nimport {TransitionOptions, HookResult} from \"../transition/interface\";\nimport {defaultTransOpts} from \"../transition/transitionService\";\nimport {Rejection, RejectType} from \"../transition/rejectFactory\";\nimport {Transition} from \"../transition/transition\";\n\nimport {StateOrName, StateDeclaration, TransitionPromise} from \"./interface\";\nimport {State} from \"./stateObject\";\nimport {TargetState} from \"./targetState\";\n\nimport {RawParams} from \"../params/interface\";\nimport {ParamsOrArray} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Glob} from \"../common/glob\";\nimport {equalForKeys} from \"../common/common\";\nimport {HrefOptions} from \"./interface\";\nimport {bindFunctions} from \"../common/common\";\nimport {Globals} from \"../globals\";\nimport {UIRouter} from \"../router\";\nimport {UIInjector} from \"../common/interface\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {StateParams} from \"../params/stateParams\"; // has or is using\n\nexport type OnInvalidCallback =\n    (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n\nexport class StateService {\n  invalidCallbacks: OnInvalidCallback[] = [];\n\n  get transition()  { return this.router.globals.transition; }\n  get params()      { return this.router.globals.params; }\n  get current()     { return this.router.globals.current; }\n  get $current()    { return this.router.globals.$current; }\n\n  /** @hidden */\n  constructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(key => getters.indexOf(key) === -1);\n    bindFunctions(StateService.prototype, this, this, boundFns);\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    let fromState = PathFactory.makeTargetState(fromPath);\n    let globals = <Globals> this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    let injector = new ResolveContext(fromPath).injector();\n\n    const checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) return Rejection.invalid(target.error()).toPromise();\n      if (latestThing() !== latest) return Rejection.superseded().toPromise();\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      let callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * Registers an Invalid State handler\n   *\n   * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n   * has been called with an invalid state reference parameter\n   *\n   * Example:\n   * ```js\n   * stateService.onInvalid(function(to, from, injector) {\n   *   if (to.name() === 'foo') {\n   *     let lazyLoader = injector.get('LazyLoadService');\n   *     return lazyLoader.load('foo')\n   *         .then(() => stateService.target('foo'));\n   *   }\n   * });\n   * ```\n   *\n   * @param {function} callback invoked when the toState is invalid\n   *   This function receives the (invalid) toState, the fromState, and an injector.\n   *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n   *   If one is returned, it is treated as a redirect.\n   *\n   * @returns a function which deregisters the callback\n   */\n  onInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#reload\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n   * controllers reinstantiated, and events re-fired.\n   *\n   * @example\n   * <pre>\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * </pre>\n   *\n   * `reload()` is just an alias for:\n   * <pre>\n   * $state.transitionTo($state.current, $stateParams, {\n   *   reload: true, inherit: false, notify: true\n   * });\n   * </pre>\n   *\n   * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n   * @example\n   * <pre>\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * </pre>\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  reload(reloadState?: StateOrName): Promise<State> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false\n    });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#go\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Convenience method for transitioning to a new state. `$state.go` calls\n   * `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n   * This allows you to easily use an absolute or relative to path and specify\n   * only the parameters you'd like to update (while letting unspecified parameters\n   * inherit from the currently active ancestor states).\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * </pre>\n   * <img src='../ngdoc_assets/StateGoExamples.png'/>\n   *\n   * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to a parent state\n   * - `$state.go('^.sibling')` - will go to a sibling state\n   * - `$state.go('.child.grandchild')` - will go to grandchild state\n   *\n   * @param {object=} params A map of the parameters that will be sent to the state,\n   * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n   * defined parameters. This allows, for example, going to a sibling state that shares parameters\n   * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n   * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n   * will get you all current parameters, etc.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   *\n   * Possible success values:\n   *\n   * - $state.current\n   *\n   * <br/>Possible rejection values:\n   *\n   * - 'transition superseded' - when a newer transition has been started after this one\n   * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n   * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n   *   when a `$stateNotFound` `event.retry` promise errors.\n   * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n   * - *resolve error* - when an error has occurred with a `resolve`\n   *\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /** Factory method for creating a TargetState */\n  target(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    let reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#transitionTo\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n   * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n   *\n   * @example\n   * <pre>\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * </pre>\n   *\n   * @param {string|object} to State name or state object.\n   * @param {object=} toParams A map of the parameters that will be sent to the state,\n   * will populate $stateParams.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n   *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n   * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n   * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n   *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n   *    use this when you want to force a reload when *everything* is the same, including search params.\n   *\n   * @returns {promise} A promise representing the state of the new transition. See\n   * {@link ui.router.state.$state#methods_go $state.go}.\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let router = this.router;\n    let globals = <Globals> router.globals;\n    let transHistory = globals.transitionHistory;\n    options = defaults(options, defaultTransOpts);\n    options = extend(options, { current: transHistory.peekTail.bind(transHistory)});\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    let currentPath: PathNode[] = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (transition: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        if (error.type === RejectType.IGNORED) {\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          router.urlRouter.update();\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          let redirect: Transition = transition.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          router.urlRouter.update();\n          // Fall through to default error handler\n        }\n      }\n\n      var errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let transition = this.router.transitionService.create(currentPath, ref);\n    let transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#is\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n   * but only checks for the full state name. If params is supplied then it will be\n   * tested for strict equality against the current active params object, so all params\n   * must match with none missing and no extras.\n   *\n   * @example\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   * test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    return isDefined(params) && params !== null ? Param.equals(state.parameters(), this.params, params) : true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#includes\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * @example\n   * Partial and relative names\n   * <pre>\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   *\n   * // Using relative names (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n   * </pre>\n   *\n   * Basic globbing patterns\n   * <pre>\n   * $state.$current.name = 'contacts.details.item.url';\n   *\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * </pre>\n   *\n   * @param {string|object} stateOrName A partial name, relative name, glob pattern,\n   * or state object to be searched for within the current state name.\n   * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n   * that you'd like to test against the current active state.\n   * @param {object=} options An options object.  The options are:\n   *\n   * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n   * .includes will test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    // @TODO Replace with Param.equals() ?\n    return params ? equalForKeys(Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#href\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * A url generation method that returns the compiled url for the given state populated with the given params.\n   *\n   * @example\n   * <pre>\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * </pre>\n   *\n   * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n   * @param {object=} params An object of parameter values to fill the state's required parameters.\n   * @param {object=} options Options object. The options are:\n   *\n   * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n   *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n   *    ancestor with a valid url).\n   * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n   * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n   *    defines which state to be relative from.\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, Param.values(state.parameters(), params), {\n      absolute: options.absolute\n    });\n  };\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error: any) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * Note:\n   * This handler does not receive certain Transition rejections.\n   * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * @example\n   * ```js\n   *\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$state#get\n   * @methodOf ui.router.state.$state\n   *\n   * @description\n   * Returns the state configuration object for any specific state or all states.\n   *\n   * @param {string|Object=} stateOrName (absolute or relative) If provided, will only get the config for\n   * the requested state. If not provided, returns an array of ALL state configs.\n   * @param {string|object=} base When stateOrName is a relative state reference, the state will be retrieved relative to context.\n   * @returns {Object|Array} State configuration object or array of all objects.\n   */\n  get(): StateDeclaration[];\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    let reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/stateService.ts\n **/","/** @module core */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {State} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\nimport {Observable} from \"rxjs/Rx\";\n\n/**\n * Global mutable state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport interface UIRouterGlobals {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  $current: State;\n  /**\n   * The current transition (in progress)\n   */\n  transition: Transition;\n}\n\n\n/**\n * Global mutable state\n */\nexport class Globals implements UIRouterGlobals {\n  params: StateParams = new StateParams();\n  current: StateDeclaration;\n  $current: State;\n  transition: Transition;\n  transitionHistory = new Queue<Transition>([], 1);\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  constructor(transitionService: TransitionService) {\n    const beforeNewTransition = ($transition$: Transition) => {\n\n      this.transition = $transition$;\n      this.transitionHistory.enqueue($transition$);\n\n      const updateGlobalState = () => {\n        this.successfulTransitions.enqueue($transition$);\n        this.$current = $transition$.$to();\n        this.current = this.$current.self;\n        copy($transition$.params(), this.params);\n      };\n\n      $transition$.onSuccess({}, updateGlobalState, {priority: 10000});\n\n      const clearCurrentTransition = () => { if (this.transition === $transition$) this.transition = null; };\n\n      $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\n    };\n\n    transitionService.onBefore({}, beforeNewTransition);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./globals.ts\n **/","/** @module params */ /** for typedoc */\nimport {extend, ancestors, Obj} from \"../common/common\";\nimport {State} from \"../state/stateObject\";\n\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: State, $to: State) {\n    let parents = ancestors($current, $to),\n        parentParams: string[],\n        inherited: Obj = {},\n        inheritList: string[] = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/stateParams.ts\n **/","/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./param\";\nexport * from \"./paramTypes\";\nexport * from \"./stateParams\";\nexport * from \"./type\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./params/module.ts\n **/","/** @module path */ /** for typedoc */\nexport * from \"./node\";\nexport * from \"./pathFactory\";\n\n\n/** WEBPACK FOOTER **\n ** ./path/module.ts\n **/","/** @module resolve */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./resolvable\";\nexport * from \"./resolveContext\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./resolve/module.ts\n **/","/** @module state */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./stateBuilder\";\nexport * from \"./stateObject\";\nexport * from \"./stateMatcher\";\nexport * from \"./stateQueueManager\";\nexport * from \"./stateRegistry\";\nexport * from \"./stateService\";\nexport * from \"./targetState\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./state/module.ts\n **/","/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\nexport * from \"./interface\";\nexport * from \"./hookBuilder\";\nexport * from \"./hookRegistry\";\nexport * from \"./rejectFactory\";\nexport * from \"./transition\";\nexport * from \"./transitionHook\";\nexport * from \"./transitionService\";\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./transition/module.ts\n **/","/** @module url */ /** for typedoc */\nexport * from \"./urlMatcher\";\nexport * from \"./urlMatcherConfig\";\nexport * from \"./urlMatcherFactory\";\nexport * from \"./urlRouter\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./url/module.ts\n **/","/** @module view */ /** for typedoc */\nexport * from \"./interface\";\nexport * from \"./view\";\n\n\n\n/** WEBPACK FOOTER **\n ** ./view/module.ts\n **/","/**\n * # UI-Router for Angular 1\n *\n * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.\n * - Also registers some services with the angular 1 injector.\n * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.\n *\n * @module ng1\n * @preferred\n */\n\n/** for typedoc */\nimport {UIRouter} from \"../router\";\nimport {services, $InjectorLike} from \"../common/coreservices\";\nimport {bindFunctions, removeFrom, applyPairs, IInjectable} from \"../common/common\";\nimport {TypedMap} from \"../common/common\"; // has or is using\nimport {prop} from \"../common/hof\";\nimport {isObject, isString} from \"../common/predicates\";\nimport {resolveFactory} from \"./legacy/resolveService\";\nimport {trace} from \"../common/trace\";\nimport {ng1ViewsBuilder, ng1ViewConfigFactory} from \"./statebuilders/views\";\nimport {TemplateFactory} from \"./templateFactory\";\nimport {StateParams} from \"../params/stateParams\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {StateService} from \"../state/stateService\";\nimport {StateProvider} from \"./stateProvider\";\nimport {UrlRouterProvider, UrlRouter} from \"../url/urlRouter\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {getStateHookBuilder} from \"./statebuilders/onEnterExitRetain\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\n\nimport * as angular from 'angular';\nimport IInjectorService = angular.auto.IInjectorService;\nimport IQService = angular.IQService;\nimport ILocationProvider = angular.ILocationProvider;\nimport ILocationService = angular.ILocationService;\nimport IHttpService = angular.IHttpService;\nimport ITemplateCacheService = angular.ITemplateCacheService;\nimport IScope = angular.IScope;\n\n/** @hidden */\nlet app = angular.module(\"ui.router.angular1\", []);\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng', 'ui.router.init']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n *\n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n *\n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n *\n * ## The main module for ui.router\n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes.\n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router -\n *\n * *You'll need to include **only** this module as the dependency within your angular app.*\n *\n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * Annotates a controller expression (may be a controller function(), a \"controllername\",\n * or \"controllername as name\")\n *\n * - Temporarily decorates $injector.instantiate.\n * - Invokes $controller() service\n *   - Calls $injector.instantiate with controller constructor\n * - Annotate constructor\n * - Undecorate $injector\n *\n * returns an array of strings, which are the arguments of the controller expression\n */\n\nexport function annotateController(controllerExpression: (IInjectable|string)): string[] {\n  let $injector = <any> services.$injector;\n  let $controller = $injector.get(\"$controller\");\n  let oldInstantiate = $injector.instantiate;\n  try {\n    let deps: any[];\n\n    $injector.instantiate = function fakeInstantiate(constructorFunction: any) {\n      $injector.instantiate = oldInstantiate; // Un-decorate ASAP\n      deps = $injector.annotate(constructorFunction);\n    };\n\n    $controller(controllerExpression, { $scope: {} });\n\n    return deps;\n  } finally {\n    $injector.instantiate = oldInstantiate;\n  }\n}\n\nlet router: UIRouter = null;\ndeclare module \"../router\" {\n  interface UIRouter {\n    /** @hidden TODO: move this to ng1.ts */\n    stateProvider: StateProvider;\n  }\n}\n\n$uiRouter.$inject = ['$locationProvider'];\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\nfunction $uiRouter($locationProvider: ILocationProvider) {\n\n  // Create a new instance of the Router when the $uiRouterProvider is initialized\n  router = new UIRouter();\n  router.stateProvider = new StateProvider(router.stateRegistry, router.stateService);\n\n  // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n  router.stateRegistry.decorator(\"views\", ng1ViewsBuilder);\n  router.stateRegistry.decorator(\"onExit\", getStateHookBuilder(\"onExit\"));\n  router.stateRegistry.decorator(\"onRetain\", getStateHookBuilder(\"onRetain\"));\n  router.stateRegistry.decorator(\"onEnter\", getStateHookBuilder(\"onEnter\"));\n\n  router.viewService.viewConfigFactory('ng1', ng1ViewConfigFactory);\n\n  // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix\n  bindFunctions($locationProvider, services.locationConfig, $locationProvider, ['hashPrefix']);\n\n  // Create a LocationService.onChange registry\n  let urlListeners: Function[] = [];\n  services.location.onChange = (callback) => {\n    urlListeners.push(callback);\n    return () => removeFrom(urlListeners)(callback);\n  };\n\n  this.$get = $get;\n  $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n  function $get($location: ILocationService, $browser: any, $sniffer: any, $rootScope: IScope, $http: IHttpService, $templateCache: ITemplateCacheService) {\n\n    // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n    $rootScope.$on(\"$locationChangeSuccess\", evt => urlListeners.forEach(fn => fn(evt)));\n\n    // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history\n    services.locationConfig.html5Mode = function() {\n      let html5Mode: any = $locationProvider.html5Mode();\n      html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n      return html5Mode && $sniffer.history;\n    };\n\n    services.location.setUrl = (newUrl: string, replace = false) =>  {\n      $location.url(newUrl);\n      if (replace) $location.replace();\n    };\n\n    services.template.get = (url: string) =>\n        $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' }}).then(prop(\"data\")) as any;\n\n    // Bind these LocationService functions to $location\n    bindFunctions($location, services.location, $location, [\"replace\", \"url\", \"path\", \"search\", \"hash\"]);\n    // Bind these LocationConfig functions to $location\n    bindFunctions($location, services.locationConfig, $location, ['port', 'protocol', 'host']);\n    // Bind these LocationConfig functions to $browser\n    bindFunctions($browser, services.locationConfig, $browser, ['baseHref']);\n\n    return router;\n  }\n}\n\n// The 'ui.router' ng1 module depends on 'ui.router.init' module.\nangular.module('ui.router.init', []).provider(\"$uiRouter\", <any> $uiRouter);\n\nrunBlock.$inject = ['$injector', '$q'];\nfunction runBlock($injector: IInjectorService, $q: IQService) {\n  services.$injector = $injector;\n  services.$q = <any> $q;\n}\n\nangular.module('ui.router.init').run(runBlock);\n\n// This effectively calls $get() to init when we enter runtime\nangular.module('ui.router.init').run(['$uiRouter', function($uiRouter: UIRouter) { }]);\n\n// $urlMatcherFactory service and $urlMatcherFactoryProvider\nangular.module('ui.router.util').provider('$urlMatcherFactory', ['$uiRouterProvider', () => router.urlMatcherFactory]);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory: UrlMatcherFactory) { }]);\n\n// $urlRouter service and $urlRouterProvider\nfunction getUrlRouterProvider() {\n  router.urlRouterProvider[\"$get\"] = function() {\n    router.urlRouter.update(true);\n    if (!this.interceptDeferred) router.urlRouter.listen();\n    return router.urlRouter;\n  };\n  return router.urlRouterProvider;\n}\nangular.module('ui.router.router').provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);\nangular.module('ui.router.router').run(['$urlRouter', function($urlRouter: UrlRouter) { }]);\n\n// $state service and $stateProvider\n// $urlRouter service and $urlRouterProvider\nfunction getStateProvider() {\n  router.stateProvider[\"$get\"] = function() {\n    // Autoflush once we are in runtime\n    router.stateRegistry.stateQueue.autoFlush(router.stateService);\n    return router.stateService;\n  };\n  return router.stateProvider;\n}\nangular.module('ui.router.state').provider('$state', ['$uiRouterProvider', getStateProvider]);\nangular.module('ui.router.state').run(['$state', function($state: StateService) { }]);\n\n// $stateParams service\nangular.module('ui.router.state').factory('$stateParams', ['$uiRouter', ($uiRouter: UIRouter) =>\n    $uiRouter.globals.params]);\n\n// $transitions service and $transitionsProvider\nfunction getTransitionsProvider() {\n  router.transitionService[\"$get\"] = () => router.transitionService;\n  return router.transitionService;\n}\nangular.module('ui.router.state').provider('$transitions', ['$uiRouterProvider', getTransitionsProvider]);\n\n// $templateFactory service\nangular.module('ui.router.util').factory('$templateFactory', ['$uiRouter', () => new TemplateFactory()]);\n\n// The $view service\nangular.module('ui.router').factory('$view', () => router.viewService);\n\n// The old $resolve service\nangular.module('ui.router').factory('$resolve', <any> resolveFactory);\n\n// $trace service\nangular.module(\"ui.router\").service(\"$trace\", () => trace);\nwatchDigests.$inject = ['$rootScope'];\nexport function watchDigests($rootScope: IScope) {\n  $rootScope.$watch(function() { trace.approximateDigests++; });\n}\nangular.module(\"ui.router\").run(watchDigests);\n\nexport const getLocals = (ctx: ResolveContext) => {\n  let tokens = ctx.getTokens().filter(isString);\n  let tuples = tokens.map(key => [ key, ctx.getResolvable(key).data ]);\n  return tuples.reduce(applyPairs, {});\n};\n\n/** Injectable services */\n\n/**\n * An injectable service object which has the current state parameters\n *\n * This angular service (singleton object) holds the current state parameters.\n * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.\n *\n * This object can be injected into other services.\n *\n * @example\n * ```js\n *\n * SomeService.$inject = ['$http', '$stateParams'];\n * function SomeService($http, $stateParams) {\n *   return {\n *     getUser: function() {\n *       return $http.get('/api/users/' + $stateParams.username);\n *     }\n *   }\n * };\n * angular.service('SomeService', SomeService);\n * ```\n *\n * ### Deprecation warning:\n *\n * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different\n * object than this global service object.  In those cases, the injected object has the parameter values for the\n * *pending* Transition.\n *\n * Because of these confusing details, this service is deprecated.\n *\n * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]\n * ```js\n * MyController.$inject = ['$transition$'];\n * function MyController($transition$) {\n *   var username = $transition$.params().username;\n *   // .. do something with username\n * }\n * ```\n */\nvar $stateParams: StateParams;\n\n/**\n * An injectable service primarily used to register transition hooks\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n *\n * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.\n */\nvar $transitions: TransitionService;\n\n/**\n * A config-time injectable provider primarily used to register transition hooks\n *\n * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.\n *\n * The same object is also exposed as [[$transitions]] for injection at runtime.\n */\nvar $transitionsProvider: TransitionService;\n\n/**\n * An injectable service used to query for current state information.\n *\n * This angular service exposes the [[StateService]] singleton.\n */\nvar $state: StateService;\n\n/**\n * A config-time injectable provider used to register states.\n *\n * This angular service exposes the [[StateProvider]] singleton.\n */\nvar $stateProvider: StateProvider;\n\n/**\n * A config-time injectable provider used to manage the URL.\n *\n * This angular service exposes the [[UrlRouterProvider]] singleton.\n */\nvar $urlRouterProvider: UrlRouterProvider;\n\n/**\n * An injectable service used to configure URL redirects.\n *\n * This angular service exposes the [[UrlRouter]] singleton.\n */\nvar $urlRouter: UrlRouter;\n\n/**\n * An injectable service used to configure the URL.\n *\n * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n *\n * This angular service exposes the [[UrlMatcherFactory]] singleton.\n * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].\n */\nvar $urlMatcherFactory: UrlMatcherFactory;\n\n/**\n * An injectable service used to configure the URL.\n *\n * This service is used to set url mapping options, and create [[UrlMatcher]] objects.\n *\n * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.\n * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].\n */\nvar $urlMatcherFactoryProvider: UrlMatcherFactory;\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/services.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {PathNode} from \"../../path/node\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {Obj, mapObj} from \"../../common/common\";\nimport {resolvablesBuilder} from \"../../state/stateBuilder\";\n\n/**\n * Implementation of the legacy `$resolve` service for angular 1.\n */\nvar $resolve = {\n  /**\n   * Asynchronously injects a resolve block.\n   *\n   * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.\n   *\n   * Given an object `invocables`, where keys are strings and values are injectable functions,\n   * injects each function, and waits for the resulting promise to resolve.\n   * When all resulting promises are resolved, returns the results as an object.\n   *\n   * @example\n   * ```js\n   *\n   * let invocables = {\n   *   foo: [ '$http', ($http) =>\n   *            $http.get('/api/foo').then(resp => resp.data) ],\n   *   bar: [ 'foo', '$http', (foo, $http) =>\n   *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]\n   * }\n   * $resolve.resolve(invocables)\n   *     .then(results => console.log(results.foo, results.bar))\n   * // Logs foo and bar:\n   * // { id: 123, barId: 456, fooData: 'foo data' }\n   * // { id: 456, barData: 'bar data' }\n   * ```\n   *\n   * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions\n   * @param locals key/value pre-resolved data (locals)\n   * @param parent a promise for a \"parent resolve\"\n   */\n  resolve: (invocables: { [key: string]: Function }, locals = {}, parent?: Promise<any>) => {\n    let parentNode = new PathNode(new State(<any> { params: {}, resolvables: [] }));\n    let node = new PathNode(new State(<any> { params: {}, resolvables: [] }));\n    let context = new ResolveContext([parentNode, node]);\n\n    context.addResolvables(resolvablesBuilder(<any> { resolve: invocables }), node.state);\n\n    const resolveData = (parentLocals: Obj) => {\n      const rewrap = (_locals: Obj) => resolvablesBuilder(<any> { resolve: mapObj(_locals, local => () => local) });\n      context.addResolvables(rewrap(parentLocals), parentNode.state);\n      context.addResolvables(rewrap(locals), node.state);\n\n      const tuples2ObjR = (acc: Obj, tuple: { token: any, value: any }) => {\n        acc[tuple.token] = tuple.value;\n        return acc;\n      };\n      return context.resolvePath().then(results => results.reduce(tuples2ObjR, {}));\n    };\n\n    return parent ? parent.then(resolveData) : resolveData({});\n  }\n};\n\n/** @hidden */\nexport const resolveFactory = () => $resolve;\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/legacy/resolveService.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {Obj, pick, forEach, anyTrueR, unnestR, tail, extend} from \"../../common/common\";\nimport {kebobString} from \"../../common/strings\";\nimport {ViewConfig} from \"../../view/interface\";\nimport {Ng1ViewDeclaration} from \"../interface\";\nimport {ViewService, ViewConfigFactory} from \"../../view/view\";\nimport {isArray, isInjectable, isDefined, isString, isObject} from \"../../common/predicates\";\nimport {services} from \"../../common/coreservices\";\nimport {trace} from \"../../common/trace\";\nimport {PathNode} from \"../../path/node\";\nimport {TemplateFactory} from \"../templateFactory\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {Resolvable} from \"../../resolve/resolvable\";\nimport {RawParams} from \"../../params/interface\";\n\nimport * as angular from 'angular';\nimport IInjectorService = angular.auto.IInjectorService;\n\nexport const ng1ViewConfigFactory: ViewConfigFactory = (path, view) =>\n    [new Ng1ViewConfig(path, view)];\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to angular-ui-router (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n */\nexport function ng1ViewsBuilder(state: State) {\n  let tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\n      ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\n      compKeys = ['component', 'bindings'],\n      nonCompKeys = tplKeys.concat(ctrlKeys),\n      allKeys = compKeys.concat(nonCompKeys);\n\n  let views: { [key:string]: Ng1ViewDeclaration } = {},\n      viewsObject = state.views || {\"$default\": pick(state, allKeys)};\n\n  forEach(viewsObject, function (config: Ng1ViewDeclaration, name: string) {\n    // Account for views: { \"\": { template... } }\n    name = name || \"$default\";\n    // Account for views: { header: \"headerComponent\" }\n    if (isString(config)) config = { component: <string> config };\n    if (!Object.keys(config).length) return;\n\n    // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)\n    if (config.component) {\n      if (nonCompKeys.map(key => isDefined(config[key])).reduce(anyTrueR, false)) {\n        throw new Error(`Cannot combine: ${compKeys.join(\"|\")} with: ${nonCompKeys.join(\"|\")} in stateview: 'name@${state.name}'`);\n      }\n\n      // Dynamically build a template like \"<component-name input1='::$resolve.foo'></component-name>\"\n      config.templateProvider = ['$injector', function($injector: IInjectorService) {\n        const resolveFor = (key: string) =>\n            config.bindings && config.bindings[key] || key;\n        const prefix = angular.version.minor >= 3 ? \"::\" : \"\";\n        const attributeTpl = (input: BindingTuple) => {\n          var attrName = kebobString(input.name);\n          var resolveName = resolveFor(input.name);\n          if (input.type === '@')\n            return `${attrName}='{{${prefix}$resolve.${resolveName}}}'`;\n          return `${attrName}='${prefix}$resolve.${resolveName}'`;\n        };\n\n        let attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(\" \");\n        let kebobName = kebobString(config.component);\n        return `<${kebobName} ${attrs}></${kebobName}>`;\n      }];\n    }\n\n    config.resolveAs = config.resolveAs || '$resolve';\n    config.$type = \"ng1\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\ninterface BindingTuple {\n  name: string;\n  type: string;\n}\n\n// for ng 1.2 style, process the scope: { input: \"=foo\" }\n// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\nconst scopeBindings = (bindingsObj: Obj) => Object.keys(bindingsObj || {})\n  // [ 'input', [ '=foo', '=', 'foo' ] ]\n  .map(key => [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])])\n  // skip malformed values\n  .filter(tuple => isDefined(tuple) && isDefined(tuple[1]))\n  // { name: ('foo' || 'input'), type: '=' }\n  .map(tuple => ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] } as BindingTuple));\n\n// Given a directive definition, find its object input attributes\n// Use different properties, depending on the type of directive (component, bindToController, normal)\nconst getBindings = (def: any) => {\n  if (isObject(def.bindToController)) return scopeBindings(def.bindToController);\n  return scopeBindings(def.scope);\n};\n\n// Gets all the directive(s)' inputs ('@', '=', and '<')\nfunction getComponentInputs($injector: IInjectorService, name: string) {\n  let cmpDefs = <any[]> $injector.get(name + \"Directive\"); // could be multiple\n  if (!cmpDefs || !cmpDefs.length) throw new Error(`Unable to find component named '${name}'`);\n  return cmpDefs.map(getBindings).reduce(unnestR, []);\n}\n\nlet id = 0;\nexport class Ng1ViewConfig implements ViewConfig {\n  $id = id++;\n  loaded: boolean = false;\n  controller: Function;\n  template: string;\n  locals: any; // TODO: delete me\n\n  constructor(public path: PathNode[], public viewDecl: Ng1ViewDeclaration) { }\n\n  load() {\n    let $q = services.$q;\n    if (!this.hasTemplate())\n      throw new Error(`No template configuration specified for '${this.viewDecl.$uiViewName}@${this.viewDecl.$uiViewContextAnchor}'`);\n\n    let context = new ResolveContext(this.path);\n    let params = this.path.reduce((acc, node) => extend(acc, node.paramValues), {});\n\n    let promises: any = {\n      template: $q.when(this.getTemplate(params, new TemplateFactory(), context)),\n      controller: $q.when(this.getController(context))\n    };\n\n    return $q.all(promises).then((results) => {\n      trace.traceViewServiceEvent(\"Loaded\", this);\n      this.controller = results.controller;\n      this.template = results.template;\n      return this;\n    });\n  }\n\n  /**\n   * Checks a view configuration to ensure that it specifies a template.\n   *\n   * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.\n   */\n  hasTemplate() {\n    return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);\n  }\n\n  getTemplate(params: RawParams, $factory: TemplateFactory, context: ResolveContext) {\n    return $factory.fromConfig(this.viewDecl, params, context);\n  }\n\n  /**\n   * Gets the controller for a view configuration.\n   *\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n   */\n  getController(context: ResolveContext): (String|Function|Promise<Function|String>) {\n    let provider = this.viewDecl.controllerProvider;\n    if (!isInjectable(provider)) return this.viewDecl.controller;\n    let deps = services.$injector.annotate(provider);\n    let providerFn = isArray(provider) ? tail(<any> provider) : provider;\n    let resolvable = new Resolvable(\"\", <any> providerFn, deps);\n    return resolvable.get(context);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/statebuilders/views.ts\n **/","/** @module view */ /** for typedoc */\nimport {isArray, isDefined, isFunction} from \"../common/predicates\";\nimport {services} from \"../common/coreservices\";\nimport {Ng1ViewDeclaration} from \"./interface\";\nimport {IInjectable, tail} from \"../common/common\";\nimport {ResolveContext} from \"../resolve/resolveContext\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {RawParams} from \"../params/interface\";\n\n/**\n * Service which manages loading of templates from a ViewConfig.\n */\nexport class TemplateFactory {\n  /**\n   * Creates a template from a configuration object.\n   *\n   * @param config Configuration object for which to load a template.\n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param params  Parameters to pass to the template function.\n   * @param context The resolve context associated with the template's view\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  fromConfig(config: Ng1ViewDeclaration, params: any, context: ResolveContext) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :\n      null\n    );\n  };\n\n  /**\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param template html template as a string or function that returns an html template as a string.\n   * @param params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  fromString(template: (string|Function), params?: RawParams) {\n    return isFunction(template) ? (<any> template)(params) : template;\n  };\n\n  /**\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromUrl(url: (string|Function), params: any) {\n    if (isFunction(url)) url = (<any> url)(params);\n    if (url == null) return null;\n    return services.template.get(<string> url);\n  };\n\n  /**\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param provider Function to invoke via `locals`\n   * @param {Function} injectFn a function used to invoke the template provider\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  fromProvider(provider: IInjectable, params: any, context: ResolveContext) {\n    let deps = services.$injector.annotate(provider);\n    let providerFn = isArray(provider) ? tail(<any[]> provider) : provider;\n    let resolvable = new Resolvable(\"\", <Function> providerFn, deps);\n    return resolvable.get(context);\n  };\n}\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/templateFactory.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 57\n ** module chunks = 0 1 2 3\n **/","/** @module ng1 */ /** for typedoc */\nimport {isObject} from \"../common/predicates\";\nimport {bindFunctions} from \"../common/common\";\nimport {BuilderFunction} from \"../state/stateBuilder\";\nimport {StateRegistry} from \"../state/stateRegistry\";\nimport {Ng1StateDeclaration} from \"./interface\";\nimport {StateService, OnInvalidCallback} from \"../state/stateService\";\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nexport class StateProvider {\n  constructor(private stateRegistry: StateRegistry, private stateService: StateService) {\n    bindFunctions(StateProvider.prototype, this, this);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by `$stateProvider`. This can be used\n   * to add custom functionality to ui-router, for example inferring templateUrl\n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  decorator(name: string, func: BuilderFunction) {\n    return this.stateRegistry.decorator(name, func) || this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * <a id='template'></a>\n   *\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property\n   *   takes precedence over templateUrl.\n   *\n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateUrl'></a>\n   *\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *\n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateProvider'></a>\n   *\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n   *   string.\n   *\n   * <a id='controller'></a>\n   *\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *\n   * <a id='controllerProvider'></a>\n   *\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n   *   the actual controller or string.\n   *\n   * <a id='controllerAs'></a>\n   *\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   *\n   * <a id='resolve'></a>\n   *\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises,\n   *   the router will wait for them all to be resolved or one to be rejected before the\n   *   controller is instantiated. If all the promises are resolved successfully, the values\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n   *\n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\n   *     resolved before its value is injected into controller.\n   *\n   * <a id='url'></a>\n   *\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any\n   *   parameters that were passed.\n   *\n   * <a id='params'></a>\n   *\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n   *   use this within a state if you are not using url. Otherwise you can specify your\n   *   parameters within the url. When a state is navigated or transitioned to, the\n   *   $stateParams service will be populated with any parameters that were passed.\n   *\n   * <a id='views'></a>\n   *\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n   *   manually/explicitly.\n   *\n   * <a id='abstract'></a>\n   *\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   *\n   * <a id='onEnter'></a>\n   *\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='onExit'></a>\n   *\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='reloadOnSearch'></a>\n   *\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   *\n   * <a id='data'></a>\n   *\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} definition State configuration object.\n   */\n  state(name: string, definition: Ng1StateDeclaration): StateProvider;\n  state(definition: Ng1StateDeclaration): StateProvider;\n  state(name: any, definition?: any) {\n    if (isObject(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n    this.stateRegistry.register(definition);\n    return this;\n  }\n\n  /**\n   * Registers an invalid state handler\n   *\n   * This is a passthrough to [[StateService.onInvalid]] for ng1.\n   */\n\n  onInvalid(callback: OnInvalidCallback): Function {\n    return this.stateService.onInvalid(callback);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/stateProvider.ts\n **/","/** @module ng1 */ /** */\nimport {State} from \"../../state/stateObject\";\nimport {TransitionStateHookFn, HookResult} from \"../../transition/interface\";\nimport {Transition} from \"../../transition/transition\";\nimport {services} from \"../../common/coreservices\";\nimport {getLocals} from \"../services\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {extend} from \"../../common/common\";\nimport {BuilderFunction} from \"../../state/stateBuilder\";\n\nimport * as angular from 'angular';\nimport IInjectorService = angular.auto.IInjectorService;\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for angular-ui-router (ng1).\n */\nexport const getStateHookBuilder = (hookName: \"onEnter\"|\"onExit\"|\"onRetain\") =>\nfunction stateHookBuilder(state: State, parentFn: BuilderFunction): TransitionStateHookFn {\n  let hook = state[hookName];\n  function decoratedNg1Hook(trans: Transition, state: State): HookResult {\n    let resolveContext = new ResolveContext(trans.treeChanges().to);\n    return services.$injector.invoke(hook, this, extend({ $state$: state }, getLocals(resolveContext)));\n  }\n\n  return hook ? decoratedNg1Hook : undefined;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/statebuilders/onEnterExitRetain.ts\n **/","/**\n * These are the UI-Router angular 1 directives.\n *\n * These directives are used in templates to create viewports and navigate to states\n *\n * @preferred @module ng1_directives\n */ /** for typedoc */\nimport * as angular from 'angular';\nimport {Obj, extend, forEach, toJson, tail} from \"../../common/common\";\nimport {isString, isObject} from \"../../common/predicates\";\nimport {UIViewData} from \"./viewDirective\";\nimport {parse} from \"../../common/hof\";\nimport {PathNode} from \"../../path/node\";\nimport {StateOrName} from \"../../state/interface\";\nimport IAugmentedJQuery = angular.IAugmentedJQuery;\nimport {StateService} from \"../../state/stateService\";\nimport ITimeoutService = angular.ITimeoutService;\nimport IScope = angular.IScope;\nimport IInterpolateService = angular.IInterpolateService;\nimport {TransitionService} from \"../../transition/transitionService\";\nimport {State} from \"../../state/stateObject\";\nimport {UIRouter} from \"../../router\";\n\n/** @hidden */\nfunction parseStateRef(ref: string, current: string) {\n  let preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\n/** @hidden */\nfunction stateContext(el: IAugmentedJQuery) {\n  let $uiView: UIViewData = (el.parent() as IAugmentedJQuery).inheritedData('$uiView');\n  let path: PathNode[] = parse('$cfg.path')($uiView);\n  return path ? tail(path).state.name : undefined;\n}\n\ninterface TypeInfo {\n  attr: string;\n  isAnchor: boolean;\n  clickable: boolean;\n}\n\n/** @hidden */\nfunction getTypeInfo(el: IAugmentedJQuery): TypeInfo {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\n/** @hidden */\nfunction clickHook(el: IAugmentedJQuery, $state: StateService, $timeout: ITimeoutService, type: TypeInfo, current: Function) {\n  return function(e: JQueryMouseEventObject) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\n/** @hidden */\nfunction defaultOpts(el: IAugmentedJQuery, $state: StateService) {\n  return {\n    relative: stateContext(el) || $state.$current,\n    inherit: true,\n    source: \"sref\"\n  };\n}\n\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive that binds a link (`<a>` tag) to a state.\n * If the state has an associated URL, the directive will automatically generate and\n * update the `href` attribute via the [[StateService.href]]  method.\n * Clicking the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`.\n * You just need to be aware that the path is relative to the state that the link lives in.\n * In other words, the state that created the view containing the link.\n *\n * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * Here's an example of how you'd use ui-sref and how it would compile.\n * If you have the following template:\n *\n * @example\n * ```html\n *\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n * ```\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n *\n * ```html\n *\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n * ```\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to [[StateService.go]]\n */\nlet uiSref = ['$state', '$timeout',\nfunction $StateRefDirective($state: StateService, $timeout: ITimeoutService) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def: Def = { state: ref.state, href: null, params: null, options: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn: Function = null;\n      var hookFn;\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val?: any) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element.on(\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element.off(\"click\", hookFn);\n      });\n    }\n  };\n}];\n\n/**\n * `ui-state`: A dynamic version of `ui-sref`\n *\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @example\n * ```html\n *\n * <li ng-repeat=\"nav in navlinks\">\n *   <a ui-state=\"nav.statename\">{{nav.description}}</a>\n * </li>\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to [[StateService.href]]\n * @param {Object} ui-state-opts options to pass to [[StateService.go]]\n */\nlet uiState = ['$state', '$timeout',\nfunction $StateRefDynamicDirective($state: StateService, $timeout: ITimeoutService) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def: Def = { state: null, params: null, options: null, href: null };\n      var unlinkInfoFn: Function = null;\n      var hookFn;\n\n      function runStateRefLink (group: any[]) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element.on(\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element.off(\"click\", hookFn);\n      });\n    }\n  };\n}];\n\n\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use ui-sref-active-eq\n *\n * Given the following template:\n * @example\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n *\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n *\n * ```html\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n * ```\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * Given the following template, with \"admin\" being an abstract state:\n * @example\n * ```html\n *\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\nlet uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions', '$uiRouter',\nfunction $StateRefActiveDirective($state: StateService, $stateParams: Obj, $interpolate: IInterpolateService, $transitions: TransitionService, $uiRouter: UIRouter) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout',\n      function ($scope: IScope, $element: IAugmentedJQuery, $attrs: any, $timeout: ITimeoutService) {\n      var states: any[] = [], activeClasses: Obj = {}, activeEqClass: string, uiSrefActive: any;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName: StateOrName, activeClass: string) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState: string, newParams: Obj) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      function updateAfterTransition(trans) { trans.promise.then(update); }\n      $scope.$on('$stateChangeSuccess', update);\n      $scope.$on('$destroy', <any> $transitions.onStart({}, updateAfterTransition));\n      if ($uiRouter.globals.transition) {\n        updateAfterTransition($uiRouter.globals.transition);\n      }\n\n      function addState(stateName: string, stateParams: Obj, activeClass: string) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        var stateInfo = {\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        };\n\n        states.push(stateInfo);\n        activeClasses[stateHash] = activeClass;\n\n        return function removeState() {\n          var idx = states.indexOf(stateInfo);\n          if (idx !== -1) states.splice(idx, 1);\n        }\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state: string, params: (Obj|string)) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params as string);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el: IAugmentedJQuery, className: string) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el: IAugmentedJQuery, className: string) { el.removeClass(className); }\n      function anyMatch(state: State, params: Obj) { return $state.includes(state.name, params); }\n      function exactMatch(state: State, params: Obj) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}];\n\ninterface Def { state: string; href: string; params: Obj; options: any; }\nangular.module('ui.router.state')\n    .directive('uiSref', uiSref)\n    .directive('uiSrefActive', uiSrefActive)\n    .directive('uiSrefActiveEq', uiSrefActive)\n    .directive('uiState', uiState);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/directives/stateDirectives.ts\n **/","/** @module state */ /** for typedoc */\n\nimport {Obj} from \"../common/common\";\nimport {StateService} from \"../state/stateService\";\nimport {StateOrName} from \"../state/interface\";\nimport * as angular from 'angular';\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nexport function $IsStateFilter($state: StateService) {\n  var isFilter: any = function(state: StateOrName, params: Obj, options: Obj) {\n    return $state.is(state, params, options);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nexport function $IncludedByStateFilter($state: StateService) {\n  var includesFilter: any = function(state: StateOrName, params: Obj, options: Obj) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/stateFilters.ts\n **/","/** @module ng1_directives */ /** for typedoc */\n\"use strict\";\nimport {extend, unnestR, filter, tail} from \"../../common/common\";\nimport {isDefined, isFunction, isString} from \"../../common/predicates\";\nimport {trace} from \"../../common/trace\";\nimport {ActiveUIView} from \"../../view/interface\";\nimport {Ng1ViewConfig} from \"../statebuilders/views\";\nimport {TransitionService} from \"../../transition/transitionService\";\nimport {parse} from \"../../common/hof\";\nimport {ResolveContext} from \"../../resolve/resolveContext\";\nimport {Transition} from \"../../transition/transition\";\nimport {PathNode} from \"../../path/node\";\nimport {Param} from \"../../params/param\";\nimport {kebobString} from \"../../common/strings\";\nimport {HookRegOptions} from \"../../transition/interface\";\nimport {Ng1Controller, Ng1StateDeclaration} from \"../interface\";\nimport {getLocals} from \"../services\";\nimport {ViewService} from \"../../view/view\";\nimport {$QLike} from \"../../common/coreservices\";\nimport {Obj} from \"../../common/common\";\n\nimport * as angular from 'angular';\nimport IInterpolateService = angular.IInterpolateService;\nimport IScope = angular.IScope;\nimport ITranscludeFunction = angular.ITranscludeFunction;\nimport IAugmentedJQuery = angular.IAugmentedJQuery;\nimport ICompileService = angular.ICompileService;\nimport IControllerService = angular.IControllerService;\nimport ITimeoutService = angular.ITimeoutService;\n\n/** @hidden */\nexport type UIViewData = {\n  $cfg: Ng1ViewConfig;\n  $uiView: ActiveUIView;\n}\n\n/** @hidden */\nexport type UIViewAnimData = {\n  $animEnter: Promise<any>;\n  $animLeave: Promise<any>;\n  $$animLeave: { resolve: () => any; } // \"deferred\"\n}\n\n/**\n * `ui-view`: A viewport directive which is filled in by a view from the active state.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * A view can be unnamed or named.\n * @example\n * ```html\n *\n * <!-- Unnamed -->\n * <div ui-view></div>\n *\n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * ```\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a\n * single view and it is unnamed then you can populate it like so:\n * ```\n *\n * <div ui-view></div>\n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * ```\n *\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * But typically you'll only use the views property if you name your view or have more than one view\n * in the same template. There's not really a compelling reason to name a view if its the only one,\n * but you could if you wanted, like so:\n *\n * ```html\n *\n * <div ui-view=\"main\"></div>\n * ```\n *\n * ```js\n *\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }\n * })\n * ```\n *\n * Really though, you'll use views to set up multiple views:\n * ```html\n *\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div>\n * <div ui-view=\"data\"></div>\n * ```\n *\n * ```js\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }\n * })\n * ```\n *\n * Examples for `autoscroll`:\n *\n * ```html\n *\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * ```\n *\n * Resolve data:\n *\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n *\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n * depends on `$resolve` data.\n *\n * @example\n * ```js\n *\n * $stateProvider.state('home', {\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\n *   resolve: {\n *     user: function(UserService) { return UserService.fetchUser(); }\n *   }\n * });\n * ```\n */\nlet uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\nfunction $ViewDirective($view: ViewService, $animate: any, $uiViewScroll: any, $interpolate: IInterpolateService, $q: $QLike) {\n\n  function getRenderer(attrs: Obj, scope: IScope) {\n    return {\n      enter: function(element: JQuery, target: any, cb: Function) {\n        if (angular.version.minor > 2) {\n          $animate.enter(element, null, target).then(cb);\n        } else {\n          $animate.enter(element, null, target, cb);\n        }\n      },\n      leave: function(element: JQuery, cb: Function) {\n        if (angular.version.minor > 2) {\n          $animate.leave(element).then(cb);\n        } else {\n          $animate.leave(element, cb);\n        }\n      }\n    };\n  }\n\n  function configsEqual(config1: Ng1ViewConfig, config2: Ng1ViewConfig) {\n    return config1 === config2;\n  }\n\n  let rootData = {\n    $cfg: { viewDecl: { $context: $view.rootContext() } },\n    $uiView: { }\n  };\n\n  let directive = {\n    count: 0,\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement: JQuery, tAttrs: Obj, $transclude: ITranscludeFunction) {\n\n      return function (scope: IScope, $element: IAugmentedJQuery, attrs: Obj) {\n        let previousEl: JQuery, currentEl: JQuery,\n            currentScope: IScope, unregister: Function,\n            onloadExp     = attrs['onload'] || '',\n            autoScrollExp = attrs['autoscroll'],\n            renderer      = getRenderer(attrs, scope),\n            viewConfig    = undefined as Ng1ViewConfig,\n            inherited     = $element.inheritedData('$uiView') || rootData,\n            name          = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\n\n        let activeUIView: ActiveUIView = {\n          $type: 'ng1',\n          id: directive.count++,                                   // Global sequential ID for ui-view tags added to DOM\n          name: name,                                              // ui-view name (<div ui-view=\"name\"></div>\n          fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name, // fully qualified name, describes location in DOM\n          config: null,                                            // The ViewConfig loaded (from a state.views definition)\n          configUpdated: configUpdatedCallback,                    // Called when the matching ViewConfig changes\n          get creationContext() {                                  // The context in which this ui-view \"tag\" was created\n            return parse('$cfg.viewDecl.$context')(inherited);\n          }\n        };\n\n        trace.traceUIViewEvent(\"Linking\", activeUIView);\n\n        function configUpdatedCallback(config?: Ng1ViewConfig) {\n          if (config && !(config instanceof Ng1ViewConfig)) return;\n          if (configsEqual(viewConfig, config)) return;\n          trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n\n          viewConfig = config;\n          updateView(config);\n        }\n\n        $element.data('$uiView', { $uiView: activeUIView });\n\n        updateView();\n\n        unregister = $view.registerUIView(activeUIView);\n        scope.$on(\"$destroy\", function() {\n          trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n          unregister();\n        });\n\n        function cleanupLastView() {\n          if (previousEl) {\n            trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            let _viewData = currentEl.data('$uiViewAnim');\n            trace.traceUIViewEvent(\"Animate out\", _viewData);\n            renderer.leave(currentEl, function() {\n              _viewData.$$animLeave.resolve();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(config?: Ng1ViewConfig) {\n          let newScope = scope.$new();\n          let animEnter = $q.defer(), animLeave = $q.defer();\n\n          let $uiViewData: UIViewData = {\n            $cfg: config,\n            $uiView: activeUIView,\n          };\n\n          let $uiViewAnim: UIViewAnimData = {\n            $animEnter: animEnter.promise,\n            $animLeave: animLeave.promise,\n            $$animLeave: animLeave\n          };\n\n          let cloned = $transclude(newScope, function(clone) {\n            clone.data('$uiViewAnim', $uiViewAnim);\n            clone.data('$uiView', $uiViewData);\n            renderer.enter(clone, $element, function onUIViewEnter() {\n              animEnter.resolve();\n              if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\n\n              if (isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n\n            cleanupLastView();\n          });\n\n          currentEl = cloned;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description           *\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           */\n          currentScope.$emit('$viewContentLoaded', config || viewConfig);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}];\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];\n/** @hidden */\nfunction $ViewDirectiveFill ($compile: ICompileService, $controller: IControllerService, $transitions: TransitionService, $view: ViewService, $timeout: ITimeoutService) {\n  const getControllerAs = parse('viewDecl.controllerAs');\n  const getResolveAs = parse('viewDecl.resolveAs');\n\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement: JQuery) {\n      let initial = tElement.html();\n\n      return function (scope: IScope, $element: JQuery) {\n        let data: UIViewData = $element.data('$uiView');\n        if (!data) return;\n\n        let cfg: Ng1ViewConfig = data.$cfg || <any> { viewDecl: {} };\n        $element.html(cfg.template || initial);\n        trace.traceUIViewFill(data.$uiView, $element.html());\n\n        let link = $compile($element.contents());\n        let controller = cfg.controller;\n        let controllerAs: string = getControllerAs(cfg);\n        let resolveAs: string = getResolveAs(cfg);\n        let resolveCtx: ResolveContext = cfg.path && new ResolveContext(cfg.path);\n        let locals = resolveCtx && getLocals(resolveCtx);\n\n        scope[resolveAs] = locals;\n\n        if (controller) {\n          let controllerInstance = <Ng1Controller> $controller(controller, extend({}, locals, { $scope: scope, $element: $element }));\n          if (controllerAs) {\n            scope[controllerAs] = controllerInstance;\n            scope[controllerAs][resolveAs] = locals;\n          }\n\n          // TODO: Use $view service as a central point for registering component-level hooks\n          // Then, when a component is created, tell the $view service, so it can invoke hooks\n          // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n          // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n\n          $element.data('$ngControllerController', controllerInstance);\n          $element.children().data('$ngControllerController', controllerInstance);\n\n          registerControllerCallbacks($transitions, controllerInstance, scope, cfg);\n        }\n\n        // Wait for the component to appear in the DOM\n        if (isString(cfg.viewDecl.component)) {\n          let cmp = cfg.viewDecl.component;\n          let kebobName = kebobString(cmp);\n          let getComponentController = () => {\n            let directiveEl = [].slice.call($element[0].children)\n                .filter((el: Element) => el && el.tagName && el.tagName.toLowerCase() === kebobName) ;\n            return directiveEl && angular.element(directiveEl).data(`$${cmp}Controller`);\n          };\n\n          let deregisterWatch = scope.$watch(getComponentController, function(ctrlInstance) {\n            if (!ctrlInstance) return;\n            registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);\n            deregisterWatch();\n          });\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/** @hidden */\nlet hasComponentImpl = typeof (angular as any).module('ui.router')['component'] === 'function';\n\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\nfunction registerControllerCallbacks($transitions: TransitionService, controllerInstance: Ng1Controller, $scope: IScope, cfg: Ng1ViewConfig) {\n  // Call $onInit() ASAP\n  if (isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl)) controllerInstance.$onInit();\n\n  let viewState: Ng1StateDeclaration = tail(cfg.path).state.self;\n\n  var hookOptions: HookRegOptions = { bind: controllerInstance };\n  // Add component-level hook for onParamsChange\n  if (isFunction(controllerInstance.uiOnParamsChanged)) {\n    let resolveContext: ResolveContext = new ResolveContext(cfg.path);\n    let viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n\n    // Fire callback on any successful transition\n    const paramsUpdated = ($transition$: Transition) => {\n      // Exit early if the $transition$ is the same as the view was created within.\n      // Exit early if the $transition$ will exit the state the view is for.\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState) !== -1) return;\n\n      let toParams = $transition$.params(\"to\");\n      let fromParams = $transition$.params(\"from\");\n      let toSchema: Param[] = $transition$.treeChanges().to.map((node: PathNode) => node.paramSchema).reduce(unnestR, []);\n      let fromSchema: Param[] = $transition$.treeChanges().from.map((node: PathNode) => node.paramSchema).reduce(unnestR, []);\n\n      // Find the to params that have different values than the from params\n      let changedToParams = toSchema.filter((param: Param) => {\n        let idx = fromSchema.indexOf(param);\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n      });\n\n      // Only trigger callback if a to param has changed or is new\n      if (changedToParams.length) {\n        let changedKeys = changedToParams.map(x => x.id);\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n        controllerInstance.uiOnParamsChanged(filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1), $transition$);\n      }\n    };\n    $scope.$on('$destroy', <any> $transitions.onSuccess({}, paramsUpdated, hookOptions));\n  }\n\n  // Add component-level hook for uiCanExit\n  if (isFunction(controllerInstance.uiCanExit)) {\n    var criteria = {exiting: viewState.name};\n    $scope.$on('$destroy', <any> $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));\n  }\n}\n\nangular.module('ui.router.state').directive('uiView', <any> uiView);\nangular.module('ui.router.state').directive('uiView', <any> $ViewDirectiveFill);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/directives/viewDirective.ts\n **/","/** @module ng1 */ /** */\nimport * as angular from 'angular';\nimport {IServiceProviderFactory} from \"angular\";\nimport IAnchorScrollService = angular.IAnchorScrollService;\nimport ITimeoutService = angular.ITimeoutService;\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll: IAnchorScrollService, $timeout: ITimeoutService): Function {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element: JQuery) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', <IServiceProviderFactory> $ViewScrollProvider);\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng1/viewScroll.ts\n **/"],"sourceRoot":""}