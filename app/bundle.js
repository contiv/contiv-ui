"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o),this.inspectStats={}}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(e,t){var o=function(){function o(e,t){_classCallCheck(this,o),this.nodes=e,this.links=t}return _createClass(o,[{key:"updateNodes",value:function(e){this.nodes=e}},{key:"updateLinks",value:function(e){this.links=e}},{key:"nodeIdToName",value:function(e){for(var t=this.nodes,o=0;o<t.length;o++)if(t[o].id==e)return t[o].name}},{key:"processNodeData",value:function(t){var o=[];return _.forEach(t,function(t){var n=new e.Node(null,null,t.id,t.text,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,o){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r=0;r<e.length;r++)if(e[r].source!=e[r].target){var a=n(e[r].source,o),l=n(e[r].target,o);if(null==a||null==l)continue;var s=new t.Link(a,l);i.push(s)}return i}}]),o}();return{DataSource:o}}]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}(),_createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(e,t,o){var n=function(e){function n(e,t,o,i,r,a){_classCallCheck(this,n);var l=_possibleConstructorReturn(this,Object.getPrototypeOf(n).call(this,e,t));return l.children_struct=o,l.ancestors_struct=i,l.labels=r,l.selectors=a,l}return _inherits(n,e),_createClass(n,[{key:"hasChild",value:function(e){return null!=this.children_struct[e]}},{key:"setAncestors",value:function(){var e=this,t=!1;_.forEach(e.nodes,function(o){o.ancestors=e.ancestors_struct[o.id]||[],_.isEmpty(o.ancestors)===!1?o.parent=o.ancestors[0]:0==_.includes(e.children_struct.topLevel,o.id)&&(o.ancestors.push("client"),e.ancestors_struct[o.id]=["client"],t===!1&&(t=!0,e.children_struct.topLevel.push("client"),e.children_struct.client=[]),e.children_struct.client.push(o.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(e){for(var t=this.nodes,o={},n=0;n<t.length;n++){var i=t[n];if(null===i.ancestors)o[i.id]=i.name;else for(var r=0;r<e.length;r++)if(i.ancestors.indexOf(e[r])>-1){o[i.id]=e[r];break}}for(var a=this.links,l=[],n=0;n<a.length;n++){var s=[];s.source=o[a[n].source]||a[n].source,s.target=o[a[n].target]||a[n].target,s.weight=a[n].weight,l.push(s)}for(var c=[],n=0;n<e.length;n++){var u=[];u.id=e[n],u.text=this.nodeIdToName(e[n])||e[n],u.ancestors=this.ancestors_struct[e[n]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:l}}},{key:"processNodeData",value:function(e){var o=[];return _.forEach(e,function(e){var n=new t.Node(null,null,e.id,e.text,null,e.parent,e.ancestors,null,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,t){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r={},a=0;a<e.length;a++)if(e[a].source!=e[a].target){var l=n(e[a].source,t),s=n(e[a].target,t),c=e[a].weight;if(null==l||null==s)continue;if(void 0===r[l.id+"-"+s.id]){var u=new o.Link(l,s,c);r[l.id+"-"+s.id]=u,i.push(u)}else{var d=r[l.id+"-"+s.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return i}}]),n}(e.DataSource);return{DataSource:n}}]),angular.module("contiv.utils",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(e){var t=function(){function t(o,n,i){_classCallCheck(this,t);var r=this;r.nodes=n||[],r.links=i||[],r.defaultNodePolicies=[],r.defaultPathPolicies=[],r.svgPolicy=new e.Policy,r.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},r.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},o.on("mouseover",function(e){r.svgPolicy.mouseover.call(this,e)}).on("dblclick",function(e){r.svgPolicy.dblclick.call(this,e)}).on("contextmenu",function(e){r.svgPolicy.contextmenu.call(this,e)}).on("mouseout",function(e){r.svgPolicy.mouseout.call(this,e)}).on("mousedown",function(e){r.svgPolicy.mousedown.call(this,e)}).on("mouseup",function(e){r.svgPolicy.mouseup.call(this,e)});var a=o.append("svg:defs");a.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),a.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),r.svg=o,r.svgG=o.append("g").classed(r.consts.graphClass,!0);var l=r.svgG;r.paths=l.append("g").selectAll("g"),r.circles=l.append("g").selectAll("g"),r.initNodes(),r.initLinks(),r.setPositions();var s=function(){r.onWindowResize(o)};r.bindings={resize:s},$(window).resize(s)}return _createClass(t,[{key:"destroy",value:function(){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy()}),_(e.defaultPathPolicies).forEach(function(e){e.destroy()}),e.svgPolicy.destroy();for(var t in e.bindings)$(window).off(t,e.bindings[t])}},{key:"initNodes",value:function(){var e=this;_.forEach(e.nodes,function(t){t.initialize(e)})}},{key:"initLinks",value:function(){var e=this;_.forEach(e.links,function(t){t.initialize(e)})}},{key:"findNodeById",value:function(e){for(var t=this,o=0;o<t.nodes.length;o++)if(e===t.nodes[o].id)return t.nodes[o]}},{key:"findD3Node",value:function(e){var t,o=this;return o.circles.each(function(o){o.id===e&&(t=d3.select(this))}),t}},{key:"installDragPolicy",value:function(e){this.drag=e}},{key:"installSvgPolicy",value:function(e){this.svgPolicy=e}},{key:"installDefaultNodePolicy",value:function(e){var t=this;t.defaultNodePolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultNodePolicy",value:function(e){var t;t="string"==typeof e?e:e.policyName,_(thisGraph.defaultNodePolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),thisGraph.defaultNodePolicies.splice(o,1))})}},{key:"getNodePolicy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t,o){return t.policyName===e?t:void 0})}},{key:"installDefaultPathPolicy",value:function(e){var t=this;t.defaultPathPolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.defaultPathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.defaultPathPolicies.splice(n,1))})}},{key:"pathPolicyEvent",value:function(e,t,o){var n=this;_(n.defaultPathPolicies).forEach(function(n){n[e](t,o)})}},{key:"nodePolicyEvent",value:function(e,t,o){var n=this;_.forEach(n.defaultNodePolicies,function(n){n[e](t,o)})}},{key:"installZoomPolicy",value:function(e){this.dragSvg=e,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(e){}},{key:"insertTitleLinebreaks",value:function(e,t){for(var o=this,n=t.split(/\s+/g),i=n.length,r=e.append("text").attr("class",o.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(i-1)),a=0;a<n.length;a++){var l=r.append("tspan").text(n[a]);a>0&&l.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(e){var t=this,o=t.links.filter(function(t){return t.source===e||t.target===e});o.map(function(e){t.links.splice(t.links.indexOf(e),1)})}},{key:"addNode",value:function(e){var t=this;t.nodes.push(e),e.initialize(t),t.updateGraph()}},{key:"removeNode",value:function(e){var t=this;t.nodes.splice(t.nodes.indexOf(e),1),t.spliceLinksForNode(e),t.updateGraph()}},{key:"addLink",value:function(e){var t=this;t.links.push(e),e.initialize(t),t.updateGraph()}},{key:"removeLink",value:function(e){var t=this;t.links.splice(t.links.indexOf(e),1),e.initialize(t),t.updateGraph()}},{key:"updateExistingPaths",value:function(e){e.each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewPaths",value:function(e){var t=this;t.initLinks(),e.each(function(e){e.newPathAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.pathPolicyEvent("mouseover",d3.select(this),e):t.pathPolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.pathPolicyEvent("dblclick",d3.select(this),e):t.pathPolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.pathPolicyEvent("contextmenu",d3.select(this),e):t.pathPolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.pathPolicyEvent("mouseout",d3.select(this),e):t.pathPolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.pathPolicyEvent("mousedown",d3.select(this),e):t.pathPolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.pathPolicyEvent("mouseup",d3.select(this),e):t.pathPolicyEvent("mouseup",d3.select(this),e)}).call(t.drag)}},{key:"updateExistingNodes",value:function(){var e=this;e.circles=this.circles.data(e.nodes,function(e){return e.id}).each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewNodes",value:function(e){var t=this;e.each(function(e){null==e.graph&&e.initialize(t),e.newNodeAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.nodePolicyEvent("mouseover",d3.select(this),e):t.nodePolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.nodePolicyEvent("dblclick",d3.select(this),e):t.nodePolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.nodePolicyEvent("contextmenu",d3.select(this),e):t.nodePolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.nodePolicyEvent("mouseout",d3.select(this),e):t.nodePolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.nodePolicyEvent("mousedown",d3.select(this),e):t.nodePolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.nodePolicyEvent("mouseup",d3.select(this),e):t.nodePolicyEvent("mouseup",d3.select(this),e)}).call(t.drag),e.append("circle").attr("r",function(e){return String(e.radius)}),e.each(function(e){t.insertTitleLinebreaks(d3.select(this),e.text)})}},{key:"d3ForceCollide",value:function(e){var t=this,o=t.consts,n=t.nodes,i=d3.geom.quadtree(n);return function(t){var n=t.radius+o.maxRadius+o.padding,r=t.x-n,a=t.x+n,l=t.y-n,s=t.y+n;i.visit(function(n,i,c,u,d){if(n.point&&n.point!==t){var p=t.x-n.point.x,f=t.y-n.point.y,v=Math.sqrt(p*p+f*f),h=t.radius+n.point.radius+o.padding;h>v&&(v=(v-h)/v*e,t.x-=p*=v,t.y-=f*=v,n.point.x+=p,n.point.y+=f)}return i>a||r>u||c>s||l>d})}}},{key:"d3ForceTick",value:function(e,t,o){for(var n=this,i=n.consts,r=i.displayOffset,a=n.nodes,l=d3.geom.quadtree(n.nodes),s=0,c=a.length;++s<c;)l.visit(this.d3ForceCollide(a[s]));n.circles.each(this.d3ForceCollide(.5)).attr("cx",function(e){return e.x=Math.max(e.radius+r,Math.min(t-r-e.radius,e.x))}).attr("cy",function(e){return e.y=Math.max(e.radius+r,Math.min(o-r-e.radius,e.y))}),n.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceStart",value:function(){var e=this;e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this;e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){var e=$("#visualization-graph").width(),t=$("#visualization-graph").height(),o=e,n=t;return{width:o,height:n}}},{key:"setForce",value:function(e){var t=this,o=t.nodes,n=t.links;if(!_.isEmpty(o)){var i=t.d3ForceBounds(),r=d3.layout.force().size([i.width,i.height]).nodes(o).charge(function(e){return-6e3}).links(n);r.linkDistance(i.width/3),r.linkStrength(.2),r.gravity(.2),r.on("tick",function(e){t.d3ForceTick.call(t,e,i.width,i.height)}),r.on("start",function(){t.d3ForceStart.call(t)}),r.on("end",function(){t.d3ForceEnd.call(t)}),r.start();for(var a=0;r.alpha()>.01&&150>a;)r.tick(),a+=1;r.stop(),null!=e&&e()}}},{key:"setPositions",value:function(){for(var e=this,t=e.consts.displayOffset,o=$("#visualization-graph").width(),n=$("#visualization-graph").height(),i=o-2*t,r=n-2*t,a=e.nodes,l=0;l<a.length;l++)a[l].radius=a[l].radius||e.consts.startRadius,null!=a[l].x&&null!=a[l].y||(a[l].x=i/2+a[l].radius+t,a[l].y=r/2+a[l].radius+t)}},{key:"updateGraph",value:function(e){var t=this,o=t.consts,n=t.state;if(!t.state.disableUpdate){this.updateExistingNodes();var i=t.circles.enter().append("g");i.classed(o.circleGClass,!0),t.circles.exit().remove(),0==n.initForce?(t.setForce(function(){t.updateNewNodes.call(t,i)}),n.initForce=!0):this.updateNewNodes(i),t.paths=t.paths.data(t.links,function(e){return String(e.source.id)+"+"+String(e.target.id)});var r=t.paths;this.updateExistingPaths(r);var a=r.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(a),r.exit().remove(),null!=e&&e()}}}]),t}();return{Graph:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(e){var t=function(e){function t(e,o,n,i){_classCallCheck(this,t);var r=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,o,n)),a=r;a.state.transition=[],a.consts.edge_buffer=200,a.consts.radiusDecay=1,a.consts.containerClass="container",a.dataSource=i;var l=d3.behavior.drag().origin(function(e){return{x:e.x,y:e.y}}).on("dragstart",function(){}).on("drag",function(e){d3.select(this).attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),a.updateGraph()}).on("dragend",function(){});a.drag=l;var s=d3.behavior.zoom().on("zoom",function(){return null!=d3.event.sourceEvent&&d3.event.sourceEvent.ctrlKey?!1:(a.zoomed.call(a),!0)}).on("zoomstart",function(e,t){});return a.dragSvg=s,a.svg.call(s).on("dblclick.zoom",null),r}return _inherits(t,e),_createClass(t,[{key:"zoomed",value:function(e,t){var o=this;if(1!=o.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=e&&null!=t){var n=o.dragSvg;n.scale(t),n.translate(e);var i=function(){n.scale(t),n.translate(e)},r="zoom"+e;return void d3.select("."+this.consts.graphClass).transition(r).delay(100).duration(750).attr("transform","translate("+n.translate()+") scale("+n.scale()+")").each("end",i)}o.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+o.dragSvg.translate()+") scale("+o.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(e){var t=document.getElementsByTagName("body")[0],o=$("#visualization-graph").offset(),n=$("#visualization-graph").width(),i=t.clientHeight;e.attr("width",n).attr("height",i-o.top-20)}},{key:"updateLinkData",value:function(){for(var e=this,t=[],o=0;o<e.nodes.length;o++)t.push(e.nodes[o].id);var n=e.dataSource.getFlowBetweenSet(t),i=n.linkData;e.links=e.dataSource.processLinkData(i,e.nodes),this.initNodes(),this.initLinks(),e.updateGraph()}}]),t}(e.Graph);return{Graph:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Link",[function(){var e=function(){function e(t,o){_classCallCheck(this,e),this.source=t,this.target=o,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(e,t){e.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var e=this,t=e.target.x-e.source.x,o=e.target.y-e.source.y,n=Math.sqrt(t*t+o*o);return"M"+e.source.x+","+e.source.y+"A"+n+","+n+" 0 0,1 "+e.target.x+","+e.target.y}},{key:"installPathPolicy",value:function(e){this.hasPolicy=!0,this.pathPolicies.push(e),e.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.pathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.pathPolicies.splice(n,1))}),0===o.pathPolicies.length&&(o.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(e,t,o){_(o.pathPolicies).forEach(function(n){n[e](t,o)})}}]),e}();return{Link:e}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function e(t,o,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,o);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,o,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(e){var t=function(e){function t(e,o,n){_classCallCheck(this,t);var i=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,o));return i.weight=n,i.count=1,i}return _inherits(t,e),_createClass(t,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var e,t=this,o=(t.target.x-t.source.x)/2,n=(t.target.y-t.source.y)/2;return e=t.source.x<t.target.x?{my:"top center",at:"center center",target:[o,n],adjust:{y:10}}:{my:"bottom center",at:"center center",target:[o,n],adjust:{y:-10}}}},{key:"initialize",value:function(e){if(0==this.initialized){_get(Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.VisualizerLink;null==o&&(o=e.state.VisualizerLink={},o.maxWeight=null,o.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(e){this.graph.state.VisualizerLink.useAvgWeight=!!e}},{key:"setWeight",value:function(e){this.weight=e}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink;if(t.useAvgWeight){var o=this.weight/this.count;return o}return this.weight}},{key:"updateMaxWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink,o=_.maxBy(e.links,function(e){return null!=e.graph?e.getWeight():0});t.maxWeight=o.getWeight()}},{key:"updateAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);n.colorScale=i,e.style("marker-end","url(#end-arrow)").classed(o.consts.selectedClass,function(e){return e===n.selectedEdge}).attr("d",this.arrowPath.call(t)).transition("existingPathTransition").duration(750).attr("stroke",function(e){var t=i(e.getWeight());return t})}},{key:"newPathAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);e.transition("newPathTransition").duration(750).attrTween("opacity",function(e){return d3.interpolateString(0,1)}).attr("stroke",function(e){var t=i(e.getWeight());return t}).attr("d",this.arrowPath.call(t))}}]),t}(e.Link);return{Link:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Node",[function(){var e=function(){function e(t,o,n,i,r){_classCallCheck(this,e),this.x=t,this.y=o,this.radius=r,this.id=n,this.text=i,this.radius=r,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.attr("transform",function(e){return"translate("+e.x+","+e.y+")"})}},{key:"newNodeAttr",value:function(e,t){}},{key:"setRadius",value:function(e){this.radius=e}},{key:"installNodePolicy",value:function(e){this.hasPolicy=!0,this.nodePolicies.push(e),e.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.nodePolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.nodePolicies.splice(n,1))}),0===o.nodePolicies.length&&(o.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(e,t,o){_.forEach(this.nodePolicies,function(n){n[e](t,o)})}}]),e}();return{Node:e}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(e){var t=function(e){function t(e,o,n,i,r,a,l,s,c){_classCallCheck(this,t);var u=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,o,n,i,r));return u.parent=a,u.ancestors=l,null==s?u.xStart=e:u.xStart=s,null==c?u.yStart=o:u.yStart=c,u}return _inherits(t,e),_createClass(t,[{key:"newNodeAttr",value:function(e,t){var o=this.graph;null!=o.consts.containerClass&&null==o.dataSource.children_struct[t.id]&&e.classed(o.consts.containerClass,!0),e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){if(null!=e.xStart&&null!=e.yStart){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")}return d3.interpolateString("translate("+e.x+","+e.y+")","translate("+e.x+","+e.y+")")})}}]),t}(e.Node);return{Node:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function t(e,o,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,o);if(void 0===i){var r=Object.getPrototypeOf(e);
return null===r?void 0:t(r,o,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,"NodeSelectionPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.NodeSelectionPolicy={};o.selectedNodes=[];var n=e.consts.NodeSelectionPolicy={};n.selectedClass="selected";var i=e.drag;i.on("drag",function(t){var o=e;if(null!=o.consts.NodeSelectionPolicy){var n=o.consts.NodeSelectionPolicy.selectedClass,i=d3.selectAll("."+n);-1==i[0].indexOf(this)&&(i.classed(n,!1),i=d3.select(this),i.classed(n,!0)),i.attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),o.updateGraph()}})}}},{key:"addSelectNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;e.classed(i.selectedClass,!0),n.selectedNodes.push(t)}},{key:"removeSelectFromNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;o.circles.filter(function(e){return e.id===t.id}).classed(i.selectedClass,!1);var r=n.selectedNodes.indexOf(t);n.selectedNodes.splice(r,1)}},{key:"removeAllSelectedNodes",value:function(){var e=this.graph,t=e.state.NodeSelectionPolicy,o=e.consts.NodeSelectionPolicy;e.circles.classed(o.selectedClass,!1),t.selectedNodes=[]}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?n.selectedNodes.indexOf(t)>-1?this.removeSelectFromNode(e,t):this.addSelectNode(e,t):-1==n.selectedNodes.indexOf(t)&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.ctrlKey||n.selectedNodes.length<=1&&this.removeSelectFromNode(e,t)}}]),t}(e.Policy);return{Policy:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,"PathChangeViewPolicy"));return o.$state=e,o}return _inherits(t,e),_createClass(t,[{key:"generateList",value:function(e){var t=this,o=[],n=this.graph.dataSource.children_struct[e];return _.forEach(n,function(e){t.graph.dataSource.hasChild(e)===!0?o.concat(t.generateList(e)):o.push(e)}),o}},{key:"viewEdge",value:function(e){var t=[],o=[],n=e.source.id,i=e.target.id;t=this.graph.dataSource.hasChild(n)===!0?this.generateList(n):[n],o=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],this.$state.go("contiv.menu.visualization.edge",{sourceName:n,targetName:i,sourceList:t,targetList:o})}},{key:"mousedown",value:function(e,t){this.viewEdge(t)}}]),t}(e.Policy);return{Policy:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Policy",[function(){var e=function(){function e(t){_classCallCheck(this,e),this.policyName=t,this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){this.initialized||(this.initialized=!0,this.graph=e)}},{key:"mouseover",value:function(e,t){}},{key:"dblclick",value:function(e,t){}},{key:"contextmenu",value:function(e,t){}},{key:"mouseout",value:function(e,t){}},{key:"mousedown",value:function(e,t){}},{key:"mouseup",value:function(e,t){}},{key:"destroy",value:function(){}}]),e}();return{Policy:e}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(e,t,o,n,i,r,a){return{Policy:e.Policy,QTipPolicy:t.Policy,PathChangeViewPolicy:o.Policy,NodeSelectionPolicy:n.Policy,SplitJoinNodePolicy:i.Policy,SplitJoinViewPolicy:r.Policy,SaveStatePolicy:a.Policy}}]),angular.module("contiv.dashboard",["contiv.models"]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function o(e,t,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:o(r,t,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,"QTipPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=this,n=e.state.QTipPolicy={};n.mousedown=!1,e.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(e){n.mouseup=!1});var i=e.updateNewNodes;e.updateNewNodes=function(t){i.call(e,t),o.updateNewNodes(t)};var r=e.updateNewPaths;e.updateNewPaths=function(t){r.call(e,t),o.updateNewPaths(t)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!0}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!1}},{key:"whenQTipAvailable",value:function(e){var t=this,o=500;window.setTimeout(function(){null!=$(document).qtip?e():window.setTimeout(t.whenQTipAvailable(e),o)},o)}},{key:"updateNewNodes",value:function(e){function t(){e.each(function(e){var t,i=this;if(null!=o.dataSource.children_struct[e.id]){t="<b><u>Selectors:</b></u> ";var r=o.dataSource.selectors[e.id],a=!1;for(var l in r)a=!0,t+=l+" : <i>"+r[l]+"</i>,\n ";a===!1&&(t="No Selectors, ")}else{t="<b><u>Labels:</b></u> ";var s=o.dataSource.labels[e.id],a=!1;for(var l in s)a=!0,t+=l+" : <i>"+s[l]+"</i>,\n ";a===!1&&(t="No labels, ")}t=t.slice(0,-2),$(i).qtip({content:{title:e.id,text:t},events:{show:function(){var t=$(i).qtip("api"),r=$("#graphContainer").offset(),a=[r.left+(e.x*o.dragSvg.scale()+o.dragSvg.translate()[0]),r.top+(e.y+e.radius)*o.dragSvg.scale()+o.dragSvg.translate()[1]];return t.set("position.target",a),!n.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var o=this.graph,n=o.state.QTipPolicy;void 0!=$(document).qtip?t():this.whenQTipAvailable(t)}},{key:"updateNewPaths",value:function(e){var t=this.graph,o=t.state.QTipPolicy;void 0!=$(document).qtip&&e.each(function(e){var t=this,n=d3.select(this).node(),i=(n.getPointAtLength(n.getTotalLength()/2),e.qtipHelper()),r="Bytes: "+e.getWeight();$(t).qtip({content:{text:r},events:{show:function(){return!o.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:i.my,at:"center center",target:"mouse",adjust:i.adjust},hide:{event:"mousedown mouseleave"}})})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.login",["contiv.utils"]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,"SaveStatePolicy"));return o.savedState=e,o}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){this.graph=e;var t=this;e.destroy=function(){t.graphDestroy.call(e,t.savedState)},e.load=function(o){t.graphLoad.call(e,o)}}},{key:"graphDestroy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy(e)}),_(t.defaultPathPolicies).forEach(function(t){t.destroy(e)});for(var o in t.bindings)$(window).off(o,t.bindings[o])}},{key:"graphLoad",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){null!=t.load&&t.load(e)}),_(t.defaultPathPolicies).forEach(function(t){null!=t.load&&t.load(e)})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.menu",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function n(e,t,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:n(r,t,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,Object.getPrototypeOf(o).call(this));return e.policyName="SplitJoinNodePolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinNodePolicy={};t.splitNodes=[]}}},{key:"dblclick",value:function(e,t){var o=this.graph,n=o.state.SplitJoinNodePolicy;d3.event.ctrlKey||(n.selectedNodes.indexOf(t)>-1?this.splitMultipleNodes(n.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(t)))}},{key:"contextmenu",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var i=n.selectedNodes;if(i.indexOf(t)>-1)for(var r=0;r<i.length;r++)this.joinNode(i[r]);else this.removeAllSelectedNodes(),this.joinNode(t)}}},{key:"__splitNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=e.id,r=o.dataSource.children_struct;if(void 0!==r[i]&&!_.isEmpty(r[i])){o.nodes=_.filter(o.nodes,function(t){return t!=e}),o.spliceLinksForNode(e);for(var a=[],l=0;l<o.nodes.length;l++)a.push(o.nodes[l].id);for(var s=[],l=0;l<r[i].length;l++)a.push(r[i][l]),s.push(r[i][l]);var c=o.dataSource.getFlowBetweenSet(a),u=e.x,d=e.y,p=e.ancestors.slice();p.splice(0,0,e.id);for(var f=e.id,v=[],h=e.radius*o.consts.radiusDecay,g=c.nodeData,l=0;l<g.length;l++)if(s.indexOf(g[l].id)>-1){var m=g[l].id,y=g[l].text,P=new t.Node(null,null,m,y,h,f,p,u,d);P.initialize(o),o.nodes.push(P),v.push(P)}return o.links=o.dataSource.processLinkData(c.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.push(e.id),v}}},{key:"splitNode",value:function(e){var t=this.__splitNode(e);null!=t&&this.splitNodeEvent(t)}},{key:"splitMultipleNodes",value:function(e){for(var t=(this.graph,[]),o=0;o<e.length;o++){var n=this.__splitNode(e[o]);t=t.concat(n)}this.splitMultipleNodesEvent(n)}},{key:"splitNodeEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy;if(-1!=o.nodes.indexOf(e)){var i=o.dataSource.children_struct,r=e.id;if(!(i.topLevel.indexOf(r)>-1)){for(var a=[],l=[],s=0;s<o.nodes.length;s++)-1==o.nodes[s].ancestors.indexOf(e.parent)?l.push(o.nodes[s].id):a.push(o.nodes[s]);var c=e.parent;l.push(e.parent);var u=e.radius/o.consts.radiusDecay,d=e.x,p=e.y,f=e.ancestors[1],v=e.ancestors.slice(1),h=new t.Node(d,p,c,c,u,f,v);o.nodes.push(h);for(var g=o.dataSource.getFlowBetweenSet(l),s=0;s<a.length;s++){var m=a[s];o.nodes.splice(o.nodes.indexOf(m),1),o.spliceLinksForNode(m)}return o.links=o.dataSource.processLinkData(g.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(h.id),1),h}}}},{key:"joinNode",value:function(e){var t=this.__joinNode(e);null!=t&&this.joinNodeEvent(t)}},{key:"joinMultipleNode",value:function(e){for(var t=[],o=0;o<e.length;o++){var n=this.__joinNode(e[o]);t.push(n)}this.joinMultipleNodesEvent(t)}},{key:"joinNodeEvent",value:function(e){var t=this.graph;t.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(e){var t=this.graph;t.updateGraph()}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function i(e,t,o){null===e&&(e=Function.prototype);var n=Object.getOwnPropertyDescriptor(e,t);if(void 0===n){var r=Object.getPrototypeOf(e);return null===r?void 0:i(r,t,o)}if("value"in n)return n.value;var a=n.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,Object.getPrototypeOf(o).call(this));return e.policyName="SplitJoinViewPolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinViewPolicy={};t.savedStates=[],t.eventHistory=[],t.focusGroups=[],t.foci=[],t.zooms={},t.layout={},t.layoutDefault=null,t.zoomDefault=null,t.nodeIdsToReshow=null,t.backButtonElem=null,t.titleElem=null;var n=e.consts.SplitJoinViewPolicy={};n.boundary=.8,e.d3ForceBounds=this.d3ForceBounds,e.d3ForceTick=this.d3ForceTick,e.d3ForceStart=this.d3ForceStart,e.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;n.backButtonElem=e,n.backButton=function(){n.eventHistory.length>0&&o.undoLastEvent.call(o)}}},{key:"installTitle",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy;o.titleElem=e}},{key:"destroy",value:function(e){null!=e&&this.save(e)}},{key:"save",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy,n=t.nodes,i=t.links,r=null;null!=o.titleElem&&(r=o.titleElem.text());var a=o.focusGroups,l=o.eventHistory,s=o.zooms,c=o.layout,u=o.layoutDefault,d=o.zoomDefault,p={nodes:n,links:i,states:o.savedStates,currTitle:r,focusGroups:a,eventHistory:l,zooms:s,layout:c,layoutDefault:u,zoomDefault:d};e.SplitJoinViewPolicy=p}},{key:"load",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;e=e.SplitJoinViewPolicy,n.savedStates=e.states,o.links=e.links,o.nodes=e.nodes;var i=e.currTitle;null!=n.titleElem&&n.titleElem.text(i),n.eventHistory=e.eventHistory,n.focusGroups=e.focusGroups,n.zooms=e.zooms,n.layout=e.layout,n.layoutDefault=e.layoutDefault,n.zoomDefault=e.zoomDefault,null!=n.backButtonElem&&n.eventHistory.length>0&&n.backButtonElem.fadeTo("slow",1);var r=o.dataSource.children_struct;_.forEach(o.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(r[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var a;if(0===n.focusGroups.length){a=n.layoutDefault;var l=n.zoomDefault;o.zoomed(l[0],l[1])}else{var l=n.zooms[n.focusGroups];null!=l&&o.zoomed(l[0],l[1]),a=n.layout[n.focusGroups]}_.forEach(o.nodes,function(e){var t=a[e.id];null==t&&console.log(a,e),e.x=t.x,e.y=t.y}),o.state.initForce=!0,o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)})}},{key:"dblclick",value:function(e,t){var n=this.graph,i=n.state.SplitJoinViewPolicy,r=t.id,a=n.dataSource.children_struct;if(void 0!==a[r]&&!_.isEmpty(a[r])){if(i.focusGroups.slice(),0===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[0]],t.id)?i.focusGroups[0]=t.id:1===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[1]],t.id)&&(i.focusGroups[1]=t.id),2===i.focusGroups.length&&i.focusGroups[1]===t.id){var l=[t],s=[],c=a[i.focusGroups[0]];_.forEach(n.nodes,function(e){_.includes(c,e.id)&&(s.push(e.id),l.push(e))})}else{var l=[t],s=[];_.forEach(n.links,function(e){e.source===t&&-1==s.indexOf(e.target.id)?(e.target.SplitJoinViewPolicy={},e.target.SplitJoinViewPolicy.type="connected",s.push(e.target.id),l.push(e.target)):e.target===t&&-1==s.indexOf(e.source.id)&&(e.source.SplitJoinViewPolicy={},e.source.SplitJoinViewPolicy.type="connected",s.push(e.source.id),l.push(e.source))})}n.circles.each(function(e){e.id!==t.id&&n.spliceLinksForNode(e)}),n.updateGraph(),n.state.disableUpdate=!0,n.circles.each(function(e){e.id!==t.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=n.dragSvg.translate(),d=n.dragSvg.scale(),p=parseFloat(n.svg.style("width"))/d/2+u[0],f=parseFloat(n.svg.style("height"))/d/2+u[1];t.xStart=t.x,t.yStart=t.y,t.x=p,t.y=f,e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")});var v=_get(Object.getPrototypeOf(o.prototype),"splitNode",this);i.nodeIdsToReshow=s;var h=this;setTimeout(function(){n.nodes=l,v.call(h,t)},750)}}},{key:"updateGraphCallback",value:function(){var e=this.graph,t=e.state.SplitJoinViewPolicy;e.circles.each(function(e){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=e.SplitJoinViewPolicy&&("focus"===e.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===e.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),t.nodeIdsToReshow=null,e.updateGraph()}},{key:"setPositions",value:function(){function e(e,t){return Math.floor(Math.random()*(t-e+1))+e}var t=this.graph,o=this,n=t.consts,i=n.displayOffset,r=t.nodes,a=o.d3ForceBounds.call(t);_.forEach(r,function(t){if(null==t.x||null==t.y){var o=e(t.radius+i,a.width-t.radius-i),n=e(t.radius+i,a.height-t.radius-i);t.x=o,t.y=n}})}},{key:"d3ForceStart",value:function(){var e=this;e.circles.attr("cx",function(t){return null!=t.xStart&&(t.xStart=t.xStart*e.dragSvg.scale()+e.dragSvg.translate()[0]),t.x}).attr("cy",function(t){return null!=t.yStart&&(t.yStart=t.yStart*e.dragSvg.scale()+e.dragSvg.translate()[1]),t.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this,t=e.state,o=t.SplitJoinViewPolicy;if(null==o.layoutDefault){var n={};_.forEach(e.nodes,function(e){n[e.id]={x:e.x,y:e.y}}),o.layoutDefault=n;var i=e.dragSvg.scale(),r=e.dragSvg.translate();o.zoomDefault=[r,i]}e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceTick",value:function(e,t,o){function n(e){return function(n){2===u.length?("focus"===n.SplitJoinViewPolicy.type?n.y+=(u[0]-n.y)*e:n.y+=(u[1]-n.y)*e,n.x+=(t/2-n.x)*e):(n.y+=(o/2-n.y)*e,n.x+=(t/2-n.x)*e)}}var i=this,r=i.state,a=i.consts,l=r.SplitJoinViewPolicy,s=a.displayOffset,c=i.dragSvg.scale(),u=l.foci;i.circles.each(this.d3ForceCollide(.5)).each(n(.2*e.alpha)).attr("cx",function(e){return e.x=Math.max((e.radius+s)/c,Math.min(t+(-s-e.radius)/c,e.x))}).attr("cy",function(e){return null==e.SplitJoinViewPolicy||null==e.SplitJoinViewPolicy?(e.y=Math.max((e.radius+s)/c,Math.min(o+(-s-e.radius)/c,e.y)),e.y):"focus"===e.SplitJoinViewPolicy.type?(e.y=Math.max(e.radius+s,Math.min((o+(-s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,e.y)),e.y):"connected"===e.SplitJoinViewPolicy.type?(e.y=Math.max((o+(s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,Math.min(o+(-s-e.radius)/c,e.y)),e.y):void 0}),i.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){function e(e,o){var n=e*o,i=t.consts.startRadius,r=3.5*i,a=n/(r*r);return a}var t=this,o=t.state,n=t.consts,i=n.SplitJoinViewPolicy,r=o.SplitJoinViewPolicy,a=t.nodes,l=n.displayOffset,s=parseFloat(t.svg.style("width")),c=parseFloat(t.svg.style("height")),u=s,d=c,p=e(u-2*l,d-2*l),f=1;a.length>p?(f=p/a.length,t.zoomed(t.dragSvg.translate(),f),u/=f,d/=f):t.zoomed(t.dragSvg.translate(),f);var v,h=r.focusGroups;if(0===h.length)v=[d/2];else{var g=t.dataSource.children_struct[h[0]];i.boundary=g.length/a.length;var m=d*i.boundary,y=d-m;m<2*t.consts.maxRadius&&(i.boundary=2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),y<2*t.consts.maxRadius&&(i.boundary=1-2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),v=[m/2,m+y/2]}return r.foci=v,{width:u,height:d}}},{key:"splitNodeEvent",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy,i=o.dataSource.children_struct;_.forEach(e,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var r=e[0].parent;if(0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===r?n.eventHistory.pop():n.eventHistory.push({id:r,event:"split"}),null!=n.backButtonElem&&0!==n.eventHistory.length&&n.backButtonElem.fadeTo("slow",1),null!=n.titleElem){var a="";n.focusGroups.length>0&&(a+=n.focusGroups[0]),2===n.focusGroups.length&&(a+=" & "+n.focusGroups[1]),n.titleElem.text(a)}o.state.disableUpdate=!1,t.setLayout()}},{key:"setLayout",value:function(){var e,t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;if(0===n.focusGroups.length){e=n.layoutDefault;var i=n.zoomDefault;o.zoomed(i[0],i[1])}else{var i=n.zooms[n.focusGroups];null!=i&&o.zoomed(i[0],i[1]),e=n.layout[n.focusGroups]}if(null!=e)_.forEach(o.nodes,function(t){var o=e[t.id];null==o&&console.log(e,t),t.x=o.x,t.y=o.y}),o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)});else{o.state.initForce=!1,o.updateGraph(function(){t.updateGraphCallback.call(t)}),n.zooms[n.focusGroups]=[o.dragSvg.translate(),o.dragSvg.scale()];var e={};_.forEach(o.nodes,function(t){e[t.id]={x:t.x,y:t.y}}),n.layout[n.focusGroups]=e}}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=o.state.SplitJoinViewPolicy;if(-1!=o.nodes.indexOf(e)){var r=o.dataSource.children_struct,a=e.id;if(!(r.topLevel.indexOf(a)>-1)){for(var l=e.parent,s=[],c=[],u=0;u<o.nodes.length;u++)-1==o.nodes[u].ancestors.indexOf(e.parent)?c.push(o.nodes[u].id):s.push(o.nodes[u]);var d=e.parent;c.push(e.parent);var p=o.dataSource.ancestors_struct,r=o.dataSource.children_struct,f=i.focusGroups.indexOf(l);null!=p[l]?i.focusGroups[f]=p[l]:i.focusGroups.splice(f,1);var v=[];if(1===i.focusGroups.length){var h=p[e.id];h.push(i.focusGroups[0]),h=h.concat(p[i.focusGroups[0]]||[]),_.forEach(r.topLevel,function(e){-1===h.indexOf(e)&&-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v)}else 0===i.focusGroups.length&&(_.forEach(r.topLevel,function(e){-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v));var g=e.radius/o.consts.radiusDecay,m=e.x,y=e.y,l=e.ancestors[1],h=e.ancestors.slice(1),P=new t.Node(m,y,d,d,g,l,h);o.nodes.push(P);for(var u=0;u<s.length;u++){var w=s[u];o.nodes.splice(o.nodes.indexOf(w),1),o.spliceLinksForNode(w)}for(var S=o.dataSource.getFlowBetweenSet(c),E=[],b=S.nodeData,u=0;u<b.length;u++)-1!==v.indexOf(b[u].id)&&E.push(b[u]);var N=o.dataSource.processNodeData(E);_.forEach(N,function(e){e.radius=e.radius||o.consts.startRadius}),o.nodes=o.nodes.concat(N),o.links=o.dataSource.processLinkData(S.linkData,o.nodes),1===i.focusGroups.length?_.forEach(o.links,function(e){-1!==v.indexOf(e.source.id)?i.focusGroups[0]===e.target.parent&&v.splice(v.indexOf(e.source.id),1):-1!==v.indexOf(e.target.id)&&i.focusGroups[0]===e.source.parent&&v.splice(v.indexOf(e.target.id),1)}):v=[];var C=[];if(0!==v.length)for(var u=0;u<o.nodes.length&&(-1===v.indexOf(o.nodes[u].id)||(v.splice(v.indexOf(o.nodes[u].id),1),o.spliceLinksForNode(o.nodes[u]),C.push(o.nodes[u]),0!==v.length));u++);return _.forEach(C,function(e){o.nodes.splice(o.nodes.indexOf(e),1)}),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(P.id),1),P}}}},{key:"joinNodeEvent",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===e.id?n.eventHistory.pop():n.eventHistory.push({id:e.id,event:"join"});var i=t.dataSource.children_struct;if(_.forEach(t.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"}),null!=n.backButtonElem&&0===n.eventHistory.length&&n.backButtonElem.fadeTo("slow",0),null!=n.titleElem){var r="";n.focusGroups.length>0&&(r+=n.focusGroups[0]),2===n.focusGroups.length&&(r+=" & "+n.focusGroups[1]),n.titleElem.text(r)}o.setLayout()}},{key:"undoLastEvent",value:function(){var e,t=this.graph,n=this,i=t.state.SplitJoinViewPolicy,r=i.eventHistory[i.eventHistory.length-1],a=r.id;if("join"===r.event){e=t.findNodeById(a);var l=t.findD3Node(a);n.dblclick(l,e)}else{var s=t.dataSource.children_struct[a][0];e=t.findNodeById(s),_get(Object.getPrototypeOf(o.prototype),"joinNode",this).call(n,e)}}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(e){e.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","$stateParams","ApplicationGroupsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.applicationgroups.list")}function a(){r()}function l(){n.get().then(function(e){u.networks=_.filter(e,{tenantName:"default"})})}function s(){u.form.$valid&&(i.hideServerError(u),i.startLoader(u),u.applicationGroup.networkName=u.selectedNetwork.networkName,u.applicationGroup.key=o.generateKey(u.applicationGroup),o.create(u.applicationGroup).then(function(e){i.stopLoader(u),r()},function(e){i.stopLoader(u),i.showServerError(u,e)}))}function c(){i.stopLoader(u),i.hideServerError(u),u.applicationGroup={groupName:"",networkName:"",policies:[],netProfile:"",tenantName:"default"}}var u=this;u.networks=[],u.applicationGroup={},u.selectedNetwork={},u.mode="edit",l(),u.createApplicationGroup=s,u.cancelCreating=a,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.applicationgroups.edit")?u.mode="edit":u.mode="details"}function r(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:u.applicationGroup.key})}function l(){a()}function s(){n.hideServerError(u),n.startLoader(u),o["delete"](u.applicationGroup).then(function(e){n.stopLoader(u),r()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function c(){n.hideServerError(u),n.startLoader(u),o.save(u.applicationGroup).then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),
n.showServerError(u,e)})}var u=this;u.applicationGroup={},u.selectedNetwork={},n.stopLoader(u),n.hideServerError(u),o.getModelByKey(t.key).then(function(e){u.applicationGroup=e}),u.saveApplicationGroup=c,u.cancelEditing=l,u.deleteApplicationGroup=s,i()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.groups=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.applicationgroups").directive("ctvBandwidthpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","NetprofilesModel",function(e,t){function o(){t.get().then(function(t){e.netProfiles=_.filter(t,{tenantName:"default"}),""!==e.applicationgroup.netProfile&&(e.selectedNetprofile.policy=_.find(e.netProfiles,function(t){return t.profileName===e.applicationgroup.netProfile}))})}e.netProfiles=[],e.selectedNetprofile={policy:{}},e.updateApplicationgroup=function(){null===e.selectedNetprofile.policy?e.applicationgroup.netProfile="":e.applicationgroup.netProfile=e.selectedNetprofile.policy.profileName},o()}],templateUrl:"applicationgroups/bandwidthpolicy.html"}}),angular.module("contiv.applicationgroups").directive("ctvIsolationpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel",function(e,t,o,n,i){function r(){e.applicationgroup.policies.forEach(function(t){i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)})})}function a(){n.get().then(function(t){e.isolationPolicies=_.filter(t,{tenantName:"default"})})}e.incomingRules=[],e.outgoingRules=[],e.selectedPolicy={policy:{}},e.selectedPolicies=[],e.isolationPolicies=[],e.addIsolationPolicy=function(){var t=e.selectedPolicy.policy.policyName;void 0!==t&&0==_.includes(e.selectedPolicies,t)&&(e.selectedPolicies.push(t),i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)}),e.applicationgroup.policies.push(t))},e.removeIsolationPolicy=function(t){_.remove(e.selectedPolicies,function(e){return e===t}),_.remove(e.applicationgroup.policies,function(e){return e===t}),_.remove(e.incomingRules,function(e){return e.policyName===t}),_.remove(e.outgoingRules,function(e){return e.policyName===t})},("details"==e.mode||"edit"==e.mode&&""!=e.applicationgroup.groupName)&&(void 0===e.applicationgroup.policies&&(e.applicationgroup.policies=[]),r()),a()}],templateUrl:"applicationgroups/isolationpolicy.html"}}),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,a,l){function s(e){o.get(e).then(function(e){c.nodes=e.length}),n.get(e).then(function(e){c.networks=e.length}),i.get(e).then(function(e){c.volumes=e.length}),r.get(e).then(function(e){c.groups=e.length}),a.get(e).then(function(e){c.networkpolicies=e.length}),l.get(e).then(function(e){c.storagepolicies=e.length})}var c=this;c.nodes=0,c.networks=0,c.volumes=0,c.groups=0,c.networkpolicies=0,c.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").directive("ctvBandwidth",function(){return{restrict:"E",scope:{bandwidthPolicy:"=",mode:"@"},link:function(e){if(""!=e.bandwidthPolicy.bandwidth){var t=e.bandwidthPolicy.bandwidth.split(" ");e.bandwidthPolicy.bandwidthNumber=Number(t[0]),e.bandwidthPolicy.bandwidthUnit=t[1]}},templateUrl:"network_policies/bandwidth.html"}}),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",controller:"BandwidthPolicyCreateCtrl as bandwidthPolicyCreateCtrl",templateUrl:"network_policies/bandwidthpolicycreate.html"})}]).controller("BandwidthPolicyCreateCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networkpolicies.list.bandwidth")}function r(){i()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newPolicy.key=o.generateKey(s.newPolicy),s.newPolicy.bandwidth=s.newPolicy.bandwidthNumber+" "+s.newPolicy.bandwidthUnit,o.create(s.newPolicy).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function l(){n.stopLoader(s),n.hideServerError(s),s.newPolicy={profileName:"",tenantName:"default",bandwidth:"",DSCP:""}}var s=this;s.createPolicy=a,s.cancelCreating=r,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).controller("BandwidthPolicyDetailsCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.networkpolicies.bandwidth.edit")?u.mode="edit":u.mode="details"}function r(){n.hideServerError(u),n.startLoader(u),o.deleteUsingKey(u.policy.key,"name").then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function a(){e.go("contiv.menu.networkpolicies.list.bandwidth")}function l(){e.go("contiv.menu.networkpolicies.bandwidth.details",{key:u.policy.key})}function s(){l()}function c(){u.form.$valid&&(n.hideServerError(u),n.startLoader(u),u.policy.bandwidth=u.policy.bandwidthNumber+" "+u.policy.bandwidthUnit,o.save(u.policy).then(function(e){n.stopLoader(u),l()},function(e){n.stopLoader(u),n.showServerError(u,e)}))}var u=this;u.bandwidthProfiles=[],o.getModelByKey(t.key).then(function(e){u.policy=e}),n.stopLoader(u),n.hideServerError(u),i(),u.deletePolicy=r,u.savePolicy=c,u.cancelEditing=s}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.bandwidth",{url:"/bandwidth",controller:"BandwidthPolicyListCtrl as bandwidthPolicyListCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"})}]).controller("BandwidthPolicyListCtrl",["$scope","$interval","$filter","NetprofilesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"profileName")},function(e){i.stopLoader(a)})}var a=this;r(!0);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.list.isolation")}function i(){n()}function r(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newPolicy.key=t.generateKey(l.newPolicy),t.create(l.newPolicy).then(function(e){o.stopLoader(l),n()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function a(){o.stopLoader(l),o.hideServerError(l),l.newPolicy={policyName:"",tenantName:"default"}}var l=this;l.createPolicy=r,l.cancelCreating=i,a()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.networkpolicies.list.isolation")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:I.policy.key})}function c(){s()}function u(){s()}function d(){a.hideServerError(I),a.startLoader(I),o["delete"](I.policy).then(function(e){a.stopLoader(I),l()},function(e){a.stopLoader(I),a.showServerError(I,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?I.mode="edit":I.mode="details"}function f(){I.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIpAddress:"",protocol:"tcp",port:0,direction:"in",tenantName:"default",policyName:I.policy.policyName},I.newIncomingSelectedApplicationGroup="",I.newIncomingSelectedNetwork="",I.disableIncomingNetworkSelection=!1,I.disableIncomingApplicationGroupSelection=!1,I.disableIncomingIPAddressSelection=!1,I.incorrectCIDR=!1,I.validateCIDRFlag=!1}function v(){I.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIpAddress:"",protocol:"tcp",port:0,direction:"out",tenantName:"default",policyName:I.policy.policyName},I.newOutgoingSelectedApplicationGroup="",I.newOutgoingSelectedNetwork="",I.disableOutgoingNetworkSelection=!1,I.disableOutgoingApplicationGroupSelection=!1,I.disableOutgoingIPAddressSelection=!1,I.incorrectCIDR=!1,I.validateCIDRFlag=!1}function h(){i.get().then(function(e){I.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){I.applicationGroups=_.filter(e,{tenantName:"default"})})}function m(){null!=I.newOutgoingSelectedApplicationGroup?(I.newOutgoingRule.toEndpointGroup=I.newOutgoingSelectedApplicationGroup.groupName,I.newOutgoingRule.toNetwork="",I.disableOutgoingNetworkSelection=!0):(I.newOutgoingRule.toEndpointGroup="",I.disableOutgoingNetworkSelection=!1)}function y(){null!=I.newIncomingSelectedApplicationGroup?(I.newIncomingRule.fromEndpointGroup=I.newIncomingSelectedApplicationGroup.groupName,I.newIncomingRule.fromNetwork="",I.disableIncomingNetworkSelection=!0):(I.newIncomingRule.fromEndpointGroup="",I.disableOutgoingApplicationGroupSelection=!1,I.disableIncomingNetworkSelection=!1)}function P(){null!=I.newOutgoingSelectedNetwork?(I.newOutgoingRule.toNetwork=I.newOutgoingSelectedNetwork,I.newOutgoingRule.ToEndpointGroup="",I.disableOutgoingApplicationGroupSelection=!0,I.disableOutgoingIPAddressSelection=!0):(I.newOutgoingRule.toIpAddress="",I.disableOutgoingApplicationGroupSelection=!1,I.disableOutgoingIPAddressSelection=!1)}function w(){null!=I.newIncomingSelectedNetwork?(I.newIncomingRule.fromNetwork=I.newIncomingSelectedNetwork,I.newIncomingRule.fromEndpointGroup="",I.disableIncomingApplicationGroupSelection=!0,I.disableIncomingIPAddressSelection=!0):(I.newIncomingRule.fromNetwork="",I.disableIncomingApplicationGroupSelection=!1,I.disableIncomingIPAddressSelection=!1)}function S(e){e.ruleId=(I.incomingRules.length+I.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function E(){C(I.newIncomingRule.fromIpAddress)&&(a.hideServerError(I),a.startLoader(I),S(I.newIncomingRule),I.newIncomingRule.key=n.generateKey(I.newIncomingRule),n.create(I.newIncomingRule).then(function(e){a.stopLoader(I),I.incomingRules.push(e),f()},function(e){a.stopLoader(I),a.showServerError(I,e)}))}function b(){""==I.newIncomingRule.fromIpAddress?(I.incorrectCIDR=!1,I.disableIncomingNetworkSelection=!1):I.disableIncomingNetworkSelection=!0,I.validateCIDRFlag&&I.incorrectCIDR&&C(I.newIncomingRule.fromIpAddress)}function N(){""==I.newOutgoingRule.toIpAddress?(I.incorrectCIDR=!1,I.disableOutgoingNetworkSelection=!1):I.disableOutgoingNetworkSelection=!0,I.validateCIDRFlag&&I.incorrectCIDR&&C(I.newOutgoingRule.toIpAddress)}function C(e){var t=new RegExp(ContivGlobals.CIDR_REGEX);return""==e?!0:t.test(e)?(I.incorrectCIDR=!1,!0):(I.incorrectCIDR=!0,I.validateCIDRFlag=!0,!1)}function k(){C(I.newOutgoingRule.toIpAddress)&&(a.hideServerError(I),a.startLoader(I),S(I.newOutgoingRule),I.newOutgoingRule.key=n.generateKey(I.newOutgoingRule),n.create(I.newOutgoingRule).then(function(e){a.stopLoader(I),I.outgoingRules.push(e),v()},function(e){a.stopLoader(I),a.showServerError(I,e)}))}function O(e){a.hideServerError(I),a.startLoader(I),n.deleteUsingKey(e).then(function(t){a.stopLoader(I),_.remove(I.incomingRules,function(t){return t.key==e})},function(e){a.stopLoader(I),a.showServerError(I,e)})}function D(e){a.hideServerError(I),a.startLoader(I),n.deleteUsingKey(e).then(function(t){a.stopLoader(I),_.remove(I.outgoingRules,function(t){return t.key==e})},function(e){a.stopLoader(I),a.showServerError(I,e)})}var I=this;I.networks=[],I.applicationGroups=[],I.disableOutgoingNetworkSelection=!1,I.disableIncomingNetworkSelection=!1,I.disableOutgoingApplicationGroupSelection=!1,I.disableIncomingApplicationGroupSelection=!1,I.disableIncomingIPAddressSelection=!1,I.disableOutgoingIPAddressSelection=!1,I.newIncomingSelectedApplicationGroup="",I.newOutgoingSelectedApplicationGroup="",I.newIncomingSelectedNetwork="",I.newOutgoingSelectedNetwork="",I.incorrectCIDR=!1,I.validateCIDRFlag=!1,a.stopLoader(I),a.hideServerError(I),o.getModelByKey(t.key).then(function(e){I.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){I.incomingRules=e,f()}),n.getOutgoingRules(e.policyName,"default").then(function(e){I.outgoingRules=e,v()})}),h(),g(),I.deletePolicy=d,I.deleteIncomingRule=O,I.deleteOutgoingRule=D,I.addIncomingRule=E,I.addOutgoingRule=k,I.doneEditing=u,I.cancelEditing=c,I.onChangeOutgoingApplicationGroupSelection=m,I.onChangeIncomingApplicationGroupSelection=y,I.onChangeOutgoingNetworkSelection=P,I.onChangeIncomingNetworkSelection=w,I.onChangeIncomingIPAddress=b,I.onChangeOutgoingIPAddress=N,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.isolation",{url:"/isolation",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list",{url:"/list","abstract":!0,controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.list.redirection",{url:"/redirection",template:""})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){function t(){e.$current.includes["contiv.menu.networkpolicies.list.isolation"]&&e.go("contiv.menu.networkpolicies.isolation.create"),e.$current.includes["contiv.menu.networkpolicies.list.bandwidth"]&&e.go("contiv.menu.networkpolicies.bandwidth.create")}var o=this;o.createNetworkPolicy=t}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function l(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=a,s.cancelCreating=r,l()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"}).state("contiv.menu.networks.details.info",{url:"/info",templateUrl:"networks/networkinfo.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.networks.list")}function c(){l.hideServerError(d),l.startLoader(d),r["delete"](d.network).then(function(e){l.stopLoader(d),s()},function(e){l.stopLoader(d),l.showServerError(d,e)})}function u(e){a.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;l.stopLoader(d),l.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=c;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.networks=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details.stats",{url:"/stats",controller:"NetworkStatsCtrl as networkStatsCtrl",templateUrl:"networks/networkstats.html"})}]).controller("NetworkStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.NETWORKS_INSPECT_ENDPOINT,e).then(function(e){if(s.networkInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.endpoints){var t=a.buildEndPoints(e.Oper.endpoints);a.checkContainerChanged(s.containerDetails,t)&&(s.endpoints=e.Oper.endpoints,s.containerDetails=t)}else s.endpoints=[],s.containerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.nodes").factory("BgpService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.BGPS_ENDPOINT+o.key+"/";return e.get(i).then(function(e){n.resolve(e.data),o.neighbor=e.data,o.neighbors.push({name:o.neighbor.neighbor,value:o.neighbor["neighbor-as"]})},function(e){n.reject(e.data)}),n.promise}function n(t){var o=ContivGlobals.BGPS_ENDPOINT+t.key+"/";return e.post(o,t.neighbor)}function i(o){var n=t.defer(),i=ContivGlobals.BGPS_INSPECT_ENDPOINT+o+"/";return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getBgp:o,updateBgp:n,getBgpInspect:i}}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(){var o=t.defer(),n=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}return{getActiveLogs:o,getLastLogs:n}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getActiveLogs().then(function(e){i.activeLogs=e},function(e){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function a(){r()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.nodeOpsObj.nodes=[t.key],i.cleanupExtraVars(s),i.createExtraVars(s),o.commission(s.nodeOpsObj).then(function(e){n.stopLoader(s),r()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}var s=this;s.nodeOpsObj={},s.extra_vars={},s.ansibleVariables=[],s.envVariables=[],i.getSettings(s),s.cancelCommissioningNode=a,s.commission=l,n.stopLoader(s),n.hideServerError(s)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"}).state("contiv.menu.nodes.details.edit",{url:"/edit",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel","BgpService",function(e,t,o,n,i,r){function a(){var e={nodes:[t.key]};i.decommission(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function s(){switch(h.node.inventory_state.status){case"Unallocated":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Decommissioned":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Provisioning":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Allocated":h.showCommissionButton=!1,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!0;break;case"Cancelled":h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Maintenance":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;default:h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1}}function c(e){i.getModelByKey(t.key,e).then(function(e){h.node=e,s()})}function u(){e.is("contiv.menu.nodes.details.edit")?h.mode="edit":h.mode="details"}function d(){e.go("contiv.menu.nodes.details.info")}function p(){h.form.$valid&&(h.neighbor.key=t.key,h.neighbors.forEach(function(e){h.neighbor.neighbor=e.name,h.neighbor["neighbor-as"]=e.value}),r.updateBgp(h).then(function(e){h.neighbor=e.config.data,d()},function(e){}))}function f(){r.getBgp(h).then(function(e){h.neighbor=e},function(e){})}function v(){r.getBgpInspect(t.key).then(function(e){h.inspect=e,h.routes=e.Oper.routes,h.filteredroutes=e.Oper.routes},function(e){})}var h=this;h.numberpattern=ContivGlobals.NUMBER_REGEX,h.decommission=a,h.upgrade=l,h.setMode=u,h.updateBgpInfo=p,h.returnToInfo=d,h.neighbors=[],h.neighbor={},h.key=t.key,f(),v(),u(),c(!1);var g;angular.isDefined(g)||(g=n(function(){c(!0)},5e3)),o.$on("$destroy",function(){n.cancel(g)})}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.list")}function a(){r()}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),s(),i.createExtraVars(c),o.discover(c.nodeOpsObj).then(function(e){n.stopLoader(c),r()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=l,c.cancelDiscoveringNode=a,n.stopLoader(c),n.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getLastLogs().then(function(e){i.lastLogs=e},function(e){})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.nodes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","OrganizationsModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.organizations.list")}function i(){n()}function r(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newOrganization.key=l.newOrganization.tenantName,t.create(l.newOrganization).then(function(e){o.stopLoader(l),n()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function a(){o.stopLoader(l),o.hideServerError(l),l.newOrganization={tenantName:""}}var l=this;l.createOrganization=r,l.cancelCreating=i,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.organizations.list")}function r(){n.hideServerError(a),n.startLoader(a),o["delete"](a.organization).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)})}var a=this;n.stopLoader(a),n.hideServerError(a),o.getModelByKey(t.key).then(function(e){a.organization=e}),a.deleteOrganization=r}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.organizations=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function a(){r()}function l(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function c(){s(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",params:{state:null},controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.details.info",{url:"/info",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"
}).state("contiv.menu.servicelbs.details.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.details.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function a(){e.go("contiv.menu.servicelbs.details.info",{key:p.servicelb.key,state:"details"})}function l(){a()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function c(){n.hideServerError(p),n.startLoader(p);var e=p.servicelb.selectors;d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),a()},function(t){p.servicelb.selectors=e,u(),n.stopLoader(p),n.showServerError(p,t)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){p.servicelb.selectors=[],angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=c,p.cancelEditing=l,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.servicelbs=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details.stats",{url:"/stats",controller:"ServicelbStatsCtrl as servicelbStatsCtrl",templateUrl:"service_lbs/servicelbstats.html"})}]).controller("ServicelbStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","ServicelbsModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.SERVICELBS_INSPECT_ENDPOINT,e).then(function(e){if(s.servicelbInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.providers){var t=a.buildEndPoints(e.Oper.providers);a.checkContainerChanged(s.providerDetails,t)&&(s.providers=e.Oper.providers,s.providerDetails=t)}else s.providers=[],s.providerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(e,t,o){function n(){i.form.$valid&&(t.hideServerError(i),t.startLoader(i),i.nodeOpsObj.nodes=[e.key],o.cleanupExtraVars(i),o.createExtraVars(i),o.updateSettings(i.nodeOpsObj).then(function(e){t.stopLoader(i)},function(e){t.stopLoader(i),t.showServerError(i,e)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],o.getSettings(i),i.updateClusterSettings=n,t.stopLoader(i),t.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.networks",{url:"/networks",controller:"NetworkSettingCtrl as networkSettingCtrl",templateUrl:"settings/networksettings.html"})}]).controller("NetworkSettingCtrl",["CRUDHelperService","NetworkService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;i.vlanPattern=ContivGlobals.VLAN_REGEX,i.vxlanPattern=ContivGlobals.VXLAN_REGEX,n(),i.updateNetworkSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.volumes",{url:"/volumes",controller:"VolumeSettingCtrl as volumeSettingCtrl",templateUrl:"/settings/volumesettings.html"})}]).controller("VolumeSettingCtrl",["CRUDHelperService","VolumeSettingService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;n(),i.updateVolumeSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function a(){c.filesystemcmds.forEach(function(e){c.newStoragePolicy.filesystems[e.name]=e.value})}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),a(),o.create(c.newStoragePolicy).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){n.stopLoader(c),n.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=l,c.cancelCreating=r,c.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.is("contiv.menu.storagepolicies.edit")?m.mode="edit":m.mode="details"}function c(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:m.policy.name})}function d(){u()}function p(){l.hideServerError(m),l.startLoader(m),r.deleteUsingKey(m.policy.name,"name").then(function(e){l.stopLoader(m),c()},function(e){l.stopLoader(m),l.showServerError(m,e)})}function f(e){a.get(e).then(function(e){m.volumes=i("orderBy")(_.filter(e,{policy:m.policy.name}),"name")})}function v(){angular.forEach(m.policy.filesystems,function(e,t){this.push({name:t,value:e})},m.filesystemcmds)}function h(){m.filesystemcmds.forEach(function(e){m.policy.filesystems[e.name]=e.value})}function g(){m.form.$valid&&(l.hideServerError(m),l.startLoader(m),h(),r.save(m.policy).then(function(e){l.stopLoader(m),u()},function(e){l.stopLoader(m),l.showServerError(m,e)}))}var m=this;m.filesystemcmds=[],l.stopLoader(m),l.hideServerError(m),r.getModelByKey(t.key,!1,"name").then(function(e){m.policy=e,v(),f(!1)}),m.deletePolicy=p,m.savePolicy=g,m.cancelEditing=d,s();var y;angular.isDefined(y)||(y=n(function(){f(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(y)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(e,t,o,n,i,r){var a=n.sourceName,l=n.targetName,s=n.sourceList,c=n.targetList;if(null==s||null==c)return void o.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();e.edgeDataInterval=r(function(){i.getEdgeData(s,c,d.toString()).then(function(t){var o=t.results,n=0;_.forEach(o,function(e){_.isEmpty(e)===!1&&(n+=e.series[0].values[0][1])}),e.sourceName=a,e.targetName=l,e.edgeData=n,e.edgeDataTime=d},function(e){})},3e3),e.$on("$destroy",function(){r.cancel(e.edgeDataInterval)}),i.getOldEdgeData(s,c).then(function(t){var o=t.results,n=[];_.forEach(o,function(e){if(_.isEmpty(e)===!1){var t=e.series[0].values;_.isEmpty(n)?_.forEach(t,function(e){n.push(e[1])}):_.forEach(t,function(e,t){n[t]+=e[1]})}}),e.sourceName=a,e.targetName=l,e.sourceList=s,e.targetList=c,e.oldEdgeData=n},function(e){})}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(e){function t(e,t){function o(){s=new Date;for(var t in c){var n=c[t];n.data.push(e.edgeData||0),n.path.attr("d",p)}u.domain([s-(a-2)*l,s-l]),g.transition().duration(l).ease("linear").call(u.axis),v.transition().duration(l).ease("linear").call(d.axis),m.attr("transform",null).transition().duration(l).ease("linear").attr("transform","translate("+u(s-(a-1)*l)+")").each("end",function(){o()});for(var t in c){var n=c[t];n.data.shift()}}var n=document.getElementsByTagName("body")[0],i=n.clientWidth-400,r=n.clientHeight-400,a=59,l=750,s=new Date(Date.now()-l),c={current:{value:0,color:"orange",data:t.range(a).map(function(t){return e.oldEdgeData[Math.floor(t/10)]||0})}},u=t.time.scale().domain([s-(a-2),s-l]).range([0,i]),d=t.scale.linear().domain([0,t.max(c.current.data,function(e){return e+10})]).range([r,0]),p=t.svg.line().interpolate("basis").x(function(e,t){return u(s-(a-1-t)*l)}).y(function(e){return d(e)}),f=t.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),v=f.append("g").attr("class","y axis").call(d.axis=t.svg.axis().scale(d).orient("left")),h=t.select(".graph").append("svg").attr("class","chart").attr("width",i-50).attr("height",r+50),g=h.append("g").attr("class","x axis").attr("transform","translate(0,"+r+")").call(u.axis=t.svg.axis().scale(u).orient("bottom")),m=h.append("g");for(var y in c){var P=c[y];P.path=m.append("path").data([P.data]).attr("class",y+" group").style("stroke",P.color)}o()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(o){o.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=o.edgeData&&null!=o.oldEdgeData&&!o.initialize){o.initialize=!0;var n=e.d3;t(o,n)}})}}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(e,t,o,n,i,r){function a(e,o,n,i,r,a){if(void 0!==e.nodes&&void 0!==e.links&&void 0!==e.children_struct&&void 0!==e.ancestors_struct){var l=new r.DataSource(e.nodes,e.links,e.children_struct,e.ancestors_struct,e.labels,e.serviceSelectors);l.setAncestors();var s,c,u=l.getTopLevelFlow();s=l.processNodeData(u.nodeData),c=l.processLinkData(u.linkData,s);var d=document.getElementsByTagName("body")[0],p=(d.clientWidth,d.clientHeight),f=o.find("svg"),v=$(f.parent()).offset(),h=$(f.parent()).width(),g=d3.select(f[0]).attr("width",h).attr("height",p-v.top-20);e.visualizationGraph=new n.Graph(g,s,c,l,e.children_struct,e.ancestors_struct),e.visualizationGraph.installDefaultPathPolicy(new i.SaveStatePolicy(a.savedStates)),e.visualizationGraph.installDefaultPathPolicy(new i.PathChangeViewPolicy(t));var m=new i.QTipPolicy;e.visualizationGraph.installDefaultNodePolicy(m),e.visualizationGraph.installDefaultPathPolicy(m);var y=new i.SplitJoinViewPolicy;if(e.visualizationGraph.installDefaultNodePolicy(y),y.installBackButton($("#backButton")),y.installTitle($("#graph-title")),0==_.isEmpty(a.savedStates)){var P=e.visualizationGraph;P.load(a.savedStates)}else e.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(e,t){e.$on("$destroy",function(){$("#visualization-graph").unbind(),e.visualizationGraph.destroy()}),e.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=e.nodes&&null!=e.links&&null!=e.children_struct&&null!=e.ancestors_struct&&(e.initialized?(e.visualizationGraph.dataSource.links=e.links,e.visualizationGraph.updateLinkData()):(e.initialized=!0,a(e,t,o,n,i,r)))})}}}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(e,t,o,n){var i=function(t){var o=[],n=[],i=[];_.forEach(t.results[0].series,function(e){var t,r=e.tags.EndpointIP,a=e.tags.ProviderIP;0==_.includes(i,r)&&(t={name:r,id:r,parent:null,ancestors:null},o.push(t),i.push(r)),0==_.includes(i,a)&&(t={name:a,id:a,parent:null,ancestors:null},o.push(t),i.push(a));var l={source:r,target:a,weight:e.values[0][2]};n.push(l);var s={source:a,target:r,weight:e.values[0][1]};n.push(s)}),e.nodes=o,e.links=n};o.getGraphData().then(i,function(e){}),e.$on("$destroy",function(){n.cancel(e.graphDataInterval)}),o.getStructureData().then(function(t){e.ancestors_struct=t.ancestors_struct,e.children_struct=t.children_struct,e.labels=t.labels,e.serviceSelectors=t.serviceSelectors},function(e){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(e,t){function o(o,n){var i=t.defer();return e.get(o,n).then(function(e){i.resolve(e.data)},function(e){i.reject(e.data)}),i.promise}function n(o,n){var i=function(e){var t,o,n,r,a,l,s,c="";for(t in e)if(o=e[t],o instanceof Array)for(s=0;s<o.length;++s)a=o[s],n=t+"["+s+"]",l={},l[n]=a,c+=i(l)+"&";else if(o instanceof Object)for(r in o)a=o[r],n=t+"["+r+"]",l={},l[n]=a,c+=i(l)+"&";else void 0!==o&&null!==o&&(c+=encodeURIComponent(t)+"="+encodeURIComponent(o)+"&");return c.length?c.substr(0,c.length-1):c},r=t.defer();return e({url:o,method:"POST",data:n,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(e){return angular.isObject(e)&&"[object File]"!==String(e)?i(e):e}]}).then(function(e){r.resolve(e.data)},function(e){r.reject(e.data)}),r.promise}function i(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;e+="influx/query";var t={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return o(e,t)}function r(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;return e+="services",o(e)}function a(e,t){var o="(";o+=t+"=",o+="'"+e[0]+"' ";for(var n=1;n<e.length;n++)o+="OR ",o+=t+"=",o+="'"+e[n]+"' ";return o+=")"}function l(e,t,o){var i=ContivGlobals.VISUALIZATION_ENDPOINT;i+="influx/query";var r={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return n(i,r)}function s(e,t){var o=ContivGlobals.VISUALIZATION_ENDPOINT;o+="influx/query";var i={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return n(o,i)}return{getGraphData:i,getStructureData:r,getEdgeData:l,getOldEdgeData:s}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function a(){r()}function l(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.volumes.list")}function c(){l.hideServerError(v),l.startLoader(v),r["delete"](v.volume).then(function(e){l.stopLoader(v),s()})}function u(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,d(),p()})}function d(){a.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function p(){a.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function f(){v.snapshotSuccess=!1,l.hideServerError(v),l.startLoader(v),a.triggerSnapshot(v.volume).then(function(e){l.stopLoader(v),v.snapshotSuccess=!0},function(e){l.stopLoader(v),l.showServerError(v,e)})}var v=this;v.deleteVolume=c,v.triggerVolumeSnapshot=f,u(!1);var h;angular.isDefined(h)||(h=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.volumes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function i(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+"take/"+o.policy+"/"+o.name;return e.post(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n,triggerSnapshot:i}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.copy",{url:"/copy/",params:{snapshot:null,policy:null,volume:null},controller:"VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl",templateUrl:"volumes/volumesnapshotcopy.html"})}]).controller("VolumeSnapshotCopyCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+t.volume})}function s(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+u.newvolume})}function c(){if(u.form.$valid){a.hideServerError(u),a.startLoader(u);var e={};e.policy=t.policy,e.name=t.volume,r.copy(e,t.snapshot,u.newvolume).then(function(e){a.stopLoader(u),s()},function(e){a.stopLoader(u),a.showServerError(u,e)})}}var u=this;u.policy=t.policy,u.volume=t.volume,u.snapshot=t.snapshot,u.copySnapshot=c,u.cancelCopy=l}]),angular.module("contiv.directives").directive("ctvAccordion",function(){return{restrict:"E",transclude:!0,scope:{items:"="},link:function(e,t){"function"==typeof t.find(".ui.accordion").accordion&&t.find(".ui.accordion").accordion()},templateUrl:"components/directives/accordion.html"}}),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@",defaultsortcolumn:"@"},controller:["$scope","$element","$attrs","$filter",function(o,n,i,r){function a(n,i){if(p.searchText=i,(void 0===n||0>n)&&(n=0),p.pageNo=n,void 0!==o.items){var a=e(o.items,p.searchText);a=r("orderBy")(a,p.sortObj.field,p.sortObj.reverse);var l=Math.ceil(a.length/p.size);0==l&&(l=1),p.chunks=[];for(var s=0;l>s;s++)p.chunks.push({selected:!1,pageNo:s});if(n>=p.chunks.length&&(p.pageNo=0),p.chunks[p.pageNo].selected=!0,p.chunks.length>5){var c,u;c=p.pageNo-2,u=p.pageNo+3,0>c&&(u-=c,c=0),u>p.chunks.length&&(c-=u-p.chunks.length,u=p.chunks.length),o.paginationMenu.chunks=p.chunks.slice(c,u)}else o.paginationMenu.chunks=p.chunks;p.filteredItems=t(a,p.size,p.pageNo*p.size),o.filtereditems=p.filteredItems}return!1}function l(){var e;return e=p.pageNo<=0?0:p.pageNo-1,a(e)}function s(){var e;return e=p.pageNo+1,e>p.chunks.length-1&&(e=p.chunks.length-1),a(e)}function c(e){o.paginationMenu=e}function u(e){return{field:e,reverse:!1,iconDirection:{"angle down icon":!0,"angle up icon":!1}}}function d(e){e==p.sortObj.field?(p.sortObj.field=e,p.sortObj.reverse=!p.sortObj.reverse,p.sortObj.iconDirection={"angle down icon":!p.sortObj.reverse,"angle up icon":p.sortObj.reverse}):p.sortObj=u(e),p.showChunk(p.pageNo,p.searchText),o.$apply()}var p=this;p.chunks=[],p.pageNo=0,p.sortObj=u(o.defaultsortcolumn),p.size=parseInt(o.size,10),isNaN(p.size)&&(p.size=12),p.showChunk=a,p.showNextChunk=s,p.showPrevChunk=l,p.addPaginationMenu=c,p.sort=d}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,require:"^^ctvTable",scope:{"class":"@",sortfield:"="},link:function(e,t,o,n){e.tablectrl=n,void 0!=e.sortfield&&null!=e.sortfield&&t.bind("click",function(){n.sort(e.sortfield)})},templateUrl:"components/directives/tableheader.html"}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{colspan:"@"},replace:!0,link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},Collection.prototype.getInspectByKey=function(e,t,o){var n=this,i=n.$q.defer();return e in n.inspectStats&&0==o?i.resolve(n.inspectStats[e]):n.$http.get(t+e+"/").then(function(t){var o=n.extract(t);n.inspectStats[e]=o,i.resolve(o)},function(e){i.reject(e)}),i.promise},angular.module("contiv.models").factory("NetprofilesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.NETPROFILES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.profileName},o}]),angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){function o(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}o.prototype=Object.create(BaseCollection.prototype),o.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},o.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("OrganizationsModel",["$http","$q",function(e,t){
return new Collection(e,t,ContivGlobals.ORGANIZATIONS_ENDPOINT)}]),angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,a={name:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,a).then(function(e){n.models.push(n.extract(e)),i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}}),angular.module("contiv.utils").factory("InspectService",function(){function e(e){var t={};for(var o in e){var n=[];for(var i in e[o]){var r={};switch(r.name=i,r.format="none",r.type="string",i){case"ipAddress":r.value=e[o][i].filter(function(e){return e.length>0}).join();break;case"labels":r.value=e[o][i].replace(/(map\[|\])/gi,"").replace(/(:)/gi,"=").split(" ").filter(function(e){return e.length>0}),r.format="label",r.type="array";break;default:r.value=e[o][i]}n.push(r)}t[e[o].containerID]=n}return t}function t(e,t){if(void 0==e)return!0;if(Object.keys(e).length!=Object.keys(t).length)return!0;for(var o in t)if(!(o in e))return!0;return!1}return{buildEndPoints:e,checkContainerChanged:t}}),angular.module("contiv.utils").factory("NetworkService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NETWORK_SETTINGS_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data[0])},function(e){o.reject(e.data)}),o.promise}function n(t){return e.post(ContivGlobals.NETWORK_SETTINGS_ENDPOINT+"global/",t)}return{getSettings:o,updateSettings:n}}]),angular.module("contiv.utils").factory("NodesService",["$http","$q",function(e,t){function o(o){var r=t.defer(),a=ContivGlobals.NODES_SETTINGS_GET_ENDPOINT;return e.get(a).then(function(e){r.resolve(e.data),o.setting=e.data;var t=o.setting.extra_vars,a=t[s.SCHED_PROVIDER],l=t[s.CONTIV_NET_MODE];t[s.CONTROL_INTERFACE]&&(o.extra_vars[s.CONTROL_INTERFACE]=t[s.CONTROL_INTERFACE]),t[s.DATA_INTERFACE]&&(o.extra_vars[s.DATA_INTERFACE]=t[s.DATA_INTERFACE]),t[s.VIP_ADDR]&&(o.extra_vars[s.VIP_ADDR]=t[s.VIP_ADDR]),a&&(o.extra_vars[s.SCHED_PROVIDER]=a,"ucp-swarm"===a&&(o.extra_vars[s.UCP_BOOTSTRAP_NODE]=t[s.UCP_BOOTSTRAP_NODE])),l&&(o.extra_vars[s.CONTIV_NET_MODE]=l,"standalone"===l?o.extra_vars[s.FWD_MODE]=t[s.FWD_MODE]:"aci"===l&&(o.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]=t[s.APIC_CONTR_UNRESTRICT_MODE],o.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN]=t[s.APIC_EPG_BRIDGE_DOMAIN],o.extra_vars[s.APIC_LEAF_NODES]=t[s.APIC_LEAF_NODES],o.extra_vars[s.APIC_PASSWORD]=t[s.APIC_PASSWORD],o.extra_vars[s.APIC_PHYS_DOMAIN]=t[s.APIC_PHYS_DOMAIN],o.extra_vars[s.APIC_URL]=t[s.APIC_URL],o.extra_vars[s.APIC_USERNAME]=t[s.APIC_USERNAME])),t[s.CLUSTER_NAME]&&(o.extra_vars[s.CLUSTER_NAME]=t[s.CLUSTER_NAME]),n(t[s.ENV],o.envVariables),i(t,o.ansibleVariables)},function(e){r.reject(e.data)}),r.promise}function n(e,t){var o;for(o in e)t.push({name:o,value:e[o]})}function i(e,t){var o,n=[s.APIC_CONTR_UNRESTRICT_MODE,s.APIC_EPG_BRIDGE_DOMAIN,s.APIC_LEAF_NODES,s.APIC_PASSWORD,s.APIC_PHYS_DOMAIN,s.APIC_URL,s.APIC_USERNAME,s.CONTIV_NET_MODE,s.CONTROL_INTERFACE,s.ENV,s.FWD_MODE,s.DATA_INTERFACE,s.SCHED_PROVIDER,s.VIP_ADDR,s.UCP_BOOTSTRAP_NODE,s.CLUSTER_NAME];for(o in e)-1===n.indexOf(o)&&t.push({name:o,value:e[o]})}function r(t){return e.post(ContivGlobals.NODES_SETTINGS_SET_ENDPOINT,t,{headers:{"Content-Type":"application/json"}})}function a(e){e.ansibleVariables.forEach(function(t){e.extra_vars[t.name]=t.value});var t={};e.envVariables.forEach(function(e){t[e.name]=e.value}),e.extra_vars[s.ENV]=t,e.nodeOpsObj.extra_vars=JSON.stringify(e.extra_vars)}function l(e){"aci"==e.extra_vars[s.CONTIV_NET_MODE]?delete e.extra_vars[s.FWD_MODE]:(delete e.extra_vars[s.APIC_URL],delete e.extra_vars[s.APIC_USERNAME],delete e.extra_vars[s.APIC_PASSWORD],delete e.extra_vars[s.APIC_LEAF_NODES],delete e.extra_vars[s.APIC_PHYS_DOMAIN],delete e.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN],delete e.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]),"native-swarm"==e.extra_vars[s.SCHED_PROVIDER]&&delete e.extra_vars[s.UCP_BOOTSTRAP_NODE]}var s={APIC_CONTR_UNRESTRICT_MODE:"apic_contracts_unrestricted_mode",APIC_EPG_BRIDGE_DOMAIN:"apic_epg_bridge_domain",APIC_LEAF_NODES:"apic_leaf_nodes",APIC_PASSWORD:"apic_password",APIC_PHYS_DOMAIN:"apic_phys_domain",APIC_URL:"apic_url",APIC_USERNAME:"apic_username",CONTIV_NET_MODE:"contiv_network_mode",CONTROL_INTERFACE:"control_interface",ENV:"env",FWD_MODE:"fwd_mode",DATA_INTERFACE:"netplugin_if",SCHED_PROVIDER:"scheduler_provider",VIP_ADDR:"service_vip",UCP_BOOTSTRAP_NODE:"ucp_bootstrap_node_name",CLUSTER_NAME:"cluster_name"};return{getSettings:o,createEnvVariables:n,createAnsibleVariables:i,updateSettings:r,createExtraVars:a,cleanupExtraVars:l}}]),angular.module("contiv.utils").factory("VolumeSettingService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.VOLUMES_GLOBAL_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(t){return e.post(ContivGlobals.VOLUMES_GLOBAL_ENDPOINT,t)}return{getSettings:o,updateSettings:n}}]),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9idW5kbGUuanMiLCJjb21wb25lbnRzL21vZGVscy9jb2xsZWN0aW9uLmpzIiwibW9kdWxlLmpzIiwiZGlyZWN0aXZlcy9tb2R1bGUuanMiLCJkYXRhc291cmNlL2RhdGFzb3VyY2UuanMiLCJtb2RlbHMvbW9kdWxlLmpzIiwiZGF0YXNvdXJjZS92aXN1YWxpemVyZGF0YXNvdXJjZS5qcyIsInV0aWxzL21vZHVsZS5qcyIsImdyYXBoL2dyYXBoLmpzIiwiZ3JhcGgvdmlzdWFsaXplcmdyYXBoLmpzIiwibGluay9saW5rLmpzIiwibGluay92aXN1YWxpemVybGluay5qcyIsIm5vZGUvbm9kZS5qcyIsIm5vZGUvdmlzdWFsaXplcm5vZGUuanMiLCJwb2xpY3kvbm9kZXNlbGVjdGlvbnBvbGljeS5qcyIsInBvbGljeS9wYXRoY2hhbmdldmlld3BvbGljeS5qcyIsInBvbGljeS9wb2xpY3kuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9tb2R1bGUuanMiLCJwb2xpY3kvcG9saWN5c2VydmljZS5qcyIsImRhc2hib2FyZC9tb2R1bGUuanMiLCJwb2xpY3kvcXRpcHBvbGljeS5qcyIsImxvZ2luL21vZHVsZS5qcyIsInBvbGljeS9zYXZlc3RhdGVwb2xpY3kuanMiLCJtZW51L21vZHVsZS5qcyIsInBvbGljeS9zcGxpdGpvaW5ub2RlcG9saWN5LmpzIiwibmV0d29ya19wb2xpY2llcy9tb2R1bGUuanMiLCJwb2xpY3kvc3BsaXRqb2ludmlld3BvbGljeS5qcyIsIm5ldHdvcmtzL21vZHVsZS5qcyIsIm5vZGVzL21vZHVsZS5qcyIsIm9yZ2FuaXphdGlvbnMvbW9kdWxlLmpzIiwic2VydmljZV9sYnMvbW9kdWxlLmpzIiwic2V0dGluZ3MvbW9kdWxlLmpzIiwic3RvcmFnZV9wb2xpY2llcy9tb2R1bGUuanMiLCJ2aXN1YWxpemF0aW9uL21vZHVsZS5qcyIsInZvbHVtZXMvbW9kdWxlLmpzIiwiYXBwLmpzIiwiYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGNyZWF0ZWN0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwZGV0YWlsc2N0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwbGlzdGN0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9iYW5kd2lkdGhwb2xpY3lkaXJlY3RpdmUuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9pc29sYXRpb25wb2xpY3lkaXJlY3RpdmUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkY3RybC5qcyIsImxvZ2luL2xvZ2luY3RybC5qcyIsIm1lbnUvbWVudUN0cmwuanMiLCJuZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aGRpcmVjdGl2ZS5qcyIsIm5ldHdvcmtfcG9saWNpZXMvYmFuZHdpZHRocG9saWN5Y3JlYXRlY3RybC5qcyIsIm5ldHdvcmtfcG9saWNpZXMvYmFuZHdpZHRocG9saWN5ZGV0YWlsc2N0cmwuanMiLCJuZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWxpc3RjdHJsLmpzIiwibmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3ljcmVhdGVjdHJsLmpzIiwibmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3lkZXRhaWxzY3RybC5qcyIsIm5ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5bGlzdGN0cmwuanMiLCJuZXR3b3JrX3BvbGljaWVzL25ldHdvcmtwb2xpY2llc3RhYnNjdHJsLmpzIiwibmV0d29ya3MvbmV0d29ya2NyZWF0ZWN0cmwuanMiLCJuZXR3b3Jrcy9uZXR3b3JrZGV0YWlsc2N0cmwuanMiLCJuZXR3b3Jrcy9uZXR3b3JrbGlzdGN0cmwuanMiLCJuZXR3b3Jrcy9uZXR3b3Jrc3RhdHNjdHJsLmpzIiwibm9kZXMvYmdwc2VydmljZS5qcyIsIm5vZGVzL2xvZ3NkaXJlY3RpdmUuanMiLCJub2Rlcy9sb2dzZXJ2aWNlLmpzIiwibm9kZXMvbm9kZWFjdGl2ZWpvYmxvZ3NjdHJsLmpzIiwibm9kZXMvbm9kZWNvbW1pc3Npb25jdHJsLmpzIiwibm9kZXMvbm9kZWRldGFpbHNjdHJsLmpzIiwibm9kZXMvbm9kZWRpcmVjdGl2ZS5qcyIsIm5vZGVzL25vZGVkaXNjb3ZlcmN0cmwuanMiLCJub2Rlcy9ub2RlbGFzdGpvYmxvZ3NjdHJsLmpzIiwibm9kZXMvbm9kZWxpc3RjdHJsLmpzIiwib3JnYW5pemF0aW9ucy9vcmdhbml6YXRpb25jcmVhdGVjdHJsLmpzIiwib3JnYW5pemF0aW9ucy9vcmdhbml6YXRpb25kZXRhaWxzY3RybC5qcyIsIm9yZ2FuaXphdGlvbnMvb3JnYW5pemF0aW9ubGlzdGN0cmwuanMiLCJzZXJ2aWNlX2xicy9zZXJ2aWNlbGJjcmVhdGVjdHJsLmpzIiwic2VydmljZV9sYnMvc2VydmljZWxiZGV0YWlsc2N0cmwuanMiLCJzZXJ2aWNlX2xicy9zZXJ2aWNlbGJsaXN0Y3RybC5qcyIsInNlcnZpY2VfbGJzL3NlcnZpY2VsYnBvcnRzZGlyZWN0aXZlLmpzIiwic2VydmljZV9sYnMvc2VydmljZWxic3RhdHNjdHJsLmpzIiwic2V0dGluZ3MvY2x1c3RlcnNldHRpbmdjdHJsLmpzIiwic2V0dGluZ3MvbmV0d29ya3NldHRpbmdjdHJsLmpzIiwic2V0dGluZ3Mvdm9sdW1lc2V0dGluZ2N0cmwuanMiLCJzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3ljcmVhdGVjdHJsLmpzIiwic3RvcmFnZV9wb2xpY2llcy9zdG9yYWdlcG9saWN5ZGV0YWlsc2N0cmwuanMiLCJzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lkaXJlY3RpdmUuanMiLCJzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lsaXN0Y3RybC5qcyIsInZpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2VjdHJsLmpzIiwidmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9uZWRnZWRpcmVjdGl2ZS5qcyIsInZpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmdyYXBoZGlyZWN0aXZlLmpzIiwidmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9ubGlzdGN0cmwuanMiLCJ2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25zZXJ2aWNlLmpzIiwidm9sdW1lcy92b2x1bWVjcmVhdGVjdHJsLmpzIiwidm9sdW1lcy92b2x1bWVkZXRhaWxzY3RybC5qcyIsInZvbHVtZXMvdm9sdW1lbGlzdGN0cmwuanMiLCJ2b2x1bWVzL3ZvbHVtZXNlcnZpY2UuanMiLCJ2b2x1bWVzL3ZvbHVtZXNuYXBzaG90Y29weWN0cmwuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvYWNjb2Rpb25kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvY29sbGFwc2libGVkaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvZXJyb3JtZXNzYWdlZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL25hbWV2YWx1ZWRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvZGlyZWN0aXZlcy90YWJsZWRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvbW9kZWxzL2FwcGxpY2F0aW9uZ3JvdXBzbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9uZXRwcm9maWxlc21vZGVsLmpzIiwiY29tcG9uZW50cy9tb2RlbHMvbmV0d29ya3Ntb2RlbC5qcyIsImNvbXBvbmVudHMvbW9kZWxzL25vZGVzbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9vcmdhbml6YXRpb25zbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9wb2xpY2llc21vZGVsLmpzIiwiY29tcG9uZW50cy9tb2RlbHMvcnVsZXNtb2RlbC5qcyIsImNvbXBvbmVudHMvbW9kZWxzL3NlcnZpY2VsYnNtb2RlbC5qcyIsImNvbXBvbmVudHMvbW9kZWxzL3N0b3JhZ2Vwb2xpY2llc21vZGVsLmpzIiwiY29tcG9uZW50cy9tb2RlbHMvdm9sdW1lc21vZGVsLmpzIiwiY29tcG9uZW50cy91dGlscy9jcnVkaGVscGVyc2VydmljZS5qcyIsImNvbXBvbmVudHMvdXRpbHMvaW5zcGVjdHNlcnZpY2UuanMiLCJjb21wb25lbnRzL3V0aWxzL25ldHdvcmtzZXJ2aWNlLmpzIiwiY29tcG9uZW50cy91dGlscy9ub2Rlc3NlcnZpY2UuanMiLCJjb21wb25lbnRzL3V0aWxzL3ZvbHVtZXNldHRpbmdzZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL25vZGVzL2FjaXZhbGlkZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL25vZGVzL2NvbnRyb2xpbnRlcmZhY2VkaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvbmV0d29ya21vZGVkaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvc2NoZWR1bGVyZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJCYXNlQ29sbGVjdGlvbiIsIiRodHRwIiwiJHEiLCJ1cmwiLCJ0aGlzIiwibW9kZWxzIiwiQ29sbGVjdGlvbiIsImluc3BlY3RTdGF0cyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZmFjdG9yeSIsIk5vZGUiLCJMaW5rIiwiRGF0YVNvdXJjZSIsIm5vZGVzIiwibGlua3MiLCJpZCIsIm5hbWUiLCJub2RlRGF0YSIsIl8iLCJmb3JFYWNoIiwiZGF0YSIsIm5ld05vZGUiLCJ0ZXh0IiwicHVzaCIsImxpbmtEYXRhIiwiZmluZE5vZGVCeUlkIiwic291cmNlIiwibGluayIsIkNvbnRpdkdsb2JhbHMiLCJORVRXT1JLU19FTkRQT0lOVCIsIk5FVFdPUktTX0lOU1BFQ1RfRU5EUE9JTlQiLCJTRVJWSUNFTEJTX0lOU1BFQ1RfRU5EUE9JTlQiLCJQT0xJQ0lFU19FTkRQT0lOVCIsIlJVTEVTX0VORFBPSU5UIiwiQVBQTElDQVRJT05HUk9VUFNfRU5EUE9JTlQiLCJTRVJWSUNFTEJTX0VORFBPSU5UIiwiT1JHQU5JWkFUSU9OU19FTkRQT0lOVCIsIk5FVFdPUktfU0VUVElOR1NfRU5EUE9JTlQiLCJORVRQUk9GSUxFU19FTkRQT0lOVCIsIkJHUFNfRU5EUE9JTlQiLCJCR1BTX0lOU1BFQ1RfRU5EUE9JTlQiLCJWSVNVQUxJWkFUSU9OX0VORFBPSU5UIiwiVk9MVU1FU19FTkRQT0lOVCIsIlZPTFVNRVNfQ1JFQVRFX0VORFBPSU5UIiwiVk9MVU1FU19ERUxFVEVfRU5EUE9JTlQiLCJWT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQiLCJWT0xVTUVTX1VTRVNfRU5EUE9JTlQiLCJWT0xVTUVTX1NOQVBTSE9UU19FTkRQT0lOVCIsIlNUT1JBR0VQT0xJQ0lFU19FTkRQT0lOVCIsIlZPTFVNRVNfR0xPQkFMX0VORFBPSU5UIiwiTk9ERVNfTElTVF9FTkRQT0lOVCIsIk5PREVTX0RJU0NPVkVSX0VORFBPSU5UIiwiTk9ERVNfQ09NTUlTU0lPTl9FTkRQT0lOVCIsIk5PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVCIsIk5PREVTX01BSU5URU5BTkNFX0VORFBPSU5UIiwiTk9ERVNfTEFTVF9KT0JfRU5EUE9JTlQiLCJOT0RFU19BQ1RJVkVfSk9CX0VORFBPSU5UIiwiTk9ERVNfU0VUVElOR1NfU0VUX0VORFBPSU5UIiwiTk9ERVNfU0VUVElOR1NfR0VUX0VORFBPSU5UIiwiUkVGUkVTSF9JTlRFUlZBTCIsIkNJRFJfUkVHRVgiLCJWTEFOX1JFR0VYIiwiVlhMQU5fUkVHRVgiLCJOVU1CRVJfUkVHRVgiLCJWaXN1YWxpemVyTm9kZSIsIlZpc3VhbGl6ZXJMaW5rIiwiVmlzdWFsaXplckRhdGFTb3VyY2UiLCJfRGF0YVNvdXJjZSREYXRhU291cmMiLCJjaGlsZHJlbl9zdHJ1Y3QiLCJhbmNlc3RvcnNfc3RydWN0IiwibGFiZWxzIiwic2VsZWN0b3JzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInRoaXNEYXRhU291cmNlIiwiYWRkZWRDbGllbnQiLCJub2RlIiwiYW5jZXN0b3JzIiwiaXNFbXB0eSIsInBhcmVudCIsImluY2x1ZGVzIiwidG9wTGV2ZWwiLCJnZXRGbG93QmV0d2VlblNldCIsIm5vZGVfbmFtZXMiLCJsb2NhbF9ub2RlcyIsImlkTWFwcGluZyIsImoiLCJpbmRleE9mIiwid2VpZ2h0Iiwibm9kZV90b19hZGQiLCJub2RlSWRUb05hbWUiLCJhZGRlZF9saW5rcyIsInVuZGVmaW5lZCIsImV4aXN0aW5nX2xpbmsiLCJzZXRXZWlnaHQiLCJnZXRSYXdXZWlnaHQiLCJpbmNyZWFzZUNvdW50IiwiUG9saWN5U2VydmljZSIsIkdyYXBoIiwic3ZnIiwidGhpc0dyYXBoIiwiZGVmYXVsdE5vZGVQb2xpY2llcyIsImRlZmF1bHRQYXRoUG9saWNpZXMiLCJzdmdQb2xpY3kiLCJQb2xpY3kiLCJzdGF0ZSIsImNhblpvb20iLCJjYW5QYW4iLCJpbml0Rm9yY2UiLCJkaXNhYmxlVXBkYXRlIiwiY29uc3RzIiwiY2lyY2xlR0NsYXNzIiwiZ3JhcGhDbGFzcyIsInBhdGhDbGFzcyIsIm5vZGVDbGFzcyIsIm5vZGVUZXh0Iiwic3RhcnRSYWRpdXMiLCJtYXhSYWRpdXMiLCJwYWRkaW5nIiwiZGlzcGxheU9mZnNldCIsIm9uIiwiZCIsImRlZnMiLCJhcHBlbmQiLCJhdHRyIiwic3ZnRyIsImNsYXNzZWQiLCJwYXRocyIsInNlbGVjdEFsbCIsImNpcmNsZXMiLCJpbml0Tm9kZXMiLCJpbml0TGlua3MiLCJzZXRQb3NpdGlvbnMiLCJyZXNpemVGdW5jIiwib25XaW5kb3dSZXNpemUiLCJiaW5kaW5ncyIsInJlc2l6ZSIsIiQiLCJ3aW5kb3ciLCJwb2xpY3kiLCJkZXN0cm95Iiwib2ZmIiwiaW5pdGlhbGl6ZSIsImQzTm9kZSIsImVhY2giLCJkMyIsInNlbGVjdCIsImQzZHJhZyIsImRyYWciLCJwb2xpY3lSZW1vdmUiLCJwb2xpY3lSZW1vdmVOYW1lIiwicG9saWN5TmFtZSIsImluZGV4Iiwic3BsaWNlIiwiZXZlbnQiLCJkM3BhdGgiLCJkM25vZGUiLCJkM3pvb20iLCJkcmFnU3ZnIiwiZ0VsIiwidGl0bGUiLCJ3b3JkcyIsInNwbGl0IiwibndvcmRzIiwiZWwiLCJ0c3BhbiIsInRvU3BsaWNlIiwiZmlsdGVyIiwibCIsIm1hcCIsInVwZGF0ZUdyYXBoIiwic3BsaWNlTGlua3NGb3JOb2RlIiwidXBkYXRlQXR0ciIsIm5ld1BhdGhzIiwibmV3UGF0aEF0dHIiLCJoYXNQb2xpY3kiLCJwYXRoUG9saWN5RXZlbnQiLCJuZXdOb2RlcyIsImdyYXBoIiwibmV3Tm9kZUF0dHIiLCJub2RlUG9saWN5RXZlbnQiLCJTdHJpbmciLCJyYWRpdXMiLCJpbnNlcnRUaXRsZUxpbmVicmVha3MiLCJhbHBoYSIsInF1YWR0cmVlIiwiZ2VvbSIsInIiLCJueDEiLCJ4IiwibngyIiwibnkxIiwieSIsIm55MiIsInZpc2l0IiwicXVhZCIsIngxIiwieTEiLCJ4MiIsInkyIiwicG9pbnQiLCJNYXRoIiwic3FydCIsImUiLCJ3aWR0aCIsImhlaWdodCIsIm9mZnNldCIsInEiLCJuIiwiZDNGb3JjZUNvbGxpZGUiLCJtYXgiLCJtaW4iLCJzdmdXaWR0aCIsInN2Z0hlaWdodCIsImNhbGxiYWNrIiwiYm91bmRzIiwiZDNGb3JjZUJvdW5kcyIsImZvcmNlIiwibGF5b3V0Iiwic2l6ZSIsImNoYXJnZSIsImxpbmtEaXN0YW5jZSIsImxpbmtTdHJlbmd0aCIsImdyYXZpdHkiLCJkM0ZvcmNlVGljayIsImQzRm9yY2VTdGFydCIsImQzRm9yY2VFbmQiLCJzdGFydCIsImsiLCJ0aWNrIiwic3RvcCIsInVwZGF0ZUV4aXN0aW5nTm9kZXMiLCJuZXdHcyIsImVudGVyIiwiZXhpdCIsInJlbW92ZSIsInNldEZvcmNlIiwidXBkYXRlTmV3Tm9kZXMiLCJ1cGRhdGVFeGlzdGluZ1BhdGhzIiwibmV3cGF0aHMiLCJzdHlsZSIsInVwZGF0ZU5ld1BhdGhzIiwiVmlzdWFsaXplckdyYXBoIiwiX0dyYXBoJEdyYXBoIiwiZGF0YVNvdXJjZSIsInRyYW5zaXRpb24iLCJlZGdlX2J1ZmZlciIsInJhZGl1c0RlY2F5IiwiY29udGFpbmVyQ2xhc3MiLCJiZWhhdmlvciIsIm9yaWdpbiIsImFyZ3MiLCJkeCIsImR5Iiwiem9vbSIsInNvdXJjZUV2ZW50IiwiY3RybEtleSIsInpvb21lZCIsInRyYW5zbGF0ZSIsInNjYWxlIiwicmlnaHRDbGljayIsImp1c3RTY2FsZVRyYW5zR3JhcGgiLCJ6b29tU2V0Q2FsbGJhY2siLCJ0cmFuc2xhdGVfbmFtZSIsImRlbGF5IiwiZHVyYXRpb24iLCJib2R5RWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZGl2V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJ0b3AiLCJub2RlX25hbWVzX3NldCIsInJldERhdGEiLCJwcm9jZXNzTGlua0RhdGEiLCJzb3VyY2VOb2RlIiwidGFyZ2V0Tm9kZSIsInBhdGhQb2xpY2llcyIsImluaXRpYWxpemVkIiwiYXJyb3dQYXRoIiwiZHIiLCJ0aGlzUGF0aCIsIl9nZXQiLCJnZXQiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwiRnVuY3Rpb24iLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0dGVyIiwiX0xpbmskTGluayIsImNvdW50IiwicmV0IiwibXkiLCJhdCIsImFkanVzdCIsIm1heFdlaWdodCIsInVzZUF2Z1dlaWdodCIsInVwZGF0ZU1heFdlaWdodCIsInZhbCIsIm1heExpbmsiLCJtYXhCeSIsImdldFdlaWdodCIsImNvbG9yU2NhbGUiLCJsaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInNlbGVjdGVkQ2xhc3MiLCJzZWxlY3RlZEVkZ2UiLCJjIiwiYXR0clR3ZWVuIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJub2RlUG9saWNpZXMiLCJ0aGlzTm9kZSIsIl9Ob2RlJE5vZGUiLCJ4U3RhcnQiLCJ5U3RhcnQiLCJOb2RlU2VsZWN0aW9uUG9saWN5IiwiX1BvbGljeSRQb2xpY3kiLCJzZWxlY3RlZE5vZGVzIiwic2VsZWN0aW9uIiwiY2QiLCJzdG9wUHJvcGFnYXRpb24iLCJyZW1vdmVTZWxlY3RGcm9tTm9kZSIsImFkZFNlbGVjdE5vZGUiLCJyZW1vdmVBbGxTZWxlY3RlZE5vZGVzIiwiUGF0aENoYW5nZVZpZXdQb2xpY3kiLCIkc3RhdGUiLCJ0aGlzUG9saWN5IiwicmV0TGlzdCIsIm5vZGVJZHMiLCJjaGlsZElkIiwiaGFzQ2hpbGQiLCJjb25jYXQiLCJnZW5lcmF0ZUxpc3QiLCJlZGdlIiwic291cmNlTGlzdCIsInRhcmdldExpc3QiLCJzb3VyY2VJZCIsInRhcmdldElkIiwiZ28iLCJzb3VyY2VOYW1lIiwidGFyZ2V0TmFtZSIsInZpZXdFZGdlIiwiZDNvYmoiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsImFic3RyYWN0IiwidGVtcGxhdGUiLCJRVGlwUG9saWN5IiwiU3BsaXRKb2luTm9kZVBvbGljeSIsIlNwbGl0Sm9pblZpZXdQb2xpY3kiLCJTYXZlU3RhdGVQb2xpY3kiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwiZ3JhcGhVcGRhdGVOZXdOb2RlcyIsImdyYXBoVXBkYXRlTmV3UGF0aHMiLCJpbnRlcnZhbCIsInNldFRpbWVvdXQiLCJxdGlwIiwid2hlblFUaXBBdmFpbGFibGUiLCJhdHRhY2hRVGlwIiwic2VsZWN0b3JNYXAiLCJoYXNLZXlzIiwibGFiZWxzTWFwIiwic2xpY2UiLCJjb250ZW50IiwiZXZlbnRzIiwic2hvdyIsImFwaSIsInBvc2l0aW9uIiwibGVmdCIsInNldCIsInNvbG8iLCJjbGFzc2VzIiwiaGlkZSIsInBhdGhFbCIsInRhcmdldFJldCIsImdldFBvaW50QXRMZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInF0aXBIZWxwZXIiLCJzYXZlZFN0YXRlIiwiZ3JhcGhEZXN0cm95IiwibG9hZCIsImdyYXBoTG9hZCIsIl9Ob2RlU2VsZWN0aW9uUG9saWN5JCIsInNwbGl0Tm9kZXMiLCJzdXBlclN0YXRlIiwic3BsaXRNdWx0aXBsZU5vZGVzIiwic3BsaXROb2RlIiwicHJldmVudERlZmF1bHQiLCJqb2luTm9kZSIsImdyYXBoTm9kZXMiLCJuZXdfbm9kZXMiLCJ4TG9jIiwieUxvYyIsIm5ld19ub2RlX29ianMiLCJuZXdfbm9kZSIsInJlcyIsIl9fc3BsaXROb2RlIiwic3BsaXROb2RlRXZlbnQiLCJyZXNOb2RlcyIsInNwbGl0TXVsdGlwbGVOb2Rlc0V2ZW50IiwidG9fYmVfZGVsZXRlZCIsIm5ld19ub2RlX2lkIiwibm9kZV90b19kZWxldGUiLCJfX2pvaW5Ob2RlIiwiam9pbk5vZGVFdmVudCIsImpvaW5NdWx0aXBsZU5vZGVzRXZlbnQiLCJfU3BsaXRKb2luTm9kZVBvbGljeSQiLCJzYXZlZFN0YXRlcyIsImV2ZW50SGlzdG9yeSIsImZvY3VzR3JvdXBzIiwiZm9jaSIsInpvb21zIiwibGF5b3V0RGVmYXVsdCIsInpvb21EZWZhdWx0Iiwibm9kZUlkc1RvUmVzaG93IiwiYmFja0J1dHRvbkVsZW0iLCJ0aXRsZUVsZW0iLCJib3VuZGFyeSIsImVsZW0iLCJiYWNrQnV0dG9uIiwidW5kb0xhc3RFdmVudCIsInNhdmUiLCJjdXJyVGl0bGUiLCJzdGF0ZXMiLCJsb2FkU3RhdGUiLCJmYWRlVG8iLCJ0eXBlIiwicG9zIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZUdyYXBoQ2FsbGJhY2siLCJub2Rlc1RvS2VlcCIsImdyb3VwT25lTm9kZXMiLCJwYXJzZUZsb2F0Iiwic3BsaXROb2RlRnVuYyIsImdldFJhbmRvbUludCIsImZsb29yIiwicmFuZG9tIiwiZ3JhcGhDb25zdHMiLCJzdGF0ZVBvbGljeSIsImRlZmF1bHRMYXlvdXQiLCJjYWxjTWF4Tm9kZXMiLCJhcmVhIiwiYW1vdW50IiwiY29uc3RzUG9saWN5IiwiZm9jdXNOb2RlcyIsImJvdCIsInBvcCIsInNldExheW91dCIsInN0YXRlU3VwZXIiLCJub2RlTmFtZVNldCIsIm5hbWVUb0FkZCIsIm5vZGVzVG9Qcm9jZXNzIiwicHJvY2Vzc05vZGVEYXRhIiwibm9kZVRvUmVtb3ZlIiwibGFzdCIsImZpbmREM05vZGUiLCJkYmxjbGljayIsIm5vZGVJZCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsIiRzdGF0ZVBhcmFtcyIsIkFwcGxpY2F0aW9uR3JvdXBzTW9kZWwiLCJOZXR3b3Jrc01vZGVsIiwiQ1JVREhlbHBlclNlcnZpY2UiLCJyZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAiLCJjYW5jZWxDcmVhdGluZyIsImdldE5ldHdvcmtzIiwidGhlbiIsInJlc3VsdCIsImFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsIiwibmV0d29ya3MiLCJ0ZW5hbnROYW1lIiwiY3JlYXRlQXBwbGljYXRpb25Hcm91cCIsImZvcm0iLCIkdmFsaWQiLCJoaWRlU2VydmVyRXJyb3IiLCJzdGFydExvYWRlciIsImFwcGxpY2F0aW9uR3JvdXAiLCJuZXR3b3JrTmFtZSIsInNlbGVjdGVkTmV0d29yayIsImdlbmVyYXRlS2V5Iiwic3RvcExvYWRlciIsInNob3dTZXJ2ZXJFcnJvciIsInJlc2V0Rm9ybSIsImdyb3VwTmFtZSIsInBvbGljaWVzIiwibmV0UHJvZmlsZSIsIm1vZGUiLCJzZXRNb2RlIiwiaXMiLCJhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwiLCJyZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzIiwiY2FuY2VsRWRpdGluZyIsImRlbGV0ZUFwcGxpY2F0aW9uR3JvdXAiLCJzYXZlQXBwbGljYXRpb25Hcm91cCIsImdldE1vZGVsQnlLZXkiLCJncm91cCIsIiRzY29wZSIsIiRpbnRlcnZhbCIsIiRmaWx0ZXIiLCJnZXRBcHBsaWNhdGlvbkdyb3VwcyIsInJlbG9hZCIsImFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCIsImdyb3VwcyIsInByb21pc2UiLCJpc0RlZmluZWQiLCIkb24iLCJjYW5jZWwiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInNjb3BlIiwiYXBwbGljYXRpb25ncm91cCIsIk5ldHByb2ZpbGVzTW9kZWwiLCJnZXROZXRwcm9maWxlcyIsIm5ldFByb2ZpbGVzIiwic2VsZWN0ZWROZXRwcm9maWxlIiwiZmluZCIsInByb2ZpbGVOYW1lIiwidXBkYXRlQXBwbGljYXRpb25ncm91cCIsIlBvbGljaWVzTW9kZWwiLCJSdWxlc01vZGVsIiwiZ2V0UnVsZXMiLCJnZXRJbmNvbWluZ1J1bGVzIiwicnVsZXMiLCJBcnJheSIsImFwcGx5IiwiaW5jb21pbmdSdWxlcyIsImdldE91dGdvaW5nUnVsZXMiLCJvdXRnb2luZ1J1bGVzIiwiZ2V0SXNvbGF0aW9uUG9saWNpZXMiLCJpc29sYXRpb25Qb2xpY2llcyIsInNlbGVjdGVkUG9saWN5Iiwic2VsZWN0ZWRQb2xpY2llcyIsImFkZElzb2xhdGlvblBvbGljeSIsImN1cnJlbnRQb2xpY3lOYW1lIiwicmVtb3ZlSXNvbGF0aW9uUG9saWN5IiwicnVsZSIsIk5vZGVzTW9kZWwiLCJWb2x1bWVzTW9kZWwiLCJTdG9yYWdlUG9saWNpZXNNb2RlbCIsImdldERhc2hib2FyZEluZm8iLCJkYXNoYm9hcmRDdHJsIiwidm9sdW1lcyIsIm5ldHdvcmtwb2xpY2llcyIsInN0b3JhZ2Vwb2xpY2llcyIsInJldHVyblRvRGFzaGJvYXJkIiwidXNlcm5hbWUiLCJsb2dpbkN0cmwiLCJsb2dpbiIsInBhcmFtcyIsImxvZ291dCIsIm1lbnVDdHJsIiwiYmFuZHdpZHRoUG9saWN5IiwiYmFuZHdpZHRoIiwiYmFuZHdpZHRoQXJyYXkiLCJiYW5kd2lkdGhOdW1iZXIiLCJOdW1iZXIiLCJiYW5kd2lkdGhVbml0IiwicmV0dXJuVG9Qb2xpY2llcyIsImNyZWF0ZVBvbGljeSIsImJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwiLCJuZXdQb2xpY3kiLCJEU0NQIiwiYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwiLCJkZWxldGVQb2xpY3kiLCJkZWxldGVVc2luZ0tleSIsInJldHVyblRvUG9saWN5RGV0YWlscyIsInNhdmVQb2xpY3kiLCJiYW5kd2lkdGhQcm9maWxlcyIsImdldFBvbGljaWVzIiwicG9saWNpZXNMaXN0Q3RybCIsImlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwiLCJpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCIsImRvbmVFZGl0aW5nIiwicmVzZXROZXdJbmNvbWluZ1J1bGUiLCJuZXdJbmNvbWluZ1J1bGUiLCJydWxlSWQiLCJwcmlvcml0eSIsImFjdGlvbiIsImZyb21FbmRwb2ludEdyb3VwIiwiZnJvbU5ldHdvcmsiLCJmcm9tSXBBZGRyZXNzIiwicHJvdG9jb2wiLCJwb3J0IiwiZGlyZWN0aW9uIiwibmV3SW5jb21pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAiLCJuZXdJbmNvbWluZ1NlbGVjdGVkTmV0d29yayIsImRpc2FibGVJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24iLCJkaXNhYmxlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uIiwiZGlzYWJsZUluY29taW5nSVBBZGRyZXNzU2VsZWN0aW9uIiwiaW5jb3JyZWN0Q0lEUiIsInZhbGlkYXRlQ0lEUkZsYWciLCJyZXNldE5ld091dGdvaW5nUnVsZSIsIm5ld091dGdvaW5nUnVsZSIsInRvRW5kcG9pbnRHcm91cCIsInRvTmV0d29yayIsInRvSXBBZGRyZXNzIiwibmV3T3V0Z29pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAiLCJuZXdPdXRnb2luZ1NlbGVjdGVkTmV0d29yayIsImRpc2FibGVPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24iLCJkaXNhYmxlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uIiwiZGlzYWJsZU91dGdvaW5nSVBBZGRyZXNzU2VsZWN0aW9uIiwiYXBwbGljYXRpb25Hcm91cHMiLCJvbkNoYW5nZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiIsIm9uQ2hhbmdlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uIiwib25DaGFuZ2VPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24iLCJUb0VuZHBvaW50R3JvdXAiLCJvbkNoYW5nZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiIsImdlbmVyYXRlUnVsZUlkIiwidG9TdHJpbmciLCJEYXRlIiwibm93IiwiYWRkSW5jb21pbmdSdWxlIiwidmFsaWRhdGVDSURSIiwib25DaGFuZ2VJbmNvbWluZ0lQQWRkcmVzcyIsIm9uQ2hhbmdlT3V0Z29pbmdJUEFkZHJlc3MiLCJpcGFkZHJlc3MiLCJjaWRyUGF0dGVybiIsIlJlZ0V4cCIsInRlc3QiLCJhZGRPdXRnb2luZ1J1bGUiLCJkZWxldGVJbmNvbWluZ1J1bGUiLCJkZWxldGVPdXRnb2luZ1J1bGUiLCJjcmVhdGVOZXR3b3JrUG9saWN5IiwiJGN1cnJlbnQiLCJuZXR3b3JrUG9saWNpZXNUYWJzQ3RybCIsInJldHVyblRvTmV0d29ya3MiLCJjcmVhdGVOZXR3b3JrIiwibmV0d29ya0NyZWF0ZUN0cmwiLCJuZXdOZXR3b3JrIiwiZW5jYXAiLCJzdWJuZXQiLCJnYXRld2F5IiwiZGVsZXRlTmV0d29yayIsIm5ldHdvcmtEZXRhaWxzQ3RybCIsIm5ldHdvcmsiLCJuZXR3b3Jrc0xpc3RDdHJsIiwiSW5zcGVjdFNlcnZpY2UiLCJnZXROZXR3b3JrSW5zcGVjdCIsInJlZnJlc2giLCJnZXRJbnNwZWN0QnlLZXkiLCJuZXR3b3JrU3RhdHNDdHJsIiwibmV0d29ya0luc3BlY3RTdGF0cyIsIk9wZXIiLCJDb25maWciLCJlbmRwb2ludHMiLCJjb250YWluZXJEZXRhaWxzIiwiYnVpbGRFbmRQb2ludHMiLCJjaGVja0NvbnRhaW5lckNoYW5nZWQiLCJnZXRCZ3AiLCJjdHJsIiwiZGVmZXJyZWQiLCJkZWZlciIsInJlc29sdmUiLCJuZWlnaGJvciIsIm5laWdoYm9ycyIsInJlamVjdCIsInVwZGF0ZUJncCIsInBvc3QiLCJnZXRCZ3BJbnNwZWN0IiwiZ2V0QWN0aXZlTG9ncyIsImdldExhc3RMb2dzIiwiTG9nU2VydmljZSIsIm5vZGVBY3RpdmVKb2JMb2dzQ3RybCIsImFjdGl2ZUxvZ3MiLCJOb2Rlc1NlcnZpY2UiLCJyZXR1cm5Ub05vZGVEZXRhaWxzIiwiY2FuY2VsQ29tbWlzc2lvbmluZ05vZGUiLCJjb21taXNzaW9uIiwibm9kZUNvbW1pc3Npb25DdHJsIiwibm9kZU9wc09iaiIsImNsZWFudXBFeHRyYVZhcnMiLCJjcmVhdGVFeHRyYVZhcnMiLCJleHRyYV92YXJzIiwiYW5zaWJsZVZhcmlhYmxlcyIsImVudlZhcmlhYmxlcyIsImdldFNldHRpbmdzIiwiQmdwU2VydmljZSIsImRlY29tbWlzc2lvbiIsIm5vZGVEZXRhaWxzQ3RybCIsInNob3dDb21taXNzaW9uQnV0dG9uIiwiY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQiLCJ1cGdyYWRlQnV0dG9uRW5hYmxlZCIsInVwZ3JhZGUiLCJzZXRCdXR0b25EaXNwbGF5Iiwic3RhdHVzIiwiZ2V0Tm9kZUluZm8iLCJyZXR1cm5Ub0luZm8iLCJ1cGRhdGVCZ3BJbmZvIiwiaXRlbSIsImdldEJncEluZm8iLCJpbnNwZWN0Iiwicm91dGVzIiwiZmlsdGVyZWRyb3V0ZXMiLCJudW1iZXJwYXR0ZXJuIiwicmV0dXJuVG9Ob2RlcyIsImNhbmNlbERpc2NvdmVyaW5nTm9kZSIsImRpc2NvdmVyIiwibm9kZURpc2NvdmVyQ3RybCIsImNyZWF0ZUlQQWRkckFycmF5IiwiYWRkcnMiLCJub2RlSVBBZGRyIiwibm9kZUxhc3RKb2JMb2dzQ3RybCIsImxhc3RMb2dzIiwiZ2V0Tm9kZXMiLCJub2RlTGlzdEN0cmwiLCJPcmdhbml6YXRpb25zTW9kZWwiLCJyZXR1cm5Ub09yZ2FuaXphdGlvbnMiLCJjcmVhdGVPcmdhbml6YXRpb24iLCJvcmdhbml6YXRpb25DcmVhdGVDdHJsIiwibmV3T3JnYW5pemF0aW9uIiwiZGVsZXRlT3JnYW5pemF0aW9uIiwib3JnYW5pemF0aW9uRGV0YWlsc0N0cmwiLCJvcmdhbml6YXRpb24iLCJnZXRPcmdhbml6YXRpb25zIiwib3JnYW5pemF0aW9uc0xpc3RDdHJsIiwib3JnYW5pemF0aW9ucyIsIlNlcnZpY2VsYnNNb2RlbCIsInJldHVyblRvU2VydmljZWxicyIsInNlcnZpY2VsYkNyZWF0ZUN0cmwiLCJjcmVhdGVMYWJlbFNlbGVjdG9yU3RyaW5ncyIsInNlcnZpY2VsYiIsImxhYmVsU2VsZWN0b3JzIiwibGFiZWxTZWxlY3RvciIsInNlbGVjdG9yU3RyaW5nIiwiY3JlYXRlU2VydmljZWxiIiwic2VydmljZU5hbWUiLCJpcEFkZHJlc3MiLCJwb3J0cyIsInNlcnZpY2VsYkRldGFpbHNDdHJsIiwicmV0dXJuVG9TZXJ2aWNlbGJEZXRhaWxzIiwiZGVsZXRlU2VydmljZWxiIiwic2F2ZVNlcnZpY2VsYiIsImV4aXN0aW5nTGFiZWxzIiwiY3JlYXRlTGFiZWxTZWxlY3RvcnMiLCJzZWxlY3RvclN0ciIsInNlbGVjdG9yIiwiZ2V0U2VydmljZWxicyIsInNlcnZpY2VsYkxpc3RDdHJsIiwic2VydmljZWxicyIsIml0ZW1zIiwiY29tcGFyZSIsInZhbDEiLCJ2YWwyIiwicmVzZXROZXdJdGVtIiwibmV3SXRlbSIsInNlcnZpY2VQb3J0IiwicHJvdmlkZXJQb3J0IiwiaXNFbXB0eUl0ZW0iLCJhZGQiLCJuZXdJdGVtU3RyIiwicHVsbEFsbFdpdGgiLCJwYXNzZWRJdGVtIiwiZ2V0U2VydmljZWxiSW5zcGVjdCIsInNlcnZpY2VsYlN0YXRzQ3RybCIsInNlcnZpY2VsYkluc3BlY3RTdGF0cyIsInByb3ZpZGVycyIsInByb3ZpZGVyRGV0YWlscyIsInVwZGF0ZUNsdXN0ZXJTZXR0aW5ncyIsImNsdXN0ZXJTZXR0aW5nQ3RybCIsInVwZGF0ZVNldHRpbmdzIiwiTmV0d29ya1NlcnZpY2UiLCJ1cGRhdGVOZXR3b3JrU2V0dGluZ3MiLCJuZXR3b3JrU2V0dGluZ0N0cmwiLCJzZXR0aW5nIiwiZ2V0TmV0d29ya1NldHRpbmdzIiwidmxhblBhdHRlcm4iLCJ2eGxhblBhdHRlcm4iLCJWb2x1bWVTZXR0aW5nU2VydmljZSIsInVwZGF0ZVZvbHVtZVNldHRpbmdzIiwidm9sdW1lU2V0dGluZ0N0cmwiLCJnZXRWb2x1bWVTZXR0aW5ncyIsInJldHVyblRvU3RvcmFnZVBvbGljaWVzIiwiY3JlYXRlRmlsZXN5c3RlbUNtZHMiLCJzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCIsImZpbGVzeXN0ZW1jbWRzIiwibmV3U3RvcmFnZVBvbGljeSIsImZpbGVzeXN0ZW1zIiwiYmFja2VuZHMiLCJjcnVkIiwibW91bnQiLCJzbmFwc2hvdCIsInVubG9ja2VkIiwiZHJpdmVyIiwicG9vbCIsImZpbGVzeXN0ZW0iLCJydW50aW1lIiwic25hcHNob3RzIiwiZnJlcXVlbmN5Iiwia2VlcCIsInJhdGUtbGltaXQiLCJ3cml0ZS1pb3BzIiwicmVhZC1pb3BzIiwid3JpdGUtYnBzIiwicmVhZC1icHMiLCJzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwiLCJnZXRWb2x1bWVzIiwiaW5pdGlhbGl6ZUZpbGVzeXN0ZW1DbWRzQXJyYXkiLCJzdG9yYWdlUG9saWN5TGlzdEN0cmwiLCJWaXN1YWxpemF0aW9uU2VydmljZSIsInQiLCJnZXRTZWNvbmRzIiwiZWRnZURhdGFJbnRlcnZhbCIsImdldEVkZ2VEYXRhIiwicmVzdWx0cyIsInNlcmllcyIsInZhbHVlcyIsImVkZ2VEYXRhIiwiZWRnZURhdGFUaW1lIiwiZ2V0T2xkRWRnZURhdGEiLCJvbGRFZGdlRGF0YSIsIiR3aW5kb3ciLCJ2aXN1YWxpemF0aW9uRWRnZUQzIiwicGF0aCIsImxpbmUiLCJsaW1pdCIsImF4aXMiLCJlYXNlIiwieUF4aXMiLCJzaGlmdCIsImNsaWVudFdpZHRoIiwiY3VycmVudCIsImNvbG9yIiwidGltZSIsImludGVycG9sYXRlIiwieFN2ZyIsIm9yaWVudCIsInJlcGxhY2UiLCIkd2F0Y2hHcm91cCIsInNlcnZpY2UiLCJTdGF0ZVNhdmUiLCJ2aXN1YWxpemF0aW9ubGlzdGQzIiwic2VydmljZVNlbGVjdG9ycyIsInNldEFuY2VzdG9ycyIsInRvcERhdGEiLCJnZXRUb3BMZXZlbEZsb3ciLCJyYXdTdmciLCJ2aXN1YWxpemF0aW9uR3JhcGgiLCJpbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kiLCJxVGlwUG9saWN5IiwiaW5zdGFsbERlZmF1bHROb2RlUG9saWN5Iiwic3BsaXRKb2luVmlld1BvbGljeSIsImluc3RhbGxCYWNrQnV0dG9uIiwiaW5zdGFsbFRpdGxlIiwidW5iaW5kIiwidXBkYXRlTGlua0RhdGEiLCJzdWNjZXNzR3JhcGhEYXRhQ2FsbGJhY2siLCJlbmRwb2ludCIsInRhZ3MiLCJFbmRwb2ludElQIiwicHJvdmlkZXIiLCJQcm92aWRlcklQIiwibGlua091dCIsImxpbmtJbiIsImdldEdyYXBoRGF0YSIsImdyYXBoRGF0YUludGVydmFsIiwiZ2V0U3RydWN0dXJlRGF0YSIsIm1ha2VHZXQiLCJtYWtlUG9zdCIsInBhcmFtIiwib2JqIiwiZnVsbFN1Yk5hbWUiLCJzdWJOYW1lIiwic3ViVmFsdWUiLCJpbm5lck9iaiIsInF1ZXJ5IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3Vic3RyIiwibWV0aG9kIiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJpc09iamVjdCIsImRiIiwiYnVpbGRXaGVyZVF1ZXJ5IiwicG9pbnRzIiwicmV0dXJuVG9Wb2x1bWVzTW9kZWwiLCJnZXRTdG9yYWdlUG9saWNpZXMiLCJ2b2x1bWVDcmVhdGVDdHJsIiwiYXBwbHlQb2xpY3lTZXR0aW5ncyIsIm5ld1ZvbHVtZSIsImNyZWF0ZVZvbHVtZSIsIlZvbHVtZVNlcnZpY2UiLCJyZXR1cm5Ub1ZvbHVtZXMiLCJkZWxldGVWb2x1bWUiLCJ2b2x1bWVEZXRhaWxzQ3RybCIsInZvbHVtZSIsImdldFZvbHVtZUluZm8iLCJ0b2tlbnMiLCJtb2RlbCIsImdldE1vZGVsIiwiZ2V0Vm9sdW1lVXNlSW5mbyIsImdldFZvbHVtZVNuYXBzaG90cyIsInZvbHVtZVVzZSIsInRyaWdnZXJWb2x1bWVTbmFwc2hvdCIsInNuYXBzaG90U3VjY2VzcyIsInRyaWdnZXJTbmFwc2hvdCIsInZvbHVtZUxpc3RDdHJsIiwiY2FuY2VsQ29weSIsImdvVG9OZXdWb2x1bWUiLCJ2b2x1bWVTbmFwc2hvdENvcHlDdHJsIiwibmV3dm9sdW1lIiwiY29weVNuYXBzaG90IiwiY29weSIsInRyYW5zY2x1ZGUiLCJlbGVtZW50IiwiYWNjb3JkaW9uIiwiY29sbGFwc2VkIiwiaGVhZGVyIiwiZXJyb3IiLCJhZGRDbGFzcyIsIm5hbWVoZWFkZXIiLCJ2YWx1ZWhlYWRlciIsIm9wdGlvbnMiLCJmaWx0ZXJGaWx0ZXIiLCJsaW1pdFRvRmlsdGVyIiwiZmlsdGVyZWRpdGVtcyIsImRlZmF1bHRzb3J0Y29sdW1uIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCJzaG93Q2h1bmsiLCJwYWdlTm8iLCJzZWFyY2hUZXh0IiwidGFibGVDdHJsIiwic2VhcmNoVGV4dEZpbHRlcmVkSXRlbXMiLCJzb3J0T2JqIiwiZmllbGQiLCJyZXZlcnNlIiwibm9PZkNodW5rcyIsImNlaWwiLCJjaHVua3MiLCJzZWxlY3RlZCIsInNsaWNlU3RhcnQiLCJzbGljZUVuZCIsInBhZ2luYXRpb25NZW51IiwiZmlsdGVyZWRJdGVtcyIsInNob3dQcmV2Q2h1bmsiLCJwcmV2Q2h1bmsiLCJzaG93TmV4dENodW5rIiwibmV4dENodW5rIiwiYWRkUGFnaW5hdGlvbk1lbnUiLCJtZW51IiwiaW5pdGlhbGl6ZVNvcnQiLCJzb3J0ZmllbGQiLCJpY29uRGlyZWN0aW9uIiwiYW5nbGUgZG93biBpY29uIiwiYW5nbGUgdXAgaWNvbiIsInNvcnQiLCIkYXBwbHkiLCJwYXJzZUludCIsImlzTmFOIiwiYXR0cnMiLCIkcGFyZW50IiwiJHdhdGNoIiwicmVxdWlyZSIsImNsYXNzIiwidGFibGVjdHJsIiwiYmluZCIsInBsYWNlaG9sZGVyIiwiY29sc3BhbiIsImdyb3Vwc21vZGVsIiwiZXh0cmFjdCIsImNvbGxlY3Rpb24iLCJ3aGVuIiwia2V5bmFtZSIsImZpbmRNb2RlbCIsInJlc3BvbnNlIiwicmVzcG9uc2VEYXRhIiwicHV0IiwicmVzcG9uc2VTdGF0cyIsIm5ldHByb2ZpbGVzTW9kZWwiLCJOb2Rlc0NvbGxlY3Rpb24iLCJub2Rlc2NvbGxlY3Rpb24iLCJub2Rlc21vZGVsIiwicG9saWNpZXNtb2RlbCIsInJ1bGVzbW9kZWwiLCJTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uIiwiVm9sdW1lc0NvbGxlY3Rpb24iLCJ2b2x1bWVzY29sbGVjdGlvbiIsInZvbGNvcHltb2RlbCIsIk9wdGlvbnMiLCJ2b2x1bWVzbW9kZWwiLCJzaG93TG9hZGVyIiwibWVzc2FnZSIsInNlcnZlckVycm9yTWVzc2FnZSIsImNvbnRhaW5lckF0dHJpYnV0ZXMiLCJlbmRwb2ludEF0dHJpYnV0ZSIsImZvcm1hdCIsImpvaW4iLCJ2IiwiY29udGFpbmVySUQiLCJjb250RGV0YWlsc0EiLCJjb250RGV0YWlsc0IiLCJrZXlzIiwiZXh0cmFWYXJzIiwic2NoZWRfcHJvdmlkZXIiLCJub2RlX2NvbnN0YW50cyIsIlNDSEVEX1BST1ZJREVSIiwibmV0d29ya19tb2RlIiwiQ09OVElWX05FVF9NT0RFIiwiQ09OVFJPTF9JTlRFUkZBQ0UiLCJEQVRBX0lOVEVSRkFDRSIsIlZJUF9BRERSIiwiVUNQX0JPT1RTVFJBUF9OT0RFIiwiRldEX01PREUiLCJBUElDX0NPTlRSX1VOUkVTVFJJQ1RfTU9ERSIsIkFQSUNfRVBHX0JSSURHRV9ET01BSU4iLCJBUElDX0xFQUZfTk9ERVMiLCJBUElDX1BBU1NXT1JEIiwiQVBJQ19QSFlTX0RPTUFJTiIsIkFQSUNfVVJMIiwiQVBJQ19VU0VSTkFNRSIsIkNMVVNURVJfTkFNRSIsImNyZWF0ZUVudlZhcmlhYmxlcyIsIkVOViIsImNyZWF0ZUFuc2libGVWYXJpYWJsZXMiLCJlbnZWYXJzIiwic2V0dGluZ19maWx0ZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiZXh0cmF2YXJzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQVlBLFNBQVNBLGlCQUFn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dEIsR0FHQSxPQUNBeEYsWUFBQUEsRUFDQW9GLGVBQUFBLE1DcEJBbndCLFFBQUFDLE9BQUEscUJBQ0FzZ0IsVUFBQSxjQUFBLFdBQ0EsT0FDQUMsU0FBQSxJQUNBckQsWUFBQSw0Q0FDQXNELE9BQ0FyQyxLQUFBLFFDTkFwZSxRQUFBQyxPQUFBLHFCQUNBc2dCLFVBQUEsc0JBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FyRCxZQUFBLG9EQUNBc0QsT0FDQThmLFVBQUEsUUNOQXZnQyxRQUFBQyxPQUFBLHFCQUNBc2dCLFVBQUEsaUJBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FyRCxZQUFBLCtDQUNBc0QsT0FDQThmLFVBQUEsUUNOQXZnQyxRQUFBQyxPQUFBLHFCQUNBc2dCLFVBQUEsZUFBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQXJELFlBQUEsNkNBQ0FzRCxPQUNBOGYsVUFBQSIsImZpbGUiOiJhcHAvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlZmluaW5nIHRoZSBHcmFwaCBNb2R1bGUuXG4gKiBTZWUgREVTSUdOLm1kIGZvciBpbmZvIG9uIEdyYXBoIE9iamVjdHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnLCBbXSk7XG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIsIFtdKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyB0aGUgRGF0YVNvdXJjZSBvYmplY3QuXG4gKiBcbiAqIFRoZSBEYXRhU291cmNlIG9iamVjdCB0YWtlcyBpbiBub2RlIGFuZCBsaW5rIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBcbiAqIGFuZCBwcm92aWRlcyBtZXRob2RzIGZvciBjb252ZXJ0aW5nIGFuZCBtYW5pcHVsYXRpbmcgdGhlIGRhdGEgZm9yXG4gKiB0aGUgZ3JhcGggb2JqZWN0LlxuICogXG4gKiBUbyB3cml0ZSB5b3VyIG93biBEYXRhU291cmNlIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBcbiAqIERhdGFTb3VyY2UgeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgXG4gKiBpdHMgRGF0YVNvdXJjZSBjbGFzcy4gXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG9iamVjdCB3aXRoIERhdGFTb3VyY2UgYXMga2V5LlxuICogXG4gKiBOb2RlIGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gKiB7aWQ6bm9kZV9pZCwgdGV4dDpub2RlX3RleHR9XG4gKiBcbiAqIExpbmsgZGF0YSBpcyBleHBlY3RlZCB0byBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAqIHtzb3VyY2U6IHNvdXJjZU5vZGVJZCwgdGFyZ2V0OiB0YXJnZXROb2RlSWR9XG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ0RhdGFTb3VyY2UnLCBbJ05vZGUnLCAnTGluaycsIGZ1bmN0aW9uIChOb2RlLCBMaW5rKSB7XG5cdHZhciBEYXRhU291cmNlID0gZnVuY3Rpb24gKCkge1xuXHRcdC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBub2RlcyAgICAgICAgICAgICAgVGhlIG5vZGUgZGF0YSBcbiAgICogQHBhcmFtICAgICAge0FycmF5fSAgIGxpbmtzICAgICAgICAgICAgICBUaGUgbGluayBkYXRhXG4gICAqL1xuXHRcdGZ1bmN0aW9uIERhdGFTb3VyY2Uobm9kZXMsIGxpbmtzKSB7XG5cdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0YVNvdXJjZSk7XG5cblx0XHRcdHRoaXMubm9kZXMgPSBub2Rlcztcblx0XHRcdHRoaXMubGlua3MgPSBsaW5rcztcblx0XHR9XG5cblx0XHQvKipcbiAgICogUmVwbGFjZXMgdGhlIG5vZGUgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5vZGVzICAgVGhlIG5vZGVzXG4gICAqL1xuXG5cblx0XHRfY3JlYXRlQ2xhc3MoRGF0YVNvdXJjZSwgW3tcblx0XHRcdGtleTogJ3VwZGF0ZU5vZGVzJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOb2Rlcyhub2Rlcykge1xuXHRcdFx0XHR0aGlzLm5vZGVzID0gbm9kZXM7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogUmVwbGFjZXMgdGhlIGxpbmsgZGF0YVxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgbGlua3MgICBUaGUgbGlua3NcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAndXBkYXRlTGlua3MnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUxpbmtzKGxpbmtzKSB7XG5cdFx0XHRcdHRoaXMubGlua3MgPSBsaW5rcztcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBSZXR1cm5zIHRoZSBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgTm9kZSB3aXRoIHRoZSBcbiAgICAqIG1hdGNoaW5nIGlkXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICBuYW1lIG9mIHRoZSBtYXRjaGluZyBub2RlXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ25vZGVJZFRvTmFtZScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gbm9kZUlkVG9OYW1lKGlkKSB7XG5cdFx0XHRcdHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAobm9kZXNbaV0uaWQgPT0gaWQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBub2Rlc1tpXS5uYW1lO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIHRvIGNyZWF0ZSBOb2RlIG9iamVjdHNcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlRGF0YSAgTm9kZURhdGEgdG8gY29udmVydCBcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBub2RlIG9iamVjdHNcbiAgICAqIEByZXR1cm4gICAgIHtBcnJheX0gIE5vZGUgb2JqZWN0c1xuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdwcm9jZXNzTm9kZURhdGEnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NOb2RlRGF0YShub2RlRGF0YSkge1xuXHRcdFx0XHR2YXIgbm9kZXMgPSBbXTtcblx0XHRcdFx0Xy5mb3JFYWNoKG5vZGVEYXRhLCBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdHZhciBuZXdOb2RlID0gbmV3IE5vZGUuTm9kZShudWxsLCBudWxsLCBkYXRhLmlkLCBkYXRhLnRleHQsIG51bGwpO1xuXHRcdFx0XHRcdG5vZGVzLnB1c2gobmV3Tm9kZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gbm9kZXM7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogcHJvY2VzcyB0aGUgbGlua0RhdGFcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBsaW5rRGF0YSAgVGhlIGxpbmsgZGF0YVxuICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICAgIFRoZSBub2RlcyBmcm9tIHByb2Nlc3NOb2RlRGF0YVxuICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3Byb2Nlc3NMaW5rRGF0YScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0xpbmtEYXRhKGxpbmtEYXRhLCBub2Rlcykge1xuXHRcdFx0XHQvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9IGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gICBUaGUgbm9kZSB3aXRoIHRoZSBtYXRjaGluZyBpZFxuICAgICAqL1xuXHRcdFx0XHRmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGlkID09IG5vZGVzW2ldLmlkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBub2Rlc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgbGlua3MgPSBbXTtcblx0XHRcdFx0Ly90cmFuc2Zvcm1pbmcgbGluayBkYXRhXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlua0RhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAobGlua0RhdGFbaV0uc291cmNlICE9IGxpbmtEYXRhW2ldLnRhcmdldCkge1xuXHRcdFx0XHRcdFx0dmFyIHNvdXJjZSA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS5zb3VyY2UsIG5vZGVzKTtcblx0XHRcdFx0XHRcdHZhciB0YXJnZXQgPSBmaW5kTm9kZUJ5SWQobGlua0RhdGFbaV0udGFyZ2V0LCBub2Rlcyk7XG5cdFx0XHRcdFx0XHRpZiAoc291cmNlID09IG51bGwgfHwgdGFyZ2V0ID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgbGluayA9IG5ldyBMaW5rLkxpbmsoc291cmNlLCB0YXJnZXQpO1xuXHRcdFx0XHRcdFx0bGlua3MucHVzaChsaW5rKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGxpbmtzO1xuXHRcdFx0fVxuXHRcdH1dKTtcblxuXHRcdHJldHVybiBEYXRhU291cmNlO1xuXHR9KCk7XG5cblx0cmV0dXJuIHtcblx0XHREYXRhU291cmNlOiBEYXRhU291cmNlXG5cdH07XG59XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTQvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJywgW10pO1xudmFyIENvbnRpdkdsb2JhbHMgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgTkVUTUFTVEVSXG4gICAgICAgICdORVRXT1JLU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9uZXR3b3Jrcy8nLFxuICAgICAgICAnTkVUV09SS1NfSU5TUEVDVF9FTkRQT0lOVCc6Jy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3QvbmV0d29ya3MvJyxcbiAgICAgICAgJ1NFUlZJQ0VMQlNfSU5TUEVDVF9FTkRQT0lOVCc6Jy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3Qvc2VydmljZUxCcy8nLFxuICAgICAgICAnUE9MSUNJRVNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvcG9saWN5cy8nLFxuICAgICAgICAnUlVMRVNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvcnVsZXMvJyxcbiAgICAgICAgJ0FQUExJQ0FUSU9OR1JPVVBTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2VuZHBvaW50R3JvdXBzLycsXG4gICAgICAgICdTRVJWSUNFTEJTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL3NlcnZpY2VMQnMvJyxcbiAgICAgICAgJ09SR0FOSVpBVElPTlNfRU5EUE9JTlQnOicvbmV0bWFzdGVyL2FwaS92MS90ZW5hbnRzLycsXG4gICAgICAgICdORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2dsb2JhbHMvJyxcbiAgICAgICAgJ05FVFBST0ZJTEVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL25ldHByb2ZpbGVzLycsXG4gICAgICAgICdCR1BTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL0JncHMvJyxcbiAgICAgICAgJ0JHUFNfSU5TUEVDVF9FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9pbnNwZWN0L0JncHMvJyxcbiAgICAgICAgJ1ZJU1VBTElaQVRJT05fRU5EUE9JTlQnOiAnL3Zpc3VhbGl6YXRpb24vJyxcblxuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBWT0xNQVNURVJcbiAgICAgICAgJ1ZPTFVNRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzLycsXG4gICAgICAgICdWT0xVTUVTX0NSRUFURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvY3JlYXRlLycsXG4gICAgICAgICdWT0xVTUVTX0RFTEVURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvcmVtb3ZlLycsXG4gICAgICAgICdWT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL2NvcHknLFxuICAgICAgICAnVk9MVU1FU19VU0VTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdXNlcy9tb3VudHMvJyxcbiAgICAgICAgJ1ZPTFVNRVNfU05BUFNIT1RTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvc25hcHNob3RzLycsXG4gICAgICAgICdTVE9SQUdFUE9MSUNJRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9wb2xpY2llcy8nLFxuICAgICAgICAnVk9MVU1FU19HTE9CQUxfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9nbG9iYWwvJyxcblxuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBDTFVTVEVSXG4gICAgICAgICdOT0RFU19MSVNUX0VORFBPSU5UJzogJy9pbmZvL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0RJU0NPVkVSX0VORFBPSU5UJzogJy9kaXNjb3Zlci9ub2RlcycsXG4gICAgICAgICdOT0RFU19DT01NSVNTSU9OX0VORFBPSU5UJzogJy9jb21taXNzaW9uL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVCc6ICcvZGVjb21taXNzaW9uL25vZGVzJyxcbiAgICAgICAgJ05PREVTX01BSU5URU5BTkNFX0VORFBPSU5UJzogJy9tYWludGVuYW5jZS9ub2RlcycsXG4gICAgICAgICdOT0RFU19MQVNUX0pPQl9FTkRQT0lOVCc6ICcvaW5mby9qb2IvbGFzdCcsXG4gICAgICAgICdOT0RFU19BQ1RJVkVfSk9CX0VORFBPSU5UJzogJy9pbmZvL2pvYi9hY3RpdmUnLFxuICAgICAgICAnTk9ERVNfU0VUVElOR1NfU0VUX0VORFBPSU5UJzogJy9nbG9iYWxzJyxcbiAgICAgICAgJ05PREVTX1NFVFRJTkdTX0dFVF9FTkRQT0lOVCc6ICcvaW5mby9nbG9iYWxzJyxcblxuICAgICAgICAvL1JlZnJlc2ggaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICdSRUZSRVNIX0lOVEVSVkFMJzogNTAwMCxcblxuICAgICAgICAvL1JlZ0V4IGZvciB2YWxpZGF0aW9uXG4gICAgICAgICdDSURSX1JFR0VYJyA6ICdeKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkoXFwvKFswLTldfFsxLTJdWzAtOV18M1swLTJdKSkkJyxcbiAgICAgICAgJ1ZMQU5fUkVHRVgnIDogJ14oWzAtOV17MSw0fT8tWzAtOV17MSw0fT8pJCcsXG4gICAgICAgICdWWExBTl9SRUdFWCcgOiAnXihbMC05XXsxLDh9Py1bMC05XXsxLDh9PykkJyxcbiAgICAgICAgJ05VTUJFUl9SRUdFWCcgOiAnXlswLTldKiQnXG4gICAgfVxufSkoKTtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIERhdGFTb3VyY2UgdXNlZCBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICogXG4gKiBOb2RlIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOiBub2RlX2lkLCB0ZXh0OiBub2RlX3RleHR9XG4gKiBQYXJlbnQgYW5kIEFuY2VzdG9yIGF0dHJpYnV0ZXMgY2FuIGJlIHNldCBieSBjYWxsaW5nIHNldEFuY2VzdG9yc1xuICogXG4gKiBMaW5rIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge3NvdXJjZTogc291cmNlTm9kZUlkLCB0YXJnZXQ6IHRhcmdldE5vZGVJZCwgd2VpZ2h0OiBsaW5rV2VpZ2h0fVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdWaXN1YWxpemVyRGF0YVNvdXJjZScsIFsnRGF0YVNvdXJjZScsICdWaXN1YWxpemVyTm9kZScsICdWaXN1YWxpemVyTGluaycsIGZ1bmN0aW9uIChEYXRhU291cmNlLCBWaXN1YWxpemVyTm9kZSwgVmlzdWFsaXplckxpbmspIHtcblx0dmFyIFZpc3VhbGl6ZXJEYXRhU291cmNlID0gZnVuY3Rpb24gKF9EYXRhU291cmNlJERhdGFTb3VyYykge1xuXHRcdF9pbmhlcml0cyhWaXN1YWxpemVyRGF0YVNvdXJjZSwgX0RhdGFTb3VyY2UkRGF0YVNvdXJjKTtcblxuXHRcdC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAqIFxuICAgKiBDaGlsZHJlbiBTdHJ1Y3QgYW5kIGFuY2VzdG9yc19zdHJ1Y3QgYXJlIEpTT04gb2JqZWN0cyxcbiAgICogbWFwcGluZyBhIG5vZGUgSWQgdG8gYSBsaXN0IG9mIGl0J3MgY2hpbGRyZW4gb3IgYW5jZXN0b3JzLlxuICAgKiBDaGlsZHJlbiBTdHJ1Y3QgaXMgYWxzbyBleHBlY3RlZCB0byBoYXZlIGEgZmllbGQgY2FsbGVkXG4gICAqIHRvcExldmVsLCB0aGF0IG1hcHMgdG8gYSBsaXN0IG9mIGFsbCB0aGUgbm9kZXMgdGhhdCBkb24ndFxuICAgKiBoYXZlIGFueSBwYXJlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgY2hpbGRyZW5fc3RydWN0ICAgIFRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmVcbiAgICogQHBhcmFtICAgICAge09iamVjdH0gIGFuY2VzdG9yc19zdHJ1Y3QgICBUaGUgYW5jZXN0b3JzIHN0cnVjdHVyZVxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbGFiZWxzICAgICAgICAgICAgIFRoZSBsYWJlbHNcbiAgICogQHBhcmFtICAgICAge0FycmF5fSAgIHNlbGVjdG9ycyAgICAgICAgICBUaGUgc2VsZWN0b3JzXG4gICAqL1xuXHRcdGZ1bmN0aW9uIFZpc3VhbGl6ZXJEYXRhU291cmNlKG5vZGVzLCBsaW5rcywgY2hpbGRyZW5fc3RydWN0LCBhbmNlc3RvcnNfc3RydWN0LCBsYWJlbHMsIHNlbGVjdG9ycykge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc3VhbGl6ZXJEYXRhU291cmNlKTtcblxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpc3VhbGl6ZXJEYXRhU291cmNlKS5jYWxsKHRoaXMsIG5vZGVzLCBsaW5rcykpO1xuXG5cdFx0XHRfdGhpcy5jaGlsZHJlbl9zdHJ1Y3QgPSBjaGlsZHJlbl9zdHJ1Y3Q7XG5cdFx0XHRfdGhpcy5hbmNlc3RvcnNfc3RydWN0ID0gYW5jZXN0b3JzX3N0cnVjdDtcblx0XHRcdF90aGlzLmxhYmVscyA9IGxhYmVscztcblx0XHRcdF90aGlzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcblx0XHRcdHJldHVybiBfdGhpcztcblx0XHR9XG5cblx0XHQvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBpdCBoYXMgY2hpbGQuXG4gICAqXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIFRydWUgaWYgaGFzIGNoaWxkLCBGYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuXG5cblx0XHRfY3JlYXRlQ2xhc3MoVmlzdWFsaXplckRhdGFTb3VyY2UsIFt7XG5cdFx0XHRrZXk6ICdoYXNDaGlsZCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaGFzQ2hpbGQoaWQpIHtcblx0XHRcdFx0aWYgKHRoaXMuY2hpbGRyZW5fc3RydWN0W2lkXSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFNldHMgdGhlIHBhcmVudCBhbmQgYW5jZXN0b3JzIGF0dHJpYnV0ZSB1c2luZyBcbiAgICAqIGFuY2VzdG9yc19zdHJ1Y3QgZm9yIGFsbCB0aGUgbm9kZXNcbiAgICAqIEFsc28gYWRkcyBhbnkgbm9kZXMgd2l0aG91dCBhbmNlc3RvcnMsIHRoYXQgYXJlbid0IFxuICAgICogdG9wbGV2ZWwgdG8gdGhlIGNsaWVudCBzZXJ2aWNlLlxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdzZXRBbmNlc3RvcnMnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEFuY2VzdG9ycygpIHtcblx0XHRcdFx0dmFyIHRoaXNEYXRhU291cmNlID0gdGhpcztcblx0XHRcdFx0dmFyIGFkZGVkQ2xpZW50ID0gZmFsc2U7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzRGF0YVNvdXJjZS5ub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdFx0XHRub2RlLmFuY2VzdG9ycyA9IHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gfHwgW107XG5cdFx0XHRcdFx0aWYgKF8uaXNFbXB0eShub2RlLmFuY2VzdG9ycykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRub2RlLnBhcmVudCA9IG5vZGUuYW5jZXN0b3JzWzBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoXy5pbmNsdWRlcyh0aGlzRGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwsIG5vZGUuaWQpID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRcdC8vY29udGFpbmVyIGhhcyBubyBwYXJlbnRcblx0XHRcdFx0XHRcdFx0Ly9hZGRpbmcgdG8gY2xpZW50XG5cdFx0XHRcdFx0XHRcdG5vZGUuYW5jZXN0b3JzLnB1c2goXCJjbGllbnRcIik7XG5cdFx0XHRcdFx0XHRcdHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gPSBbXCJjbGllbnRcIl07XG5cdFx0XHRcdFx0XHRcdGlmIChhZGRlZENsaWVudCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRhZGRlZENsaWVudCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0LnRvcExldmVsLnB1c2goXCJjbGllbnRcIik7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0WydjbGllbnQnXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFsnY2xpZW50J10ucHVzaChub2RlLmlkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFJldHVybnMgdGhlIGZsb3cgYmV0d2VlbiB0aGUgaGlnaGVzdCBsZXZlbCBncm91cGluZ1xuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICBUaGUgdG9wIGxldmVsIGZsb3cuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldFRvcExldmVsRmxvdycsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0VG9wTGV2ZWxGbG93KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRGbG93QmV0d2VlblNldCh0aGlzLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogR2V0cyB0aGUgZmxvdyBiZXR3ZWVuIGFueSBzZXQgb2Ygbm9kZSBsZXZlbHNcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlX25hbWVzICBUaGUgbm9kZSBuYW1lcyBpbiB0aGUgc2V0XG4gICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgVGhlIGZsb3cgYmV0d2VlbiBzZXQuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldEZsb3dCZXR3ZWVuU2V0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzKSB7XG5cdFx0XHRcdHZhciBsb2NhbF9ub2RlcyA9IHRoaXMubm9kZXM7XG5cdFx0XHRcdHZhciBpZE1hcHBpbmcgPSB7fTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhbF9ub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBub2RlID0gbG9jYWxfbm9kZXNbaV07XG5cblx0XHRcdFx0XHQvL2lmIG5vZGUgaXMgYWxyZWFkeSBhdCBpdHMgaGlnaGVzdCBsZXZlbFxuXHRcdFx0XHRcdGlmIChub2RlLmFuY2VzdG9ycyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0aWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZS5uYW1lO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvL2NoZWNrIHRvIHNlZSB3aGljaCB0YWdzIGFyZSBwcmVzZW50IGluIHRoZSBhbmNlc3RvciBsaXN0XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVfbmFtZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKG5vZGUuYW5jZXN0b3JzLmluZGV4T2Yobm9kZV9uYW1lc1tqXSkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdGlkTWFwcGluZ1tub2RlLmlkXSA9IG5vZGVfbmFtZXNbal07XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9tb2RpZnkgbGlua3Ncblx0XHRcdFx0dmFyIGxpbmtzID0gdGhpcy5saW5rcztcblx0XHRcdFx0dmFyIGxpbmtEYXRhID0gW107XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBsaW5rID0gW107XG5cdFx0XHRcdFx0bGluay5zb3VyY2UgPSBpZE1hcHBpbmdbbGlua3NbaV0uc291cmNlXSB8fCBsaW5rc1tpXS5zb3VyY2U7XG5cdFx0XHRcdFx0bGluay50YXJnZXQgPSBpZE1hcHBpbmdbbGlua3NbaV0udGFyZ2V0XSB8fCBsaW5rc1tpXS50YXJnZXQ7XG5cdFx0XHRcdFx0bGluay53ZWlnaHQgPSBsaW5rc1tpXS53ZWlnaHQ7XG5cdFx0XHRcdFx0bGlua0RhdGEucHVzaChsaW5rKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vY3JlYXRpbmcgdGhlIG5vZGVEYXRhXG5cdFx0XHRcdHZhciBub2RlRGF0YSA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVfbmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgbm9kZV90b19hZGQgPSBbXTtcblx0XHRcdFx0XHRub2RlX3RvX2FkZC5pZCA9IG5vZGVfbmFtZXNbaV07XG5cdFx0XHRcdFx0bm9kZV90b19hZGQudGV4dCA9IHRoaXMubm9kZUlkVG9OYW1lKG5vZGVfbmFtZXNbaV0pIHx8IG5vZGVfbmFtZXNbaV07XG5cblx0XHRcdFx0XHRub2RlX3RvX2FkZC5hbmNlc3RvcnMgPSB0aGlzLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZV9uYW1lc1tpXV0gfHwgdGhpcy5hbmNlc3RvcnNfc3RydWN0W25vZGVfdG9fYWRkLnRleHRdIHx8IFtdO1xuXHRcdFx0XHRcdGlmIChfLmlzRW1wdHkobm9kZV90b19hZGQuYW5jZXN0b3JzKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdG5vZGVfdG9fYWRkLnBhcmVudCA9IG5vZGVfdG9fYWRkLmFuY2VzdG9yc1swXTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bm9kZV90b19hZGQucGFyZW50ID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZURhdGEucHVzaChub2RlX3RvX2FkZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4geyBub2RlRGF0YTogbm9kZURhdGEsIGxpbmtEYXRhOiBsaW5rRGF0YSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIG91dHB1dCBvZiBnZXRGbG93QmV0d2VlblNldFxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVEYXRhICBOb2RlRGF0YSB0byBjb252ZXJ0IFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vZGUgb2JqZWN0c1xuICAgICogQHJldHVybiAgICAge0FycmF5fSAgTm9kZSBvYmplY3RzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3Byb2Nlc3NOb2RlRGF0YScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc05vZGVEYXRhKG5vZGVEYXRhKSB7XG5cdFx0XHRcdHZhciBub2RlcyA9IFtdO1xuXHRcdFx0XHRfLmZvckVhY2gobm9kZURhdGEsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0dmFyIG5ld05vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZShudWxsLCBudWxsLCBkYXRhLmlkLCBkYXRhLnRleHQsIG51bGwsIGRhdGEucGFyZW50LCBkYXRhLmFuY2VzdG9ycywgbnVsbCwgbnVsbCk7XG5cdFx0XHRcdFx0bm9kZXMucHVzaChuZXdOb2RlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBub2Rlcztcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBwcm9jZXNzIHRoZSBsaW5rRGF0YSBvdXRwdXQgb2YgZ2V0Rmxvd0JldHdlZW5TZXRcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBsaW5rRGF0YSAgVGhlIGxpbmsgZGF0YVxuICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICAgIFRoZSBub2Rlc1xuICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3Byb2Nlc3NMaW5rRGF0YScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0xpbmtEYXRhKGxpbmtEYXRhLCBub2Rlcykge1xuXHRcdFx0XHQvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9IGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gICBUaGUgbm9kZSB3aXRoIHRoZSBtYXRjaGluZyBpZFxuICAgICAqL1xuXHRcdFx0XHRmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGlkID09IG5vZGVzW2ldLmlkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBub2Rlc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgbGlua3MgPSBbXTtcblx0XHRcdFx0Ly9hIG1hcHBpbmcgZnJvbSBzb3VyY2UuaWQtdGFyZ2V0LmlkIHRvIHRoZSBsaW5rIGFkZGVkXG5cdFx0XHRcdHZhciBhZGRlZF9saW5rcyA9IHt9O1xuXHRcdFx0XHQvL3RyYW5zZm9ybWluZyBsaW5rIGRhdGFcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rRGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChsaW5rRGF0YVtpXS5zb3VyY2UgIT0gbGlua0RhdGFbaV0udGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHR2YXIgc291cmNlID0gZmluZE5vZGVCeUlkKGxpbmtEYXRhW2ldLnNvdXJjZSwgbm9kZXMpO1xuXHRcdFx0XHRcdFx0dmFyIHRhcmdldCA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS50YXJnZXQsIG5vZGVzKTtcblx0XHRcdFx0XHRcdHZhciB3ZWlnaHQgPSBsaW5rRGF0YVtpXS53ZWlnaHQ7XG5cdFx0XHRcdFx0XHQvL2luIG9yZGVyIHRvIHN1bSBhbGwgdGhlIHdlaWdodHMgb2YgdGhlIGxpbmtzIG9mIHRoZSBzdWItbm9kZXMsXG5cdFx0XHRcdFx0XHQvL3dlIHVzZSBhZGRlZF9saW5rcyB0byBrZWVwIHRyYWNrIGlmIGFuIGxpbmsgd2FzIGFkZGVkXG5cdFx0XHRcdFx0XHQvL2lmIGl0IGlzLCB3ZSBtb2RpZnkgaXRzIHdlaWdodFxuXHRcdFx0XHRcdFx0aWYgKHNvdXJjZSA9PSBudWxsIHx8IHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGFkZGVkX2xpbmtzW3NvdXJjZS5pZCArICctJyArIHRhcmdldC5pZF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgbGluayA9IG5ldyBWaXN1YWxpemVyTGluay5MaW5rKHNvdXJjZSwgdGFyZ2V0LCB3ZWlnaHQpO1xuXHRcdFx0XHRcdFx0XHRhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID0gbGluaztcblx0XHRcdFx0XHRcdFx0bGlua3MucHVzaChsaW5rKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBleGlzdGluZ19saW5rID0gYWRkZWRfbGlua3Nbc291cmNlLmlkICsgJy0nICsgdGFyZ2V0LmlkXTtcblx0XHRcdFx0XHRcdFx0ZXhpc3RpbmdfbGluay5zZXRXZWlnaHQoZXhpc3RpbmdfbGluay5nZXRSYXdXZWlnaHQoKSArIHdlaWdodCk7XG5cdFx0XHRcdFx0XHRcdGV4aXN0aW5nX2xpbmsuaW5jcmVhc2VDb3VudCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbGlua3M7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIFZpc3VhbGl6ZXJEYXRhU291cmNlO1xuXHR9KERhdGFTb3VyY2UuRGF0YVNvdXJjZSk7XG5cblx0cmV0dXJuIHtcblx0XHREYXRhU291cmNlOiBWaXN1YWxpemVyRGF0YVNvdXJjZVxuXHR9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJywgW10pO1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIHRoZSBncmFwaCBvYmplY3QuIEFueSBub2RlcyBvciBsaW5rcyB0aGF0IGFyZSBjb250YWluZWQgaW5cbiAqIGl0cyBub2RlcyBvciBsaW5rcyBwcm9wZXJ0eSB3aWxsIGJlIGRyYXduIG9uIHVwZGF0ZUdyYXBoLlxuICogU3VwcG9ydHMgcG9saWNpZXMuXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIGdyYXBoIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBncmFwaFxuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIGdyYXBoIGNsYXNzLiBcbiAqIFJldHVybiB0aGUgY2xhc3Mgb2JqZWN0IHdpdGggR3JhcGggYXMga2V5LlxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdHcmFwaCcsIFsnUG9saWN5U2VydmljZScsIGZ1bmN0aW9uIChQb2xpY3lTZXJ2aWNlKSB7XG4gICAgdmFyIEdyYXBoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY29uc3RydWN0b3IgZm9yIHRoZSBncmFwaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7SFRNTCBTVkd9ICBzdmcgICAgIFRoZSBzdmcgdGhhdCB3aWxsIFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgdGhlIGdyYXBoXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICAgTGlzdCBvZiBub2RlcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIGxpbmtzICAgICAgTGlzdCBvZiBsaW5rcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHcmFwaChzdmcsIG5vZGVzLCBsaW5rcykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoKTtcblxuICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlcyA9IG5vZGVzIHx8IFtdO1xuICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gbGlua3MgfHwgW107XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzID0gW107XG4gICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcyA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuUG9saWN5KCk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBjYW5ab29tOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNhblBhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0Rm9yY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcGRhdGU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzID0ge1xuICAgICAgICAgICAgICAgIGNpcmNsZUdDbGFzczogXCJjb25jZXB0R1wiLFxuICAgICAgICAgICAgICAgIGdyYXBoQ2xhc3M6IFwiZ3JhcGhcIixcbiAgICAgICAgICAgICAgICBwYXRoQ2xhc3M6IFwicGF0aFwiLFxuICAgICAgICAgICAgICAgIG5vZGVDbGFzczogXCJjaXJjbGVcIixcbiAgICAgICAgICAgICAgICBub2RlVGV4dDogXCJub2RlVGV4dFwiLFxuICAgICAgICAgICAgICAgIHN0YXJ0UmFkaXVzOiA1MCxcbiAgICAgICAgICAgICAgICBtYXhSYWRpdXM6IDYwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgICAgICAgICAgZGlzcGxheU9mZnNldDogNjBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHN2Zy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW92ZXJcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wiZGJsY2xpY2tcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wiY29udGV4dG1lbnVcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wibW91c2VvdXRcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNlZG93blwiXS5jYWxsKHRoaXMsIGQpO1xuICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNldXBcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgYXJyb3cgbWFya2VycyBmb3IgZ3JhcGggbGlua3NcbiAgICAgICAgICAgIHZhciBkZWZzID0gc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKTtcbiAgICAgICAgICAgIGRlZnMuYXBwZW5kKCdzdmc6bWFya2VyJykuYXR0cignaWQnLCAnZW5kLWFycm93JykuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpLmF0dHIoXCJyZWZYXCIsIDIwKS5hdHRyKFwicmVmWVwiLCAtMSkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDYpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgYXJyb3cgbWFya2VycyBmb3IgbGVhZGluZyBhcnJvd1xuICAgICAgICAgICAgZGVmcy5hcHBlbmQoJ3N2ZzptYXJrZXInKS5hdHRyKCdpZCcsICdtYXJrLWVuZC1hcnJvdycpLmF0dHIoJ3ZpZXdCb3gnLCAnMCAtNSAxMCAxMCcpLmF0dHIoJ3JlZlgnLCA3KS5hdHRyKCdtYXJrZXJXaWR0aCcsIDMuNSkuYXR0cignbWFya2VySGVpZ2h0JywgMy41KS5hdHRyKCdvcmllbnQnLCAnYXV0bycpLmFwcGVuZCgnc3ZnOnBhdGgnKS5hdHRyKCdkJywgJ00wLC01TDEwLDBMMCw1Jyk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zdmcgPSBzdmc7XG4gICAgICAgICAgICB0aGlzR3JhcGguc3ZnRyA9IHN2Zy5hcHBlbmQoXCJnXCIpLmNsYXNzZWQodGhpc0dyYXBoLmNvbnN0cy5ncmFwaENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBzdmdHID0gdGhpc0dyYXBoLnN2Z0c7XG5cbiAgICAgICAgICAgIC8vIHN2ZyBub2RlcyBhbmQgbGlua3MgXG4gICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSBzdmdHLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwiZ1wiKTtcbiAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gc3ZnRy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcImdcIik7XG4gICAgICAgICAgICB0aGlzR3JhcGguaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgIHZhciByZXNpemVGdW5jID0gZnVuY3Rpb24gcmVzaXplRnVuYygpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgub25XaW5kb3dSZXNpemUoc3ZnKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5iaW5kaW5ncyA9IHtcbiAgICAgICAgICAgICAgICByZXNpemU6IHJlc2l6ZUZ1bmNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkKHdpbmRvdykucmVzaXplKHJlc2l6ZUZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxzIHRoZSBkZXN0cm95IG1ldGhvZCBmb3IgYWxsIHBvbGljaWVzXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKEdyYXBoLCBbe1xuICAgICAgICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpc0dyYXBoLmJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICQod2luZG93KS5vZmYoa2V5LCB0aGlzR3JhcGguYmluZGluZ3Nba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luaXROb2RlcycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdE5vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbGlua3NcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luaXRMaW5rcycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdExpbmtzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHJldHVybnMgdGhlIG5vZGUgbWF0Y2hpbmcgdGhlIGlkLCBcbiAgICAgICAgICAgICAqIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBub25lXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtOb2RlfSAgeyBtYXRjaGluZyBub2RlIH1cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2ZpbmROb2RlQnlJZCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluZE5vZGVCeUlkKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzR3JhcGgubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSB0aGlzR3JhcGgubm9kZXNbaV0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzR3JhcGgubm9kZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2ZpbmREM05vZGUnLFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgZDNOb2RlIG9iamVjdCB0aGF0IG1hdGNoZXMgdGhlIGlkLFxuICAgICAgICAgICAgICogb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vbmVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgICAgICAgICAgICogQHJldHVybiAgICAge0QzTm9kZX0gVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmREM05vZGUoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgZDNOb2RlO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkM05vZGUgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDNOb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIGRyYWcgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgICAgICAqIHdoZW4gbm9kZXMgYXJlIGRyYWdnZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDMuYmVoYXZpb3IuZHJhZ30gIGQzZHJhZyAgRDMgZHJhZyBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luc3RhbGxEcmFnUG9saWN5JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsRHJhZ1BvbGljeShkM2RyYWcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWcgPSBkM2RyYWc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCB0byBpbnN0YWxsIGEgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWQgXG4gICAgICAgICAgICAgKiB3aGVuIHRoZXJlIGlzIG1vdXNlIGludGVyYWN0aW9ucyB3aXRoIHRoZSBncmFwaCdzIHN2Z1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbFN2Z1BvbGljeScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbFN2Z1BvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z1BvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXNcbiAgICAgICAgICAgICAqIG1vdXNlIGludGVyYWN0aW9uIHdpdGggYSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdpbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5wdXNoKHBvbGljeSk7XG4gICAgICAgICAgICAgICAgcG9saWN5LmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIHJlbW92ZSBhbiBpbnN0YWxsZWQgcG9saWN5IGZvciBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndW5pbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgbm9kZSBwb2xpY3kgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG5hbWVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgcG9saWN5TmFtZSAgVGhlIHBvbGljeSBuYW1lXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7UG9saWN5fSAgcG9saWN5ICAgICAgVGhlIG1hdGNoaW5nIHBvbGljeVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZ2V0Tm9kZVBvbGljeScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Tm9kZVBvbGljeShwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3ksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kucG9saWN5TmFtZSA9PT0gcG9saWN5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBwb2xpY2llcyB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGVyZSBpcyBhXG4gICAgICAgICAgICAgKiBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgcGF0aFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMucHVzaChwb2xpY3kpO1xuICAgICAgICAgICAgICAgIHBvbGljeS5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCB0byByZW1vdmUgYW4gaW5zdGFsbGVkIHBvbGljeSBmb3IgbGlua3NcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndW5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgcGF0aFxuICAgICAgICAgICAgICogUHJvcG9nYXRlcyB0aGUgZXZlbnQgdG8gYWxsIGluc3RhbGxlZCBwYXRoIHBvbGljaWVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGV2ZW50ICAgVGhlIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM29iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQYXRofSAgZCAgICAgICBUaGUgbWF0Y2hpbmcgTGluayBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3BhdGhQb2xpY3lFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aFBvbGljeUV2ZW50KGV2ZW50LCBkM3BhdGgsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM3BhdGgsIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIG5vZGVcbiAgICAgICAgICAgICAqIFByb3BvZ2F0ZXMgdGhlIGV2ZW50IHRvIGFsbCBpbnN0YWxsZWQgbm9kZSBwb2xpY2llc1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgZXZlbnQgICBUaGUgZXZlbnQgdHlwZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2Qzb2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBkICAgICAgIFRoZSBtYXRjaGluZyBOb2RlIG9iamVjdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnbm9kZVBvbGljeUV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBub2RlUG9saWN5RXZlbnQoZXZlbnQsIGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcywgZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lbZXZlbnRdKGQzbm9kZSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyBwYW4gYW5kIHpvb20gcnVsZXMgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkMy5iZWhhdmlvci56b29tfSAgZDN6b29tICBEMyB6b29tIG9ialxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbFpvb21Qb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxab29tUG9saWN5KGQzem9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N2ZyA9IGQzem9vbTtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Zy5jYWxsKHRoaXMuZHJhZ1N2Zyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkXG4gICAgICAgICAgICAgKiBIb29rIGZvciBvdmVycmlkaW5nIGluIHN1YmNsYXNzZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7SFRNTCBTVkd9ICBzdmcgICAgIFRoZSBzdmcgdGhhdCB0aGUgaGFuZGxlclxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhdHRhY2hlZCB0b1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnb25XaW5kb3dSZXNpemUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uV2luZG93UmVzaXplKHN2Zykge31cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbnNlcnRzIGxpbmUgYnJlYWtzIGluIG5vZGUgdGV4dFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtIVE1MIEVsZW19ICBnRWwgICAgVGhlIGVsZW0gdG8gYWRkIHRleHQgdG9cbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0aXRsZSAgIFRoZSB0aXRsZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zZXJ0VGl0bGVMaW5lYnJlYWtzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRUaXRsZUxpbmVicmVha3MoZ0VsLCB0aXRsZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB3b3JkcyA9IHRpdGxlLnNwbGl0KC9cXHMrL2cpLFxuICAgICAgICAgICAgICAgICAgICBud29yZHMgPSB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZ0VsLmFwcGVuZChcInRleHRcIikuYXR0cignY2xhc3MnLCB0aGlzR3JhcGguY29uc3RzLm5vZGVUZXh0KS5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikuYXR0cihcImR5XCIsIFwiLVwiICsgKG53b3JkcyAtIDEpICogNy41KTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRzcGFuID0gZWwuYXBwZW5kKCd0c3BhbicpLnRleHQod29yZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHRzcGFuLmF0dHIoJ3gnLCAwKS5hdHRyKCdkeScsICcxNScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIGFsbCBsaW5rcyBmcm9tIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpY2VMaW5rc0Zvck5vZGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZUxpbmtzRm9yTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRvU3BsaWNlID0gdGhpc0dyYXBoLmxpbmtzLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbC5zb3VyY2UgPT09IG5vZGUgfHwgbC50YXJnZXQgPT09IG5vZGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9TcGxpY2UubWFwKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcy5zcGxpY2UodGhpc0dyYXBoLmxpbmtzLmluZGV4T2YobCksIDEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZHMgdGhlIG5vZGUgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICBub2RlLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAncmVtb3ZlTm9kZScsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIHRoZSBub2RlIHRvIHRoZSBncmFwaCBhbmQgdXBkYXRlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZSAgICBUaGUgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGRMaW5rJyxcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZHMgdGhlIGxpbmsgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2xpbmt9ICBsaW5rICAgIFRoZSBsaW5rXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaW5rKGxpbmspIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MucHVzaChsaW5rKTtcbiAgICAgICAgICAgICAgICBsaW5rLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAncmVtb3ZlTGluaycsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIHRoZSBsaW5rIHRvIHRoZSBncmFwaCBhbmQgdXBkYXRlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtsaW5rfSAgbGluayAgICBUaGUgbGlua1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGluayhsaW5rKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnNwbGljZSh0aGlzR3JhcGgubGlua3MuaW5kZXhPZihsaW5rKSwgMSk7XG4gICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIHBhdGhzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBwYXRocyAgIExpc3Qgb2YgcGF0aHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZUV4aXN0aW5nUGF0aHMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpIHtcbiAgICAgICAgICAgICAgICBwYXRocy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudXBkYXRlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBhZGRpbmcgbmV3IHBhdGhzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBuZXdQYXRocyAgTGlzdCBvZiBuZXcgcGF0aHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld1BhdGhzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBkLm5ld1BhdGhBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIG5vZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gcG9saWN5LCB1c2UgZGVmYXVsdCBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVFeGlzdGluZ05vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ05vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gdGhpcy5jaXJjbGVzLmRhdGEodGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5pZDtcbiAgICAgICAgICAgICAgICB9KS5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudXBkYXRlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBhZGRpbmcgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBuZXdOb2RlcyAgTGlzdCBvZiBuZXcgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld05vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgbmV3Tm9kZXMuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5ncmFwaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkLm5ld05vZGVBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIG5vZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gcG9saWN5LCB1c2UgZGVmYXVsdCBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgbmV3Tm9kZXMub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZVBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcInJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhkLnJhZGl1cyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbnNlcnRUaXRsZUxpbmVicmVha3MoZDMuc2VsZWN0KHRoaXMpLCBkLnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByZXZlbnRzIG5vZGVzIGZyb20gY29sbGlkaW5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGFscGhhICAgQWZmZWN0cyBob3cgbXVjaCBjaGFuZ2VcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsaXNpb24gY2F1c2VzXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIHtXaGV0aGVyIG5vZGVzIGFyZSBjb2xsaWRlZH1cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VDb2xsaWRlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlQ29sbGlkZShhbHBoYSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgcXVhZHRyZWUgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBkLnJhZGl1cyArIGNvbnN0cy5tYXhSYWRpdXMgKyBjb25zdHMucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG54MSA9IGQueCAtIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBueDIgPSBkLnggKyByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnkxID0gZC55IC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG55MiA9IGQueSArIHI7XG4gICAgICAgICAgICAgICAgICAgIHF1YWR0cmVlLnZpc2l0KGZ1bmN0aW9uIChxdWFkLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1YWQucG9pbnQgJiYgcXVhZC5wb2ludCAhPT0gZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gZC54IC0gcXVhZC5wb2ludC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gZC55IC0gcXVhZC5wb2ludC55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZC5yYWRpdXMgKyBxdWFkLnBvaW50LnJhZGl1cyArIGNvbnN0cy5wYWRkaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsIDwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gKGwgLSByKSAvIGwgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54IC09IHggKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55IC09IHkgKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZC5wb2ludC54ICs9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YWQucG9pbnQueSArPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4MSA+IG54MiB8fCB4MiA8IG54MSB8fCB5MSA+IG55MiB8fCB5MiA8IG55MTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaWNrIG9mIHRoZSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzdGljayBldmVudH0gIGUgICAgRDN0aWNrIGV2ZW50XG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgd2lkdGggIFRoZSB3aWR0aCBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlVGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVRpY2soZSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgcSA9IGQzLmdlb20ucXVhZHRyZWUodGhpc0dyYXBoLm5vZGVzKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICAgICAgICBxLnZpc2l0KHRoaXMuZDNGb3JjZUNvbGxpZGUobm9kZXNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKHRoaXMuZDNGb3JjZUNvbGxpZGUoLjUpKS5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueCA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbih3aWR0aCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLngpKTtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueSA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbihoZWlnaHQgLSBvZmZzZXQgLSBkLnJhZGl1cywgZC55KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdGFydHMgb24gc3RhcnQgb2YgdGhlIGZvcmNlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VTdGFydCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocy5hdHRyKCd4MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLnk7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneDInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgZW5kIG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlRW5kJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlRW5kKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmF0dHIoJ2N4JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCdjeScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGJvdW5kcyBmb3IgdGhlIFxuICAgICAgICAgICAgICogZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICB3aWR0aCBhbmQgaGVpZ2h0IGFzIHByb3BlcnRpZXMgXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlQm91bmRzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlQm91bmRzKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERvZXMgYSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0Rm9yY2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvcmNlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzR3JhcGgubm9kZXM7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gdGhpc0dyYXBoLmxpbmtzO1xuICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gdGhpc0dyYXBoLmQzRm9yY2VCb3VuZHMoKTtcblxuICAgICAgICAgICAgICAgIHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpLnNpemUoW2JvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodF0pLm5vZGVzKG5vZGVzKS5jaGFyZ2UoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC02MDAwO1xuICAgICAgICAgICAgICAgIH0pLmxpbmtzKGxpbmtzKTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLmxpbmtEaXN0YW5jZShib3VuZHMud2lkdGggLyAzKTtcbiAgICAgICAgICAgICAgICBmb3JjZS5saW5rU3RyZW5ndGgoLjIpO1xuICAgICAgICAgICAgICAgIGZvcmNlLmdyYXZpdHkoLjIpO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uub24oJ3RpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZDNGb3JjZVRpY2suY2FsbCh0aGlzR3JhcGgsIGUsIGJvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5vbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kM0ZvcmNlU3RhcnQuY2FsbCh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmQzRm9yY2VFbmQuY2FsbCh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGZvcmNlLmFscGhhKCkgPiAxZS0yICYmIGsgPCAxNTApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2UudGljaygpO1xuICAgICAgICAgICAgICAgICAgICBrID0gayArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcmNlLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIHBvc2l0aW9ucyB0byBiZSB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4gaWYgXG4gICAgICAgICAgICAgKiBub3QgcHJvdmlkZWRcbiAgICAgICAgICAgICAqIGFsc28gc2V0cyB0aGUgcmFkaXVzIG9mIHRoZSBub2Rlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0UG9zaXRpb25zJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpc0dyYXBoLmNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoIC0gMiAqIG9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gMiAqIG9mZnNldDtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ucmFkaXVzID0gbm9kZXNbaV0ucmFkaXVzIHx8IHRoaXNHcmFwaC5jb25zdHMuc3RhcnRSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS54ID09IG51bGwgfHwgbm9kZXNbaV0ueSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2Rlc1tpXS54U3RhcnQgPSB3aWR0aC8yICArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ueCA9IHdpZHRoIC8gMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzW2ldLnlTdGFydCA9IGhlaWdodC8yICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS55ID0gaGVpZ2h0IC8gMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgdG8gdXBkYXRlIHRoZSB2aWV3IG9mIHRoZSBncmFwaCB3aGVuXG4gICAgICAgICAgICAgKiBkYXRhIGNoYW5nZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RnVuY3Rpb259ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVHcmFwaCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlR3JhcGgoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhpc3RpbmdOb2RlcygpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdHcyA9IHRoaXNHcmFwaC5jaXJjbGVzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKTtcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd1cGRhdGUnLCBuZXdHcyk7XG4gICAgICAgICAgICAgICAgbmV3R3MuY2xhc3NlZChjb25zdHMuY2lyY2xlR0NsYXNzLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoaXMudXBkYXRlTmV3Tm9kZXMobmV3R3MpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBub2Rlc1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5pbml0Rm9yY2UgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNldEZvcmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVOZXdOb2Rlcy5jYWxsKHRoaXNHcmFwaCwgbmV3R3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW5pdEZvcmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU5ld05vZGVzKG5ld0dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSB0aGlzR3JhcGgucGF0aHMuZGF0YSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcoZC5zb3VyY2UuaWQpICsgXCIrXCIgKyBTdHJpbmcoZC50YXJnZXQuaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBwYXRocyA9IHRoaXNHcmFwaC5wYXRocztcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld3BhdGhzID0gcGF0aHMuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLnN0eWxlKCdtYXJrZXItZW5kJywgJ3VybCgjZW5kLWFycm93KScpLmNsYXNzZWQoXCJsaW5rXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3UGF0aHMobmV3cGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBsaW5rc1xuICAgICAgICAgICAgICAgIHBhdGhzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIEdyYXBoO1xuICAgIH0oKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIEdyYXBoOiBHcmFwaFxuICAgIH07XG59XSk7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgZ3JhcGggdGhhdCBpcyB1c2VkIHNwZWNpZmljYWxseSBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJykuZmFjdG9yeSgnVmlzdWFsaXplckdyYXBoJywgWydHcmFwaCcsIGZ1bmN0aW9uIChHcmFwaCkge1xuICAgIHZhciBWaXN1YWxpemVyR3JhcGggPSBmdW5jdGlvbiAoX0dyYXBoJEdyYXBoKSB7XG4gICAgICAgIF9pbmhlcml0cyhWaXN1YWxpemVyR3JhcGgsIF9HcmFwaCRHcmFwaCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAge0hUTUwgU1ZHfSAgc3ZnICAgICAgICAgICAgIFRoZSBzdmcgdGhhdCB3aWxsIFxuICAgICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAgICogQHBhcmFtICAge0FycmF5fSAgbm9kZXMgICBcdFx0ICAgIExpc3Qgb2Ygbm9kZXNcbiAgICAgICAgICAgICAgICogQHBhcmFtICAge0FycmF5fSAgbGlua3MgICBcdFx0ICAgIExpc3Qgb2YgbGlua3NcbiAgICAgICAgICogQHBhcmFtICAge0RhdGFTb3VyY2V9ICBkYXRhU291cmNlICAgIFRoZSBkYXRhIHNvdXJjZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gVmlzdWFsaXplckdyYXBoKHN2Zywgbm9kZXMsIGxpbmtzLCBkYXRhU291cmNlKSB7XG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlzdWFsaXplckdyYXBoKTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpc3VhbGl6ZXJHcmFwaCkuY2FsbCh0aGlzLCBzdmcsIG5vZGVzLCBsaW5rcykpO1xuXG4gICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gX3RoaXM7XG5cbiAgICAgICAgICAgIC8vaG9sZHMgY3VycmVudCB0cmFuc2l0aW9ucyB0aGF0IGFyZSBvY2N1cmluZ1xuICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLnRyYW5zaXRpb24gPSBbXTtcbiAgICAgICAgICAgIC8vTWluIGRpc3RhbmNlIGJldHdlZW4gbm9kZXMgd2hlbiBzcGF3bmluZyByYW5kb21seVxuICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cy5lZGdlX2J1ZmZlciA9IDIwMDtcbiAgICAgICAgICAgIC8vU2l6ZSByZWR1Y3Rpb24gYXMgeW91IGdvIHRocm91Z2ggbGV2ZWxzIGluIG5vZGVzXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5ID0gMTtcbiAgICAgICAgICAgIC8vQ3NzIGNsYXNzIGZvciBub2RlcyB0aGF0IGFyZSBjb250YWluZXJzXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzLmNvbnRhaW5lckNsYXNzID0gJ2NvbnRhaW5lcic7XG5cbiAgICAgICAgICAgIC8vZGF0YVNvdXJjZSBob2xkcyB0aGUgc2VydmVyIGRhdGEgYW5kIG1ldGhvZHMgZm9yXG4gICAgICAgICAgICAvL2NvbnZlcnRpbmcgaXQgdG8gZGF0YSBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICB0aGlzR3JhcGguZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG5cbiAgICAgICAgICAgIC8vRHJhZyBiZWhhdmlvciBmb3Igbm9kZXNcbiAgICAgICAgICAgIHZhciBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IGQueCwgeTogZC55IH07XG4gICAgICAgICAgICB9KS5vbihcImRyYWdzdGFydFwiLCBmdW5jdGlvbiAoKSB7fSkub24oXCJkcmFnXCIsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgZC54ICs9IGQzLmV2ZW50LmR4O1xuICAgICAgICAgICAgICAgICAgICBkLnkgKz0gZDMuZXZlbnQuZHk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFtkLngsIGQueV0gKyBcIilcIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH0pLm9uKFwiZHJhZ2VuZFwiLCBmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5kcmFnID0gZHJhZztcblxuICAgICAgICAgICAgLy9QYW4gYW5kIFpvb20gYmVoYXZpb3IgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgdmFyIHpvb20gPSBkMy5iZWhhdmlvci56b29tKCkub24oXCJ6b29tXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuc291cmNlRXZlbnQgIT0gbnVsbCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkLmNhbGwodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KS5vbihcInpvb21zdGFydFwiLCBmdW5jdGlvbiAoZCwgaSkge30pO1xuICAgICAgICAgICAgdGhpc0dyYXBoLmRyYWdTdmcgPSB6b29tO1xuICAgICAgICAgICAgdGhpc0dyYXBoLnN2Zy5jYWxsKHpvb20pLm9uKFwiZGJsY2xpY2suem9vbVwiLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2l0aCBubyBhcmdzIHdoZW4gdGhlIGdyYXBoIGhhcyBhIHpvb20gYWN0aW9uXG4gICAgICAgICAqIENhbiBhbHNvIGJlIGNhbGxlZCB3aXRoIGFyZ3MgdG8gZm9yY2UgYSB6b29tIG9yIHBhbiBcbiAgICAgICAgICogZXZlbnQgZm9yIHRoZSBncmFwaC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgIHRyYW5zbGF0ZSAgVGhlIGFtb3VudCB0byB0cmFuc2xhdGVcbiAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHNjYWxlICAgICAgVGhlIGFtb3VudCB0byBzY2FsZVxuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhWaXN1YWxpemVyR3JhcGgsIFt7XG4gICAgICAgICAgICBrZXk6ICd6b29tZWQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21lZCh0cmFuc2xhdGUsIHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5zdGF0ZS5yaWdodENsaWNrID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmp1c3RTY2FsZVRyYW5zR3JhcGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGUgIT0gbnVsbCAmJiBzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gdGhpc0dyYXBoLmRyYWdTdmc7XG4gICAgICAgICAgICAgICAgICAgIHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB6b29tLnRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIG5hbWVzIHRvIHByZXZlbnQgdHJhbnNpdGlvbiBjb25mbGljdHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb21TZXRDYWxsYmFjayA9IGZ1bmN0aW9uIHpvb21TZXRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgem9vbS50cmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZV9uYW1lID0gXCJ6b29tXCIgKyB0cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChcIi5cIiArIHRoaXMuY29uc3RzLmdyYXBoQ2xhc3MpLnRyYW5zaXRpb24odHJhbnNsYXRlX25hbWUpLmRlbGF5KDEwMCkuZHVyYXRpb24oNzUwKS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB6b29tLnRyYW5zbGF0ZSgpICsgJykgc2NhbGUoJyArIHpvb20uc2NhbGUoKSArICcpJykuZWFjaChcImVuZFwiLCB6b29tU2V0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGguc3RhdGUuY2FuWm9vbSkge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoXCIuXCIgKyB0aGlzLmNvbnN0cy5ncmFwaENsYXNzKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCkgKyBcIikgc2NhbGUoXCIgKyB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnb25XaW5kb3dSZXNpemUnLFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyByZXNpemVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgIFRoZSBzdmcgdG8gcmVzaXplXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZShzdmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgICB2YXIgZGl2V2lkdGggPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGJvZHlFbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCBkaXZXaWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgLSBvZmZzZXQudG9wIC0gMjApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVMaW5rRGF0YScsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHVwZGF0ZWQgZGF0YSBmb3IgdGhlIGxpbmtzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVMaW5rRGF0YSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgbm9kZV9uYW1lc19zZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXREYXRhID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lc19zZXQpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5rRGF0YSA9IHJldERhdGEubGlua0RhdGE7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKGxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TGlua3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBWaXN1YWxpemVyR3JhcGg7XG4gICAgfShHcmFwaC5HcmFwaCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBHcmFwaDogVmlzdWFsaXplckdyYXBoXG4gICAgfTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgbGluayBvYmplY3RzIGZvciB0aGUgZ3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gbGluayBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgbGlua1xuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIGxpbmsgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBMaW5rIGFzIGtleVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdMaW5rJywgW2Z1bmN0aW9uICgpIHtcblx0dmFyIExpbmsgPSBmdW5jdGlvbiAoKSB7XG5cdFx0LyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICAgICAge05vZGV9ICBzb3VyY2VOb2RlICBUaGUgc291cmNlIG5vZGVcbiAgICogQHBhcmFtICAgICAge05vZGV9ICB0YXJnZXROb2RlICBUaGUgdGFyZ2V0IG5vZGVcbiAgICovXG5cdFx0ZnVuY3Rpb24gTGluayhzb3VyY2VOb2RlLCB0YXJnZXROb2RlKSB7XG5cdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cblx0XHRcdHRoaXMuc291cmNlID0gc291cmNlTm9kZTtcblx0XHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0Tm9kZTtcblx0XHRcdHRoaXMuaGFzUG9saWN5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLnBhdGhQb2xpY2llcyA9IFtdO1xuXHRcdFx0dGhpcy5ncmFwaCA9IG51bGw7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENhbGxlZCB3aGVuIGEgbGluayBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICpcbiAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgYWRkZWQgdG9cbiAgICovXG5cblxuXHRcdF9jcmVhdGVDbGFzcyhMaW5rLCBbe1xuXHRcdFx0a2V5OiAnaW5pdGlhbGl6ZScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuXHRcdFx0XHRpZiAodGhpcy5pbml0aWFsaXplZCA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZ3JhcGggPSBncmFwaDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCBkdXJpbmcgdGhlIHVwZGF0ZSBncmFwaCBmb3IgZXhpc3RpbmcgbGlua3NcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG4gICAgKiBAcGFyYW0gICAgICB7TGlua30gIFx0ICAgZCAgICAgICBNYXRjaGluZyBMaW5rIE9iamVjdCAgICAgICBcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAndXBkYXRlQXR0cicsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQXR0cihkM3BhdGgsIGQpIHtcblx0XHRcdFx0ZDNwYXRoLnN0eWxlKCdtYXJrZXItZW5kJywgJ3VybCgjZW5kLWFycm93KScpLmF0dHIoXCJkXCIsIGFycm93UGF0aCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgdXBkYXRlIGdyYXBoIGZvciBhIGxpbmtcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG4gICAgKiBAcGFyYW0gICAgICB7TGlua30gIFx0ICAgZCAgICAgICBNYXRjaGluZyBMaW5rIE9iamVjdCAgICAgICBcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnbmV3UGF0aEF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5ld1BhdGhBdHRyKGQzcGF0aCwgZCkge1xuXHRcdFx0XHRkM3BhdGguYXR0cignZCcsIGFycm93UGF0aCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsY3VsYXRlcyB0aGUgYXJyb3cgcGF0aFxuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICBUaGUgcGF0aCB0byBkcmF3XG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2Fycm93UGF0aCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gYXJyb3dQYXRoKCkge1xuXHRcdFx0XHR2YXIgZCA9IHRoaXM7XG5cdFx0XHRcdHZhciBkeCA9IGQudGFyZ2V0LnggLSBkLnNvdXJjZS54LFxuXHRcdFx0XHQgICAgZHkgPSBkLnRhcmdldC55IC0gZC5zb3VyY2UueSxcblx0XHRcdFx0ICAgIGRyID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHRcdFx0cmV0dXJuIFwiTVwiICsgZC5zb3VyY2UueCArIFwiLFwiICsgZC5zb3VyY2UueSArIFwiQVwiICsgZHIgKyBcIixcIiArIGRyICsgXCIgMCAwLDEgXCIgKyBkLnRhcmdldC54ICsgXCIsXCIgKyBkLnRhcmdldC55O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFVzZWQgdG8gaW5zdGFsbCBwb2xpY2llcyB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGlzXG4gICAgKiBsaW5rIGhhcyBhIG1vdXNlIGV2ZW50XG4gICAgKlxuICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2luc3RhbGxQYXRoUG9saWN5Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsUGF0aFBvbGljeShwb2xpY3kpIHtcblx0XHRcdFx0dGhpcy5oYXNQb2xpY3kgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLnBhdGhQb2xpY2llcy5wdXNoKHBvbGljeSk7XG5cdFx0XHRcdHBvbGljeS5pbml0aWFsaXplKHRoaXMuZ3JhcGgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFVzZWQgdG8gdW5pbnN0YWxsIHBvbGljeSBmb3IgdGhpcyBsaW5rXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAndW5pbnN0YWxsUGF0aFBvbGljeScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdW5pbnN0YWxsUGF0aFBvbGljeShwb2xpY3lSZW1vdmUpIHtcblx0XHRcdFx0dmFyIHBvbGljeVJlbW92ZU5hbWU7XG5cdFx0XHRcdHZhciB0aGlzUGF0aCA9IHRoaXM7XG5cdFx0XHRcdGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF8odGhpc1BhdGgucGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3ksIGluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG5cdFx0XHRcdFx0XHRwb2xpY3kuZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0dGhpc1BhdGgucGF0aFBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKHRoaXNQYXRoLnBhdGhQb2xpY2llcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aGlzUGF0aC5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgZXZlbnQgZm9yIHRoaXMgcGF0aFxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgICAgVGhlIG1vdXNlIGV2ZW50XG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG4gICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgZCAgICAgICAgIFRoZSBtYXRjaGluZyBsaW5rIG9iamVjdFxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdwYXRoUG9saWN5RXZlbnQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHBhdGhQb2xpY3lFdmVudChldmVudCwgZDNwYXRoLCBkKSB7XG5cdFx0XHRcdF8oZC5wYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24gKHBvbGljeSkge1xuXHRcdFx0XHRcdHBvbGljeVtldmVudF0oZDNwYXRoLCBkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIExpbms7XG5cdH0oKTtcblxuXHRyZXR1cm4ge1xuXHRcdExpbms6IExpbmtcblx0fTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIGxpbmsgdGhhdCBpcyB1c2VkIHNwZWNpZmljYWxseSBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJykuZmFjdG9yeSgnVmlzdWFsaXplckxpbmsnLCBbJ0xpbmsnLCBmdW5jdGlvbiAoTGluaykge1xuXHR2YXIgVmlzdWFsaXplckxpbmsgPSBmdW5jdGlvbiAoX0xpbmskTGluaykge1xuXHRcdF9pbmhlcml0cyhWaXN1YWxpemVyTGluaywgX0xpbmskTGluayk7XG5cblx0XHQvKipcbiAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHNvdXJjZU5vZGUgIFRoZSBzb3VyY2Ugbm9kZVxuICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHRhcmdldE5vZGUgIFRoZSB0YXJnZXQgbm9kZVxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgd2VpZ2h0ICAgIFRoZSB3ZWlnaHQgb2YgdGhlIGxpbmtcbiAgICovXG5cdFx0ZnVuY3Rpb24gVmlzdWFsaXplckxpbmsoc291cmNlTm9kZSwgdGFyZ2V0Tm9kZSwgd2VpZ2h0KSB7XG5cdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlzdWFsaXplckxpbmspO1xuXG5cdFx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlzdWFsaXplckxpbmspLmNhbGwodGhpcywgc291cmNlTm9kZSwgdGFyZ2V0Tm9kZSkpO1xuXG5cdFx0XHRfdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0XHQvL0NvdW50IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBob3cgbWFueVxuXHRcdFx0Ly9wYXRocyB0byBpdHMgc3Vibm9kZXMgdGhlcmUgYXJlXG5cdFx0XHQvL2luIG9yZGVyIHRvIGNhbGN1bGF0ZSBhdmVyYWdlIHRyYWZmaWNcblx0XHRcdF90aGlzLmNvdW50ID0gMTtcblx0XHRcdHJldHVybiBfdGhpcztcblx0XHR9XG5cblx0XHQvKipcbiAgICogSW5jcmVhc2VzIHRoZSBjb3VudCBvZiB0aGUgbGlua1xuICAgKiBVU2VkIHRvIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgcGF0aHMgdG8gaXRzIHN1Ym5vZGVzXG4gICAqIHRoZXJlIGFyZSBpbiBvcmRlciB0byBjYWxjdWxhdGUgYXZlcmFnZSB0cmFmZmljXG4gICAqL1xuXG5cblx0XHRfY3JlYXRlQ2xhc3MoVmlzdWFsaXplckxpbmssIFt7XG5cdFx0XHRrZXk6ICdpbmNyZWFzZUNvdW50Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBpbmNyZWFzZUNvdW50KCkge1xuXHRcdFx0XHR0aGlzLmNvdW50ICs9IDE7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsY3VsYXRlcyB3aGVyZSB0byBwbGFjZSBxdGlwIGZvclxuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICBPYmplY3Qgd2l0aCBxVGlwIHNldHRpbmdzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3F0aXBIZWxwZXInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHF0aXBIZWxwZXIoKSB7XG5cdFx0XHRcdHZhciByZXQ7XG5cdFx0XHRcdHZhciBkID0gdGhpcztcblx0XHRcdFx0dmFyIGR4ID0gKGQudGFyZ2V0LnggLSBkLnNvdXJjZS54KSAvIDIsXG5cdFx0XHRcdCAgICBkeSA9IChkLnRhcmdldC55IC0gZC5zb3VyY2UueSkgLyAyO1xuXHRcdFx0XHRpZiAoZC5zb3VyY2UueCA8IGQudGFyZ2V0LngpIHtcblx0XHRcdFx0XHRyZXQgPSB7XG5cdFx0XHRcdFx0XHRteTogJ3RvcCBjZW50ZXInLFxuXHRcdFx0XHRcdFx0YXQ6ICdjZW50ZXIgY2VudGVyJywgLy8gYXQgdGhlIGJvdHRvbSByaWdodCBvZi4uLlxuXHRcdFx0XHRcdFx0dGFyZ2V0OiBbZHgsIGR5XSxcblx0XHRcdFx0XHRcdGFkanVzdDoge1xuXHRcdFx0XHRcdFx0XHR5OiAxMFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRcdFx0bXk6ICdib3R0b20gY2VudGVyJyxcblx0XHRcdFx0XHRcdGF0OiAnY2VudGVyIGNlbnRlcicsIC8vIGF0IHRoZSBib3R0b20gcmlnaHQgb2YuLi5cblx0XHRcdFx0XHRcdHRhcmdldDogW2R4LCBkeV0sXG5cdFx0XHRcdFx0XHRhZGp1c3Q6IHtcblx0XHRcdFx0XHRcdFx0eTogLTEwXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBsaW5rIGlzIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2luaXRpYWxpemUnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUoZ3JhcGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuaW5pdGlhbGl6ZWQgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihWaXN1YWxpemVyTGluay5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuXHRcdFx0XHRcdHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXHRcdFx0XHRcdGlmIChzdGF0ZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRzdGF0ZSA9IGdyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rID0ge307XG5cdFx0XHRcdFx0XHRzdGF0ZS5tYXhXZWlnaHQgPSBudWxsO1xuXHRcdFx0XHRcdFx0c3RhdGUudXNlQXZnV2VpZ2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFNldHMgd2hldGhlciB0aGUgZ3JhcGggc2hvdWxkIHVzZSBhdmcgd2VpZ2h0XG4gICAgKlxuICAgICogQHBhcmFtICAgICAge2Jvb2xlYW59ICB2YWwgICAgIFRoZSB2YWx1ZSB0byBzZXQgdG9cbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnc2V0VXNlQXZnV2VpZ2h0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRVc2VBdmdXZWlnaHQodmFsKSB7XG5cdFx0XHRcdHRoaXMuZ3JhcGguc3RhdGUuVmlzdWFsaXplckxpbmsudXNlQXZnV2VpZ2h0ID0gISF2YWw7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogU2V0cyB0aGUgd2VpZ2h0IG9mIHRoaXMgbGlua1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB3ZWlnaHQgIFRoZSB3ZWlnaHQgdG8gc2V0IHRvXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3NldFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0V2VpZ2h0KHdlaWdodCkge1xuXHRcdFx0XHR0aGlzLndlaWdodCA9IHdlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBHZXRzIHRoZSByYXcgd2VpZ2h0LlxuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtudW1iZXJ9ICBUaGUgcmF3IHdlaWdodC5cbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnZ2V0UmF3V2VpZ2h0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRSYXdXZWlnaHQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLndlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBHZXRzIHRoZSB3ZWlnaHQgdmFsdWUgb2YgdGhlIGxpbmssIGRlcGVuZGluZyBvbiB0aGVcbiAgICAqIHVzZUF2Z1dlaWd0aCBzZXR0aW5nXG4gICAgKlxuICAgICogQHJldHVybiAgICAge251bWJlcn0gIFRoZSB3ZWlnaHQuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0V2VpZ2h0KCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHRcdFx0ICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXG5cdFx0XHRcdGlmIChzdGF0ZS51c2VBdmdXZWlnaHQpIHtcblx0XHRcdFx0XHR2YXIgd2VpZ2h0ID0gdGhpcy53ZWlnaHQgLyB0aGlzLmNvdW50O1xuXHRcdFx0XHRcdHJldHVybiB3ZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMud2VpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFVwZGF0ZXMgdGhlIG1heCB3ZWlnaHQgb2YgdGhlIGdyYXBoXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZU1heFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlTWF4V2VpZ2h0KCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHRcdFx0ICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXG5cdFx0XHRcdHZhciBtYXhMaW5rID0gXy5tYXhCeSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRcdFx0aWYgKGwuZ3JhcGggIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGwuZ2V0V2VpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c3RhdGUubWF4V2VpZ2h0ID0gbWF4TGluay5nZXRXZWlnaHQoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxsZWQgZHVyaW5nIHRoZSB1cGRhdGUgZ3JhcGggZm9yIGV4aXN0aW5nIGxpbmtzXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuICAgICogQHBhcmFtICAgICAge0xpbmt9ICBcdCAgIGQgICAgICAgTWF0Y2hpbmcgTGluayBPYmplY3QgICAgICAgXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dHIoZDNwYXRoLCBkKSB7XG5cdFx0XHRcdHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuXHRcdFx0XHQgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cdFx0XHRcdHRoaXMudXBkYXRlTWF4V2VpZ2h0KCk7XG5cdFx0XHRcdHZhciBjb2xvclNjYWxlID0gZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFswLCBzdGF0ZS5tYXhXZWlnaHRdKS5yYW5nZShbXCIjZmZiMzY2XCIsIFwiI0Y5MjYwNlwiXSk7XG5cdFx0XHRcdHN0YXRlLmNvbG9yU2NhbGUgPSBjb2xvclNjYWxlO1xuXHRcdFx0XHRkM3BhdGguc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJykuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLnNlbGVjdGVkQ2xhc3MsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGQgPT09IHN0YXRlLnNlbGVjdGVkRWRnZTtcblx0XHRcdFx0fSkuYXR0cihcImRcIiwgdGhpcy5hcnJvd1BhdGguY2FsbChkKSkudHJhbnNpdGlvbihcImV4aXN0aW5nUGF0aFRyYW5zaXRpb25cIikuZHVyYXRpb24oNzUwKS5hdHRyKFwic3Ryb2tlXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0dmFyIGMgPSBjb2xvclNjYWxlKGQuZ2V0V2VpZ2h0KCkpO1xuXHRcdFx0XHRcdHJldHVybiBjO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIHRoaXMgbGlua1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0XG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ25ld1BhdGhBdHRyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBuZXdQYXRoQXR0cihkM3BhdGgsIGQpIHtcblx0XHRcdFx0dmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG5cdFx0XHRcdCAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblx0XHRcdFx0dGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0XHRcdFx0dmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzAsIHN0YXRlLm1heFdlaWdodF0pLnJhbmdlKFtcIiNmZmIzNjZcIiwgXCIjRjkyNjA2XCJdKTtcblxuXHRcdFx0XHRkM3BhdGgudHJhbnNpdGlvbihcIm5ld1BhdGhUcmFuc2l0aW9uXCIpLmR1cmF0aW9uKDc1MCkuYXR0clR3ZWVuKFwib3BhY2l0eVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkMy5pbnRlcnBvbGF0ZVN0cmluZygwLCAxKTtcblx0XHRcdFx0fSkuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHZhciBjID0gY29sb3JTY2FsZShkLmdldFdlaWdodCgpKTtcblx0XHRcdFx0XHRyZXR1cm4gYztcblx0XHRcdFx0fSkuYXR0cignZCcsIHRoaXMuYXJyb3dQYXRoLmNhbGwoZCkpO1xuXHRcdFx0fVxuXHRcdH1dKTtcblxuXHRcdHJldHVybiBWaXN1YWxpemVyTGluaztcblx0fShMaW5rLkxpbmspO1xuXG5cdHJldHVybiB7XG5cdFx0TGluazogVmlzdWFsaXplckxpbmtcblx0fTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3Igbm9kZSBvYmplY3RzIGZvciB0aGUgZ3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gTm9kZSBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgbm9kZVxuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIG5vZGUgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBOb2RlIGFzIGtleVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdOb2RlJywgW2Z1bmN0aW9uICgpIHtcblx0dmFyIE5vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0LyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgeCBsb2NhdGlvblxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeSAgICAgICB5IGxvY2F0aW9uXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFRoZSB0ZXh0IHRvIGRpc3BsYXlcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1cyBvZiB0aGUgbm9kZVxuICAgKi9cblx0XHRmdW5jdGlvbiBOb2RlKHgsIHksIGlkLCB0ZXh0LCByYWRpdXMpIHtcblx0XHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlKTtcblxuXHRcdFx0dGhpcy54ID0geDtcblx0XHRcdHRoaXMueSA9IHk7XG5cdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdHRoaXMuaWQgPSBpZDtcblx0XHRcdHRoaXMudGV4dCA9IHRleHQ7XG5cdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdHRoaXMuaGFzUG9saWN5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLnBvbGljeSA9IG51bGw7XG5cdFx0XHR0aGlzLm5vZGVQb2xpY2llcyA9IFtdO1xuXHRcdFx0dGhpcy5ncmFwaCA9IG51bGw7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENhbGxlZCB3aGVuIGEgbm9kZSBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICpcbiAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgYWRkZWQgdG9cbiAgICovXG5cblxuXHRcdF9jcmVhdGVDbGFzcyhOb2RlLCBbe1xuXHRcdFx0a2V5OiAnaW5pdGlhbGl6ZScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuXHRcdFx0XHRpZiAodGhpcy5pbml0aWFsaXplZCA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZ3JhcGggPSBncmFwaDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCBkdXJpbmcgdGhlIHVwZGF0ZSBncmFwaCBmb3IgZXhpc3RpbmcgbGlua3NcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dHIoZDNub2RlLCBkKSB7XG5cdFx0XHRcdGQzbm9kZS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgdXBkYXRlIGdyYXBoIGZvciBhIG5vZGVcbiAgICAqIEhvb2sgZm9yIHN1YiBjbGFzc2VzXG4gICAgKiBcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3RcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnbmV3Tm9kZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5ld05vZGVBdHRyKGQzbm9kZSwgZCkge31cblxuXHRcdFx0LyoqXG4gICAgKiBTZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGUuXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1c1xuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdzZXRSYWRpdXMnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHNldFJhZGl1cyhyYWRpdXMpIHtcblx0XHRcdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byBpbnN0YWxsIHBvbGljaWVzIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoaXNcbiAgICAqIG5vZGUgaGFzIGEgbW91c2UgZXZlbnRcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnaW5zdGFsbE5vZGVQb2xpY3knLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxOb2RlUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMubm9kZVBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIG5vZGVcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fHN0cmluZ30gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAndW5pbnN0YWxsTm9kZVBvbGljeScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdW5pbnN0YWxsTm9kZVBvbGljeShwb2xpY3lSZW1vdmUpIHtcblx0XHRcdFx0dmFyIHBvbGljeVJlbW92ZU5hbWU7XG5cdFx0XHRcdHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cdFx0XHRcdGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF8odGhpc05vZGUubm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3ksIGluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG5cdFx0XHRcdFx0XHRwb2xpY3kuZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0dGhpc05vZGUubm9kZVBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKHRoaXNOb2RlLm5vZGVQb2xpY2llcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aGlzTm9kZS5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgZXZlbnQgZm9yIHRoaXMgbm9kZVxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgICAgVGhlIG1vdXNlIGV2ZW50XG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgZCAgICAgICAgIFRoZSBtYXRjaGluZyBub2RlIG9iamVjdFxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdub2RlUG9saWN5RXZlbnQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzLm5vZGVQb2xpY2llcywgZnVuY3Rpb24gKHBvbGljeSkge1xuXHRcdFx0XHRcdHBvbGljeVtldmVudF0oZDNub2RlLCBkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIE5vZGU7XG5cdH0oKTtcblxuXHRyZXR1cm4ge1xuXHRcdE5vZGU6IE5vZGVcblx0fTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBub2RlIHRoYXQgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHRoZSB2aXN1YWxpemF0aW9uIHRhYi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1Zpc3VhbGl6ZXJOb2RlJywgWydOb2RlJywgZnVuY3Rpb24gKE5vZGUpIHtcblx0dmFyIFZpc3VhbGl6ZXJOb2RlID0gZnVuY3Rpb24gKF9Ob2RlJE5vZGUpIHtcblx0XHRfaW5oZXJpdHMoVmlzdWFsaXplck5vZGUsIF9Ob2RlJE5vZGUpO1xuXG5cdFx0LyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgXHR4IGxvY2F0aW9uXG4gICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB5ICAgICAgIFx0eSBsb2NhdGlvblxuICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgaWQgICAgICBcdFRoZSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFx0VGhlIHRleHQgdG8gZGlzcGxheVxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgcmFkaXVzICBcdFRoZSByYWRpdXMgb2YgdGhlIG5vZGVcbiAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHBhcmVudCAgICAgVGhlIHBhcmVudCBpZFxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgYW5jZXN0b3JzICBBcnJheSBvZiBhbmNlc3RvcnMgSWRcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHhTdGFydCAgICAgeCBsb2MgdG8gc3RhcnQgYW5pbWF0aW9uXG4gICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB5U3RhcnQgICAgIHkgbG9jIHRvIHN0YXJ0IGFuaW1hdGlvblxuICAgKi9cblx0XHRmdW5jdGlvbiBWaXN1YWxpemVyTm9kZSh4LCB5LCBpZCwgdGV4dCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycywgeFN0YXJ0LCB5U3RhcnQpIHtcblx0XHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaXN1YWxpemVyTm9kZSk7XG5cblx0XHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihWaXN1YWxpemVyTm9kZSkuY2FsbCh0aGlzLCB4LCB5LCBpZCwgdGV4dCwgcmFkaXVzKSk7XG5cblx0XHRcdF90aGlzLnBhcmVudCA9IHBhcmVudDtcblx0XHRcdF90aGlzLmFuY2VzdG9ycyA9IGFuY2VzdG9ycztcblx0XHRcdGlmICh4U3RhcnQgPT0gbnVsbCkge1xuXHRcdFx0XHRfdGhpcy54U3RhcnQgPSB4O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X3RoaXMueFN0YXJ0ID0geFN0YXJ0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHlTdGFydCA9PSBudWxsKSB7XG5cdFx0XHRcdF90aGlzLnlTdGFydCA9IHk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfdGhpcy55U3RhcnQgPSB5U3RhcnQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gX3RoaXM7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENhbGxlZCBkdXJpbmcgdGhlIGZpcnN0IHVwZGF0ZSBncmFwaCBmb3IgYSBub2RlXG4gICAqXG4gICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICogQHBhcmFtICAgICAge05vZGV9ICAgIGQgICAgICAgICBUaGUgbWF0Y2hpbmcgTm9kZVxuICAgKi9cblxuXG5cdFx0X2NyZWF0ZUNsYXNzKFZpc3VhbGl6ZXJOb2RlLCBbe1xuXHRcdFx0a2V5OiAnbmV3Tm9kZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5ld05vZGVBdHRyKGQzbm9kZSwgZCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcblx0XHRcdFx0aWYgKHRoaXNHcmFwaC5jb25zdHMuY29udGFpbmVyQ2xhc3MgIT0gbnVsbCAmJiB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbZC5pZF0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdGQzbm9kZS5jbGFzc2VkKHRoaXNHcmFwaC5jb25zdHMuY29udGFpbmVyQ2xhc3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGQzbm9kZS50cmFuc2l0aW9uKFwibm9kZVBvc2l0aW9uVHJhbnNpdGlvblwiKS5kdXJhdGlvbig3NTApLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmIChkLnhTdGFydCAhPSBudWxsICYmIGQueVN0YXJ0ICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHZhciB4U3RhcnQgPSBkLnhTdGFydDtcblx0XHRcdFx0XHRcdHZhciB5U3RhcnQgPSBkLnlTdGFydDtcblx0XHRcdFx0XHRcdGQueFN0YXJ0ID0gZC54O1xuXHRcdFx0XHRcdFx0ZC55U3RhcnQgPSBkLnk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyB4U3RhcnQgKyBcIixcIiArIHlTdGFydCArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XSk7XG5cblx0XHRyZXR1cm4gVmlzdWFsaXplck5vZGU7XG5cdH0oTm9kZS5Ob2RlKTtcblxuXHRyZXR1cm4ge1xuXHRcdE5vZGU6IFZpc3VhbGl6ZXJOb2RlXG5cdH07XG59XSk7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgdG8gYWRkIGEgc2VsZWN0IG5vZGUgZmVhdHVyZS5cbiAqIFN1cHBvcnRzIHNlbGVjdGluZyBtdWx0aXBsZSBub2RlcyBieSB1c2luZyB0aGUgY3RybCBrZXkuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdOb2RlU2VsZWN0aW9uUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgdmFyIE5vZGVTZWxlY3Rpb25Qb2xpY3kgPSBmdW5jdGlvbiAoX1BvbGljeSRQb2xpY3kpIHtcbiAgICAgICAgX2luaGVyaXRzKE5vZGVTZWxlY3Rpb25Qb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gTm9kZVNlbGVjdGlvblBvbGljeSgpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlU2VsZWN0aW9uUG9saWN5KTtcblxuICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihOb2RlU2VsZWN0aW9uUG9saWN5KS5jYWxsKHRoaXMsIFwiTm9kZVNlbGVjdGlvblBvbGljeVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgKiBPdmVyd3JpdGVzIHRoZSBvbiBkcmFnIGV2ZW50IG9mIHRoZSBncmFwaFxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWQgb25cbiAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhOb2RlU2VsZWN0aW9uUG9saWN5LCBbe1xuICAgICAgICAgICAga2V5OiAnaW5pdGlhbGl6ZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoTm9kZVNlbGVjdGlvblBvbGljeS5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cyA9IGdyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgY29uc3RzLnNlbGVjdGVkQ2xhc3MgPSBcInNlbGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgLy9vdmVyd3JpdHRpbmcgZ3JhcGgncyBub2RlIG9uIGRyYWcgZXZlbnQgdG8gc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vbW92aW5nIG11bHRpcGxlIG5vZGVzIGF0IG9uY2VcbiAgICAgICAgICAgICAgICB2YXIgZHJhZyA9IGdyYXBoLmRyYWc7XG4gICAgICAgICAgICAgICAgZHJhZy5vbignZHJhZycsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSBncmFwaDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDbGFzcyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeS5zZWxlY3RlZENsYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGQzLnNlbGVjdEFsbCgnLicgKyBzZWxlY3RlZENsYXNzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblswXS5pbmRleE9mKHRoaXMpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZChzZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gZDMuZXZlbnQuZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IGQzLmV2ZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFtkLngsIGQueV0gKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGRzIHRoZSBnaXZlbiBub2RlIHRvIHRoZSBhcnJheSBvZiBzZWxlY3RlZCBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzTm9kZSAgICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgbm9kZURhdGEgIE1hdGNoaW5nIE5vZGUgb2JqZWN0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGRTZWxlY3ROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTZWxlY3ROb2RlKGQzTm9kZSwgbm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgZDNOb2RlLmNsYXNzZWQoY29uc3RzLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGVkTm9kZXMucHVzaChub2RlRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBhcnJheSBvZiBzZWxlY3RlZCBub2Rlcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM05vZGUgICAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIG5vZGVEYXRhICBNYXRjaGluZyBub2RlIG9iamVjdCBcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3JlbW92ZVNlbGVjdEZyb21Ob2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTZWxlY3RGcm9tTm9kZShkM05vZGUsIG5vZGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmZpbHRlcihmdW5jdGlvbiAoY2QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNkLmlkID09PSBub2RlRGF0YS5pZDtcbiAgICAgICAgICAgICAgICB9KS5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKG5vZGVEYXRhKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyBhbGwgc2VsZWN0ZWQgbm9kZXMuXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdyZW1vdmVBbGxTZWxlY3RlZE5vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0ZWROb2RlcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9uIE1vdXNlZG93biwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3QgICAgICAgXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNlZG93bihkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKGQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0RnJvbU5vZGUoZDNub2RlLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkU2VsZWN0Tm9kZShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBubyBjb250cm9sIGtleSwgYW5kIGNsaWNrZWQgbm90IHNlbGVjdGVkIG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBvZiBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT24gTW91c2V1cCwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ21vdXNldXAnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNldXAoZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG4gICAgICAgICAgICAgICAgaWYgKCFkMy5ldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAxLCB0aGVuIHdlIGFyZSBtb3ZpbmcgbXVsdGlwbGUgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgLy9sZWF2ZSB0aGVtIGFsbCBoaWdobGlnaHRlZFxuICAgICAgICAgICAgICAgICAgICAvL290aGVyd2lzZSB3ZSBhcmUganVzdCBtb3Zpbmcgb25lIG5vZGUsIHNvIHVuaGlnaGxpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNlbGVjdEZyb21Ob2RlKGQzbm9kZSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICB9KFBvbGljeS5Qb2xpY3kpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBOb2RlU2VsZWN0aW9uUG9saWN5XG4gICAgfTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGNoYW5nZXMgdGhlIHZpZXcgdG8gdGhlIHRpbWVncmFwaCBvZiBsaW5rIGRhdGEgb24gY2xpY2suXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdQYXRoQ2hhbmdlVmlld1BvbGljeScsIFsnUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSkge1xuICAgIHZhciBQYXRoQ2hhbmdlVmlld1BvbGljeSA9IGZ1bmN0aW9uIChfUG9saWN5JFBvbGljeSkge1xuICAgICAgICBfaW5oZXJpdHMoUGF0aENoYW5nZVZpZXdQb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIHRvIGJ1aWxkIHBvbGljeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICB7QW5ndWxhciBTdGF0ZX0gICAgJHN0YXRlICAgIFVzZWQgdG8gY2hhbmdlIHZpZXdcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFBhdGhDaGFuZ2VWaWV3UG9saWN5KCRzdGF0ZSkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdGhDaGFuZ2VWaWV3UG9saWN5KTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBhdGhDaGFuZ2VWaWV3UG9saWN5KS5jYWxsKHRoaXMsICdQYXRoQ2hhbmdlVmlld1BvbGljeScpKTtcblxuICAgICAgICAgICAgX3RoaXMuJHN0YXRlID0gJHN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIGNoaWxkIGNvbnRhaW5lcnMgb2YgdGhlIHNlcnZpY2VcbiAgICAgICAgICogQ2FuIGhhbmRsZSBuZXN0ZWQgc2VydmljZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIE5vZGUgSURcbiAgICAgICAgICovXG5cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoUGF0aENoYW5nZVZpZXdQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdnZW5lcmF0ZUxpc3QnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlTGlzdChpZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgcmV0TGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlSWRzID0gdGhpcy5ncmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtpZF07XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5vZGVJZHMsIGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUG9saWN5LmdyYXBoLmRhdGFTb3VyY2UuaGFzQ2hpbGQoY2hpbGRJZCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QuY29uY2F0KHRoaXNQb2xpY3kuZ2VuZXJhdGVMaXN0KGNoaWxkSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QucHVzaChjaGlsZElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXRMaXN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVyb3V0ZSBhbiBlZGdlIHdoZW4gY2xpY2tlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgZWRnZSAgICBUaGUgY2xpY2tlZCBlZGdlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd2aWV3RWRnZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmlld0VkZ2UoZWRnZSkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlSWQgPSBlZGdlLnNvdXJjZS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSBlZGdlLnRhcmdldC5pZDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYXBoLmRhdGFTb3VyY2UuaGFzQ2hpbGQoc291cmNlSWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vTm90IGEgY29udGFpbmVyIG5vZGUsIG5lZWQgdG8gYWdncmVnYXRlXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3QgPSB0aGlzLmdlbmVyYXRlTGlzdChzb3VyY2VJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGlzdCA9IFtzb3VyY2VJZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JhcGguZGF0YVNvdXJjZS5oYXNDaGlsZCh0YXJnZXRJZCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9Ob3QgYSBjb250YWluZXIgbm9kZSwgbmVlZCB0byBhZ2dyZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGlzdCA9IHRoaXMuZ2VuZXJhdGVMaXN0KHRhcmdldElkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMaXN0ID0gW3RhcmdldElkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24uZWRnZScsIHsgc291cmNlTmFtZTogc291cmNlSWQsIHRhcmdldE5hbWU6IHRhcmdldElkLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0OiBzb3VyY2VMaXN0LCB0YXJnZXRMaXN0OiB0YXJnZXRMaXN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNlZG93bihkM3BhdGgsIGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdFZGdlKGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFBhdGhDaGFuZ2VWaWV3UG9saWN5O1xuICAgIH0oUG9saWN5LlBvbGljeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQb2xpY3k6IFBhdGhDaGFuZ2VWaWV3UG9saWN5XG4gICAgfTtcbn1dKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBCYXNlIHBvbGljeSBjbGFzcyBmb3IgdGhlIGdyYXBoIG9iamVjdFxuICogXG4gKiBQb2xpY2llcyBhcmUgdXNlZCB0byBpc29sYXRlIGZlYXR1cmVzIGZvciBhIGdyYXBoLlxuICogUG9saWNpZXMgY2FuIGJlIGluc3RhbGxlZCBvbiBub2RlcywgbGlua3MsIG9yIHRoZSBncmFwaC5cbiAqIEVhY2ggcG9saWN5IGhhcyBpbnRlcmFjdGlvbiBoYW5kbGVycyB0aGF0IHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBncmFwaFxuICogaWYgaW5zdGFsbGVkLiBQb2xpY2llcyBjYW4gYWxzbyBtb2RpZnkgZ3JhcGggZnVuY3Rpb25zIChzZWUgUVRpcFBvbGljeSkuXG4gKiBNdWx0aXBsZSBwb2xpY2llcyBjYW4gYmUgaW5zdGFsbGVkIGZvciBhIG5vZGUgb3IgbGluay4gXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIHBvbGljeSwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBwb2xpY3lcbiAqIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIGl0cyBwb2xpY3kuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBQb2xpY3kgYXMga2V5LCBhbmQgXG4gKiBhZGQgdGhlIHBvbGljeSB0byB0aGUgUG9saWN5U2VydmljZSBmYWN0b3J5LlxuICogXG4gKiBGb3Igc2F2aW5nIHN0YXRlIG9yIGNvbnN0cyBmb3IgdGhlIHBvbGljeSwgY3JlYXRlIGEgbmFtZXNwYWNlXG4gKiBpbiBncmFwaC5zdGF0ZSBhbmQgZ3JhcGguY29uc3RzLlxuICogRXguIFxuICogICAgICBncmFwaC5zdGF0ZS5teVBvbGljeSA9IHt9O1xuICogICAgICBncmFwaC5jb25zdHMubXlQb2xpY3kgPSB7fTtcbiAqICAgICAgXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdQb2xpY3knLCBbZnVuY3Rpb24gKCkge1xuICB2YXIgUG9saWN5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBwb2xpY3lOYW1lICBUaGUgcG9saWN5IG5hbWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQb2xpY3kocG9saWN5TmFtZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvbGljeSk7XG5cbiAgICAgIHRoaXMucG9saWN5TmFtZSA9IHBvbGljeU5hbWU7XG4gICAgICB0aGlzLmdyYXBoID0gbnVsbDtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gIHtHcmFwaH0gIGdyYXBoICAgVGhlIEdyYXBoIHRoYXQgdGhlIHBvbGljeSBpc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBpbnN0YWxsZWQgb25cbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKFBvbGljeSwgW3tcbiAgICAgIGtleTogJ2luaXRpYWxpemUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ3JhcGggPSBncmFwaDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVyLCBtZWFudCB0byBiZSBvdmVycmlkZGVuIGluIHN1YmNsYXNzZXNcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtkMyBvYmplY3R9ICAgIGQzb2JqICAgIFRoZSBkM29iamVjdFxuICAgICAgICogQHBhcmFtICB7Tm9kZS9MaW5rL0dyYXBofSAgZCAgIFRoZSBvYmplY3QgaXQgd2FzXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIGZvci4gICAgXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ21vdXNlb3ZlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91c2VvdmVyKGQzb2JqLCBkKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2RibGNsaWNrJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkYmxjbGljayhkM29iaiwgZCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb250ZXh0bWVudScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29udGV4dG1lbnUoZDNvYmosIGQpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiAnbW91c2VvdXQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNlb3V0KGQzb2JqLCBkKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogJ21vdXNlZG93bicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91c2Vkb3duKGQzb2JqLCBkKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogJ21vdXNldXAnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNldXAoZDNvYmosIGQpIHt9XG5cbiAgICAgIC8qKlxuICAgICAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZ3JhcGggaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICogVXNlZCB0byByZW1vdmUgYW55IGVsZW1lbnRzIG9yIGJpbmRpbmdzIHRoZSBwb2xpY3lcbiAgICAgICAqIGhhcyBhZGRlZC5cbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHt9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBvbGljeTtcbiAgfSgpO1xuXG4gIHJldHVybiB7XG4gICAgUG9saWN5OiBQb2xpY3lcbiAgfTtcbn1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2FwcGxpY2F0aW9uZ3JvdXBzJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KVxuICAgIH1dKTtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbnRhaW5zIGFsbCB0aGUgcG9saWNpZXMuXG4gKiBTZWUgcG9saWN5LmpzIGZvciBpbmZvIG9uIGhvdyBwb2xpY2llcyB3b3JrLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJykuZmFjdG9yeSgnUG9saWN5U2VydmljZScsIFsnUG9saWN5JywgJ1FUaXBQb2xpY3knLCAnUGF0aENoYW5nZVZpZXdQb2xpY3knLCAnTm9kZVNlbGVjdGlvblBvbGljeScsICdTcGxpdEpvaW5Ob2RlUG9saWN5JywgJ1NwbGl0Sm9pblZpZXdQb2xpY3knLCAnU2F2ZVN0YXRlUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSwgUVRpcFBvbGljeSwgUGF0aENoYW5nZVZpZXdQb2xpY3ksIE5vZGVTZWxlY3Rpb25Qb2xpY3ksIFNwbGl0Sm9pbk5vZGVQb2xpY3ksIFNwbGl0Sm9pblZpZXdQb2xpY3ksIFNhdmVTdGF0ZVBvbGljeSkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBQb2xpY3kuUG9saWN5LFxuICAgICAgICBRVGlwUG9saWN5OiBRVGlwUG9saWN5LlBvbGljeSxcbiAgICAgICAgUGF0aENoYW5nZVZpZXdQb2xpY3k6IFBhdGhDaGFuZ2VWaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgTm9kZVNlbGVjdGlvblBvbGljeTogTm9kZVNlbGVjdGlvblBvbGljeS5Qb2xpY3ksXG4gICAgICAgIFNwbGl0Sm9pbk5vZGVQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3kuUG9saWN5LFxuICAgICAgICBTcGxpdEpvaW5WaWV3UG9saWN5OiBTcGxpdEpvaW5WaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgU2F2ZVN0YXRlUG9saWN5OiBTYXZlU3RhdGVQb2xpY3kuUG9saWN5XG4gICAgfTtcbn1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5kYXNoYm9hcmQnLCBbJ2NvbnRpdi5tb2RlbHMnXSk7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhpcyBwb2xpY3kgYWRkcyB0b29sdGlwIGZ1bmN0aW9uYWxpdHkgdG8gbm9kZXMgYW5kIGxpbmtzLlxuICogV2hlbiBpbnN0YWxsaW5nLCBpbnN0YWxsIG9uIGJvdGggbGlua3MgYW5kIG5vZGVzLlxuICogXG4gKiBVc2VzIHRoZSBxVGlwIGpRdWVyeSBwbHVnaW5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1FUaXBQb2xpY3knLCBbJ1BvbGljeScsIGZ1bmN0aW9uIChQb2xpY3kpIHtcbiAgICB2YXIgUVRpcFBvbGljeSA9IGZ1bmN0aW9uIChfUG9saWN5JFBvbGljeSkge1xuICAgICAgICBfaW5oZXJpdHMoUVRpcFBvbGljeSwgX1BvbGljeSRQb2xpY3kpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBRVGlwUG9saWN5KCkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFFUaXBQb2xpY3kpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFFUaXBQb2xpY3kpLmNhbGwodGhpcywgXCJRVGlwUG9saWN5XCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgKiBNb2RpZmllcyB0aGUgdXBkYXRlTmV3Tm9kZXMgYW5kIFxuICAgICAgICAgKiB1cGRhdGVOZXdQYXRocyBtZXRob2Qgb2YgdGhlIGdyYXBoIHRvIGluc3RhbGwgcXRpcFxuICAgICAgICAgKiBvbnRvIGVhY2ggbm9kZSBhbmQgcGF0aC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIG9uXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFFUaXBQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihRVGlwUG9saWN5LnByb3RvdHlwZSksICdpbml0aWFsaXplJywgdGhpcykuY2FsbCh0aGlzLCBncmFwaCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuUVRpcFBvbGljeSA9IHt9O1xuXG4gICAgICAgICAgICAgICAgc3RhdGUubW91c2Vkb3duID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBncmFwaC5jb25zdHMuUVRpcFBvbGljeSA9IHt9O1xuXG4gICAgICAgICAgICAgICAgLy9UcmFja2luZyBtb3VzZSBjbGljayBzdGF0ZSB0byBtYWtlIHRvb2x0aXBcbiAgICAgICAgICAgICAgICAvL2Rpc2FwcGVhciBpZiB0aGUgbm9kZSBpcyBiZWluZyBkcmFnZ2VkLlxuICAgICAgICAgICAgICAgICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykubW91c2V1cChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZXVwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL292ZXJyaWRlIHVwZGF0ZU5ld05vZGVzIGFuZCB1cGRhdGVOZXdQYXRoc1xuICAgICAgICAgICAgICAgIC8vdG8gaW5zdGFsbCBxdGlwXG4gICAgICAgICAgICAgICAgdmFyIGdyYXBoVXBkYXRlTmV3Tm9kZXMgPSBncmFwaC51cGRhdGVOZXdOb2RlcztcbiAgICAgICAgICAgICAgICBncmFwaC51cGRhdGVOZXdOb2RlcyA9IGZ1bmN0aW9uIChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBncmFwaFVwZGF0ZU5ld05vZGVzLmNhbGwoZ3JhcGgsIG5ld05vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBncmFwaFVwZGF0ZU5ld1BhdGhzID0gZ3JhcGgudXBkYXRlTmV3UGF0aHM7XG4gICAgICAgICAgICAgICAgZ3JhcGgudXBkYXRlTmV3UGF0aHMgPSBmdW5jdGlvbiAobmV3UGF0aHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhVcGRhdGVOZXdQYXRocy5jYWxsKGdyYXBoLCBuZXdQYXRocyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlTmV3UGF0aHMobmV3UGF0aHMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyBhbGwgcVRpcHMgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHBvbGljeSBpcyB1bmluc3RhbGxlZCBvclxuICAgICAgICAgICAgICogdGhlIGdyYXBoIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmluZyBhbGwgcXRpcCBmcm9tIERPTVxuICAgICAgICAgICAgICAgICQoJ1tpZF49XCJxdGlwXCJdJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2VlcGluZyB0cmFjayBvZiBtb3VzZWRvd24gc3RhdGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNPYmplY3R9ICBkM29iaiAgVGhlIGQzIHBiamVjdFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGUvTGlua30gIGQgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZWRvd24oZDNvYmosIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuUVRpcFBvbGljeTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZWRvd24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtlZXBpbmcgdHJhY2sgb2YgbW91c2Vkb3duIHN0YXRlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzT2JqZWN0fSAgZDNvYmogIFRoZSBkMyBwYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlL0xpbmt9ICBkICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ21vdXNldXAnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNldXAoZDNvYmosIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuUVRpcFBvbGljeTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZWRvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnd2hlblFUaXBBdmFpbGFibGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdoZW5RVGlwQXZhaWxhYmxlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IDUwMDsgLy8gbXNcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGRvY3VtZW50KS5xdGlwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzUG9saWN5LndoZW5RVGlwQXZhaWxhYmxlKGNhbGxiYWNrKSwgaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIE5ldyBOb2RlcyBhcmUgYWRkZWQgZHVyaW5nIHRoZVxuICAgICAgICAgICAgICogdXBkYXRlIGdyYXBoIGZ1bmN0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzTm9kZX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzIHRoYXQgYXJlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndXBkYXRlTmV3Tm9kZXMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU5ld05vZGVzKG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhdHRhY2hRVGlwKCkge1xuICAgICAgICAgICAgICAgICAgICAvL2F0dGFjaGluZyBxdGlwXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGVzLmVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0lmIG5vZGUgaGFzIGNoaWxkcmVuLCB0aGVuIGl0IGlzIGEgc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtkLmlkXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiPGI+PHU+U2VsZWN0b3JzOjwvYj48L3U+IFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rvck1hcCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnNlbGVjdG9yc1tkLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzS2V5cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxlY3Rvck1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNLZXlzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBrZXkgKyBcIiA6IDxpPlwiICsgc2VsZWN0b3JNYXBba2V5XSArIFwiPC9pPixcXG4gXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNLZXlzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbW1hIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gXCJObyBTZWxlY3RvcnMsIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiPGI+PHU+TGFiZWxzOjwvYj48L3U+IFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHNNYXAgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5sYWJlbHNbZC5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0tleXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbGFiZWxzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0tleXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGtleSArIFwiIDogPGk+XCIgKyBsYWJlbHNNYXBba2V5XSArIFwiPC9pPixcXG4gXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNLZXlzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbW1hIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gXCJObyBsYWJlbHMsIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGxhc3QgY29tbWFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzTm9kZSkucXRpcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBpID0gJCh0aGlzTm9kZSkucXRpcCgnYXBpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJCgnI2dyYXBoQ29udGFpbmVyJykub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBbb2Zmc2V0LmxlZnQgKyAoZC54ICogdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzBdKSwgb2Zmc2V0LnRvcCArIChkLnkgKyBkLnJhZGl1cykgKiB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnNldCgncG9zaXRpb24udGFyZ2V0JywgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzdGF0ZS5tb3VzZWRvd247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvbG86ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6ICdxdGlwLWJsdWUgcXRpcC1zaGFkb3cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteTogJ3RvcCBjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2JvdHRvbSBjZW50ZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhcmdldDogcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdtb3VzZWRvd24gbW91c2VsZWF2ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vaW5jYXNlIGxpYnJhcnkgaGFzbid0IGxvYWRlZCB5ZXRcbiAgICAgICAgICAgICAgICBpZiAoJChkb2N1bWVudCkucXRpcCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoUVRpcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hlblFUaXBBdmFpbGFibGUoYXR0YWNoUVRpcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIG5ldyBwYXRocyBhcmUgYWRkZWQgZHVyaW5nIHRoZVxuICAgICAgICAgICAgICogdXBkYXRlIGdyYXBoIGZ1bmN0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzUGF0aH0gIG5ld1BhdGhzICBUaGUgbmV3IHBhdGhzIHRoYXQgYXJlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndXBkYXRlTmV3UGF0aHMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU5ld1BhdGhzKG5ld1BhdGhzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAvL2luY2FzZSBsaWJyYXJ5IGhhc24ndCBsb2FkZWQgeWV0XG4gICAgICAgICAgICAgICAgaWYgKCQoZG9jdW1lbnQpLnF0aXAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYWRkaW5nIHF0aXBcbiAgICAgICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNQYXRoID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0dGluZyBtaWRwb2ludCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aEVsID0gZDMuc2VsZWN0KHRoaXMpLm5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaWRwb2ludCA9IHBhdGhFbC5nZXRQb2ludEF0TGVuZ3RoKHBhdGhFbC5nZXRUb3RhbExlbmd0aCgpIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmV0ID0gZC5xdGlwSGVscGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IFwiQnl0ZXM6IFwiICsgZC5nZXRXZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpc1BhdGgpLnF0aXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG1vdXNlIGlzIGRvd24sIGRvbid0IGxldCBxdGlwIHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhc3RhdGUubW91c2Vkb3duO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2xvOiAkKCcjZ3JhcGhDb250YWluZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogJ3F0aXAtYmx1ZSBxdGlwLXNoYWRvdydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15OiB0YXJnZXRSZXQubXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0OiAnY2VudGVyIGNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogJ21vdXNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRqdXN0OiB0YXJnZXRSZXQuYWRqdXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnbW91c2Vkb3duIG1vdXNlbGVhdmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFFUaXBQb2xpY3k7XG4gICAgfShQb2xpY3kuUG9saWN5KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIFBvbGljeTogUVRpcFBvbGljeVxuICAgIH07XG59XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubG9naW4nLCBbJ2NvbnRpdi51dGlscyddKTtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IHByb3ZpZGVzIGEgd2F5IGZvciBwcm9wZXJ0aWVzIHRvIGJlIHNhdmVkIFxuICogYmV0d2VlbiB2aWV3IGNoYW5nZXNcbiAqIFxuICogSXQgbW9kaWZpZXMgdGhlIGRlc3Ryb3kgZnVuY3Rpb24gdG8gYWxzbyBwYXNzIGluIGFuIG9iamVjdCB0aGF0XG4gKiB3aWxsIGhhdmUgYWxsIGl0cyBwcm9wZXJ0aWVzIHNhdmVkIGFuZCB3aWxsIGJlIGF2YWlsYWJsZSBcbiAqIG9uIGdyYXBoIGxvYWQuIFdoZW4gc2F2aW5nIHZhcmlhYmxlcyB0byB0aGUgb2JqZWN0LCBuYW1lc3BhY2Ugd2l0aFxuICogdGhlIHBvbGljeSBuYW1lLlxuICogXG4gKiBUaGlzIHBvbGljeSBtdXN0IGJlIGxvYWRlZCBmaXJzdCBpbiBvcmRlciBmb3IgaXQgc2F2ZWQgdmFyaWFibGVzIFxuICogdG8gYmUgbG9hZGVkIHdoZW4gdGhlIHZpZXcgY29tZXMgYmFjayB0byB0aGUgZ3JhcGhcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1NhdmVTdGF0ZVBvbGljeScsIFsnUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSkge1xuICAgIHZhciBTYXZlU3RhdGVQb2xpY3kgPSBmdW5jdGlvbiAoX1BvbGljeSRQb2xpY3kpIHtcbiAgICAgICAgX2luaGVyaXRzKFNhdmVTdGF0ZVBvbGljeSwgX1BvbGljeSRQb2xpY3kpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUYWtlcyBpbiB0aGUgYW5ndWxhciBzZXJ2aWNlIHRvIHdoaWNoIGl0IHdpbGxcbiAgICAgICAgICogc2F2ZSBpdCdzIHByb3BlcnRpZXMgdG8uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBPYmplY3QgdG8gc2F2ZSBcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgdG9cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFNhdmVTdGF0ZVBvbGljeShzYXZlZFN0YXRlKSB7XG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F2ZVN0YXRlUG9saWN5KTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNhdmVTdGF0ZVBvbGljeSkuY2FsbCh0aGlzLCAnU2F2ZVN0YXRlUG9saWN5JykpO1xuXG4gICAgICAgICAgICBfdGhpcy5zYXZlZFN0YXRlID0gc2F2ZWRTdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgKiBNb2RpZmllcyB0aGUgZGVzdHJveSBtZXRob2QgXG4gICAgICAgICAqIGFuZCBhZGRzIGEgbG9hZCBtZXRob2QgdG8gdGhlIGdyYXBoXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhTYXZlU3RhdGVQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICBncmFwaC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LmdyYXBoRGVzdHJveS5jYWxsKGdyYXBoLCB0aGlzUG9saWN5LnNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBncmFwaC5sb2FkID0gZnVuY3Rpb24gKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS5ncmFwaExvYWQuY2FsbChncmFwaCwgc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIG92ZXJyaWRlIHRoZSBncmFwaCdzIGRlZmF1bHQgZGVzdHJveSwgd2l0aCBcbiAgICAgICAgICAgICAqIHRoaXMgcG9saWN5J3Mgc2F2ZWRTdGF0ZSBwYXNzZWQgaW4uXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2l0aCB0aGlzIGFzIHRoZSBncmFwaFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBUaGUgc2F2ZWQgc3RhdGVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2dyYXBoRGVzdHJveScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JhcGhEZXN0cm95KHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzR3JhcGguYmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9mZihrZXksIHRoaXNHcmFwaC5iaW5kaW5nc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZ3JhcGggYXMgdGhpc1xuICAgICAgICAgICAgICogVXNlZCB0byBoYXZlIGFsbCBvdGhlciBwb2xpY2llcyB1c2UgdGhlIGxvYWQgc3RhdGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgc2F2ZWRTdGF0ZSAgVGhlIHNhdmVkIHN0YXRlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdncmFwaExvYWQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdyYXBoTG9hZChzYXZlZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kubG9hZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3kubG9hZChzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LmxvYWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5LmxvYWQoc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBTYXZlU3RhdGVQb2xpY3k7XG4gICAgfShQb2xpY3kuUG9saWN5KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIFBvbGljeTogU2F2ZVN0YXRlUG9saWN5XG4gICAgfTtcbn1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tZW51JywgW10pO1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGlzIHBvbGljeSBpcyB1c2VkIGZvciBzcGxpdHRpbmcgYSBub2RlIGludG8gaXRzIGNoaWxkcmVuLFxuICogYW5kIGpvaW5pbmcgdGhlbSBiYWNrIHRvIHRoZWlyIHBhcmVudC5cbiAqIFNwbGl0cyBvbiBkb3VibGUgY2xpY2ssIGFuZCBqb2lucyBvbiByaWdodCBjbGljay5cbiAqIElmIG11bHRpcGxlIG5vZGVzIGFyZSBzZWxlY3RlZCBhdCB0aGUgdGltZSBvZiBhIHNwbGl0IG9yIGpvaW4gZXZlbnQsXG4gKiBpdCB3aWxsIHNwbGl0IG9yIGpvaW4gYWxsIG9mIHRoZW0uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdTcGxpdEpvaW5Ob2RlUG9saWN5JywgWydOb2RlU2VsZWN0aW9uUG9saWN5JywgJ1Zpc3VhbGl6ZXJOb2RlJywgZnVuY3Rpb24gKE5vZGVTZWxlY3Rpb25Qb2xpY3ksIFZpc3VhbGl6ZXJOb2RlKSB7XG4gICAgdmFyIFNwbGl0Sm9pbk5vZGVQb2xpY3kgPSBmdW5jdGlvbiAoX05vZGVTZWxlY3Rpb25Qb2xpY3kkKSB7XG4gICAgICAgIF9pbmhlcml0cyhTcGxpdEpvaW5Ob2RlUG9saWN5LCBfTm9kZVNlbGVjdGlvblBvbGljeSQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBTcGxpdEpvaW5Ob2RlUG9saWN5KCkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNwbGl0Sm9pbk5vZGVQb2xpY3kpO1xuXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3BsaXRKb2luTm9kZVBvbGljeSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgICAgIF90aGlzLnBvbGljeU5hbWUgPSBcIlNwbGl0Sm9pbk5vZGVQb2xpY3lcIjtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFNwbGl0Sm9pbk5vZGVQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihTcGxpdEpvaW5Ob2RlUG9saWN5LnByb3RvdHlwZSksICdpbml0aWFsaXplJywgdGhpcykuY2FsbCh0aGlzLCBncmFwaCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNwbGl0Tm9kZXMgPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmlnZ2VyaW5nIHNwbGl0IG9uIGRvdWJsZSBjbGlja1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgVGhlIG1hdGNoaW5nIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkYmxjbGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGJsY2xpY2soZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcblxuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE11bHRpcGxlTm9kZXMoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsU2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE5vZGUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlcmluZyBqb2luIG9uIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqfSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2NvbnRleHRtZW51JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb250ZXh0bWVudShkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3VwZXJTdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuICAgICAgICAgICAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFkMy5ldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdHJ5IHRvIGpvaW4gYSBoaWdobGlnaHRlZCBub2RlIHdoaWxlIG11bHRpcGxlIG5vZGVzIGFyZSBzZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgLy93ZSBqb2luIGFsbCBoaWdobGlnaHRlZCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWROb2RlcyA9IHN1cGVyU3RhdGUuc2VsZWN0ZWROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkTm9kZXMuaW5kZXhPZihkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmpvaW5Ob2RlKHNlbGVjdGVkTm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB3ZSB0cnkgdG8gam9pbiBhIG5vZGUgdGhhdCBpc24ndCBwYXJ0IG9mIGEgaGlnaGxpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy93ZSByZW1vdmUgYWxsIGhpZ2hsaWdodHMgYW5kIHRoZW4gam9pbiB0aGUgY2xpY2tlZCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuam9pbk5vZGUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BsaXRzIGEgbm9kZS5cbiAgICAgICAgICAgICAqIHVzZWQgdG8gc2hhcmUgY29kZSBiZXR3ZWVuIHNwbGl0Tm9kZSBhbmQgc3BsaXRNdWx0aXBsZU5vZGVzXG4gICAgICAgICAgICAgKiB3aGlsZSBwcmV2ZW50aW5nIHRoZSBoYW5kbGVycyBmb3IgdGhlbSBib3RoIGZpcmluZ1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5vZGUgICAgVGhlIG5vZGUgYmVpbmcgc3BsaXRcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtBcnJheX0gIFRoZSBuZXcgbm9kZXMgY3JlYXRlZCBieSB0aGUgc3BsaXRcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ19fc3BsaXROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX3NwbGl0Tm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pbk5vZGVQb2xpY3k7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBub2RlLmlkO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgLy9pZiBpdCBoYXMgbm8gY2hpbGRyZW4gdG8gc3BsaXQgaW50b1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0gPT09IHVuZGVmaW5lZCB8fCBfLmlzRW1wdHkoY2hpbGRyZW5fc3RydWN0W25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9yZW1vdmluZyB0aGUgbm9kZSBmcm9tIHRoZSBsaXN0IG9mIG5vZGVzXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gXy5maWx0ZXIodGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAoZ3JhcGhOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JhcGhOb2RlcyAhPSBub2RlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlKTtcblxuICAgICAgICAgICAgICAgIC8vZ2V0dGluZyBhbGwgdGhlIG5vZGUgaWQncyBmb3IgZmluZGluZyBmbG93XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVfbmFtZXNfc2V0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzR3JhcGgubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9uYW1lc19zZXQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0uaWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc2V0IG9mIG5vZGVzIGFmdGVyIHRoZSBzcGxpdFxuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuX3N0cnVjdFtuYW1lXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKGNoaWxkcmVuX3N0cnVjdFtuYW1lXVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld19ub2Rlcy5wdXNoKGNoaWxkcmVuX3N0cnVjdFtuYW1lXVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXREYXRhID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lc19zZXQpO1xuXG4gICAgICAgICAgICAgICAgLy9mb3JtYXR0aW5nIGRhdGEgZm9yIG5ldyBub2Rlc1xuICAgICAgICAgICAgICAgIHZhciB4TG9jID0gbm9kZS54O1xuICAgICAgICAgICAgICAgIHZhciB5TG9jID0gbm9kZS55O1xuICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBub2RlLmFuY2VzdG9ycy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIC8va2VlcGluZyBvcmRlcmluZyB0aGF0IGZpcnN0IGluIGFuY2VzdG9yIGxpc3QgaXMgY2xvc2VzdCBpbiByZWxhdGlvbnNoaXBcbiAgICAgICAgICAgICAgICBhbmNlc3RvcnMuc3BsaWNlKDAsIDAsIG5vZGUuaWQpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLmlkO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZV9vYmpzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG5vZGUucmFkaXVzICogdGhpc0dyYXBoLmNvbnN0cy5yYWRpdXNEZWNheTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZURhdGEgPSByZXREYXRhLm5vZGVEYXRhO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jYWxjdWxhdGluZyB3aGljaCBvZiB0aGUgbm9kZXMgaW4gcmV0RGF0YVswXSBhcmUgbmV3XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdfbm9kZXMuaW5kZXhPZihub2RlRGF0YVtpXS5pZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gbm9kZURhdGFbaV0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IG5vZGVEYXRhW2ldLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZShudWxsLCBudWxsLCBpZCwgdGV4dCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycywgeExvYywgeUxvYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZS5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMucHVzaChuZXdfbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZV9vYmpzLnB1c2gobmV3X25vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YShyZXREYXRhLmxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0Tm9kZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5zcGxpdE5vZGVzLnB1c2gobm9kZS5pZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld19ub2RlX29ianM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BsaXRzIHRoZSBnaXZlIG5vZGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5vZGUgICAgVGhlIG5vZGUgYmVpbmcgc3BsaXRcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NwbGl0Tm9kZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fX3NwbGl0Tm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0Tm9kZUV2ZW50KHJlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BsaXRzIGFsbCB0aGUgbm9kZXMgcGFzc2VkIGluXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICBBcnJheSBvZiBub2RlcyB0byBiZSBzcGxpdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc3BsaXRNdWx0aXBsZU5vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpdE11bHRpcGxlTm9kZXMobm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzTm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fc3BsaXROb2RlKG5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzTm9kZXMgPSByZXNOb2Rlcy5jb25jYXQocmVzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0TXVsdGlwbGVOb2Rlc0V2ZW50KHJlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIGEgc2luZ2xlIG5vZGUgaXMgc3BsaXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc3BsaXROb2RlRXZlbnQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0Tm9kZUV2ZW50KG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNldFBvc2l0aW9ucygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBhZnRlciBtdWx0aXBsZSBub2RlcyBhcmUgc3BsaXQgYXQgb25jZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpdE11bHRpcGxlTm9kZXNFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXRNdWx0aXBsZU5vZGVzRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc2V0UG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogdXNlZCB0byBzaGFyZSBjb2RlIGJldHdlZW4gam9pbk5vZGUgYW5kIGpvaW5NdWx0aXBsZU5vZGVcbiAgICAgICAgICAgICAqIHdoaWxlIHByZXZlbnRpbmcgYm90aCBoYW5kbGVycyBmaXJpbmdcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgICAgIG5vZGUgICAgVGhlIG5vZGUgdG8gam9pblxuICAgICAgICAgICAgICogQHJldHVybiAgICAge05vZGV9ICBUaGUgbmV3IG5vZGUgYWZ0ZXIgdGhlIGpvaW5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ19fam9pbk5vZGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9fam9pbk5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5Ob2RlUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayB0aGF0IG5vZGUgc3RpbGwgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG5vZGUpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBhbmNlc3Rvciwgbm90aGluZyB0byBqb2luXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbC5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0b19iZV9kZWxldGVkID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVfbmFtZXNfc2V0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzR3JhcGgubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBub2RlIHdvbid0IGJlIGNvbGxhcHNlZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLm5vZGVzW2ldLmFuY2VzdG9ycy5pbmRleE9mKG5vZGUucGFyZW50KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZV9uYW1lc19zZXQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9fYmVfZGVsZXRlZC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlX2lkID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgbm9kZV9uYW1lc19zZXQucHVzaChub2RlLnBhcmVudCk7XG5cbiAgICAgICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0YVxuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBub2RlLnJhZGl1cyAvIHRoaXNHcmFwaC5jb25zdHMucmFkaXVzRGVjYXk7XG4gICAgICAgICAgICAgICAgdmFyIHhMb2MgPSBub2RlLng7XG4gICAgICAgICAgICAgICAgdmFyIHlMb2MgPSBub2RlLnk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUuYW5jZXN0b3JzWzFdO1xuICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBub2RlLmFuY2VzdG9ycy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZSh4TG9jLCB5TG9jLCBuZXdfbm9kZV9pZCwgbmV3X25vZGVfaWQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5wdXNoKG5ld19ub2RlKTtcblxuICAgICAgICAgICAgICAgIHZhciByZXREYXRhID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lc19zZXQpO1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBub2RlcyB0aGF0IHdpbGwgYmUgam9pbmVkXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b19iZV9kZWxldGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlX3RvX2RlbGV0ZSA9IHRvX2JlX2RlbGV0ZWRbaV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5zcGxpY2UodGhpc0dyYXBoLm5vZGVzLmluZGV4T2Yobm9kZV90b19kZWxldGUpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlX3RvX2RlbGV0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YShyZXREYXRhLmxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0Tm9kZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5zcGxpdE5vZGVzLnNwbGljZShzdGF0ZS5zcGxpdE5vZGVzLmluZGV4T2YobmV3X25vZGUuaWQpLCAxKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfbm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBKb2lucyB0aGUgZ2l2ZW4gbm9kZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdqb2luTm9kZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbk5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gdGhpcy5fX2pvaW5Ob2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5qb2luTm9kZUV2ZW50KG5ld05vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBKb2lucyBhbGwgdGhlIGdpdmVuIG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICBUaGUgbm9kZXMgdG8gam9pblxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnam9pbk11bHRpcGxlTm9kZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbk11bHRpcGxlTm9kZShub2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fam9pbk5vZGUobm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZXMucHVzaChyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmpvaW5NdWx0aXBsZU5vZGVzRXZlbnQobmV3X25vZGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBqb2luZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5ld05vZGUgIFRoZSBuZXcgbm9kZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnam9pbk5vZGVFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbk5vZGVFdmVudChuZXdOb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIG11bHRpcGxlIG5vZGVzIGFyZSBqb2luZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnam9pbk11bHRpcGxlTm9kZXNFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbk11bHRpcGxlTm9kZXNFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFNwbGl0Sm9pbk5vZGVQb2xpY3k7XG4gICAgfShOb2RlU2VsZWN0aW9uUG9saWN5LlBvbGljeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3lcbiAgICB9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL25ldHdvcmtwb2xpY2llcycsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaXNvbGF0aW9uJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9iYW5kd2lkdGgnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVpLXZpZXcvPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5yZWRpcmVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvcmVkaXJlY3Rpb24nLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVpLXZpZXcvPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSk7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhpcyBwb2xpY3kgaXMgdXNlZCB0byBjaGFuZ2UgdGhlIHZpZXcgdG8gZm9jdXMgb24gc3BsaXR0aW5nIGFuZCBcbiAqIGpvaW5pbmcgZXZlbnRzLlxuICogT3ZlcnJpZGVzIHRoZSBjZXJ0YWluIGZvcmNlIGxheW91dCBmdW5jdGlvbnMgb2YgdGhlIGdyYXBoIHRvIHBhcnRpdGlvbiBhIHNwbGl0XG4gKiBpbnRvIHRoZSBmb2N1c2VkIG5vZGVzIGFuZCB0aGUgY29ubmVjdGVkIG5vZGVzLlxuICogXG4gKiBIYXMgc2F2ZS9sb2FkIG1ldGhvZHMgZm9yIHRoZSBzYXZlIHN0YXRlIHBvbGljeS5cbiAqIEhhcyBiYWNrIGJ1dHRvbiBzdXBwb3J0LlxuICogQ2FuIGF1dG8gY2hhbmdlIHRoZSB0aXRsZSBvZiB0aGUgZ3JhcGguXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdTcGxpdEpvaW5WaWV3UG9saWN5JywgWydTcGxpdEpvaW5Ob2RlUG9saWN5JywgJ1Zpc3VhbGl6ZXJOb2RlJywgZnVuY3Rpb24gKFNwbGl0Sm9pbk5vZGVQb2xpY3ksIFZpc3VhbGl6ZXJOb2RlKSB7XG4gICAgdmFyIFNwbGl0Sm9pblZpZXdQb2xpY3kgPSBmdW5jdGlvbiAoX1NwbGl0Sm9pbk5vZGVQb2xpY3kkKSB7XG4gICAgICAgIF9pbmhlcml0cyhTcGxpdEpvaW5WaWV3UG9saWN5LCBfU3BsaXRKb2luTm9kZVBvbGljeSQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBTcGxpdEpvaW5WaWV3UG9saWN5KCkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNwbGl0Sm9pblZpZXdQb2xpY3kpO1xuXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3BsaXRKb2luVmlld1BvbGljeSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgICAgIF90aGlzLnBvbGljeU5hbWUgPSBcIlNwbGl0Sm9pblZpZXdQb2xpY3lcIjtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFNwbGl0Sm9pblZpZXdQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihTcGxpdEpvaW5WaWV3UG9saWN5LnByb3RvdHlwZSksICdpbml0aWFsaXplJywgdGhpcykuY2FsbCh0aGlzLCBncmFwaCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNhdmVkU3RhdGVzID0gW107XG4gICAgICAgICAgICAgICAgLy8gc3RhdGUuZm9jdXNHcm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5ID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2NpID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbXMgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXREZWZhdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS56b29tRGVmYXVsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHZhciBjb25zdHMgPSBncmFwaC5jb25zdHMuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnN0cy5ib3VuZGFyeSA9IDAuODtcblxuICAgICAgICAgICAgICAgIC8vb3ZlcnJpZGluZyBkM2ZvcmNlIG1ldGhvZHMgb2YgdGhlIGdyYXBoLlxuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VCb3VuZHMgPSB0aGlzLmQzRm9yY2VCb3VuZHM7XG4gICAgICAgICAgICAgICAgZ3JhcGguZDNGb3JjZVRpY2sgPSB0aGlzLmQzRm9yY2VUaWNrO1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VTdGFydCA9IHRoaXMuZDNGb3JjZVN0YXJ0O1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VFbmQgPSB0aGlzLmQzRm9yY2VFbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGlua3MgdGhlIHByb3ZpZGVkIGVsZW1lbnQgYSBiYWNrIGJ1dHRvbiBmZWF0dXJlXG4gICAgICAgICAgICAgKiBEb2Vzbid0IHRyaWdnZXIgdGhlIG9uLWNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgKiBUaGF0IHNob3VsZCBiZSBkb25lIHRocm91Z2ggYW5ndWxhciBuZy1jbGljay5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7alF1ZXJ5fSAgZWxlbSAgICBUaGUganF1ZXJ5IHNlbGVjdGVkIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luc3RhbGxCYWNrQnV0dG9uJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsQmFja0J1dHRvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0gPSBlbGVtO1xuICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51bmRvTGFzdEV2ZW50LmNhbGwodGhpc1BvbGljeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgYWxsb3cgdGhpcyBwb2xpY3kgdG8gY2hhbmdlIHRoZSB0aXRsZSBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIGFzIHNwbGl0IGFuZCBqb2luIGV2ZW50cyBvY2N1ci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7alF1ZXJ5fSAgZWxlbSAgICBUaGUganF1ZXJ5IHNlbGVjdGVkIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luc3RhbGxUaXRsZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbFRpdGxlKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbSA9IGVsZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBBbnkgcHJvcGVydHkgb24gdGhpc1xuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCB3aWxsIGJlIGFjY2Vzc2libGVcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSB2aWV3IHJlbG9hZHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vT25seSBpZiB0aGUgc2F2ZSBzdGF0ZSBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAgICAgICAgaWYgKHNhdmVkU3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgc2F2ZSB0aGUgY3VycmVudCBzdGF0ZSwgYW5kIGFsbCBoaXN0b3J5LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBBbnkgcHJvcGVydHkgb24gdGhpc1xuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCB3aWxsIGJlIGFjY2Vzc2libGVcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSB2aWV3IHJlbG9hZHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NhdmUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgICAgIHZhciBsaW5rcyA9IHRoaXNHcmFwaC5saW5rcztcbiAgICAgICAgICAgICAgICB2YXIgY3VyclRpdGxlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyclRpdGxlID0gc3RhdGUudGl0bGVFbGVtLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzR3JvdXBzID0gc3RhdGUuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SGlzdG9yeSA9IHN0YXRlLmV2ZW50SGlzdG9yeTtcbiAgICAgICAgICAgICAgICB2YXIgem9vbXMgPSBzdGF0ZS56b29tcztcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0ID0gc3RhdGUubGF5b3V0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGxheW91dERlZmF1bHQgPSBzdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgIHZhciB6b29tRGVmYXVsdCA9IHN0YXRlLnpvb21EZWZhdWx0O1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB7IG5vZGVzOiBub2RlcywgbGlua3M6IGxpbmtzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IHN0YXRlLnNhdmVkU3RhdGVzLCBjdXJyVGl0bGU6IGN1cnJUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNHcm91cHM6IGZvY3VzR3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICBldmVudEhpc3Rvcnk6IGV2ZW50SGlzdG9yeSwgem9vbXM6IHpvb21zLFxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dCwgbGF5b3V0RGVmYXVsdDogbGF5b3V0RGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgem9vbURlZmF1bHQ6IHpvb21EZWZhdWx0IH07XG4gICAgICAgICAgICAgICAgc2F2ZWRTdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5ID0gcmV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHJlbG9hZGVkLCBhc3N1bWluZ1xuICAgICAgICAgICAgICogc2F2ZSBzdGF0ZSBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGxvYWRTdGF0ZSAgQ29udGFpbnMgYWxsIHRoZSBzYXZlZFxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdsb2FkJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKGxvYWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIGxvYWRTdGF0ZSA9IGxvYWRTdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNhdmVkU3RhdGVzID0gbG9hZFN0YXRlLnN0YXRlcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSBsb2FkU3RhdGUubGlua3M7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbG9hZFN0YXRlLm5vZGVzO1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJUaXRsZSA9IGxvYWRTdGF0ZS5jdXJyVGl0bGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbS50ZXh0KGN1cnJUaXRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeSA9IGxvYWRTdGF0ZS5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMgPSBsb2FkU3RhdGUuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbXMgPSBsb2FkU3RhdGUuem9vbXM7XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0ID0gbG9hZFN0YXRlLmxheW91dDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXREZWZhdWx0ID0gbG9hZFN0YXRlLmxheW91dERlZmF1bHQ7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbURlZmF1bHQgPSBsb2FkU3RhdGUuem9vbURlZmF1bHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYmFja0J1dHRvbkVsZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtLmZhZGVUbygnc2xvdycsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dLCBkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImZvY3VzXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vbG9hZGluZyBhIHByZXZpb3VzIGxheW91dFxuICAgICAgICAgICAgICAgIHZhciBsYXlvdXQ7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQgPSBzdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHN0YXRlLnpvb21EZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9sYXlvdXQgY2FuJ3QgYmUgbnVsbFxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBsYXlvdXRbbi5pZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGF5b3V0LCBuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuLnggPSBwb3MueDtcbiAgICAgICAgICAgICAgICAgICAgbi55ID0gcG9zLnk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLmluaXRGb3JjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoLmNhbGwodGhpc0dyYXBoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyaWdnZXJpbmcgc3BsaXQgb24gZG91YmxlIGNsaWNrXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEZvY3VzIGdyb3VwIHN0b3JlcyB0aGUgbm9kZSB0aGF0IGlzIGFib3V0IHRvIGJlIHNwbGl0LlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBXaGVuIGZvY3VzIGdyb3VwIGhhcyBsZW5ndGggMCwgdGhlIGZpcnN0IHNwbGl0IFxuICAgICAgICAgICAgICogd2lsbCBqdXN0IGJlIHB1c2hlZCBvbi5cbiAgICAgICAgICAgICAqIFRoZSBub2RlIHdpbGwgYmUgc3BsaXQgYW5kIHB1c2hlZCB0byB0aGUgdG9wIGhhbGYgXG4gICAgICAgICAgICAgKiBvZiB0aGUgc2NyZWVuLCBhbmQgdGhlIGJvdHRvbSBoYWxmIHdpbGwgY29udGFpbiBhbnlcbiAgICAgICAgICAgICAqIG5vZGVzIGl0IGhhcyBjb25uZWN0aW9ucyB0by5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogV2hlbiBhIGZvY3VzIGdyb3VwIGxlbmd0aCBpcyA+PSAxLCBpZiB0aGUgbm9kZSB0byBiZVxuICAgICAgICAgICAgICogc3BsaXQgaXMgYSBmb2N1cyBub2RlLCBpdCB3aWxsIHJlcGxhY2UgZm9jdXNHcm91cHNbMF0gYW5kXG4gICAgICAgICAgICAgKiB0aGUgdG9wIGhhbGYgd2lsbCBiZSBpdHMgY2hpbGRyZW4sIGFuZCBib3R0b20gaGFsZiB3aWxsXG4gICAgICAgICAgICAgKiBiZSB0aGUgbm9kZXMgaXQgaGFzIGNvbm5lY3Rpb25zIHRvLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBJZiB0aGUgc3BsaXQgaXMgaW4gdGhlIGJvdHRvbSBoYWxmLCB0aGVuIHRoZSBib3R0b20gaGFsZlxuICAgICAgICAgICAgICogd2lsbCBkaXNwbGF5IGl0J3MgY2hpbGRyZW4gYW5kIHdpbGwgb25seSBzaG93IGNvbm5lY3Rpb25zIGJldHdlZW5cbiAgICAgICAgICAgICAqIHRoZSB0d28gZ3JvdXBzLCBhbmQgd2lsbCByZXBsYWNlIGZvY3VzR3JvdXBzWzFdLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmp9ICAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkYmxjbGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGJsY2xpY2soZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGNhbiBzcGxpdFxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZC5pZDtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0gPT09IHVuZGVmaW5lZCB8fCBfLmlzRW1wdHkoY2hpbGRyZW5fc3RydWN0W25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMuc2xpY2UoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy90b3BsZXZlbCBzcGxpdFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwcy5wdXNoKGQuaWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dLCBkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAvL3NwbGl0dGluZyBhIGZvY3VzIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbMF0gPSBkLmlkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BsaXR0aW5nIGFcbiAgICAgICAgICAgICAgICAgICAgLy9jb25uZWN0ZWQgbm9kZVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwcy5wdXNoKGQuaWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMV1dLCBkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAvL3NwbGl0dGluZyBhXG4gICAgICAgICAgICAgICAgICAgIC8vY29ubmVjdGVkIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbMV0gPSBkLmlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDIgJiYgc3RhdGUuZm9jdXNHcm91cHNbMV0gPT09IGQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9TcGxpdHRpbmcgYSBjb25uZWN0ZWQgbm9kZSwga2VlcCBhbGwgZm9jdXMgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzVG9LZWVwID0gW2RdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUlkc1RvUmVzaG93ID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cE9uZU5vZGVzID0gY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGdyb3VwT25lTm9kZXMsIG5vZGUuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobm9kZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0tlZXAucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9NYWtlIHNwbGl0IG5vZGVzIHRoZSBmb2N1cyBhbmQga2VlcCBub2RlcyB0aGF0IGFyZSBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzVG9LZWVwID0gW2RdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUlkc1RvUmVzaG93ID0gW107XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluay5zb3VyY2UgPT09IGQgJiYgbm9kZUlkc1RvUmVzaG93LmluZGV4T2YobGluay50YXJnZXQuaWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay50YXJnZXQuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsudGFyZ2V0LlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobGluay50YXJnZXQuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobGluay50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rLnRhcmdldCA9PT0gZCAmJiBub2RlSWRzVG9SZXNob3cuaW5kZXhPZihsaW5rLnNvdXJjZS5pZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLnNvdXJjZS5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5zb3VyY2UuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzVG9SZXNob3cucHVzaChsaW5rLnNvdXJjZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0tlZXAucHVzaChsaW5rLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vUmVtb3ZpbmcgbGlua3MgZnJvbSB0aGUgbm9kZSB0byBiZSBzcGxpdFxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaWQgIT09IGQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcblxuICAgICAgICAgICAgICAgIC8vZGlzYWJsaW5nIHVwZGF0ZSBncmFwaCB0byBwcmV2ZW50IG5ldyBkYXRhIGZyb21cbiAgICAgICAgICAgICAgICAvL3JlZHJhd2luZyBsaW5rcyB3aGlsZSB0aGVyZSBhcmUgYW5pbWF0aW9ucyBnb2luZyBvblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5kaXNhYmxlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmlkICE9PSBkLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmRlbGF5KDIwMCkuZHVyYXRpb24oNDAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Rpc2FibGluZyBxdGlwIGlmIGluc3RhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykucXRpcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5xdGlwKCdkaXNhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpO1xuICAgICAgICAgICAgICAgIHZhciB4TG9jID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwid2lkdGhcIikpIC8gc2NhbGUgLyAyICsgdHJhbnNsYXRlWzBdO1xuICAgICAgICAgICAgICAgIHZhciB5TG9jID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwiaGVpZ2h0XCIpKSAvIHNjYWxlIC8gMiArIHRyYW5zbGF0ZVsxXTtcbiAgICAgICAgICAgICAgICBkLnhTdGFydCA9IGQueDtcbiAgICAgICAgICAgICAgICBkLnlTdGFydCA9IGQueTtcbiAgICAgICAgICAgICAgICBkLnggPSB4TG9jO1xuICAgICAgICAgICAgICAgIGQueSA9IHlMb2M7XG4gICAgICAgICAgICAgICAgZDNub2RlLnRyYW5zaXRpb24oXCJub2RlUG9zaXRpb25UcmFuc2l0aW9uXCIpLmR1cmF0aW9uKDc1MCkuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4U3RhcnQgPSBkLnhTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHlTdGFydCA9IGQueVN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBkLnhTdGFydCA9IGQueDtcbiAgICAgICAgICAgICAgICAgICAgZC55U3RhcnQgPSBkLnk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkMy5pbnRlcnBvbGF0ZVN0cmluZyhcInRyYW5zbGF0ZShcIiArIHhTdGFydCArIFwiLFwiICsgeVN0YXJ0ICsgXCIpXCIsIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BsaXROb2RlRnVuYyA9IF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFNwbGl0Sm9pblZpZXdQb2xpY3kucHJvdG90eXBlKSwgJ3NwbGl0Tm9kZScsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVJZHNUb1Jlc2hvdyA9IG5vZGVJZHNUb1Jlc2hvdztcbiAgICAgICAgICAgICAgICAvL3dhaXRpbmcgZm9yIG5vZGUgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbm9kZXNUb0tlZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0Tm9kZUZ1bmMuY2FsbCh0aGlzUG9saWN5LCBkKTtcbiAgICAgICAgICAgICAgICB9LCA3NTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIGJlIGNhbGxlZCBhZnRlciB0aGUgZ3JhcGggaXMgc3BsaXQuXG4gICAgICAgICAgICAgKiBCcmluZ3MgYWxsIG5vZGVzIGJhY2sgaW50byB2aWV3IGFuZCBzZXRzIHRoZWlyIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZUdyYXBoQ2FsbGJhY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUdyYXBoQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNDAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiZm9jdXNcIiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImNvbm5lY3RlZFwiLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuU3BsaXRKb2luVmlld1BvbGljeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiZm9jdXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiZm9jdXNcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJjb25uZWN0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVJZHNUb1Jlc2hvdyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYW5kb21seSBzZXRzIHRoZSBwb3NpdGlvbnMgb2YgYW55IHVuc2V0IG5vZGVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NldFBvc2l0aW9ucycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UG9zaXRpb25zKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhDb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGdyYXBoQ29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB0aGlzUG9saWN5LmQzRm9yY2VCb3VuZHMuY2FsbCh0aGlzR3JhcGgpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUueCA9PSBudWxsIHx8IG5vZGUueSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGdldFJhbmRvbUludChub2RlLnJhZGl1cyArIG9mZnNldCwgcmV0LndpZHRoIC0gbm9kZS5yYWRpdXMgLSBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBnZXRSYW5kb21JbnQobm9kZS5yYWRpdXMgKyBvZmZzZXQsIHJldC5oZWlnaHQgLSBub2RlLnJhZGl1cyAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS55ID0geTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgc3RhcnQgb2YgdGhlIGQzIGZvcmNlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIFdpbGwgb3ZlcnJpZGUgdGhlIG1ldGhvZCBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIFwidGhpc1wiIHBvaW50cyB0byB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VTdGFydCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmF0dHIoJ2N4JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQueFN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQueFN0YXJ0ID0gZC54U3RhcnQgKiB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCdjeScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLnlTdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnlTdGFydCA9IGQueVN0YXJ0ICogdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgb24gdGhlIHN0YXJ0IG9mIHRoZSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKiBXaWxsIG92ZXJyaWRlIHRoZSBtZXRob2Qgb2YgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBcInRoaXNcIiBwb2ludHMgdG8gdGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlRW5kJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlRW5kKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kgPSBzdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZVBvbGljeS5sYXlvdXREZWZhdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRMYXlvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYXlvdXRbbi5pZF0gPSB7IHg6IG4ueCwgeTogbi55IH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS5sYXlvdXREZWZhdWx0ID0gZGVmYXVsdExheW91dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS56b29tRGVmYXVsdCA9IFt0cmFuc2xhdGUsIHNjYWxlXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5hdHRyKCdjeCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cignY3knLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC55O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzLmF0dHIoJ3gxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueTtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd4MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2lsbCBiZSBjYWxsZWQgZHVyaW5nIEQzIGZvcmNlIHNpbXVsYXRpb25zXG4gICAgICAgICAgICAgKiBieSB0aGUgZ3JhcGgsIHNvIFwidGhpc1wiIHdpbGwgcG9pbnQgdG8gdGhlIGdyYXBoIG9iamVjdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB3aWR0aCAgIEQzIExheW91dCBXaWR0aFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGhlaWdodCAgRDMgTGF5b3V0IEhlaWdodFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZDNGb3JjZVRpY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGQzRm9yY2VUaWNrKGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5ID0gc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBjb25zdHMuZGlzcGxheU9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gTW92ZSBub2RlcyB0b3dhcmQgY2x1c3RlciBmb2N1cy5cbiAgICAgICAgICAgICAgICB2YXIgZm9jaSA9IHN0YXRlUG9saWN5LmZvY2k7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ3Jhdml0eShhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2NpLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9PT0gXCJmb2N1c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSArPSAoZm9jaVswXSAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gKGZvY2lbMV0gLSBkLnkpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueCArPSAod2lkdGggLyAyIC0gZC54KSAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gKGhlaWdodCAvIDIgLSBkLnkpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54ICs9ICh3aWR0aCAvIDIgLSBkLngpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG5vZGVzIGFyZSB3aXRoaW4gYm91bmRzXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMuZWFjaCh0aGlzLmQzRm9yY2VDb2xsaWRlKC41KSkuZWFjaChncmF2aXR5KC4yICogZS5hbHBoYSkpLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC54ID0gTWF0aC5tYXgoKGQucmFkaXVzICsgb2Zmc2V0KSAvIHNjYWxlLCBNYXRoLm1pbih3aWR0aCArICgtb2Zmc2V0IC0gZC5yYWRpdXMpIC8gc2NhbGUsIGQueCkpO1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5ID09IG51bGwgfHwgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQueSA9IE1hdGgubWF4KChkLnJhZGl1cyArIG9mZnNldCkgLyBzY2FsZSwgTWF0aC5taW4oaGVpZ2h0ICsgKC1vZmZzZXQgLSBkLnJhZGl1cykgLyBzY2FsZSwgZC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC55O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImZvY3VzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQueSA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbigoaGVpZ2h0ICsgKC1vZmZzZXQgLSBkLnJhZGl1cykgLyBzY2FsZSkgKiBjb25zdHMuU3BsaXRKb2luVmlld1BvbGljeS5ib3VuZGFyeSwgZC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC55O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnkgPSBNYXRoLm1heCgoaGVpZ2h0ICsgKG9mZnNldCAtIGQucmFkaXVzKSAvIHNjYWxlKSAqIGNvbnN0cy5TcGxpdEpvaW5WaWV3UG9saWN5LmJvdW5kYXJ5LCBNYXRoLm1pbihoZWlnaHQgKyAoLW9mZnNldCAtIGQucmFkaXVzKSAvIHNjYWxlLCBkLnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocy5hdHRyKCd4MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLnk7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneDInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogV2lsbCBiZSBjYWxsZWQgZHVyaW5nIEQzIGZvcmNlIHNpbXVsYXRpb25zXG4gICAgICAgICAgICAgKiBieSB0aGUgZ3JhcGgsIHNvIFwidGhpc1wiIHdpbGwgcG9pbnQgdG8gdGhlIGdyYXBoIG9iamVjdFxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgICAgICAgICBSZXR1cm5zIGFuIG9iamVjdFxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBoYXMgdGhlIHdpZHRoXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgaGVpZ2h0IGFzIFxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyBcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VCb3VuZHMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGQzRm9yY2VCb3VuZHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHNQb2xpY3kgPSBjb25zdHMuU3BsaXRKb2luVmlld1BvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kgPSBzdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjTWF4Tm9kZXMod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IHdpZHRoICogaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgLy90cmVhdGluZyB0aGVtIGFzIGEgc3F1YXJlIGZvciBhcHByb3hcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJhZGl1cyAqIDMuNTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IGFyZWEgLyAobGVuZ3RoICogbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9UaGUgb2Zmc2V0IGlzIHRoZSBidWZmZXIgZnJvbSB0aGUgZWRnZXNcbiAgICAgICAgICAgICAgICAvL09yaWdpbmFsIFdpZHRoIGFuZCBIZWlnaHQgYXJlIGdpdmVuIHRvIHRoZSBmb3JjZSBsYXlvdXRcbiAgICAgICAgICAgICAgICAvL3NvIHRoYXQgaXQgaXMgY2VudGVyZWQsIGJ1dCBub2RlcyB3aWxsIGJlIGZvcmNlZCB0byBiZVxuICAgICAgICAgICAgICAgIC8vd2l0aGluIHRoZSBvZmZzZXQgYm91bmRzXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9IHBhcnNlRmxvYXQodGhpc0dyYXBoLnN2Zy5zdHlsZShcIndpZHRoXCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwiaGVpZ2h0XCIpKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gY2FsY01heE5vZGVzKHdpZHRoIC0gMiAqIG9mZnNldCwgaGVpZ2h0IC0gMiAqIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID4gYW1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gYW1vdW50IC8gbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLCBzY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoIC89IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgLz0gc2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKSwgc2NhbGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRpbmcgZm9jaSBmb3Igc2ltdWxhdGlvblxuICAgICAgICAgICAgICAgIHZhciBmb2N1c0dyb3VwcyA9IHN0YXRlUG9saWN5LmZvY3VzR3JvdXBzO1xuICAgICAgICAgICAgICAgIHZhciBmb2NpO1xuICAgICAgICAgICAgICAgIGlmIChmb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jaSA9IFtoZWlnaHQgLyAyXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3NldHRpbmcgZm9jaSBoZWlnaHQgcG9zaXRpb24gYmFzZWQgb24gcGVyY2VudGFnZVxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNOb2RlcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtmb2N1c0dyb3Vwc1swXV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9IGZvY3VzTm9kZXMubGVuZ3RoIC8gbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gaGVpZ2h0ICogY29uc3RzUG9saWN5LmJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm90ID0gaGVpZ2h0IC0gdG9wO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wIDwgMiAqIHRoaXNHcmFwaC5jb25zdHMubWF4UmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHNQb2xpY3kuYm91bmRhcnkgPSAyLjUgKiB0aGlzR3JhcGguY29uc3RzLm1heFJhZGl1cyAvIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGhlaWdodCAqIGNvbnN0c1BvbGljeS5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdCA9IGhlaWdodCAtIHRvcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm90IDwgMiAqIHRoaXNHcmFwaC5jb25zdHMubWF4UmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHNQb2xpY3kuYm91bmRhcnkgPSAxIC0gMi41ICogdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMgLyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBoZWlnaHQgKiBjb25zdHNQb2xpY3kuYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3QgPSBoZWlnaHQgLSB0b3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9jaSA9IFt0b3AgLyAyLCB0b3AgKyBib3QgLyAyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kuZm9jaSA9IGZvY2k7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBhZnRlciBhIHNpbmdsZSBub2RlIGlzIHNwbGl0XG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpdE5vZGVFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXROb2RlRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChuZXdOb2RlcywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV0sIGQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gbmV3Tm9kZXNbMF0ucGFyZW50O1xuICAgICAgICAgICAgICAgIC8vIHN0YXRlLmZvY3VzR3JvdXAgPSB0aXRsZTtcblxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGxhc3QgZXZlbnQgaGFzIHRoZSBzYW1lIGlkLCBpdCBtdXN0IGJlIHRoZVxuICAgICAgICAgICAgICAgIC8vb3BwcG9zaXRlIG9mIHRoaXMgZXZlbnQsIHNvIHdlIHJlbW92ZSB0aGF0IGV2ZW50IGZyb21cbiAgICAgICAgICAgICAgICAvL3RoZSBldmVudCBzdGFjay5cbiAgICAgICAgICAgICAgICAvL090aGVyd2lzZSwgd2UgYWRkIHRoZSBldmVudCBvdCB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAhPT0gMCAmJiBzdGF0ZS5ldmVudEhpc3Rvcnlbc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAtIDFdLmlkID09PSB0aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5LnB1c2goeyBpZDogdGl0bGUsIGV2ZW50OiAnc3BsaXQnIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5iYWNrQnV0dG9uRWxlbSAhPSBudWxsICYmIHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0uZmFkZVRvKCdzbG93JywgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gc3RhdGUuZm9jdXNHcm91cHNbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSAnICYgJyArIHN0YXRlLmZvY3VzR3JvdXBzWzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbS50ZXh0KHRleHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vcmUtZW5hYmxlIGdyYXBoIHVwZGF0ZVxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5kaXNhYmxlVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpc1BvbGljeS5zZXRMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXRzIHRoZSBsYXlvdXQgb2YgdGhlIG5vZGVzLiBcbiAgICAgICAgICAgICAqIElmIHRoZXJlIGlzIGEgcHJldmlvdXMgbGF5b3V0LCBpdCB3aWxsIGJlIGxvYWRlZC5cbiAgICAgICAgICAgICAqIEVsc2UsIGl0IHdpbGwgcnVuIGEgRDMgRm9yY2Ugc2ltdWxhdGlvbiBhbmQgY3JlYXRlIG9uZS5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NldExheW91dCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGF5b3V0KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gc3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSBzdGF0ZS56b29tRGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh6b29tWzBdLCB6b29tWzFdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHN0YXRlLnpvb21zW3N0YXRlLmZvY3VzR3JvdXBzXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHpvb20gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh6b29tWzBdLCB6b29tWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQgPSBzdGF0ZS5sYXlvdXRbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChsYXlvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGxheW91dFtuLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxheW91dCwgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnggPSBwb3MueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ueSA9IHBvcy55O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoLmNhbGwodGhpc0dyYXBoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZUdyYXBoQ2FsbGJhY2suY2FsbCh0aGlzUG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9OZWVkIHRvIHJ1biBhIGZvcmNlIHNpbXVsYXRpb24gYXMgdGhpcyBsYXlvdXRcbiAgICAgICAgICAgICAgICAgICAgLy9oYXNuJ3QgYmVlbiBkb25lIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUuaW5pdEZvcmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXNQb2xpY3kuc2V0UG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZUdyYXBoQ2FsbGJhY2suY2FsbCh0aGlzUG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnpvb21zW3N0YXRlLmZvY3VzR3JvdXBzXSA9IFt0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKSwgdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXlvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFtuLmlkXSA9IHsgeDogbi54LCB5OiBuLnkgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc10gPSBsYXlvdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE92ZXJyaWRpbmcgZnJvbSBzdXBlciBjbGFzcyBzbyB0aGF0IHdlIGNhbiBoYXZlXG4gICAgICAgICAgICAgKiB0b3AgbGV2ZWwgbm9kZXMgcmVhcHBlYXIgd2hlbiB0aGV5IGFyZSBoaWRkZW5cbiAgICAgICAgICAgICAqIGR1ZSB0byB0aGVyZSBiZWluZyB0d28gZm9jdXMgZ3JvdXBzLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICAgICAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gIFRoZSBuZXcgbm9kZSBhZnRlciB0aGUgam9pblxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnX19qb2luTm9kZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX19qb2luTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlU3VwZXIgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhhdCBub2RlIHN0aWxsIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgLy9pZiBpdCBoYXMgbm8gYW5jZXN0b3IsIG5vdGhpbmcgdG8gam9pblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHRvX2JlX2RlbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWVTZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG5vZGUgd29uJ3QgYmUgY29sbGFwc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXNbaV0uYW5jZXN0b3JzLmluZGV4T2Yobm9kZS5wYXJlbnQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b19iZV9kZWxldGVkLnB1c2godGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVfaWQgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICBub2RlTmFtZVNldC5wdXNoKG5vZGUucGFyZW50KTtcblxuICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnNfc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuYW5jZXN0b3JzX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIC8vIC0gc2V0dGluZyBmb2N1c0dyb3VwcyAtXG4gICAgICAgICAgICAgICAgLy9laXRoZXIgcmVwbGFjaW5nIG9uZSBvZiB0aGUgZ3JvdXBzLFxuICAgICAgICAgICAgICAgIC8vb3Igam9pbmluZyBiYWNrIGludG8gYSB0b3AgbGV2ZWwsIHNvIHRoZXJlIGlzIG9ubHlcbiAgICAgICAgICAgICAgICAvL29uZSBmb2N1c1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmZvY3VzR3JvdXBzLmluZGV4T2YocGFyZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3JzX3N0cnVjdFtwYXJlbnRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbaW5kZXhdID0gYW5jZXN0b3JzX3N0cnVjdFtwYXJlbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9uYW1lVG9BZGQgYXJlIHRvcCBsZXZlbCBub2RlcyB0aGF0IGFyZSB0byBiZSBhZGRlZFxuICAgICAgICAgICAgICAgIC8vdG8gdGhlIGdyYXBoLlxuICAgICAgICAgICAgICAgIHZhciBuYW1lVG9BZGQgPSBbXTtcbiAgICAgICAgICAgICAgICAvL3dpbGwgb25seSBuZWVkIHRvIGFkZCBhIHRvcCBsZXZlbCBub2RlIGlmIHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgLy9vbmx5IG9uZSBmb2N1c1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgb25seSB0aG9zdCB0aGF0IGFyZW4ndCBhbiBhbmNlc3RvciBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgICAgICAgICAvL3RvIGpvaW4sIHRoZSBmb2N1cyBncm91cCBvciBhbiBhbmNlc3RvciBvZiBpdCxcbiAgICAgICAgICAgICAgICAgICAgLy9hbmQgYXJlbid0IGFscmVhZHkgaW4gbm9kZU5hbWVTZXQuXG4gICAgICAgICAgICAgICAgICAgIC8vZ2V0IGZsb3cgYmV0d2VlbiB0b3AgbGV2ZWwgYXMgbG9uZyBhc1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSB0b3AgbGV2ZWwgaXNuJ3QgYW4gYW5jZXN0b3Igb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vZm9jdXMgZ3JvdXAsIGFuZCBpc24ndCBhbHJlYWR5IHBhcnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vbm9kZSBzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBhbmNlc3RvcnNfc3RydWN0W25vZGUuaWRdO1xuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMucHVzaChzdGF0ZS5mb2N1c0dyb3Vwc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG9yIGVtcHR5IGFycmF5IGlzIHRvIHByZXZlbnQgY29uY2F0ZW5hdGluZyBhIG51bGxcbiAgICAgICAgICAgICAgICAgICAgLy9vciB1bmRlZmluZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzID0gYW5jZXN0b3JzLmNvbmNhdChhbmNlc3RvcnNfc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3JzLmluZGV4T2YobikgPT09IC0xICYmIG5vZGVOYW1lU2V0LmluZGV4T2YobikgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0ID0gbm9kZU5hbWVTZXQuY29uY2F0KG5hbWVUb0FkZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9ubyBmb2N1cyBncm91cHMgbWVhbnMgd2UgYXJlIGF0IHRvcCBsZXZlbFxuICAgICAgICAgICAgICAgICAgICAvL1Nob3VsZCBhZGQgYW55IHRvcCBsZXZlbCBub2RlcyB0aGF0IGFyZW4ndFxuICAgICAgICAgICAgICAgICAgICAvL2FscmVhZHkgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZVNldC5pbmRleE9mKG4pID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldCA9IG5vZGVOYW1lU2V0LmNvbmNhdChuYW1lVG9BZGQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRhXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG5vZGUucmFkaXVzIC8gdGhpc0dyYXBoLmNvbnN0cy5yYWRpdXNEZWNheTtcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5hbmNlc3RvcnNbMV07XG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IG5vZGUuYW5jZXN0b3JzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gbmV3IFZpc3VhbGl6ZXJOb2RlLk5vZGUoeExvYywgeUxvYywgbmV3X25vZGVfaWQsIG5ld19ub2RlX2lkLCByYWRpdXMsIHBhcmVudCwgYW5jZXN0b3JzKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMucHVzaChuZXdOb2RlKTtcblxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBub2RlcyB0aGF0IHdpbGwgYmUgam9pbmVkXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b19iZV9kZWxldGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlX3RvX2RlbGV0ZSA9IHRvX2JlX2RlbGV0ZWRbaV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5zcGxpY2UodGhpc0dyYXBoLm5vZGVzLmluZGV4T2Yobm9kZV90b19kZWxldGUpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlX3RvX2RlbGV0ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlTmFtZVNldCk7XG4gICAgICAgICAgICAgICAgLy9ob2xkcyB0aGUgbm9kZURhdGEgd2hpY2ggd2lsbCBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXNUb1Byb2Nlc3MgPSBbXTtcbiAgICAgICAgICAgICAgICAvL2ZpbmRpbmcgdGhlIG5vZGUgZGF0YSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSB0b3AgbGV2ZWxcbiAgICAgICAgICAgICAgICAvL25vZGVzIHRvIGFkZCAtIG5hbWVUb0FkZC5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZURhdGEgPSByZXREYXRhLm5vZGVEYXRhO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVUb0FkZC5pbmRleE9mKG5vZGVEYXRhW2ldLmlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9Qcm9jZXNzLnB1c2gobm9kZURhdGFbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9UaGUgdG9wIGxldmVsIG5vZGVzIHRoYXQgYXJlIGFkZGVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGVzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc05vZGVEYXRhKG5vZGVzVG9Qcm9jZXNzKTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobmV3Tm9kZXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgIG4ucmFkaXVzID0gbi5yYWRpdXMgfHwgdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSB0aGlzR3JhcGgubm9kZXMuY29uY2F0KG5ld05vZGVzKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YShyZXREYXRhLmxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIC8vT25seSBrZWVwIHRvcCBsZXZlbCBub2RlcyB0aGF0IGhhdmUgY29ubmVjdGlvbnMgdG9cbiAgICAgICAgICAgICAgICAvL3RoZSBjdXJyZW50IGZvY3VzIGdyb3VwXG4gICAgICAgICAgICAgICAgLy93ZSByZW1vdmUgdGhlIG5vZGUgbmFtZSBmcm9tIG5hbWVUb0FkZCBpZiB3ZSBhcmVcbiAgICAgICAgICAgICAgICAvL2tlZXBpbmcgaXRcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIHRoZXJlIGV4aXN0cyBhIGxpbmsgdG91Y2hpbmcgZWFjaCBvZiBuYW1lVG9BZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQuaW5kZXhPZihsLnNvdXJjZS5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzWzBdID09PSBsLnRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZihsLnNvdXJjZS5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZVRvQWRkLmluZGV4T2YobC50YXJnZXQuaWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwc1swXSA9PT0gbC5zb3VyY2UucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZC5zcGxpY2UobmFtZVRvQWRkLmluZGV4T2YobC50YXJnZXQuaWQpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vV2Ugd2FudCB0byBrZWVwIHRoZW0gYWxsXG4gICAgICAgICAgICAgICAgICAgIC8vc2luY2UgYW55IGxlZnQgaW4gbmFtZVRvQWRkIHdpbGwgYmUgcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgLy93ZSByZXNldCBuYW1lVG9BZGQgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy93aGF0ZXZlciBpcyByZW1haW5pbmcgaW4gbmFtZVRvQWRkIGlzbid0IGNvbm5lY3RlZFxuICAgICAgICAgICAgICAgIC8vdG8gdGhlIGZvY3VzIGdyb3VwLCBzbyB3ZSBzaG91bGQgcmVtb3ZlIGl0LlxuICAgICAgICAgICAgICAgIHZhciBub2RlVG9SZW1vdmUgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVUb0FkZC5pbmRleE9mKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZih0aGlzR3JhcGgubm9kZXNbaV0uaWQpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKHRoaXNHcmFwaC5ub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVtb3ZlLnB1c2godGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5vZGVUb1JlbW92ZSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihuKSwgMSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgc3RhdGVTdXBlci5zcGxpdE5vZGVzLnNwbGljZShzdGF0ZVN1cGVyLnNwbGl0Tm9kZXMuaW5kZXhPZihuZXdOb2RlLmlkKSwgMSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBqb2luZWRcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogSWYgdGhlIGZvY3VzIGdyb3VwIGhhcyBiZWVuIHNlZW4gYmVmb3JlLCBpdCB3aWxsXG4gICAgICAgICAgICAgKiBsb2FkIHRoYXQgbGF5b3V0LiBPdGhlcndpc2UsIGl0IHdpbGwgcnVuIGEgZDMgZm9yY2VcbiAgICAgICAgICAgICAqIHNpbXVsYXRpb24gdG8gZ2VuZXJhdGUgb25lLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbmV3Tm9kZSAgVGhlIG5ldyBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdqb2luTm9kZUV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luTm9kZUV2ZW50KG5ld05vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHRoZSBsYXN0IGV2ZW50IGhhcyB0aGUgc2FtZSBpZCwgaXQgbXVzdCBiZSB0aGVcbiAgICAgICAgICAgICAgICAvL29wcHBvc2l0ZSBvZiB0aGlzIGV2ZW50LCBzbyB3ZSByZW1vdmUgdGhhdCBldmVudCBmcm9tXG4gICAgICAgICAgICAgICAgLy90aGUgZXZlbnQgc3RhY2suXG4gICAgICAgICAgICAgICAgLy9PdGhlcndpc2UsIHdlIGFkZCB0aGUgZXZlbnQgdG8gdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggIT09IDAgJiYgc3RhdGUuZXZlbnRIaXN0b3J5W3N0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggLSAxXS5pZCA9PT0gbmV3Tm9kZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5LnB1c2goeyBpZDogbmV3Tm9kZS5pZCwgZXZlbnQ6ICdqb2luJyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV0sIGQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9zZXR0aW5nIGJhY2sgYnV0dG9uXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJhY2tCdXR0b25FbGVtICE9IG51bGwgJiYgc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbS5mYWRlVG8oJ3Nsb3cnLCAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3NldHRpbmcgdGl0bGVcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBzdGF0ZS5mb2N1c0dyb3Vwc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9ICcgJiAnICsgc3RhdGUuZm9jdXNHcm91cHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtLnRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kuc2V0TGF5b3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVW5kb2VzIHRoZSBsYXN0IHNwbGl0IG9yIGpvaW4gZXZlbnQuXG4gICAgICAgICAgICAgKiBNZWFudCB0byBiZSBjYWxsZWQgYnkgdGhlIGJhY2sgYnV0dG9uLlxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndW5kb0xhc3RFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5kb0xhc3RFdmVudCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHN0YXRlLmV2ZW50SGlzdG9yeVtzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbGFzdC5pZDtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdC5ldmVudCA9PT0gJ2pvaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzR3JhcGguZmluZE5vZGVCeUlkKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQzbm9kZSA9IHRoaXNHcmFwaC5maW5kRDNOb2RlKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS5kYmxjbGljayhkM25vZGUsIG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlSWQgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbaWRdWzBdO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gdGhpc0dyYXBoLmZpbmROb2RlQnlJZChub2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihTcGxpdEpvaW5WaWV3UG9saWN5LnByb3RvdHlwZSksICdqb2luTm9kZScsIHRoaXMpLmNhbGwodGhpc1BvbGljeSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgfShTcGxpdEpvaW5Ob2RlUG9saWN5LlBvbGljeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pblZpZXdQb2xpY3lcbiAgICB9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbmV0d29ya3MnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9ub2RlcycsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICAgICAgfSlcbiAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYub3JnYW5pemF0aW9ucycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51Lm9yZ2FuaXphdGlvbnMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvb3JnYW5pemF0aW9ucycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2VydmljZWxicycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2VydmljZWxicycsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICAgICAgfSlcbiAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2V0dGluZ3MnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXHJcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2dsb2JhbCcsXHJcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3NldHRpbmdzJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2V0dGluZ3Mvc2V0dGluZ3NtZW51Lmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5sb2dzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ3MnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLmF1dGgnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMubGljZW5zZScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9saWNlbnNlJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5wb2xpY2llcycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9wb2xpY2llcycsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc3RvcmFnZXBvbGljaWVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zdG9yYWdlcG9saWNpZXMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnLCBcblx0J2NvbnRpdi5ncmFwaCddKVxuIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbicsIHtcbiAgICAgICAgICAgIHVybDogJy92aXN1YWxpemF0aW9uJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZvbHVtZXMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3ZvbHVtZXMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gRGVjbGFyZSBhcHAgbGV2ZWwgbW9kdWxlIHdoaWNoIGRlcGVuZHMgb24gdmlld3MsIGFuZCBjb21wb25lbnRzXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2QXBwJywgW1xuICAgICAgICAndWkucm91dGVyJyxcbiAgICAgICAgJ2NvbnRpdi5sb2dpbicsXG4gICAgICAgICdjb250aXYubWVudScsXG4gICAgICAgICdjb250aXYuZGFzaGJvYXJkJyxcbiAgICAgICAgJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycsXG4gICAgICAgICdjb250aXYubmV0d29ya3MnLFxuICAgICAgICAnY29udGl2Lm5ldHdvcmtwb2xpY2llcycsXG4gICAgICAgICdjb250aXYuc3RvcmFnZXBvbGljaWVzJyxcbiAgICAgICAgJ2NvbnRpdi5zZXJ2aWNlbGJzJyxcbiAgICAgICAgJ2NvbnRpdi52b2x1bWVzJyxcbiAgICAgICAgJ2NvbnRpdi5ub2RlcycsXG4gICAgICAgICdjb250aXYub3JnYW5pemF0aW9ucycsXG4gICAgICAgICdjb250aXYuc2V0dGluZ3MnLFxuICAgICAgICAnY29udGl2LnZpc3VhbGl6YXRpb24nXG4gICAgXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgLy9hYnN0cmFjdCBzdGF0ZSBzZXJ2ZXMgYXMgYSBQTEFDRUhPTERFUiBvciBOQU1FU1BBQ0UgZm9yIGFwcGxpY2F0aW9uIHN0YXRlc1xuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGZsdWlkIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzExLzE2LlxuICovXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTAvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuYXBwbGljYXRpb25ncm91cHMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5jcmVhdGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsIGFzIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcGxpY2F0aW9uZ3JvdXBzL2FwcGxpY2F0aW9uZ3JvdXBjcmVhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwnLCBbXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLFxuICAgICAgICAnTmV0d29ya3NNb2RlbCcsXG4gICAgICAgICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLFxuICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbCxcbiAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwubmV0d29ya3MgPSBbXTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXAgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLnNlbGVjdGVkTmV0d29yayA9IHt9O1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwubW9kZSA9IFwiZWRpdFwiO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvQXBwbGljYXRpb25Hcm91cCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBuZXR3b3JrcyBmb3IgdGhlIGdpdmVuIHRlbmFudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0d29ya3MoKSB7XG4gICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwubmV0d29ya3MgPSBfLmZpbHRlcihyZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZW5hbnROYW1lJzogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgLy9mb3JtIGNvbnRyb2xsZXIgaXMgaW5qZWN0ZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXAubmV0d29ya05hbWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuc2VsZWN0ZWROZXR3b3JrLm5ldHdvcmtOYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXAua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2VuZXJhdGVLZXkoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYXBwbGljYXRpb25Hcm91cCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIGFwcGxpY2F0aW9uR3JvdXAgY29uc2lzdCBvZiBHcm91cCBOYW1lLCBOZXR3b3JrIE5hbWUsIElzb2xhdGlvbiBQb2xpY2llcywgQmFuZHdpZHRoIFBvbGljeVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuY3JlYXRlKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXApLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYXBwbGljYXRpb25Hcm91cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBOYW1lOiAnJywgICAgICAgICAgLy8gRm9yIEdyb3VwIE5hbWVcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6ICcnLCAgICAgICAgLy8gRm9yIE5ldHdvcmsgTmFtZVxuICAgICAgICAgICAgICAgICAgICBwb2xpY2llczogW10sICAgICAgICAgICAvLyBGb3IgSXNvbGF0aW9uIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgICAgIG5ldFByb2ZpbGU6ICcnLCAgICAgICAgIC8vIEZvciBCYW5kd2lkdGggcG9saWN5IE5hbWVcbiAgICAgICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXROZXR3b3JrcygpO1xuXG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5jcmVhdGVBcHBsaWNhdGlvbkdyb3VwID0gY3JlYXRlQXBwbGljYXRpb25Hcm91cDtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG5cbiAgICAgICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgICB9XSk7XG4gLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzE1LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsIGFzIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRpdC86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsIGFzIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwnLCBbXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLFxuICAgICAgICAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLFxuICAgICAgICAgICAgICAgICAgJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbCxcbiAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXAgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5zZWxlY3RlZE5ldHdvcmsgPSB7fTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyBzaG93IGVkaXQgb3IgZGV0YWlscyBzY3JlZW4gYmFzZWQgb24gdGhlIHJvdXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZGV0YWlscycsIHsna2V5JzogYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXAua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwRGV0YWlscygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVBcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbC5kZWxldGUoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXApLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvQXBwbGljYXRpb25Hcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmVBcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLnNhdmUoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXApLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblRvQXBwbGljYXRpb25Hcm91cERldGFpbHMoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXAgPSBncm91cDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLnNhdmVBcHBsaWNhdGlvbkdyb3VwID0gc2F2ZUFwcGxpY2F0aW9uR3JvdXA7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuY2FuY2VsRWRpdGluZyA9IGNhbmNlbEVkaXRpbmc7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuZGVsZXRlQXBwbGljYXRpb25Hcm91cCA9IGRlbGV0ZUFwcGxpY2F0aW9uR3JvdXA7XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuYXBwbGljYXRpb25ncm91cHMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXBwbGljYXRpb25Hcm91cExpc3RDdHJsIGFzIGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwbGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwnLFxuICAgICAgICBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgQXBwbGljYXRpb25Hcm91cHNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cExpc3RDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFwcGxpY2F0aW9uR3JvdXBzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybC5ncm91cHMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cExpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3Qgc3RhcnQgYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzI4LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dkJhbmR3aWR0aHBvbGljeVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG1vZGU6XCI9XCIsXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25ncm91cDonPSdcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgICAgICAgICAnTmV0cHJvZmlsZXNNb2RlbCcsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTmV0cHJvZmlsZXNNb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV0UHJvZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTmV0cHJvZmlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeTp7fVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBHZXQgcHJvZmlsZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXROZXRwcm9maWxlcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ldFByb2ZpbGVzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZW5hbnROYW1lJzogJ2RlZmF1bHQnICAgICAgICAvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLm5ldFByb2ZpbGUgIT09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTmV0cHJvZmlsZS5wb2xpY3kgPSBfLmZpbmQoJHNjb3BlLm5ldFByb2ZpbGVzLGZ1bmN0aW9uKHBvbGljeSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9saWN5LnByb2ZpbGVOYW1lID09PSAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5uZXRQcm9maWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBBc3NpZ24gcHJvZmlsZU5hbWUgdG8gYXBwbGljYXRpb25ncm91cCB3aGljaGV2ZXIgdXNlciBoYXMgZ2l2ZW4gXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQXBwbGljYXRpb25ncm91cCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuc2VsZWN0ZWROZXRwcm9maWxlLnBvbGljeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLm5ldFByb2ZpbGUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLm5ldFByb2ZpbGUgPSAkc2NvcGUuc2VsZWN0ZWROZXRwcm9maWxlLnBvbGljeS5wcm9maWxlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZ2V0TmV0cHJvZmlsZXMoKTtcbiAgICAgICAgICAgIH1dLFxuXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcGxpY2F0aW9uZ3JvdXBzL2JhbmR3aWR0aHBvbGljeS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuXG5cbi8qKlxuICogQ3JlYXRlZCBieSBoYXJkaWsgZ2FuZGhpIG9uIDcvOC8xNi5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5hcHBsaWNhdGlvbmdyb3Vwc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZJc29sYXRpb25wb2xpY3lcIixmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm57XG4gICAgICAgICAgICByZXN0cmljdDonRScsXG4gICAgICAgICAgICBzY29wZTp7XG4gICAgICAgICAgICAgICAgbW9kZTonPScsXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25ncm91cDonPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsXG4gICAgICAgICAgICAgICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgICAgICAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLFxuICAgICAgICAgICAgICAgICdQb2xpY2llc01vZGVsJyxcbiAgICAgICAgICAgICAgICAnUnVsZXNNb2RlbCcsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZVBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluY29taW5nUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm91dGdvaW5nUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUG9saWN5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5Ont9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFBvbGljaWVzID0gW107ICAgICAgICAgICAvLyBUbyBTdG9yZSBwb2xpY2llcyBzZWxlY3RlZCBieSB1c2VyIHRvIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzb2xhdGlvblBvbGljaWVzID0gW107ICAgICAgICAgIC8vIFRvIEdldCBhbGwgaXNvbGF0aW9uIHBvbGljaWVzIG9mIHRlbmFudFxuXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEdldCBpbmNvbWluZyBhbmQgb3V0Z29pbmcgcnVsZXMgZm9yIGVhY2ggcG9saWN5IHByZXNlbnQgaW4gYXBwbGljYXRpb25ncm91cFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5wb2xpY2llcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RvIGRpc3BsYXkgcnVsZXMgb2Ygc2VsZWN0ZWQgcG9saWNpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldEluY29taW5nUnVsZXMocG9saWN5LCAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoJHNjb3BlLmluY29taW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRPdXRnb2luZ1J1bGVzKHBvbGljeSwgJ2RlZmF1bHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCRzY29wZS5vdXRnb2luZ1J1bGVzLCBydWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0IHBvbGljaWVzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SXNvbGF0aW9uUG9saWNpZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc29sYXRpb25Qb2xpY2llcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBBZGQgcG9saWN5IHRvIGFwcGxpY2F0aW9uIGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSXNvbGF0aW9uUG9saWN5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvbGljeU5hbWUgPSAkc2NvcGUuc2VsZWN0ZWRQb2xpY3kucG9saWN5LnBvbGljeU5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5TmFtZSAhPT0gdW5kZWZpbmVkICYmIF8uaW5jbHVkZXMoJHNjb3BlLnNlbGVjdGVkUG9saWNpZXMsIGN1cnJlbnRQb2xpY3lOYW1lKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVG8gZGlzcGxheSBzZWxlY3RlZCBwb2xpY2llc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFBvbGljaWVzLnB1c2goY3VycmVudFBvbGljeU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UbyBkaXNwbGF5IHJ1bGVzIG9mIHNlbGVjdGVkIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRJbmNvbWluZ1J1bGVzKGN1cnJlbnRQb2xpY3lOYW1lLCAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoJHNjb3BlLmluY29taW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRPdXRnb2luZ1J1bGVzKGN1cnJlbnRQb2xpY3lOYW1lLCAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoJHNjb3BlLm91dGdvaW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RvIGJlIGFkZGVkIHRvIGFwcGxpY2F0aW9uIGdyb3VwIGFuZCBzYXZlZCB0byB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGxpY2F0aW9uZ3JvdXAucG9saWNpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnB1c2goY3VycmVudFBvbGljeU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBSZW1vdmUgcG9saWN5IGZyb20gYXBwbGljYXRpb24gZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVJc29sYXRpb25Qb2xpY3kgPSBmdW5jdGlvbihwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUuc2VsZWN0ZWRQb2xpY2llcyxmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvbGljeSA9PT0gcG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoJHNjb3BlLmFwcGxpY2F0aW9uZ3JvdXAucG9saWNpZXMsIGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9saWN5ID09PSBwb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUuaW5jb21pbmdSdWxlcywgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5wb2xpY3lOYW1lID09PSBwb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUub3V0Z29pbmdSdWxlcywgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5wb2xpY3lOYW1lID09PSBwb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqICBUbyBjaGVjayAnZGV0YWlscycgb3IgJ2VkaXQnIG1vZGUgKG5vdCBjcmVhdGUgbW9kZSlcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5tb2RlID09ICdkZXRhaWxzJyB8fCAoJHNjb3BlLm1vZGUgPT0gJ2VkaXQnICYmICRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLmdyb3VwTmFtZSAhPSBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9BcHBsaWNhdGlvbiBHcm91cHMgbWlnaHQgbm90IGhhdmUgYW55IHBvbGljaWVzIGFzc29jaWF0ZWQgd2l0aCB0aGVtIHNvIGRlZmluZSBhbiBlbXB0eSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLnBvbGljaWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5wb2xpY2llcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UnVsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnZXRJc29sYXRpb25Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6J2FwcGxpY2F0aW9uZ3JvdXBzL2lzb2xhdGlvbnBvbGljeS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuXG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5kYXNoYm9hcmQnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5kYXNoYm9hcmQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rhc2hib2FyZEN0cmwgYXMgZGFzaGJvYXJkQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdkYXNoYm9hcmQvZGFzaGJvYXJkLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsXG4gICAgICAgIFtcbiAgICAgICAgICAgICckc2NvcGUnLFxuICAgICAgICAgICAgJyRpbnRlcnZhbCcsXG4gICAgICAgICAgICAnTm9kZXNNb2RlbCcsXG4gICAgICAgICAgICAnTmV0d29ya3NNb2RlbCcsXG4gICAgICAgICAgICAnVm9sdW1lc01vZGVsJyxcbiAgICAgICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgICAgICdQb2xpY2llc01vZGVsJyxcbiAgICAgICAgICAgICdTdG9yYWdlUG9saWNpZXNNb2RlbCcsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbCxcbiAgICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXNoYm9hcmRDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERhc2hib2FyZEluZm8ocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5vZGVzID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5uZXR3b3JrcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC52b2x1bWVzID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5ncm91cHMgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtwb2xpY2llcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLnN0b3JhZ2Vwb2xpY2llcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1dpbGwgZGlzcGxheSAwIGlmIHRoZXJlIGlzIGVycm9yIGZldGNoaW5nIGRhdGFcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5vZGVzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLnZvbHVtZXMgPSAwO1xuICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwuZ3JvdXBzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtwb2xpY2llcyA9IDA7XG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5zdG9yYWdlcG9saWNpZXMgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICAgICAgZ2V0RGFzaGJvYXJkSW5mbyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldERhc2hib2FyZEluZm8odHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5sb2dpbicpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5sb2dpbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xvZ2luL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwgYXMgbG9naW5DdHJsJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBbJyRzdGF0ZScsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgbG9naW5DdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9EYXNoYm9hcmQoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5kYXNoYm9hcmQnLCB7dXNlcm5hbWU6IGxvZ2luQ3RybC51c2VybmFtZX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2dpbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub0Rhc2hib2FyZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGxvZ2luQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobG9naW5DdHJsKTtcbiAgICAgICAgICAgIGxvZ2luQ3RybC5sb2dpbiA9IGxvZ2luO1xuXG4gICAgICAgIH1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tZW51JylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL20nLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbWVudS9tZW51Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNZW51Q3RybCBhcyBtZW51Q3RybCcsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7dXNlcm5hbWU6IG51bGx9XG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ01lbnVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgIHZhciBtZW51Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubG9naW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lbnVDdHJsLnVzZXJuYW1lID0gJHN0YXRlUGFyYW1zLnVzZXJuYW1lO1xuICAgICAgICBtZW51Q3RybC5sb2dvdXQgPSBsb2dvdXQ7XG5cbiAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzI0LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2Lm5ldHdvcmtwb2xpY2llc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZCYW5kd2lkdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5Oic9JyxcbiAgICAgICAgICAgICAgICBtb2RlOlwiQFwiXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYmFuZHdpZHRoUG9saWN5LmJhbmR3aWR0aCAhPSAnJyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYW5kd2lkdGhBcnJheSA9IHNjb3BlLmJhbmR3aWR0aFBvbGljeS5iYW5kd2lkdGguc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmJhbmR3aWR0aFBvbGljeS5iYW5kd2lkdGhOdW1iZXIgPSBOdW1iZXIoYmFuZHdpZHRoQXJyYXlbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5iYW5kd2lkdGhQb2xpY3kuYmFuZHdpZHRoVW5pdCA9IGJhbmR3aWR0aEFycmF5WzFdO1xuXG4gICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aC5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG5cbi8qXG4vKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzE0LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5jcmVhdGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0JhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwgYXMgYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWNyZWF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdCYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywnTmV0cHJvZmlsZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgTmV0cHJvZmlsZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0LmJhbmR3aWR0aCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljaWVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmtleSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmdlbmVyYXRlS2V5KGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmJhbmR3aWR0aCA9IGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmJhbmR3aWR0aE51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiBcIisgYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kuYmFuZHdpZHRoVW5pdDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwuY3JlYXRlKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5ID0ge1xuICAgICAgICAgICAgICAgICAgICBwcm9maWxlTmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0JywgLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICAgICAgYmFuZHdpZHRoOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgRFNDUDogJydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLmNyZWF0ZVBvbGljeSA9IGNyZWF0ZVBvbGljeTtcbiAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcblxuXG5cbi8qKlxuICogQ3JlYXRlZCBieSBoYXJkaWsgZ2FuZGhpIG9uIDYvMTYvMTYuXG4gKi9cblxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwgYXMgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9iYW5kd2lkdGhwb2xpY3lkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCBhcyBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdCYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICckc3RhdGVQYXJhbXMnLFxuICAgICAgICAnTmV0cHJvZmlsZXNNb2RlbCcsXG4gICAgICAgICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgTmV0cHJvZmlsZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLmJhbmR3aWR0aFByb2ZpbGVzID0gW107XG5cbiAgICAgICAgICAgIC8qIEdldCBwYXJ0aWN1bGFyIFByb2ZpbGUgZm9yIGJhc2VkIG9uIGtleSovXG4gICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLnBvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyBzaG93IGVkaXQgb3IgZGV0YWlscyBzY3JlZW4gYmFzZWQgb24gdGhlIHJvdXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwubW9kZSA9ICdlZGl0JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlUG9saWN5KCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwuZGVsZXRlVXNpbmdLZXkoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmtleSwgJ25hbWUnKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvUG9saWNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuYmFuZHdpZHRoJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvUG9saWN5RGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguZGV0YWlscycsIHsna2V5JzogYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmtleX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxFZGl0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvUG9saWN5RGV0YWlscygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzYXZlUG9saWN5KCkge1xuICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy9jaGVja2luZyBpZiBhbGwgdmFsaWRhdGlvbnMgaGF2ZSBwYXNzZWRcbiAgICAgICAgICAgICAgICBpZiAoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuYmFuZHdpZHRoID0gYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmJhbmR3aWR0aE51bWJlciArIFwiIFwiICsgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmJhbmR3aWR0aFVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwuc2F2ZShiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICBzZXRNb2RlKCk7XG5cbiAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLmRlbGV0ZVBvbGljeSA9IGRlbGV0ZVBvbGljeTtcbiAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLnNhdmVQb2xpY3kgPSBzYXZlUG9saWN5O1xuICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwuY2FuY2VsRWRpdGluZyA9IGNhbmNlbEVkaXRpbmc7XG5cbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzE0LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuYmFuZHdpZHRoJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9iYW5kd2lkdGgnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYW5kd2lkdGhQb2xpY3lMaXN0Q3RybCBhcyBiYW5kd2lkdGhQb2xpY3lMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQmFuZHdpZHRoUG9saWN5TGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdOZXRwcm9maWxlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBOZXRwcm9maWxlc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHBvbGljaWVzTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2xpY2llcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIocG9saWNpZXNMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY2llc0xpc3RDdHJsLnBvbGljaWVzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ3Byb2ZpbGVOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IHN0YXJ0IGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTAvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5jcmVhdGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwgYXMgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2lzb2xhdGlvbnBvbGljeWNyZWF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdJc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnUG9saWNpZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsIFBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljaWVzKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdC5pc29sYXRpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUG9saWN5KCkge1xuICAgICAgICAgICAgaWYgKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbC5nZW5lcmF0ZUtleShpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeSk7XG4gICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbC5jcmVhdGUoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljaWVzKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kgPSB7XG4gICAgICAgICAgICAgICAgcG9saWN5TmFtZTogJycsXG4gICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLmNyZWF0ZVBvbGljeSA9IGNyZWF0ZVBvbGljeTtcbiAgICAgICAgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCBhcyBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2lzb2xhdGlvbnBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmVkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2VkaXQvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeURldGFpbHNDdHJsIGFzIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5ZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0lzb2xhdGlvblBvbGljeURldGFpbHNDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgICAgICdQb2xpY2llc01vZGVsJyxcbiAgICAgICAgJ1J1bGVzTW9kZWwnLFxuICAgICAgICAnTmV0d29ya3NNb2RlbCcsXG4gICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBQb2xpY2llc01vZGVsLCBSdWxlc01vZGVsLCBOZXR3b3Jrc01vZGVsLCBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsID0gdGhpcztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ldHdvcmtzID0gW107XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5hcHBsaWNhdGlvbkdyb3VwcyA9IFtdO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nSVBBZGRyZXNzU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwID0gJyc7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cCA9ICcnO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZE5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWROZXR3b3JrID0gJyc7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvcnJlY3RDSURSID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC52YWxpZGF0ZUNJRFJGbGFnID0gZmFsc2U7XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0Lmlzb2xhdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljeURldGFpbHMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmRldGFpbHMnLCB7a2V5OiBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR28gYmFjayB0byBwb2xpY3kgZGV0YWlscyBhZnRlciBkb25lIGVkaXRpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZG9uZUVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmRlbGV0ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG8gc2hvdyBlZGl0IG9yIGRldGFpbHMgc2NyZWVuIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRNb2RlKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubW9kZSA9ICdkZXRhaWxzJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV3SW5jb21pbmdSdWxlKCkge1xuICAgICAgICAgICAgICAgIC8vUnVsZSBvYmplY3QgdG8gYmUgY3JlYXRlZCBvbiBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhbGxvdycsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbmRwb2ludEdyb3VwOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZnJvbU5ldHdvcms6ICcnLFxuICAgICAgICAgICAgICAgICAgICBmcm9tSXBBZGRyZXNzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICd0Y3AnLC8vdG8gbWFrZSBpdCBkZWZhdWx0IHNlbGVjdGVkIG9wdGlvbiBpbiBVSVxuICAgICAgICAgICAgICAgICAgICBwb3J0OiAwLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdpbicsXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5TmFtZTogaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LnBvbGljeU5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwID0gJyc7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZE5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ0lQQWRkcmVzc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC52YWxpZGF0ZUNJRFJGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV3T3V0Z29pbmdSdWxlKCkge1xuICAgICAgICAgICAgICAgIC8vUnVsZSBvYmplY3QgdG8gYmUgY3JlYXRlZCBvbiBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhbGxvdycsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIHRvRW5kcG9pbnRHcm91cDogJycsXG4gICAgICAgICAgICAgICAgICAgIHRvTmV0d29yazogJycsXG4gICAgICAgICAgICAgICAgICAgIHRvSXBBZGRyZXNzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICd0Y3AnLC8vdG8gbWFrZSBpdCBkZWZhdWx0IHNlbGVjdGVkIG9wdGlvbiBpbiBVSVxuICAgICAgICAgICAgICAgICAgICBwb3J0OiAwLFxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdvdXQnLFxuICAgICAgICAgICAgICAgICAgICB0ZW5hbnROYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgIHBvbGljeU5hbWU6IGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeS5wb2xpY3lOYW1lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cCA9ICcnO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWROZXR3b3JrID0gJyc7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvcnJlY3RDSURSID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwudmFsaWRhdGVDSURSRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBuZXR3b3JrIG5hbWVzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvL18uZmlsdGVyKCkgcmV0dXJucyBhIG5ldyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXR3b3JrcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgYXBwbGljYXRpb24gZ3JvdXAgbmFtZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFwcGxpY2F0aW9uR3JvdXBzKCkge1xuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9fLmZpbHRlcigpIHJldHVybnMgYSBuZXcgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXBzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXIgdG8gZGlzYWJsZSBuZXR3b3JrIHNlbGVjdGlvbiBib3ggb25jZSBhcHBsaWNhdGlvbiBncm91cCBpcyBzZWxlY3RlZCB3aGlsZSBjcmVhdGluZyBhIG5ld1xuICAgICAgICAgICAgICogcnVsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9JZiBhcHBsaWNhdGlvbiBncm91cCBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9FbmRwb2ludEdyb3VwID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwLmdyb3VwTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvTmV0d29yayA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL1doZW4gJ25vbmUnIGlzIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS50b0VuZHBvaW50R3JvdXAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVyIHRvIGRpc2FibGUgbmV0d29yayBzZWxlY3Rpb24gYm94IG9uY2UgYXBwbGljYXRpb24gZ3JvdXAgaXMgc2VsZWN0ZWQgd2hpbGUgY3JlYXRpbmcgYSBuZXdcbiAgICAgICAgICAgICAqIHJ1bGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uQ2hhbmdlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vSWYgYXBwbGljYXRpb24gZ3JvdXAgaGFzIGJlZW4gc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21FbmRwb2ludEdyb3VwID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwLmdyb3VwTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21OZXR3b3JrID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vV2hlbiAnbm9uZScgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21FbmRwb2ludEdyb3VwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXIgdG8gZGlzYWJsZSBhcHBsaWNhdGlvbiBncm91cCBzZWxlY3Rpb24gYm94IG9uY2UgbmV0d29yayBpcyBzZWxlY3RlZCB3aGlsZSBjcmVhdGluZyBhIG5ld1xuICAgICAgICAgICAgICogcnVsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWROZXR3b3JrIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIG5ldHdvcmsgaGFzIGJlZW4gc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvTmV0d29yayA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1NlbGVjdGVkTmV0d29yaztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLlRvRW5kcG9pbnRHcm91cCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nSVBBZGRyZXNzU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9JcEFkZHJlc3MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlciB0byBkaXNhYmxlIGFwcGxpY2F0aW9uIGdyb3VwIHNlbGVjdGlvbiBib3ggb25jZSBuZXR3b3JrIGlzIHNlbGVjdGVkIHdoaWxlIGNyZWF0aW5nIGEgbmV3XG4gICAgICAgICAgICAgKiBydWxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNoYW5nZUluY29taW5nTmV0d29ya1NlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZE5ldHdvcmsgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIG5ldHdvcmsgaGFzIGJlZW4gc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21OZXR3b3JrID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nU2VsZWN0ZWROZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUVuZHBvaW50R3JvdXAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ0lQQWRkcmVzc1NlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21OZXR3b3JrID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nSVBBZGRyZXNzU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdlbmVyYXRlcyBydWxlIGlkXG4gICAgICAgICAgICAgKiBUT0RPIE1ha2UgaXQgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nZXIgb25jZSB3ZSBoYXZlIG11bHRpcGxlIHVzZXJzIHVwZGF0aW5nIHNhbWUgcG9saWN5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUnVsZUlkKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICBydWxlLnJ1bGVJZCA9XG4gICAgICAgICAgICAgICAgICAgIChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzLmxlbmd0aCArIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm91dGdvaW5nUnVsZXMubGVuZ3RoICsgMSkudG9TdHJpbmcoKSArICctJyArXG4gICAgICAgICAgICAgICAgICAgIERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSdWxlIGlzIHNhdmVkIHRvIHNlcnZlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRJbmNvbWluZ1J1bGUoKSB7XG4gICAgICAgICAgICAgICAgaWYodmFsaWRhdGVDSURSKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5mcm9tSXBBZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlUnVsZUlkKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5rZXkgPSBSdWxlc01vZGVsLmdlbmVyYXRlS2V5KGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuY3JlYXRlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29taW5nUnVsZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXROZXdJbmNvbWluZ1J1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uQ2hhbmdlSW5jb21pbmdJUEFkZHJlc3MoKXtcbiAgICAgICAgICAgICAgICBpZihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUlwQWRkcmVzcyA9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC52YWxpZGF0ZUNJRFJGbGFnICYmXG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIpe1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUNJRFIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21JcEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VPdXRnb2luZ0lQQWRkcmVzcygpe1xuICAgICAgICAgICAgICAgIGlmKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS50b0lwQWRkcmVzcyA9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC52YWxpZGF0ZUNJRFJGbGFnICYmXG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIpe1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUNJRFIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvSXBBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ0lEUihpcGFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2lkclBhdHRlcm4gPSBuZXcgUmVnRXhwKENvbnRpdkdsb2JhbHMuQ0lEUl9SRUdFWCk7XG5cbiAgICAgICAgICAgICAgICBpZihpcGFkZHJlc3MgPT0gJycpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2lkclBhdHRlcm4udGVzdChpcGFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnZhbGlkYXRlQ0lEUkZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSdWxlIGlzIHNhdmVkIHRvIHNlcnZlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRPdXRnb2luZ1J1bGUoKSB7XG4gICAgICAgICAgICAgICAgaWYodmFsaWRhdGVDSURSKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS50b0lwQWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVJ1bGVJZChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUpO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUua2V5ID0gUnVsZXNNb2RlbC5nZW5lcmF0ZUtleShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUpO1xuICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmNyZWF0ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vdXRnb2luZ1J1bGVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3T3V0Z29pbmdSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlbGV0ZSBpbmNvbWluZyBydWxlIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUluY29taW5nUnVsZShrZXkpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmRlbGV0ZVVzaW5nS2V5KGtleSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ua2V5ID09IGtleTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWxldGUgb3V0Z29pbmcgcnVsZSBmcm9tIHNlcnZlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVPdXRnb2luZ1J1bGUoa2V5KSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5kZWxldGVVc2luZ0tleShrZXkpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub3V0Z29pbmdSdWxlcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmtleSA9PSBrZXk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgUG9saWNpZXNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kgPSBwb2xpY3k7XG4gICAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZ2V0SW5jb21pbmdSdWxlcyhwb2xpY3kucG9saWN5TmFtZSwgJ2RlZmF1bHQnKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29taW5nUnVsZXMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE5ld0luY29taW5nUnVsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRPdXRnb2luZ1J1bGVzKHBvbGljeS5wb2xpY3lOYW1lLCAnZGVmYXVsdCcpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub3V0Z29pbmdSdWxlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3T3V0Z29pbmdSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnZXROZXR3b3JrcygpO1xuICAgICAgICAgICAgZ2V0QXBwbGljYXRpb25Hcm91cHMoKTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRlbGV0ZVBvbGljeSA9IGRlbGV0ZVBvbGljeTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRlbGV0ZUluY29taW5nUnVsZSA9IGRlbGV0ZUluY29taW5nUnVsZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRlbGV0ZU91dGdvaW5nUnVsZSA9IGRlbGV0ZU91dGdvaW5nUnVsZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFkZEluY29taW5nUnVsZSA9IGFkZEluY29taW5nUnVsZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFkZE91dGdvaW5nUnVsZSA9IGFkZE91dGdvaW5nUnVsZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRvbmVFZGl0aW5nID0gZG9uZUVkaXRpbmc7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5jYW5jZWxFZGl0aW5nID0gY2FuY2VsRWRpdGluZztcbiAgICAgICAgICAgIC8vRXZlbnQgSGFuZGxlcnNcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gb25DaGFuZ2VPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb247XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vbkNoYW5nZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IG9uQ2hhbmdlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub25DaGFuZ2VPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24gPSBvbkNoYW5nZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbjtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gb25DaGFuZ2VJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb247XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vbkNoYW5nZUluY29taW5nSVBBZGRyZXNzID0gb25DaGFuZ2VJbmNvbWluZ0lQQWRkcmVzcztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlT3V0Z29pbmdJUEFkZHJlc3MgPSBvbkNoYW5nZU91dGdvaW5nSVBBZGRyZXNzO1xuXG4gICAgICAgICAgICBzZXRNb2RlKCk7XG5cbiAgICAgICAgfV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdC5pc29sYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2lzb2xhdGlvbicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeUxpc3RDdHJsIGFzIGlzb2xhdGlvblBvbGljeUxpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdJc29sYXRpb25Qb2xpY3lMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1BvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgcG9saWNpZXNMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBvbGljaWVzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWNpZXNMaXN0Q3RybC5wb2xpY2llcyA9ICRmaWx0ZXIoJ29yZGVyQnknKShyZXN1bHQsICdwb2xpY3lOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXRQb2xpY2llcyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBzdGFydCBhdXRvLXJlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9saWNpZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsIGFzIG5ldHdvcmtQb2xpY2llc1RhYnNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvbmV0d29ya3BvbGljaWVzdGFicy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QucmVkaXJlY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3JlZGlyZWN0aW9uJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJydcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTmV0d29ya1BvbGljaWVzVGFic0N0cmwnLCBbJyRzdGF0ZScsZnVuY3Rpb24gKCRzdGF0ZSkge1xuICAgICAgICB2YXIgbmV0d29ya1BvbGljaWVzVGFic0N0cmwgPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlTmV0d29ya1BvbGljeSgpIHtcbiAgICAgICAgICAgIGlmKCRzdGF0ZS4kY3VycmVudC5pbmNsdWRlc1snY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuaXNvbGF0aW9uJ10pe1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5jcmVhdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCRzdGF0ZS4kY3VycmVudC5pbmNsdWRlc1snY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuYmFuZHdpZHRoJ10pIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguY3JlYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXR3b3JrUG9saWNpZXNUYWJzQ3RybC5jcmVhdGVOZXR3b3JrUG9saWN5ID0gY3JlYXRlTmV0d29ya1BvbGljeTtcbiAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMi8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtzL25ldHdvcmtjcmVhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtDcmVhdGVDdHJsIGFzIG5ldHdvcmtDcmVhdGVDdHJsJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOZXR3b3JrQ3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdOZXR3b3Jrc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBOZXR3b3Jrc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5ldHdvcmtDcmVhdGVDdHJsID0gdGhpcztcbiAgICAgICAgICAgIG5ldHdvcmtDcmVhdGVDdHJsLmNpZHJQYXR0ZXJuID0gQ29udGl2R2xvYmFscy5DSURSX1JFR0VYO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05ldHdvcmtzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3MubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub05ldHdvcmtzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU5ldHdvcmsoKSB7XG4gICAgICAgICAgICAgICAgLy9mb3JtIGNvbnRyb2xsZXIgaXMgaW5qZWN0ZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrQ3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtDcmVhdGVDdHJsLm5ld05ldHdvcmsua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtDcmVhdGVDdHJsLm5ld05ldHdvcmsudGVuYW50TmFtZSArICc6JyArIG5ldHdvcmtDcmVhdGVDdHJsLm5ld05ldHdvcmsubmV0d29ya05hbWU7XG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuY3JlYXRlKG5ldHdvcmtDcmVhdGVDdHJsLm5ld05ldHdvcmspLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub05ldHdvcmtzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihuZXR3b3JrQ3JlYXRlQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIG5ldHdvcmtDcmVhdGVDdHJsLm5ld05ldHdvcmsgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZW5jYXA6ICd2eGxhbicsXG4gICAgICAgICAgICAgICAgICAgIHN1Ym5ldDogJycsXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXk6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0ZW5hbnROYW1lOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ldHdvcmtDcmVhdGVDdHJsLmNyZWF0ZU5ldHdvcmsgPSBjcmVhdGVOZXR3b3JrO1xuICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtEZXRhaWxzQ3RybCBhcyBuZXR3b3JrRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2RldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMuaW5mbycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3Jrcy9uZXR3b3JraW5mby5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtEZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnTmV0d29ya3NNb2RlbCcsICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE5ldHdvcmtzTW9kZWwsIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ldHdvcmtEZXRhaWxzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05ldHdvcmtzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmxpc3QnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVOZXR3b3JrKCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5kZWxldGUobmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmspLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9OZXR3b3JrcygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5ldHdvcmtEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogR2V0IGFwcGxpY2F0aW9uIGdyb3VwcyBiZWxvbmdpbmcgdG8gYSBuZXR3b3JrXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXBwbGljYXRpb25Hcm91cHMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0KHJlbG9hZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cHMgPSAkZmlsdGVyKCdvcmRlckJ5JykoXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25ldHdvcmtOYW1lJzogbmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmsubmV0d29ya05hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAnZ3JvdXBOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0RldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobmV0d29yaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QXBwbGljYXRpb25Hcm91cHMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzQ3RybC5kZWxldGVOZXR3b3JrID0gZGVsZXRlTmV0d29yaztcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QXBwbGljYXRpb25Hcm91cHModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtzTGlzdEN0cmwgYXMgbmV0d29ya3NMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3Jrcy9uZXR3b3JrbGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOZXR3b3Jrc0xpc3RDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnTmV0d29ya3NNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgTmV0d29ya3NNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBuZXR3b3Jrc0xpc3RDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0d29ya3MocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3Jrc0xpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3Jrc0xpc3RDdHJsLm5ldHdvcmtzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3Jrc0xpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldE5ldHdvcmtzKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG9yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldE5ldHdvcmtzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgY3NoYW1wdXIgb24gNi8yMy8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMuc3RhdHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3N0YXRzJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya1N0YXRzQ3RybCBhcyBuZXR3b3JrU3RhdHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtzL25ldHdvcmtzdGF0cy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOZXR3b3JrU3RhdHNDdHJsJyxcbiAgICAgICAgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdOZXR3b3Jrc01vZGVsJywgJ0luc3BlY3RTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE5ldHdvcmtzTW9kZWwsIEluc3BlY3RTZXJ2aWNlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV0d29ya1N0YXRzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAvKiBHZXRzIHRoZSBOZXR3b3JrIE9wZXJhdGlvbmFsIHN0YXRlIGZyb20gdGhlIHNlcnZlciAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ldHdvcmtJbnNwZWN0KHJlZnJlc2gpe1xuICAgICAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldEluc3BlY3RCeUtleSgkc3RhdGVQYXJhbXMua2V5LCBDb250aXZHbG9iYWxzLk5FVFdPUktTX0lOU1BFQ1RfRU5EUE9JTlQsIHJlZnJlc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0YXRzQ3RybC5uZXR3b3JrSW5zcGVjdFN0YXRzID0gcmVzdWx0Lk9wZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0YXRzQ3RybC5jb25maWcgPSByZXN1bHQuQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5PcGVyLmVuZHBvaW50cyE9dW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckRldGFpbHMgPSBJbnNwZWN0U2VydmljZS5idWlsZEVuZFBvaW50cyhyZXN1bHQuT3Blci5lbmRwb2ludHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihJbnNwZWN0U2VydmljZS5jaGVja0NvbnRhaW5lckNoYW5nZWQobmV0d29ya1N0YXRzQ3RybC5jb250YWluZXJEZXRhaWxzLGNvbnRhaW5lckRldGFpbHMpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0c0N0cmwuZW5kcG9pbnRzID0gcmVzdWx0Lk9wZXIuZW5kcG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0YXRzQ3RybC5jb250YWluZXJEZXRhaWxzID0gY29udGFpbmVyRGV0YWlscztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHNDdHJsLmVuZHBvaW50cyA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0c0N0cmwuY29udGFpbmVyRGV0YWlscyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGdldE5ldHdvcmtJbnNwZWN0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG9yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE5ldHdvcmtJbnNwZWN0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKTtcbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnKVxuICAgIC5mYWN0b3J5KCdCZ3BTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRCZ3AoY3RybCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLkJHUFNfRU5EUE9JTlQgKyBjdHJsLmtleSArICcvJztcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGN0cmwubmVpZ2hib3IgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICBjdHJsLm5laWdoYm9ycy5wdXNoKHsnbmFtZSc6IGN0cmwubmVpZ2hib3JbJ25laWdoYm9yJ10sICd2YWx1ZSc6IGN0cmwubmVpZ2hib3JbJ25laWdoYm9yLWFzJ119KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVCZ3AoY3RybCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuQkdQU19FTkRQT0lOVCArIGN0cmwua2V5ICsgJy8nO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QodXJsLCBjdHJsLm5laWdoYm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRCZ3BJbnNwZWN0KGtleSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLkJHUFNfSU5TUEVDVF9FTkRQT0lOVCArIGtleSArICcvJztcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0QmdwOiBnZXRCZ3AsXG4gICAgICAgICAgICB1cGRhdGVCZ3A6IHVwZGF0ZUJncCxcbiAgICAgICAgICAgIGdldEJncEluc3BlY3Q6IGdldEJncEluc3BlY3RcbiAgICAgICAgfVxuICAgIH1dKTtcbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2Lm5vZGVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dkxvZ3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbG9ncy5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbG9nOiBcIj1cIixcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJAXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnKVxuICAgIC5mYWN0b3J5KCdMb2dTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZlTG9ncygpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5OT0RFU19BQ1RJVkVfSk9CX0VORFBPSU5UO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdExvZ3MoKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuTk9ERVNfTEFTVF9KT0JfRU5EUE9JTlQ7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0QWN0aXZlTG9nczogZ2V0QWN0aXZlTG9ncyxcbiAgICAgICAgICAgIGdldExhc3RMb2dzOiBnZXRMYXN0TG9nc1xuICAgICAgICB9XG4gICAgfV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmFjdGl2ZWxvZycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvYWN0aXZlbG9nJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZUFjdGl2ZUpvYkxvZ3NDdHJsIGFzIG5vZGVBY3RpdmVKb2JMb2dzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8Y3R2LWxvZ3MgdGl0bGU9XCJBY3RpdmUgSm9iXCIgbG9nPVwibm9kZUFjdGl2ZUpvYkxvZ3NDdHJsLmFjdGl2ZUxvZ3NcIj48L2N0di1sb2dzPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUFjdGl2ZUpvYkxvZ3NDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJ0xvZ1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsIExvZ1NlcnZpY2UpIHtcbiAgICAgICAgdmFyIG5vZGVBY3RpdmVKb2JMb2dzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZlTG9ncygpIHtcbiAgICAgICAgICAgIExvZ1NlcnZpY2UuZ2V0QWN0aXZlTG9ncygpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG5vZGVBY3RpdmVKb2JMb2dzQ3RybC5hY3RpdmVMb2dzID0gcmVzdWx0O1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL09uY2UgdGhlIGpvYiBmaW5pc2hlcywgZW5kcG9pbnQgcmV0dXJucyA1MDAgZXJyb3IuIFNvIHJlc2V0IHRoZSBhY3RpdmVMb2dzXG4gICAgICAgICAgICAgICAgbm9kZUFjdGl2ZUpvYkxvZ3NDdHJsLmFjdGl2ZUxvZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICdUaGVyZSBpcyBjdXJyZW50bHkgbm8gYWN0aXZlIGpvYi4gQ2hlY2sgTGFzdCBKb2IgZm9yIGEgam9iIHRoYXQgcmVjZW50bHkgZmluaXNoZWQuJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXRBY3RpdmVMb2dzKCk7XG5cbiAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdldEFjdGl2ZUxvZ3MoKTtcbiAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmNvbW1pc3Npb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbW1pc3Npb24vOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVDb21taXNzaW9uQ3RybCBhcyBub2RlQ29tbWlzc2lvbkN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWNvbW1pc3Npb24uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUNvbW1pc3Npb25DdHJsJywgW1xuICAgICAgICAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdOb2Rlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJywgJ05vZGVzU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgTm9kZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UsIE5vZGVzU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVDb21taXNzaW9uQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvTm9kZURldGFpbHMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5ub2Rlcy5kZXRhaWxzLmluZm8nLCB7J2tleSc6ICRzdGF0ZVBhcmFtcy5rZXl9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ29tbWlzc2lvbmluZ05vZGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Ob2RlRGV0YWlscygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb21taXNzaW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlQ29tbWlzc2lvbkN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5ub2RlT3BzT2JqLm5vZGVzID0gWyRzdGF0ZVBhcmFtcy5rZXldO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc1NlcnZpY2UuY2xlYW51cEV4dHJhVmFycyhub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc1NlcnZpY2UuY3JlYXRlRXh0cmFWYXJzKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwuY29tbWlzc2lvbihub2RlQ29tbWlzc2lvbkN0cmwubm9kZU9wc09iaikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub05vZGVEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Iobm9kZUNvbW1pc3Npb25DdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5ub2RlT3BzT2JqID0ge307XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFycyA9IHt9OyAvL1RPRE8gSW50aWFsaXplIGZyb20gZ2xvYmFsIHNldHRpbmdzXG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuYW5zaWJsZVZhcmlhYmxlcyA9IFtdO1xuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmVudlZhcmlhYmxlcyA9IFtdO1xuXG4gICAgICAgICAgICBOb2Rlc1NlcnZpY2UuZ2V0U2V0dGluZ3Mobm9kZUNvbW1pc3Npb25DdHJsKTtcblxuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmNhbmNlbENvbW1pc3Npb25pbmdOb2RlID0gY2FuY2VsQ29tbWlzc2lvbmluZ05vZGU7XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuY29tbWlzc2lvbiA9IGNvbW1pc3Npb247XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuaW5mbycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWluZm8uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuc3RhdHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3N0YXRzJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2Rlc3RhdHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMubG9ncycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9ncycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWxvZ3MuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRpdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWluZm8uaHRtbCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05vZGVEZXRhaWxzQ3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJ05vZGVzTW9kZWwnLCAnQmdwU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsIE5vZGVzTW9kZWwsIEJncFNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBub2RlRGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm51bWJlcnBhdHRlcm4gPSBDb250aXZHbG9iYWxzLk5VTUJFUl9SRUdFWDtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZGVjb21taXNzaW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlT3BzT2JqID0ge1xuICAgICAgICAgICAgICAgICAgbm9kZXM6IFskc3RhdGVQYXJhbXMua2V5XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTm9kZXNNb2RlbC5kZWNvbW1pc3Npb24obm9kZU9wc09iaikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vRGlzYWJsZSBhbGwgYnV0dG9ucyBpbml0aWFsbHkuIFBvbGwgd2lsbCBhc3NpZ24gdmFsdWVzIGFwcHJvcHJpYXRlbHkuXG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZ3JhZGUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVPcHNPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzOiBbJHN0YXRlUGFyYW1zLmtleV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwudXBncmFkZShub2RlT3BzT2JqKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9EaXNhYmxlIGFsbCBidXR0b25zIGluaXRpYWxseS4gUG9sbCB3aWxsIGFzc2lnbiB2YWx1ZXMgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEaXNwbGF5IGJ1dHRvbnMgYmFzZWQgb24gc3RhdHVzIG9mIG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0QnV0dG9uRGlzcGxheSgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vZGVEZXRhaWxzQ3RybC5ub2RlWydpbnZlbnRvcnlfc3RhdGUnXS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVW5hbGxvY2F0ZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdEZWNvbW1pc3Npb25lZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1Byb3Zpc2lvbmluZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdBbGxvY2F0ZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdDYW5jZWxsZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ01haW50ZW5hbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6Ly9DbHVzdGVyIHNob3VsZCBub3QgYmUgaW4gdGhpcyBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vZGVJbmZvKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5LCByZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCdXR0b25EaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRNb2RlKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9JbmZvKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5pbmZvJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJncEluZm8oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVEZXRhaWxzQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3Iua2V5ID0gJHN0YXRlUGFyYW1zLmtleTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBiYWNrZW5kIG9ubHkgc3VwcG9ydHMgYWRkaW5nIG9uZSBuZWlnaGJvciBjdXJyZW50bHlcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm5laWdoYm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3JbJ25laWdoYm9yJ10gPSBpdGVtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3JbJ25laWdoYm9yLWFzJ10gPSBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBCZ3BTZXJ2aWNlLnVwZGF0ZUJncChub2RlRGV0YWlsc0N0cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm5laWdoYm9yID0gcmVzdWx0LmNvbmZpZy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9JbmZvKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRCZ3BJbmZvKCkge1xuICAgICAgICAgICAgICAgIEJncFNlcnZpY2UuZ2V0QmdwKG5vZGVEZXRhaWxzQ3RybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5uZWlnaGJvciA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRCZ3BJbnNwZWN0KCkge1xuICAgICAgICAgICAgICAgIEJncFNlcnZpY2UuZ2V0QmdwSW5zcGVjdCgkc3RhdGVQYXJhbXMua2V5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmluc3BlY3QgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5yb3V0ZXMgPSByZXN1bHQuT3Blci5yb3V0ZXM7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5maWx0ZXJlZHJvdXRlcyA9IHJlc3VsdC5PcGVyLnJvdXRlcztcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuZGVjb21taXNzaW9uID0gZGVjb21taXNzaW9uO1xuICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGUgPSB1cGdyYWRlO1xuXG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2V0TW9kZSA9IHNldE1vZGU7XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBkYXRlQmdwSW5mbyA9IHVwZGF0ZUJncEluZm87XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwucmV0dXJuVG9JbmZvID0gcmV0dXJuVG9JbmZvO1xuICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm5laWdoYm9ycyA9IFtdO1xuICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm5laWdoYm9yID0ge307XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwua2V5ID0gJHN0YXRlUGFyYW1zLmtleTtcbiAgICAgICAgICAgIGdldEJncEluZm8oKTtcbiAgICAgICAgICAgIGdldEJncEluc3BlY3QoKTtcbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXROb2RlSW5mbyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvLXJlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0Tm9kZUluZm8odHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzE0LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5ub2Rlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOb2Rlc3RhdHVzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbm9kZTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2Rlc3RhdHVzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOb2Rlc3RhdGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBub2RlOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL25vZGVzdGF0ZS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGlzY292ZXInLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rpc2NvdmVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURpc2NvdmVyQ3RybCBhcyBub2RlRGlzY292ZXJDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL25vZGVkaXNjb3Zlci5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOb2RlRGlzY292ZXJDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdOb2Rlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJywgJ05vZGVzU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgTm9kZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UsIE5vZGVzU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVEaXNjb3ZlckN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05vZGVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubm9kZXMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxEaXNjb3ZlcmluZ05vZGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Ob2RlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBkaXNjb3ZlcigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZURpc2NvdmVyQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iobm9kZURpc2NvdmVyQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVJUEFkZHJBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc1NlcnZpY2UuY3JlYXRlRXh0cmFWYXJzKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmRpc2NvdmVyKG5vZGVEaXNjb3ZlckN0cmwubm9kZU9wc09iaikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Ob2RlcygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihub2RlRGlzY292ZXJDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihub2RlRGlzY292ZXJDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUlQQWRkckFycmF5KCkge1xuICAgICAgICAgICAgICAgIG5vZGVEaXNjb3ZlckN0cmwubm9kZU9wc09iai5hZGRycyA9IF8ud29yZHMobm9kZURpc2NvdmVyQ3RybC5ub2RlSVBBZGRyLCAvW14sIF0rL2cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLm5vZGVPcHNPYmogPSB7fTtcbiAgICAgICAgICAgIG5vZGVEaXNjb3ZlckN0cmwuZXh0cmFfdmFycyA9IHt9OyAvL1RPRE8gSW50aWFsaXplIGZyb20gZ2xvYmFsIHNldHRpbmdzXG4gICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLmFuc2libGVWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgICAgIG5vZGVEaXNjb3ZlckN0cmwuZW52VmFyaWFibGVzID0gW107XG4gICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLm5vZGVJUEFkZHIgPSAnJzsgLy9JUCBhZGRyZXNzIG9mIG5vZGVzIHRvIGRpc2NvdmVyXG5cbiAgICAgICAgICAgIE5vZGVzU2VydmljZS5nZXRTZXR0aW5ncyhub2RlRGlzY292ZXJDdHJsKTtcblxuICAgICAgICAgICAgbm9kZURpc2NvdmVyQ3RybC5kaXNjb3ZlciA9IGRpc2NvdmVyO1xuICAgICAgICAgICAgbm9kZURpc2NvdmVyQ3RybC5jYW5jZWxEaXNjb3ZlcmluZ05vZGUgPSBjYW5jZWxEaXNjb3ZlcmluZ05vZGU7XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZURpc2NvdmVyQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iobm9kZURpc2NvdmVyQ3RybCk7XG4gICAgICAgIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmxhc3Rsb2cnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xhc3Rsb2cnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOb2RlTGFzdEpvYkxvZ3NDdHJsIGFzIG5vZGVMYXN0Sm9iTG9nc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGN0di1sb2dzIHRpdGxlPVwiTGFzdCBKb2JcIiBsb2c9XCJub2RlTGFzdEpvYkxvZ3NDdHJsLmxhc3RMb2dzXCI+PC9jdHYtbG9ncz4nXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05vZGVMYXN0Sm9iTG9nc0N0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnTG9nU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgTG9nU2VydmljZSkge1xuICAgICAgICB2YXIgbm9kZUxhc3RKb2JMb2dzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdExvZ3MoKSB7XG4gICAgICAgICAgICBMb2dTZXJ2aWNlLmdldExhc3RMb2dzKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgbm9kZUxhc3RKb2JMb2dzQ3RybC5sYXN0TG9ncyA9IHJlc3VsdDtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXRMYXN0TG9ncygpO1xuXG4gICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBnZXRMYXN0TG9ncygpO1xuICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgfVxuICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzIyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVMaXN0Q3RybCBhcyBub2RlTGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnTm9kZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgTm9kZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgdmFyIG5vZGVMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZXMocmVsb2FkKSB7XG4gICAgICAgICAgICBOb2Rlc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVMaXN0Q3RybC5ub2RlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgZ2V0Tm9kZXMoZmFsc2UpO1xuXG4gICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBnZXROb2Rlcyh0cnVlKTtcbiAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuICAgIH1dKTtcbmFuZ3VsYXIubW9kdWxlKCdjb250aXYub3JnYW5pemF0aW9ucycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm9yZ2FuaXphdGlvbnMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnb3JnYW5pemF0aW9ucy9vcmdhbml6YXRpb25jcmVhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ09yZ2FuaXphdGlvbkNyZWF0ZUN0cmwgYXMgb3JnYW5pemF0aW9uQ3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignT3JnYW5pemF0aW9uQ3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJ09yZ2FuaXphdGlvbnNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsIE9yZ2FuaXphdGlvbnNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBvcmdhbml6YXRpb25DcmVhdGVDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Pcmdhbml6YXRpb25zKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUub3JnYW5pemF0aW9ucy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvT3JnYW5pemF0aW9ucygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVPcmdhbml6YXRpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9mb3JtIGNvbnRyb2xsZXIgaXMgaW5qZWN0ZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmIChvcmdhbml6YXRpb25DcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihvcmdhbml6YXRpb25DcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwubmV3T3JnYW5pemF0aW9uLmtleSA9IG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwubmV3T3JnYW5pemF0aW9uLnRlbmFudE5hbWU7IFxuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb25zTW9kZWwuY3JlYXRlKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwubmV3T3JnYW5pemF0aW9uKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub09yZ2FuaXphdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Iob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25DcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uQ3JlYXRlQ3RybC5uZXdPcmdhbml6YXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3JnYW5pemF0aW9uQ3JlYXRlQ3RybC5jcmVhdGVPcmdhbml6YXRpb24gPSBjcmVhdGVPcmdhbml6YXRpb247XG4gICAgICAgICAgICBvcmdhbml6YXRpb25DcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG5cbiAgICAgICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYub3JnYW5pemF0aW9ucycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm9yZ2FuaXphdGlvbnMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnT3JnYW5pemF0aW9uRGV0YWlsc0N0cmwgYXMgb3JnYW5pemF0aW9uRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnb3JnYW5pemF0aW9ucy9vcmdhbml6YXRpb25kZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignT3JnYW5pemF0aW9uRGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnT3JnYW5pemF0aW9uc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgT3JnYW5pemF0aW9uc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBvcmdhbml6YXRpb25EZXRhaWxzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub09yZ2FuaXphdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUub3JnYW5pemF0aW9ucy5saXN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlT3JnYW5pemF0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iob3JnYW5pemF0aW9uRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihvcmdhbml6YXRpb25EZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbnNNb2RlbC5kZWxldGUob3JnYW5pemF0aW9uRGV0YWlsc0N0cmwub3JnYW5pemF0aW9uKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIob3JnYW5pemF0aW9uRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Pcmdhbml6YXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihvcmdhbml6YXRpb25EZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25EZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbnNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChvcmdhbml6YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsLm9yZ2FuaXphdGlvbiA9IG9yZ2FuaXphdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25EZXRhaWxzQ3RybC5kZWxldGVPcmdhbml6YXRpb24gPSBkZWxldGVPcmdhbml6YXRpb247XG4gICAgICAgICAgICB9XSk7XG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm9yZ2FuaXphdGlvbnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPcmdhbml6YXRpb25zTGlzdEN0cmwgYXMgb3JnYW5pemF0aW9uc0xpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ29yZ2FuaXphdGlvbnMvb3JnYW5pemF0aW9ubGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdPcmdhbml6YXRpb25zTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdPcmdhbml6YXRpb25zTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE9yZ2FuaXphdGlvbnNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBvcmdhbml6YXRpb25zTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRPcmdhbml6YXRpb25zKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbnNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25zTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnNMaXN0Q3RybC5vcmdhbml6YXRpb25zID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25zTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0T3JnYW5pemF0aW9ucyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRPcmdhbml6YXRpb25zKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzEyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmNyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2VydmljZWxiQ3JlYXRlQ3RybCBhcyBzZXJ2aWNlbGJDcmVhdGVDdHJsJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTZXJ2aWNlbGJDcmVhdGVDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdTZXJ2aWNlbGJzTW9kZWwnLCAnTmV0d29ya3NNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgU2VydmljZWxic01vZGVsLCBOZXR3b3Jrc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VsYkNyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5sYWJlbFNlbGVjdG9ycyA9IFtdO1xuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5uZXR3b3JrcyA9IFtdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1NlcnZpY2VsYnMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ3JlYXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9TZXJ2aWNlbGJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IG5ldHdvcmtzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLm5ldHdvcmtzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVMYWJlbFNlbGVjdG9yU3RyaW5ncygpIHtcbiAgICAgICAgICAgICAgICAvL0VtcHR5IG91dCB0aGUgc2VsZWN0b3JzLiBJbiBjYXNlIG9mIHNlcnZlciBlcnJvcnMgdGhpcyBuZWVkcyB0byBiZSByZXNldC5cbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VydmljZWxiQ3JlYXRlQ3RybC5sYWJlbFNlbGVjdG9ycywgZnVuY3Rpb24obGFiZWxTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JTdHJpbmcgPSBsYWJlbFNlbGVjdG9yLm5hbWUgKyAnPScgKyBsYWJlbFNlbGVjdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnMucHVzaChzZWxlY3RvclN0cmluZyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNlcnZpY2VsYigpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVMYWJlbFNlbGVjdG9yU3RyaW5ncygpO1xuICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy9jaGVja2luZyBpZiBhbGwgdmFsaWRhdGlvbnMgaGF2ZSBwYXNzZWRcbiAgICAgICAgICAgICAgICBpZiAoc2VydmljZWxiQ3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5rZXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIudGVuYW50TmFtZSArICc6JyArIHNlcnZpY2VsYkNyZWF0ZUN0cmwuc2VydmljZWxiLnNlcnZpY2VOYW1lO1xuICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlbGJzTW9kZWwuY3JlYXRlKHNlcnZpY2VsYkNyZWF0ZUN0cmwuc2VydmljZWxiKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1NlcnZpY2VsYnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Ioc2VydmljZWxiQ3JlYXRlQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzZXJ2aWNlbGJDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYiA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrTmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIGlwQWRkcmVzczogJycsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yczogW10sXG4gICAgICAgICAgICAgICAgICAgIHBvcnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5jcmVhdGVTZXJ2aWNlbGIgPSBjcmVhdGVTZXJ2aWNlbGI7XG4gICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG5cbiAgICAgICAgICAgIGdldE5ldHdvcmtzKCk7XG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2VydmljZWxicycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtzdGF0ZTpudWxsfSwgICAgICAgLy8gVG8gcmVsb2FkIHBhcmVudCB2aWV3IFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXJ2aWNlbGJEZXRhaWxzQ3RybCBhcyBzZXJ2aWNlbGJEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmRldGFpbHMuaW5mbycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkRldGFpbHNDdHJsIGFzIHNlcnZpY2VsYkRldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmluZm8uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscy5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXJ2aWNlbGJEZXRhaWxzQ3RybCBhcyBzZXJ2aWNlbGJEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJpbmZvLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU2VydmljZWxiRGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnU2VydmljZWxic01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgU2VydmljZWxic01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlbGJEZXRhaWxzQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwubGFiZWxTZWxlY3RvcnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRvIHNob3cgZWRpdCBvciBkZXRhaWxzIHNjcmVlbiBiYXNlZCBvbiB0aGUgcm91dGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRNb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmlzKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmRldGFpbHMuZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwubW9kZSA9ICdkZXRhaWxzJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvU2VydmljZWxicygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmxpc3QnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1NlcnZpY2VsYkRldGFpbHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuc2VydmljZWxicy5kZXRhaWxzLmluZm8nLCB7J2tleSc6IHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYi5rZXksJ3N0YXRlJzonZGV0YWlscyd9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxFZGl0aW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1NlcnZpY2VsYkRldGFpbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTZXJ2aWNlbGIoKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmRlbGV0ZShzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1NlcnZpY2VsYnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHNlcnZpY2VsYkRldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzYXZlU2VydmljZWxiKCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0xhYmVscyA9IHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnM7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxhYmVsU2VsZWN0b3JTdHJpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5zYXZlKHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvU2VydmljZWxiRGV0YWlscygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycyA9IGV4aXN0aW5nTGFiZWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGFiZWxTZWxlY3RvcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHNlcnZpY2VsYkRldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVMYWJlbFNlbGVjdG9ycygpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnMsIGZ1bmN0aW9uKHNlbGVjdG9yU3RyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc2VsZWN0b3JTdHIuc3BsaXQoJz0nKVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZWN0b3JTdHIuc3BsaXQoJz0nKVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLmxhYmVsU2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVMYWJlbFNlbGVjdG9yU3RyaW5ncygpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VydmljZWxiRGV0YWlsc0N0cmwubGFiZWxTZWxlY3RvcnMsIGZ1bmN0aW9uKGxhYmVsU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvclN0cmluZyA9IGxhYmVsU2VsZWN0b3IubmFtZSArICc9JyArIGxhYmVsU2VsZWN0b3IudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzLnB1c2goc2VsZWN0b3JTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgICAgICBTZXJ2aWNlbGJzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2soc2VydmljZWxiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIgPSBzZXJ2aWNlbGI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVMYWJlbFNlbGVjdG9ycygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLnNhdmVTZXJ2aWNlbGIgPSBzYXZlU2VydmljZWxiO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLmRlbGV0ZVNlcnZpY2VsYiA9IGRlbGV0ZVNlcnZpY2VsYjtcbiAgICAgICAgICAgICAgICBzZXRNb2RlKCk7XG5cbiAgICAgICAgICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXJ2aWNlbGJMaXN0Q3RybCBhcyBzZXJ2aWNlbGJMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NlcnZpY2VsYkxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnU2VydmljZWxic01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTZXJ2aWNlbGJzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgc2VydmljZWxiTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlbGJzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiTGlzdEN0cmwuc2VydmljZWxicyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0U2VydmljZWxicyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlbGJzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTMvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LnNlcnZpY2VsYnNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2U2VydmljZWxicG9ydHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICBpdGVtczogJz0nXG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIENvbXBhcmUgaWYgdHdvIGl0ZW1zIGhhdmUgc2FtZSBwb3J0cyBhbmQgcHJvdG9jb2xzXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsMVxuICAgICAgICAgICAgICAgICogQHBhcmFtIHZhbDJcbiAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlKHZhbDEsIHZhbDIpIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbDEgPT09IHZhbDIpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldE5ld0l0ZW0oKSB7XG4gICAgICAgICAgICAgICAgICAgc2NvcGUubmV3SXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZVBvcnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlclBvcnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogJydcbiAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmdW5jdGlvbiBpc0VtcHR5SXRlbShpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtLnNlcnZpY2VQb3J0ID09PSAnJyAmJiBpdGVtLnByb3ZpZGVyUG9ydCA9PT0gJycgJiYgaXRlbS5wcm90b2NvbCA9PT0gJycpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBzY29wZS5hZGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eUl0ZW0oc2NvcGUubmV3SXRlbSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaXRlbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbVN0ciA9IHNjb3BlLm5ld0l0ZW0uc2VydmljZVBvcnQgKyAnOidcbiAgICAgICAgICAgICAgICAgICAgICAgKyBzY29wZS5uZXdJdGVtLnByb3ZpZGVyUG9ydCArICc6J1xuICAgICAgICAgICAgICAgICAgICAgICArIHNjb3BlLm5ld0l0ZW0ucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgICAgLy9SZW1vdmVzIGV4aXN0aW5nIGl0ZW0gd2l0aCB0aGUgc2FtZSB2YWx1ZSBmaXJzdCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgICAgXy5wdWxsQWxsV2l0aChzY29wZS5pdGVtcywgW25ld0l0ZW1TdHJdLCBjb21wYXJlKTtcbiAgICAgICAgICAgICAgICAgICBzY29wZS5pdGVtcy5wdXNoKG5ld0l0ZW1TdHIpO1xuICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3SXRlbSgpO1xuICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24ocGFzc2VkSXRlbSkge1xuICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKHNjb3BlLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcGFyZShpdGVtLCBwYXNzZWRJdGVtKTtcbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICByZXNldE5ld0l0ZW0oKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJwb3J0cy5odG1sJ1xuICAgICAgIH1cbiAgICB9KTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IGNzaGFtcHVyIG9uIDcvMTcvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2VydmljZWxicycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscy5zdGF0cycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RhdHMnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXJ2aWNlbGJTdGF0c0N0cmwgYXMgc2VydmljZWxiU3RhdHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYnN0YXRzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NlcnZpY2VsYlN0YXRzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnU2VydmljZWxic01vZGVsJywgJ0luc3BlY3RTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFNlcnZpY2VsYnNNb2RlbCwgSW5zcGVjdFNlcnZpY2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlbGJTdGF0c0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgLyogR2V0cyB0aGUgTmV0d29yayBPcGVyYXRpb25hbCBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlbGJJbnNwZWN0KHJlZnJlc2gpe1xuICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlbGJzTW9kZWwuZ2V0SW5zcGVjdEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXksIENvbnRpdkdsb2JhbHMuU0VSVklDRUxCU19JTlNQRUNUX0VORFBPSU5ULCByZWZyZXNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYlN0YXRzQ3RybC5zZXJ2aWNlbGJJbnNwZWN0U3RhdHMgPSByZXN1bHQuT3BlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJTdGF0c0N0cmwuY29uZmlnID0gcmVzdWx0LkNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuT3Blci5wcm92aWRlcnMhPXVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXJEZXRhaWxzID0gSW5zcGVjdFNlcnZpY2UuYnVpbGRFbmRQb2ludHMocmVzdWx0Lk9wZXIucHJvdmlkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEluc3BlY3RTZXJ2aWNlLmNoZWNrQ29udGFpbmVyQ2hhbmdlZChzZXJ2aWNlbGJTdGF0c0N0cmwucHJvdmlkZXJEZXRhaWxzLCBwcm92aWRlckRldGFpbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJTdGF0c0N0cmwucHJvdmlkZXJzID0gcmVzdWx0Lk9wZXIucHJvdmlkZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiU3RhdHNDdHJsLnByb3ZpZGVyRGV0YWlscyA9IHByb3ZpZGVyRGV0YWlscztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJTdGF0c0N0cmwucHJvdmlkZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYlN0YXRzQ3RybC5wcm92aWRlckRldGFpbHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlbGJJbnNwZWN0KGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2VydmljZWxiSW5zcGVjdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XSk7XG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNldHRpbmdzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5jbHVzdGVyJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jbHVzdGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ2x1c3RlclNldHRpbmdDdHJsIGFzIGNsdXN0ZXJTZXR0aW5nQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXR0aW5ncy9jbHVzdGVyc2V0dGluZ3MuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQ2x1c3RlclNldHRpbmdDdHJsJywgWyckc3RhdGVQYXJhbXMnLCAnQ1JVREhlbHBlclNlcnZpY2UnLCAnTm9kZXNTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZVBhcmFtcywgQ1JVREhlbHBlclNlcnZpY2UsIE5vZGVzU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGNsdXN0ZXJTZXR0aW5nQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsdXN0ZXJTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2x1c3RlclNldHRpbmdDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyU2V0dGluZ0N0cmwubm9kZU9wc09iai5ub2RlcyA9IFskc3RhdGVQYXJhbXMua2V5XTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNsZWFudXBFeHRyYVZhcnMoY2x1c3RlclNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNyZWF0ZUV4dHJhVmFycyhjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc1NlcnZpY2UudXBkYXRlU2V0dGluZ3MoY2x1c3RlclNldHRpbmdDdHJsLm5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGNsdXN0ZXJTZXR0aW5nQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbHVzdGVyU2V0dGluZ0N0cmwubm9kZU9wc09iaiA9IHt9O1xuICAgICAgICAgICAgY2x1c3RlclNldHRpbmdDdHJsLmV4dHJhX3ZhcnMgPSB7fTsgLy9UT0RPIEludGlhbGl6ZSBmcm9tIGdsb2JhbCBzZXR0aW5nc1xuICAgICAgICAgICAgY2x1c3RlclNldHRpbmdDdHJsLmFuc2libGVWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgICAgIGNsdXN0ZXJTZXR0aW5nQ3RybC5lbnZWYXJpYWJsZXMgPSBbXTtcblxuICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmdldFNldHRpbmdzKGNsdXN0ZXJTZXR0aW5nQ3RybCk7XG5cbiAgICAgICAgICAgIGNsdXN0ZXJTZXR0aW5nQ3RybC51cGRhdGVDbHVzdGVyU2V0dGluZ3MgPSB1cGRhdGVDbHVzdGVyU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoY2x1c3RlclNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2V0dGluZ3MnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLm5ldHdvcmtzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9uZXR3b3JrcycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtTZXR0aW5nQ3RybCBhcyBuZXR3b3JrU2V0dGluZ0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2V0dGluZ3MvbmV0d29ya3NldHRpbmdzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtTZXR0aW5nQ3RybCcsIFsnQ1JVREhlbHBlclNlcnZpY2UnLCAnTmV0d29ya1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoQ1JVREhlbHBlclNlcnZpY2UsIE5ldHdvcmtTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgbmV0d29ya1NldHRpbmdDdHJsID0gdGhpcztcbiAgICAgICAgICAgIG5ldHdvcmtTZXR0aW5nQ3RybC52bGFuUGF0dGVybiA9IENvbnRpdkdsb2JhbHMuVkxBTl9SRUdFWDtcbiAgICAgICAgICAgIG5ldHdvcmtTZXR0aW5nQ3RybC52eGxhblBhdHRlcm4gPSBDb250aXZHbG9iYWxzLlZYTEFOX1JFR0VYO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVOZXR3b3JrU2V0dGluZ3MoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtTZXR0aW5nQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya1NldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIobmV0d29ya1NldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya1NlcnZpY2UudXBkYXRlU2V0dGluZ3MobmV0d29ya1NldHRpbmdDdHJsLnNldHRpbmcpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrU2V0dGluZ0N0cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IobmV0d29ya1NldHRpbmdDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ldHdvcmtTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3JrU2VydmljZS5nZXRTZXR0aW5ncygpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrU2V0dGluZ0N0cmwuc2V0dGluZyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0TmV0d29ya1NldHRpbmdzKCk7XG4gICAgICAgICAgICBuZXR3b3JrU2V0dGluZ0N0cmwudXBkYXRlTmV0d29ya1NldHRpbmdzID0gdXBkYXRlTmV0d29ya1NldHRpbmdzO1xuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya1NldHRpbmdDdHJsKTtcbiAgICAgICAgfV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXR0aW5ncycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMudm9sdW1lcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvdm9sdW1lcycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZvbHVtZVNldHRpbmdDdHJsIGFzIHZvbHVtZVNldHRpbmdDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9zZXR0aW5ncy92b2x1bWVzZXR0aW5ncy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWb2x1bWVTZXR0aW5nQ3RybCcsIFsnQ1JVREhlbHBlclNlcnZpY2UnLCAnVm9sdW1lU2V0dGluZ1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoQ1JVREhlbHBlclNlcnZpY2UsIFZvbHVtZVNldHRpbmdTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lU2V0dGluZ0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVWb2x1bWVTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICBpZiAodm9sdW1lU2V0dGluZ0N0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHZvbHVtZVNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIodm9sdW1lU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBWb2x1bWVTZXR0aW5nU2VydmljZS51cGRhdGVTZXR0aW5ncyh2b2x1bWVTZXR0aW5nQ3RybC5zZXR0aW5nKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lU2V0dGluZ0N0cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZVNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcih2b2x1bWVTZXR0aW5nQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVTZXR0aW5nU2VydmljZS5nZXRTZXR0aW5ncygpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2b2x1bWVTZXR0aW5nQ3RybC5zZXR0aW5nID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRWb2x1bWVTZXR0aW5ncygpO1xuICAgICAgICAgICAgdm9sdW1lU2V0dGluZ0N0cmwudXBkYXRlVm9sdW1lU2V0dGluZ3MgPSB1cGRhdGVWb2x1bWVTZXR0aW5ncztcblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lU2V0dGluZ0N0cmwpO1xuICAgICAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zdG9yYWdlcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RvcmFnZV9wb2xpY2llcy9zdG9yYWdlcG9saWN5Y3JlYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCBhcyBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwnLCBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnU3RvcmFnZVBvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFN0b3JhZ2VQb2xpY2llc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9TdG9yYWdlUG9saWNpZXMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub1N0b3JhZ2VQb2xpY2llcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGaWxlc3lzdGVtQ21kcygpIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5maWxlc3lzdGVtY21kcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kuZmlsZXN5c3RlbXNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmlsZXN5c3RlbUNtZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuY3JlYXRlKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9TdG9yYWdlUG9saWNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tlbmRzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3J1ZFwiOiBcImNlcGhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibW91bnRcIjogXCJjZXBoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNuYXBzaG90XCI6IFwiY2VwaFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwidW5sb2NrZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZHJpdmVyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicG9vbFwiOiBcInJiZFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlsZXN5c3RlbVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNuYXBzaG90c1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzbmFwc2hvdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCIzMG1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtlZXBcIjogMjBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJhdGUtbGltaXRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid3JpdGUtaW9wc1wiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVhZC1pb3BzXCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3cml0ZS1icHNcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlYWQtYnBzXCI6IDAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZXN5c3RlbXNcIjoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5jcmVhdGVQb2xpY3kgPSBjcmVhdGVQb2xpY3k7XG4gICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuICAgICAgICAgICAgc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwuZmlsZXN5c3RlbWNtZHMgPSBbXTtcblxuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzI3LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgYXMgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgYXMgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgJ1ZvbHVtZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgVm9sdW1lc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5maWxlc3lzdGVtY21kcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVG8gc2hvdyBlZGl0IG9yIGRldGFpbHMgc2NyZWVuIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLm1vZGUgPSAnZGV0YWlscyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5saXN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5kZXRhaWxzJywgeydrZXknOiBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWV9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxFZGl0aW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5kZWxldGVVc2luZ0tleShzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWUsICduYW1lJykudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEdldCB2b2x1bWVzIGJlbG9uZ2luZyB0byBhIHBvbGljeVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZXMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5nZXQocmVsb2FkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC52b2x1bWVzID0gJGZpbHRlcignb3JkZXJCeScpKF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb2xpY3knOiBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAnbmFtZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplRmlsZXN5c3RlbUNtZHNBcnJheSgpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuZmlsZXN5c3RlbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaCh7bmFtZToga2V5LCB2YWx1ZTogdmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmZpbGVzeXN0ZW1jbWRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGaWxlc3lzdGVtQ21kcygpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmZpbGVzeXN0ZW1jbWRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuZmlsZXN5c3RlbXNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZpbGVzeXN0ZW1DbWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5zYXZlKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIFN0b3JhZ2VQb2xpY2llc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSwgZmFsc2UsICduYW1lJylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnBvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVGaWxlc3lzdGVtQ21kc0FycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRWb2x1bWVzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmRlbGV0ZVBvbGljeSA9IGRlbGV0ZVBvbGljeTtcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwuc2F2ZVBvbGljeSA9IHNhdmVQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuXG4gICAgICAgICAgICAgICAgc2V0TW9kZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRWb2x1bWVzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzIvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LnN0b3JhZ2Vwb2xpY2llc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5YmFzaWNzZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2U3RvcmFnZXBvbGljeWZpbGVzeXN0ZW1zZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nLFxuICAgICAgICAgICAgICAgIGZpbGVzeXN0ZW1jbWRzOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmZpbGVzeXN0ZW1zID0gWydleHQ0JywgJ2J0cmZzJ107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL2ZpbGVzeXN0ZW1zZXR0aW5ncy5odG1sJ1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2U3RvcmFnZXBvbGljeXNuYXBzaG90c2V0dGluZ3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwb2xpY3k6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RvcmFnZV9wb2xpY2llcy9zbmFwc2hvdHNldHRpbmdzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5cndvcHNzZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3J3b3Bzc2V0dGluZ3MuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlN0b3JhZ2Vwb2xpY3liYWNrZW5kZHJpdmVyc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL2JhY2tlbmRkcml2ZXJzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvcmFnZVBvbGljeUxpc3RDdHJsIGFzIHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1N0b3JhZ2VQb2xpY3lMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBzdG9yYWdlUG9saWN5TGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2xpY2llcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5TGlzdEN0cmwucG9saWNpZXMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFBvbGljaWVzKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XSk7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5lZGdlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGdlL3tzb3VyY2VOYW1lLCB0YXJnZXROYW1lLCBzb3VyY2VMaXN0LCB0YXJnZXRMaXN0fScsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExpc3Q6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWaXN1YWxpemF0aW9uRWRnZUN0cmwgYXMgdmlzdWFsaXphdGlvbmVkZ2VDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2UuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVmlzdWFsaXphdGlvbkVkZ2VDdHJsJywgW1wiJHNjb3BlXCIsIFwiJGh0dHBcIiwgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnVmlzdWFsaXphdGlvblNlcnZpY2UnLCAnJGludGVydmFsJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFZpc3VhbGl6YXRpb25TZXJ2aWNlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VOYW1lID0gJHN0YXRlUGFyYW1zLnNvdXJjZU5hbWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9ICRzdGF0ZVBhcmFtcy50YXJnZXROYW1lO1xuICAgICAgICAgICAgdmFyIHNvdXJjZUxpc3QgPSAkc3RhdGVQYXJhbXMuc291cmNlTGlzdDtcbiAgICAgICAgICAgIHZhciB0YXJnZXRMaXN0ID0gJHN0YXRlUGFyYW1zLnRhcmdldExpc3Q7XG5cbiAgICAgICAgICAgIC8vSWYgdGhlIHBhZ2UgaXMgcmVsb2FkZWQsIHRoZXNlIHN0YXRlIHBhcmFtcyBhcmUgYWxsIG51bGwsXG4gICAgICAgICAgICAvL3NvIGl0IHdpbGwgcm91dGUgdGhlbSBiYWNrIHRvIHRoZSB2aXN1YWxpemF0aW9uIHRhYiB0b3Agdmlld1xuICAgICAgICAgICAgaWYgKHNvdXJjZUxpc3QgPT0gbnVsbCB8fCB0YXJnZXRMaXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24ubGlzdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdmFyIHQgPSBkLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICRzY29wZS5lZGdlRGF0YUludGVydmFsID0gXG4gICAgICAgICAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBWaXN1YWxpemF0aW9uU2VydmljZS5nZXRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0LCB0LnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN1bHQucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHJlc3VsdHMsIGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gci5zZXJpZXNbMF0udmFsdWVzWzBdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRnZURhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGdlRGF0YVRpbWUgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICAgICAgLy9EZXN0cm95aW5nIHRoZSBpbnRlcnZhbCBmdW5jdGlvbiBvbiByb3V0ZSBjaGFuZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgeyAkaW50ZXJ2YWwuY2FuY2VsKCRzY29wZS5lZGdlRGF0YUludGVydmFsKTsgfSk7XG5cblxuICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0T2xkRWRnZURhdGEoc291cmNlTGlzdCwgdGFyZ2V0TGlzdClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdWx0LnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlZGdlRGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL3Jlc3VsdHMsIGlmIG5vdCBlbXB0eSwgYXJlIGV4cGVjdGVkIHRvIGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy82IGRhdGEgZW50cmllc1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0cywgZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHIuc2VyaWVzWzBdLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGVkZ2VEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZURhdGEucHVzaChkWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YSwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZURhdGFbaV0gKz0gZFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VOYW1lID0gc291cmNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlTGlzdCA9IHNvdXJjZUxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXRMaXN0ID0gdGFyZ2V0TGlzdDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9sZEVkZ2VEYXRhID0gZWRnZURhdGE7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XSk7XG5cblxuXG5cblxuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmRpcmVjdGl2ZShcInZpc3VhbGl6YXRpb25FZGdlXCIsIFsnJHdpbmRvdycsXG4gICAgICAgIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZpc3VhbGl6YXRpb25FZGdlRDMoc2NvcGUsIGQzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGJvZHlFbC5jbGllbnRXaWR0aCAtIDQwMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gIGJvZHlFbC5jbGllbnRIZWlnaHQgLSA0MDA7XG5cblxuICAgICAgICAgICAgICAgIC8vdGFrZW4gZnJvbSBodHRwOi8vYmwub2Nrcy5vcmcvc2ltZW5icmVra2VuLzY2MzQwNzBcbiAgICAgICAgICAgICAgICAvLyAvKiogTUFJTiBTVkcgKiovXG4gICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gNTksXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSA3NTAsXG4gICAgICAgICAgICAgICAgbm93ID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdvcmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZDMucmFuZ2UobGltaXQpLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLm9sZEVkZ2VEYXRhW01hdGguZmxvb3IoZC8xMCldIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGQzLnRpbWUuc2NhbGUoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSwgbm93IC0gZHVyYXRpb25dKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIGQzLm1heChncm91cHMuY3VycmVudC5kYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCArIDEwOyB9KV0pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAgICAgLmludGVycG9sYXRlKCdiYXNpcycpXG4gICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KG5vdyAtIChsaW1pdCAtIDEgLSBpKSAqIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkKVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciB4U3ZnID0gZDMuc2VsZWN0KCcuZ3JhcGgnKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDI1KVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ292ZXJmbG93JywgJ3Zpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHZhciB5QXhpcyA9IHhTdmcuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXG4gICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIHdpZHRoICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh5LmF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHkpLm9yaWVudCgnbGVmdCcpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc3ZnPSBkMy5zZWxlY3QoJy5ncmFwaCcpLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NoYXJ0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGggLSA1MClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCArIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLnN0eWxlKCdvdmVyZmxvdycsIFwidmlzaWJsZVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBheGlzID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4IGF4aXMnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KCdib3R0b20nKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBzdmcuYXBwZW5kKCdnJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLnBhdGggPSBwYXRocy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoW2dyb3VwLmRhdGFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgbmFtZSArICcgZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBncm91cC5jb2xvcilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5kYXRhLnB1c2goc2NvcGUuZWRnZURhdGEgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5wYXRoLmF0dHIoJ2QnLCBsaW5lKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2hpZnQgZG9tYWluXG4gICAgICAgICAgICAgICAgICAgIHguZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSAqIGR1cmF0aW9uLCBub3cgLSBkdXJhdGlvbl0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNsaWRlIHgtYXhpcyBsZWZ0XG4gICAgICAgICAgICAgICAgICAgIGF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgeUF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHkuYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2xpZGUgcGF0aHMgbGVmdFxuICAgICAgICAgICAgICAgICAgICBwYXRocy5hdHRyKCd0cmFuc2Zvcm0nLCBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhc2UoJ2xpbmVhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeChub3cgLSAobGltaXQgLSAxKSAqIGR1cmF0aW9uKSArICcpJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBvbGRlc3QgZGF0YSBwb2ludCBmcm9tIGVhY2ggZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpY2soKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VBJyxcbiAgICAgICAgICAgICAgICByZXBsYWNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2V0ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaEdyb3VwKFsnZWRnZURhdGEnLCAnb2xkRWRnZURhdGEnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5lZGdlRGF0YSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5vbGRFZGdlRGF0YSAhPSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmluaXRpYWxpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmluaXRpYWxpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQzID0gJHdpbmRvdy5kMzsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbkVkZ2VEMyhzY29wZSwgZDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXVxuKTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5zZXJ2aWNlKCdTdGF0ZVNhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2ZWRTdGF0ZXMgPSB7fTtcbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJ2aXN1YWxpemF0aW9uR3JhcGhcIiwgWyckd2luZG93JywgJyRzdGF0ZScsICdWaXN1YWxpemVyR3JhcGgnLCAnUG9saWN5U2VydmljZScsICdWaXN1YWxpemVyRGF0YVNvdXJjZScsICdTdGF0ZVNhdmUnLFxuICAgICAgICBmdW5jdGlvbigkd2luZG93LCAkc3RhdGUsIFZpc3VhbGl6ZXJHcmFwaCwgUG9saWN5U2VydmljZSwgVmlzdWFsaXplckRhdGFTb3VyY2UsIFN0YXRlU2F2ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdmlzdWFsaXphdGlvbmxpc3RkMyhzY29wZSwgZWxlbSwgVmlzdWFsaXplckdyYXBoLCBQb2xpY3lTZXJ2aWNlLCBWaXN1YWxpemVyRGF0YVNvdXJjZSwgU3RhdGVTYXZlKSB7XG4gICAgICAgICAgICAgICAgLy9kb24ndCBydW4gdW50aWwgYWxsIGluaXRpYWxpemF0aW9uIGNhbGxzIGhhdmUgcmV0dXJuZWRcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUubm9kZXMgPT09IHVuZGVmaW5lZCB8fCBzY29wZS5saW5rcyA9PT0gdW5kZWZpbmVkIHx8IHNjb3BlLmNoaWxkcmVuX3N0cnVjdCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jcmVhdGluZyBEYXRhU291cmNlXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFTb3VyY2UgPSBuZXcgVmlzdWFsaXplckRhdGFTb3VyY2UuRGF0YVNvdXJjZShzY29wZS5ub2Rlcywgc2NvcGUubGlua3MsIHNjb3BlLmNoaWxkcmVuX3N0cnVjdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5hbmNlc3RvcnNfc3RydWN0LCBzY29wZS5sYWJlbHMsIHNjb3BlLnNlcnZpY2VTZWxlY3RvcnMpO1xuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2Uuc2V0QW5jZXN0b3JzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMsIGxpbmtzO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRvcERhdGEgPSBkYXRhU291cmNlLmdldFRvcExldmVsRmxvdygpO1xuICAgICAgICAgICAgICAgIG5vZGVzID0gZGF0YVNvdXJjZS5wcm9jZXNzTm9kZURhdGEodG9wRGF0YS5ub2RlRGF0YSk7XG4gICAgICAgICAgICAgICAgbGlua3MgPSBkYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YSh0b3BEYXRhLmxpbmtEYXRhLCBub2Rlcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gYm9keUVsLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAgYm9keUVsLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgICAgIC8qKiBNQUlOIFNWRyAqKi9cbiAgICAgICAgICAgICAgICB2YXIgcmF3U3ZnPWVsZW0uZmluZCgnc3ZnJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJChyYXdTdmcucGFyZW50KCkpLm9mZnNldCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRpdldpZHRoID0gJChyYXdTdmcucGFyZW50KCkpLndpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KHJhd1N2Z1swXSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkaXZXaWR0aClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0IC0gb2Zmc2V0LnRvcCAtIDIwKTtcblxuICAgICAgICAgICAgICAgIC8vaW5zdGFsbGluZyBwb2xpY2llc1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaCA9IG5ldyBWaXN1YWxpemVyR3JhcGguR3JhcGgoc3ZnLCBub2RlcywgbGlua3MsIGRhdGFTb3VyY2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmNoaWxkcmVuX3N0cnVjdCwgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0UGF0aFBvbGljeShuZXcgUG9saWN5U2VydmljZS5TYXZlU3RhdGVQb2xpY3koU3RhdGVTYXZlLnNhdmVkU3RhdGVzKSk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0UGF0aFBvbGljeShuZXcgUG9saWN5U2VydmljZS5QYXRoQ2hhbmdlVmlld1BvbGljeSgkc3RhdGUpKTtcbiAgICAgICAgICAgICAgICAvL1FUaXBQb2xpY3kgaXMgZm9yIGJvdGggTm9kZXMgYW5kIFBhdGhzLCBpbnN0YWxsIHNhbWUgb25lIG9uIGJvdGhcbiAgICAgICAgICAgICAgICB2YXIgcVRpcFBvbGljeSA9IG5ldyBQb2xpY3lTZXJ2aWNlLlFUaXBQb2xpY3koKTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHFUaXBQb2xpY3kpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocVRpcFBvbGljeSk7XG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0Sm9pblZpZXdQb2xpY3kgPSBuZXcgUG9saWN5U2VydmljZS5TcGxpdEpvaW5WaWV3UG9saWN5KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShzcGxpdEpvaW5WaWV3UG9saWN5KTtcbiAgICAgICAgICAgICAgICBzcGxpdEpvaW5WaWV3UG9saWN5Lmluc3RhbGxCYWNrQnV0dG9uKCQoJyNiYWNrQnV0dG9uJykpO1xuICAgICAgICAgICAgICAgIHNwbGl0Sm9pblZpZXdQb2xpY3kuaW5zdGFsbFRpdGxlKCQoJyNncmFwaC10aXRsZScpKTtcblxuICAgICAgICAgICAgICAgIC8vbG9hZCBvbGQgdmlldyBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShTdGF0ZVNhdmUuc2F2ZWRTdGF0ZXMpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncmFwaCA9IHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaDtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubG9hZChTdGF0ZVNhdmUuc2F2ZWRTdGF0ZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0OidFQScsXG4gICAgICAgICAgICAgICAgcmVwbGFjZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb250ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS51bmJpbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5kZXN0cm95KCk7fSk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaEdyb3VwKFsnbm9kZXMnLCAnbGlua3MnLCAnY2hpbGRyZW5fc3RydWN0JywgJ2FuY2VzdG9yc19zdHJ1Y3QnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5ub2RlcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmxpbmtzICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2hpbGRyZW5fc3RydWN0ICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzY29wZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbGl6YXRpb25saXN0ZDMoc2NvcGUsIGVsZW0sIFZpc3VhbGl6ZXJHcmFwaCwgUG9saWN5U2VydmljZSwgVmlzdWFsaXplckRhdGFTb3VyY2UsIFN0YXRlU2F2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmRhdGFTb3VyY2UubGlua3MgPSBzY29wZS5saW5rcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLnVwZGF0ZUxpbmtEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIF1cbik7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24ubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1Zpc3VhbGl6YXRpb25MaXN0Q3RybCBhcyB2aXN1YWxpemF0aW9uTGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9ubGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWaXN1YWxpemF0aW9uTGlzdEN0cmwnLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCAnVmlzdWFsaXphdGlvblNlcnZpY2UnLCAnJGludGVydmFsJywgXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIFZpc3VhbGl6YXRpb25TZXJ2aWNlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIC8vdG8gc2VlIHRoZSBleHBlY3RlZCBmb3JtYXQgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGVzZSBjYWxscyxcbiAgICAgICAgICAgIC8vbG9vayBhdCBhcHAvY29tcG9uZW50cy9ncmFwaG9iamVjdHMvZGF0YXNvdXJjZS92aXN1YWxpemVyZGF0YXNvdXJjZS5qc1xuICAgICAgICAgICAgdmFyIHN1Y2Nlc3NHcmFwaERhdGFDYWxsYmFjayA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBsaW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlSWRzID0gW107XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHJlc3VsdC5yZXN1bHRzWzBdLnNlcmllcywgZnVuY3Rpb24oc2VyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRwb2ludCA9IHNlcmllcy50YWdzLkVuZHBvaW50SVA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHNlcmllcy50YWdzLlByb3ZpZGVySVA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKG5vZGVJZHMsIGVuZHBvaW50KSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yczogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzLnB1c2goZW5kcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKG5vZGVJZHMsIHByb3ZpZGVyKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yczogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzLnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgbGlua3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtPdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogc2VyaWVzLnZhbHVlc1swXVsyXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBsaW5rcy5wdXNoKGxpbmtPdXQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlua0luID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IHNlcmllcy52YWx1ZXNbMF1bMV1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbGlua3MucHVzaChsaW5rSW4pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ub2RlcyA9IG5vZGVzO1xuICAgICAgICAgICAgICAgICRzY29wZS5saW5rcyA9IGxpbmtzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vaW5pdGlhbCBjYWxsXG4gICAgICAgICAgICBWaXN1YWxpemF0aW9uU2VydmljZS5nZXRHcmFwaERhdGEoKS50aGVuKHN1Y2Nlc3NHcmFwaERhdGFDYWxsYmFjaywgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL3dpbGwgZmFpbCBzaWxlbnRseSwgZ3JhcGggd29uJ3QgYmUgZGlzcGxheWVkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7ICRpbnRlcnZhbC5jYW5jZWwoJHNjb3BlLmdyYXBoRGF0YUludGVydmFsKTsgfSk7XG5cbiAgICAgICAgICAgIFZpc3VhbGl6YXRpb25TZXJ2aWNlLmdldFN0cnVjdHVyZURhdGEoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL3RvIHNlZSB0aGUgZXhwZWN0ZWQgZm9ybSBvZiBhbmNlc3Rvcl9zdHJ1Y3QgYW5kIGNoaWxkcmVuX3N0cnVjdCwgXG4gICAgICAgICAgICAgICAgLy9sb29rIGF0IGFwcC9jb21wb25lbnRzL2dyYXBob2JqZWN0cy9kYXRhc291cmNlL3Zpc3VhbGl6ZXJkYXRhc291cmNlLmpzXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QgPSByZXN1bHQuYW5jZXN0b3JzX3N0cnVjdDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hpbGRyZW5fc3RydWN0ID0gcmVzdWx0LmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGFiZWxzID0gcmVzdWx0LmxhYmVscztcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VydmljZVNlbGVjdG9ycyA9IHJlc3VsdC5zZXJ2aWNlU2VsZWN0b3JzO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL3dpbGwgZmFpbCBzaWxlbnRseSwgZ3JhcGggd29uJ3QgYmUgZGlzcGxheWVkXG4gICAgICAgICAgICB9KTtcbiAgICB9XSk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemF0aW9uU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlcyBhIGdldCByZXF1ZXN0IHdpdGggdGhlIHVybCBhbmQgY29uZmlnLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgdXJsICAgICBUaGUgdXJsXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBjb25maWcgIFRoZSBjb25maWd1cmF0aW9uc1xuICAgICAgICAgKiBAcmV0dXJuICAgICB7JEh0dHAgUHJvbWlzZX0gICBQcm9taXNlIG9mIHRoZSByZXF1ZXN0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtYWtlR2V0KHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwgY29uZmlnKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZXMgYSBwb3N0IHJlcXVlc3Qgd2l0aCB0aGUgdXJsIGFuZCBkYXRhXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB1cmwgICAgIFRoZSB1cmxcbiAgICAgICAgICogQHBhcmFtICAgICAge0pTT059ICAgIGRhdGEgICAgVGhlIGRhdGFcbiAgICAgICAgICogQHJldHVybiAgICAgeyRIdHRwIFByb21pc2V9ICAgUHJvbWlzZSBvZiB0aGUgcmVxdWVzdFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWFrZVBvc3QodXJsLCBkYXRhKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGNvbnZlcnRzIHRoZSBkYXRhIGludG8geC13d3ctZnJvbS11cmxlbmNvZGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0pTT059ICBvYmogICAgIEpTT04gZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICB4LXd3dy1mb3JtLXVybGVuY29kZWQgc3RyaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBwYXJhbSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9ICcnLCBuYW1lLCB2YWx1ZSwgZnVsbFN1Yk5hbWUsIHN1Yk5hbWUsIHN1YlZhbHVlLCBpbm5lck9iaiwgaTtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8dmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTdWJOYW1lID0gbmFtZSArICdbJyArIGkgKyAnXSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9ialtmdWxsU3ViTmFtZV0gPSBzdWJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSArPSBwYXJhbShpbm5lck9iaikgKyAnJic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoc3ViTmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVbc3ViTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgJ1snICsgc3ViTmFtZSArICddJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IHBhcmFtKGlubmVyT2JqKSArICcmJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyAnJic7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeS5sZW5ndGggPyBxdWVyeS5zdWJzdHIoMCwgcXVlcnkubGVuZ3RoIC0gMSkgOiBxdWVyeTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgdXJsOnVybCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6J1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc09iamVjdChkYXRhKSAmJiBTdHJpbmcoZGF0YSkgIT09ICdbb2JqZWN0IEZpbGVdJyA/IHBhcmFtKGRhdGEpIDogZGF0YTtcbiAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEdyYXBoRGF0YSgpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZJU1VBTElaQVRJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICB1cmwgKz0gJ2luZmx1eC9xdWVyeSc7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBkYjpcInRlbGVncmFmXCIsXG4gICAgICAgICAgICAgICAgICAgIHE6XCJTRUxFQ1QgQnl0ZXNJbiwgQnl0ZXNPdXQsIEVuZHBvaW50SVAsIFByb3ZpZGVySVAgRlJPTSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxbSBHUk9VUCBCWSAqIExJTUlUIDFcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZUdldCh1cmwsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTdHJ1Y3R1cmVEYXRhKCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnc2VydmljZXMnO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VHZXQodXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkV2hlcmVRdWVyeShwb2ludHMsIHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IFwiKFwiO1xuICAgICAgICAgICAgcXVlcnkgKz0gdHlwZSArIFwiPVwiO1xuICAgICAgICAgICAgcXVlcnkgKz0gXCInXCIgKyBwb2ludHNbMF0gKyBcIicgXCI7XG4gICAgICAgICAgICAvL3N0YXJ0cyBhdCAxLCBzbyB3aWxsIG5vdCBydW4gaWYgbGVuZ3RoIGlzIDFcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gJ09SICc7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gdHlwZSArIFwiPVwiO1xuICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IFwiJ1wiICsgcG9pbnRzW2ldICsgXCInIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVlcnkgKz0gXCIpXCI7XG4gICAgICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0LCB0aW1lKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdpbmZsdXgvcXVlcnknO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGIgOiBcInRlbGVncmFmXCIsXG4gICAgICAgICAgICAgICAgICAgIHE6IFwiU0VMRUNUIHN1bShcIiArICdCeXRlc091dCcgKyBcIikgZnJvbSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxNXMgQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgXCJFbmRwb2ludElQXCIpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgJ1Byb3ZpZGVySVAnKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiR1JPVVAgQlkgdGltZSgyMHMpIExJTUlUIDE7IFNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNJbicgKyBcIikgZnJvbSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxNXMgQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgJ1Byb3ZpZGVySVAnKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsICdFbmRwb2ludElQJykgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBcIkdST1VQIEJZIHRpbWUoMjBzKSBmaWxsKDApIExJTUlUIDFcIlxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlUG9zdCh1cmwsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0T2xkRWRnZURhdGEoc291cmNlTGlzdCwgdGFyZ2V0TGlzdCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnaW5mbHV4L3F1ZXJ5JztcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkYiA6IFwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTogXCJTRUxFQ1Qgc3VtKFwiICsgJ0J5dGVzT3V0JyArIFwiKSBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEFORCBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHNvdXJjZUxpc3QsIFwiRW5kcG9pbnRJUFwiKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsIFwiUHJvdmlkZXJJUFwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIEdST1VQIEJZIHRpbWUoMTBzKSBmaWxsKDApIExJTUlUIDY7IFNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNJbicgKyBcIikgRlJPTSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxbSBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCBcIlByb3ZpZGVySVBcIikgK1wiIEFORCBcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeSh0YXJnZXRMaXN0LCBcIkVuZHBvaW50SVBcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiBHUk9VUCBCWSB0aW1lKDEwcykgZmlsbCgwKSBMSU1JVCA2XCJcbiAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZVBvc3QodXJsLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRHcmFwaERhdGE6IGdldEdyYXBoRGF0YSxcbiAgICAgICAgICAgIGdldFN0cnVjdHVyZURhdGE6IGdldFN0cnVjdHVyZURhdGEsXG4gICAgICAgICAgICBnZXRFZGdlRGF0YTogZ2V0RWRnZURhdGEsXG4gICAgICAgICAgICBnZXRPbGRFZGdlRGF0YTogZ2V0T2xkRWRnZURhdGFcbiAgICAgICAgfVxuICAgIH1dKTtcblxuXG5cblxuXG5cblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzMvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndm9sdW1lcy92b2x1bWVjcmVhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZvbHVtZUNyZWF0ZUN0cmwgYXMgdm9sdW1lQ3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lQ3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdWb2x1bWVzTW9kZWwnLCAnU3RvcmFnZVBvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFZvbHVtZXNNb2RlbCwgU3RvcmFnZVBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lQ3JlYXRlQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLmZpbGVzeXN0ZW1zID0gWydleHQ0JywgJ2J0cmZzJ107XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvVm9sdW1lc01vZGVsKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudm9sdW1lcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvVm9sdW1lc01vZGVsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHN0b3JhZ2UgcG9saWNpZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFN0b3JhZ2VQb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5wb2xpY2llcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXBwbHlQb2xpY3lTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLm5ld1ZvbHVtZS5wb2xpY3kgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5Lm5hbWU7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUuYmFja2VuZHMgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5LmJhY2tlbmRzO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLmRyaXZlciA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kuZHJpdmVyO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLmNyZWF0ZSA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kuY3JlYXRlO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLnJ1bnRpbWUgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5LnJ1bnRpbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHZvbHVtZUNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlQb2xpY3lTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuY3JlYXRlKHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1ZvbHVtZXNNb2RlbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcih2b2x1bWVDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lID0ge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJiYWNrZW5kc1wiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJkcml2ZXJcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcInJ1bnRpbWVcIjoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLmNyZWF0ZVZvbHVtZSA9IGNyZWF0ZVZvbHVtZTtcbiAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICAgICAgZ2V0U3RvcmFnZVBvbGljaWVzKCk7XG5cbiAgICAgICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNC8xNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudm9sdW1lcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWb2x1bWVEZXRhaWxzQ3RybCBhcyB2b2x1bWVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWb2x1bWVEZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRodHRwJywgJ1ZvbHVtZXNNb2RlbCcsICdWb2x1bWVTZXJ2aWNlJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGh0dHAsIFZvbHVtZXNNb2RlbCwgVm9sdW1lU2VydmljZSwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVEZXRhaWxzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvVm9sdW1lcygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnZvbHVtZXMubGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlVm9sdW1lKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcih2b2x1bWVEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5kZWxldGUodm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblRvVm9sdW1lcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVJbmZvKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSAkc3RhdGVQYXJhbXMua2V5LnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID17fTtcbiAgICAgICAgICAgICAgICBtb2RlbC5wb2xpY3kgPSB0b2tlbnNbMF07XG4gICAgICAgICAgICAgICAgbW9kZWwubmFtZSA9IHRva2Vuc1sxXTtcbiAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuZ2V0TW9kZWwobW9kZWwsIHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZvbHVtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lID0gdm9sdW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lVXNlSW5mbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lU25hcHNob3RzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVVc2VJbmZvKCkge1xuICAgICAgICAgICAgICAgIFZvbHVtZVNlcnZpY2UuZ2V0Vm9sdW1lVXNlSW5mbyh2b2x1bWVEZXRhaWxzQ3RybC52b2x1bWUpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2b2x1bWVEZXRhaWxzQ3RybC52b2x1bWVVc2UgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9SZXR1cm5zIGVycm9yIGlmIHZvbHVtZSBpcyBub3QgbW91bnRlZCBieSBhbnkgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZVNuYXBzaG90cygpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVTZXJ2aWNlLmdldFZvbHVtZVNuYXBzaG90cyh2b2x1bWVEZXRhaWxzQ3RybC52b2x1bWUpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2b2x1bWVEZXRhaWxzQ3RybC5zbmFwc2hvdHMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdHJpZ2dlclZvbHVtZVNuYXBzaG90KCl7XG4gICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuc25hcHNob3RTdWNjZXNzPWZhbHNlO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcih2b2x1bWVEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIFZvbHVtZVNlcnZpY2UudHJpZ2dlclNuYXBzaG90KHZvbHVtZURldGFpbHNDdHJsLnZvbHVtZSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICB2b2x1bWVEZXRhaWxzQ3RybC5zbmFwc2hvdFN1Y2Nlc3M9dHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpe1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHZvbHVtZURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2b2x1bWVEZXRhaWxzQ3RybC5kZWxldGVWb2x1bWUgPSBkZWxldGVWb2x1bWU7XG4gICAgICAgICAgICB2b2x1bWVEZXRhaWxzQ3RybC50cmlnZ2VyVm9sdW1lU25hcHNob3QgPSB0cmlnZ2VyVm9sdW1lU25hcHNob3Q7XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0Vm9sdW1lSW5mbyhmYWxzZSk7XG5cblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRWb2x1bWVJbmZvKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzIyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZvbHVtZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS52b2x1bWVzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWb2x1bWVMaXN0Q3RybCBhcyB2b2x1bWVMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdWb2x1bWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFZvbHVtZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZXMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lTGlzdEN0cmwudm9sdW1lcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXRWb2x1bWVzKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRWb2x1bWVzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzUvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmZhY3RvcnkoJ1ZvbHVtZVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVVc2VJbmZvKHZvbHVtZSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfVVNFU19FTkRQT0lOVFxuICAgICAgICAgICAgICAgICsgdm9sdW1lLnBvbGljeVxuICAgICAgICAgICAgICAgICsgJy8nICsgdm9sdW1lLm5hbWU7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy9SZXR1cm5zIGVycm9yIGlmIHZvbHVtZSBpcyBub3QgbW91bnRlZCBieSBhbnkgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVTbmFwc2hvdHModm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlRcbiAgICAgICAgICAgICAgICArIHZvbHVtZS5wb2xpY3lcbiAgICAgICAgICAgICAgICArICcvJyArIHZvbHVtZS5uYW1lO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlclNuYXBzaG90KHZvbHVtZSl7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlQgKyBcInRha2UvXCIgXG4gICAgICAgICAgICAgICAgKyB2b2x1bWUucG9saWN5XG4gICAgICAgICAgICAgICAgKyAnLycgKyB2b2x1bWUubmFtZTtcbiAgICAgICAgICAgICRodHRwLnBvc3QodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRWb2x1bWVVc2VJbmZvOiBnZXRWb2x1bWVVc2VJbmZvLFxuICAgICAgICAgICAgZ2V0Vm9sdW1lU25hcHNob3RzOiBnZXRWb2x1bWVTbmFwc2hvdHMsXG4gICAgICAgICAgICB0cmlnZ2VyU25hcHNob3Q6IHRyaWdnZXJTbmFwc2hvdFxuICAgICAgICB9XG4gICAgfV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IGNzaGFtcHVyIG9uIDgvOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudm9sdW1lcy5jb3B5Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jb3B5LycsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7c25hcHNob3Q6bnVsbCwgcG9saWN5Om51bGwsIHZvbHVtZTpudWxsfSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVm9sdW1lU25hcHNob3RDb3B5Q3RybCBhcyB2b2x1bWVTbmFwc2hvdENvcHlDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZvbHVtZXMvdm9sdW1lc25hcHNob3Rjb3B5Lmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lU25hcHNob3RDb3B5Q3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRodHRwJywgJ1ZvbHVtZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgJGludGVydmFsLCAkaHR0cCwgVm9sdW1lc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciB2b2x1bWVTbmFwc2hvdENvcHlDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENvcHkoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudm9sdW1lcy5kZXRhaWxzJywge2tleTokc3RhdGVQYXJhbXMucG9saWN5KycvJyskc3RhdGVQYXJhbXMudm9sdW1lfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ29Ub05ld1ZvbHVtZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS52b2x1bWVzLmRldGFpbHMnLCB7a2V5OiRzdGF0ZVBhcmFtcy5wb2xpY3krJy8nK3ZvbHVtZVNuYXBzaG90Q29weUN0cmwubmV3dm9sdW1lfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29weVNuYXBzaG90KCkge1xuICAgICAgICAgICAgICAgICAgICBpZih2b2x1bWVTbmFwc2hvdENvcHlDdHJsLmZvcm0uJHZhbGlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcih2b2x1bWVTbmFwc2hvdENvcHlDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHZvbHVtZVNuYXBzaG90Q29weUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsID17fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnBvbGljeSA9ICRzdGF0ZVBhcmFtcy5wb2xpY3k7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5uYW1lID0gJHN0YXRlUGFyYW1zLnZvbHVtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5jb3B5KG1vZGVsLCAkc3RhdGVQYXJhbXMuc25hcHNob3QsIHZvbHVtZVNuYXBzaG90Q29weUN0cmwubmV3dm9sdW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVTbmFwc2hvdENvcHlDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29Ub05ld1ZvbHVtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lU25hcHNob3RDb3B5Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcih2b2x1bWVTbmFwc2hvdENvcHlDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdm9sdW1lU25hcHNob3RDb3B5Q3RybC5wb2xpY3kgPSAkc3RhdGVQYXJhbXMucG9saWN5O1xuICAgICAgICAgICAgICAgIHZvbHVtZVNuYXBzaG90Q29weUN0cmwudm9sdW1lID0gJHN0YXRlUGFyYW1zLnZvbHVtZTtcbiAgICAgICAgICAgICAgICB2b2x1bWVTbmFwc2hvdENvcHlDdHJsLnNuYXBzaG90ID0gJHN0YXRlUGFyYW1zLnNuYXBzaG90O1xuICAgICAgICAgICAgICAgIHZvbHVtZVNuYXBzaG90Q29weUN0cmwuY29weVNuYXBzaG90ID0gY29weVNuYXBzaG90O1xuICAgICAgICAgICAgICAgIHZvbHVtZVNuYXBzaG90Q29weUN0cmwuY2FuY2VsQ29weSA9IGNhbmNlbENvcHk7XG4gICAgICAgICAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgY3NoYW1wdXIgb24gNy8xLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dkFjY29yZGlvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6ICc9JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZWxlbWVudC5maW5kKCcudWkuYWNjb3JkaW9uJykuYWNjb3JkaW9uID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLnVpLmFjY29yZGlvbicpLmFjY29yZGlvbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL2FjY29yZGlvbi5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZDb2xsYXBzaWJsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0AnLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb2xsYXBzZWQgPT09IHVuZGVmaW5lZCkgc2NvcGUuY29sbGFwc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9jb2xsYXBzaWJsZS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNC8yOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZFcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdAJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5maW5kKCdpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWhpZGUnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL2Vycm9ybWVzc2FnZS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2TmFtZXZhbHVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgIHJldHVybiB7XG4gICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICBpdGVtczogJz0nLFxuICAgICAgICAgICAgICAgbmFtZWhlYWRlcjogJ0AnLC8vRmllbGQgbmFtZSB0byBkaXNwbGF5IGZvciBrZXlcbiAgICAgICAgICAgICAgIHZhbHVlaGVhZGVyOiAnQCcsLy9GaWVsZCBuYW1lIHRvIGRpc3BsYXkgZm9yIHZhbHVlXG4gICAgICAgICAgICAgICB0eXBlOiAnQCcsLy8ndGV4dCcgb3IgJ3NlbGVjdCcgdG8gY2hvb3NlIGlucHV0IG9yIHNlbGVjdCBodG1sIHRhZyBmb3Iga2V5XG4gICAgICAgICAgICAgICBvcHRpb25zOiAnPScvL1RvIGJlIHVzZWQgd2hlbiB0eXBlIGlzICdzZWxlY3QnXG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIENvbXBhcmUgaWYgdHdvIGl0ZW1zIGhhdmUgc2FtZSBuYW1lXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsMVxuICAgICAgICAgICAgICAgICogQHBhcmFtIHZhbDJcbiAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlKHZhbDEsIHZhbDIpIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsMS5uYW1lID09IHZhbDIubmFtZTtcbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXROZXdJdGVtKCkge1xuICAgICAgICAgICAgICAgICAgIHNjb3BlLm5ld0l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJydcbiAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmdW5jdGlvbiBpc0VtcHR5SXRlbShpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtLm5hbWUgPT09ICcnICYmIGl0ZW0udmFsdWUgPT09ICcnKTtcbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgc2NvcGUuYWRkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgaWYgKGlzRW1wdHlJdGVtKHNjb3BlLm5ld0l0ZW0pKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLml0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pdGVtID0gW107XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlcyBleGlzdGluZyBpdGVtIHdpdGggdGhlIHNhbWUgbmFtZSBmaXJzdCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgICAgXy5wdWxsQWxsV2l0aChzY29wZS5pdGVtcywgW3Njb3BlLm5ld0l0ZW1dLCBjb21wYXJlKTtcbiAgICAgICAgICAgICAgICAgICBzY29wZS5pdGVtcy5wdXNoKHNjb3BlLm5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3SXRlbSgpO1xuICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24ocGFzc2VkSXRlbSkge1xuICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKHNjb3BlLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09IHBhc3NlZEl0ZW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICByZXNldE5ld0l0ZW0oKTtcblxuICAgICAgICAgICAgICAgaWYgKHNjb3BlLm5hbWVoZWFkZXIgPT09IHVuZGVmaW5lZCkgc2NvcGUubmFtZWhlYWRlciA9ICdOYW1lJztcbiAgICAgICAgICAgICAgIGlmIChzY29wZS52YWx1ZWhlYWRlciA9PT0gdW5kZWZpbmVkKSBzY29wZS52YWx1ZWhlYWRlciA9ICdWYWx1ZSc7XG4gICAgICAgICAgICAgICBpZiAoc2NvcGUudHlwZSA9PT0gdW5kZWZpbmVkKSBzY29wZS50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9uYW1ldmFsdWUuaHRtbCdcbiAgICAgICB9XG4gICAgfSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS80LzE2LlxuICovXG5cbi8qXG5EaXJlY3RpdmUgVXNhZ2UgOlxuXG5hKSBjdHZUYWJsZSAtXG4gICB1c2FnZSA6IDxjdHYtdGFibGUgZGVmYXVsdHNvcnRjb2x1bW49J25hbWUnIGl0ZW1zPSd0YWJsZUl0ZW1zJyBmaWx0ZXJlZGl0ZW1zPSdmaWx0SXRlbXMnIHNpemU9J3NpemUnPjwvY3R2LXRhYmxlPlxuICAgYXR0cmlidXRlIGRldGFpbHMgOiAgZGVmYXVsdHNvcnRjb2x1bW4gLSBUaGUgZGVmYXVsdCBjb2x1bW4gbmFtZShjb3JyZXNwb25kaW5nIGtleSBpbnNpZGUgdGhlIG9iamVjdCBvZiBpdGVtcyBhcnJheSkgb24gd2hpY2ggdGhlIHRhYmxlIHdpbGwgYmUgc29ydGVkIHdoZW4gaXQgaXMgbG9hZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgLSBBbiBhcnJheSBvZiBvYmplY3RzIHdoaWNoIHdpbGwgYmUgZGlzcGxheWVkIGJ5IHRoZSBjdHYtdGFibGUgZGlyZWN0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSAtIG51bWJlciBvZiByb3dzIHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgdGhlIHRhYmxlLiBJZiBpdGVtcy5sZW5ndGggPiBzaXplIHRoZW4gcmVtYWluaW5nIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gbmV4dCBwYWdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRpdGVtcyAtIFRoaXMgaXMgYW4gb3V0cHV0IGZpZWxkIHdoaWNoIHByb2R1Y2VzIGEgZmlsdGVyZWQgc3Vic2V0IG9mIGl0ZW1zIHNwZWNlZmllZCBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcmV2aW91cyBhdHRyaWJ1dGUsIEl0ZW1zIGFyZSBmaWx0ZXJlZCBiYXNlZCBvbiBzZWFyY2ggdGV4dCBkZWZpbmVkIGluc2lkZSBjdHYtc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBieSB0aGUgc2l6ZSBtZW50aW9uZWQgaW4gdGhlIGN0di10YWJsZSBhdHRyaWJ1dGVcbmIpIGN0dlRIIC1cbiAgIHVzYWdlIDogPGN0di10aCBzb3J0ZmllbGQ9J25hbWUnPm5hbWU8L2N0di10aD5cbiAgIGF0dHJpYnV0ZSBkZXRhaWxzIDogc29ydGZpZWxkIC0gVGhpcyBpcyB0aGUga2V5IG9mIHRoZSBvYmplY3QgcHJlc2VudCBpbnNpZGUgaXRlbXMgYXJyYXkgc3BlY2VmaWVkIGluIGN0dlRhYmxlLCBmb3IgZWcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgYXJyYXkgb2JqZWN0IGlzIDogW3tpcDogXCIyMC4xLjIuM1wiLCBob3N0OiBcImNsdXN0ZXItMVwifSx7aXA6IFwiMjAuMS4yLjRcIiwgaG9zdDogXCJjbHVzdGVyLTJcIn1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gZGlyZWN0aXZlIHdpbGwgYmUgPGN0di10aCBzb3J0ZmllbGQ9XCInaXAnXCI+IElwIEFkZHJlc3MgPC9jdHYtdGg+XG4gICBUYWJsZSBjYW4gb25seSBiZSBzb3J0ZWQgb24gY29sdW1ucyB3aGljaCBoYXMgc29ydGZpZWxkIGF0dHJpYnV0ZSBzcGVjZWZpZWQuXG5cbmMpIGN0dlRzZWFyY2ggLVxuICAgdXNhZ2UgOiA8Y3R2LXRzZWFyY2ggcGxhY2Vob2xkZXI9J1NlYXJjaCcgc2l6ZT0nMzAnPjwvY3R2LXRzZWFyY2g+XG4gICBhdHRyaWJ1dGUgZGV0YWlscyA6IHBsYWNlaG9sZGVyIC0gc3BlY2lmeSB0aGUgcGxhY2Vob2xkZXIgZm9yIHRoZSBpbnB1dCB0ZXh0IGZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgIHNpemUgLSBzcGVjaWZ5IHRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgc2VhcmNoIHN0cmluZ1xuICAgT25seSBpdGVtcyBtYXRjaGluZyB0aGUgc2VhcmNoIHN0cmluZyBhcmUgZGlzcGxheWVkIGluc2lkZSB0aGUgdGFibGUuXG5cbmQpIGN0dlRwYWdpbmF0aW9uIC1cbiAgIHVzYWdlIDogPGN0di10cGFnaW5hdGlvbj48L2N0di10cGFnaW5hdGlvbj5cbiAgIFByb3ZpZGVzIGxpbmsgZm9yIG1vdmluZyBiYWNrIGFuZCBmb3J0aCBvZiB0aGUgcmVzdWx0IHBhZ2UuXG5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUYWJsZVwiLCBbJ2ZpbHRlckZpbHRlcicsICdsaW1pdFRvRmlsdGVyJywgZnVuY3Rpb24gKGZpbHRlckZpbHRlciwgbGltaXRUb0ZpbHRlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiAnPScsXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRpdGVtczogJz0nLFxuICAgICAgICAgICAgICAgIHNpemU6ICdAJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0c29ydGNvbHVtbjogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRmaWx0ZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLmNodW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5wYWdlTm8gPSAwO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zb3J0T2JqPWluaXRpYWxpemVTb3J0KCRzY29wZS5kZWZhdWx0c29ydGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2l6ZSA9IHBhcnNlSW50KCRzY29wZS5zaXplLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHRhYmxlQ3RybC5zaXplKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2l6ZSA9IDEyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEFsd2F5cyBjYWxsIHNob3dDaHVuayB3aXRoIGJvdGggcGFyYW1ldGVycy5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gcGFnZU5vXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHNlYXJjaFRleHRcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93Q2h1bmsocGFnZU5vLCBzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zZWFyY2hUZXh0ID0gc2VhcmNoVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VObyA9PT0gdW5kZWZpbmVkIHx8IHBhZ2VObyA8IDApIHBhZ2VObyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5wYWdlTm8gPSBwYWdlTm87XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7Ly9UT0RPOiBDaGVjayB3aHkgaXRlbXMgYXJlIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hUZXh0RmlsdGVyZWRJdGVtcyA9IGZpbHRlckZpbHRlcigkc2NvcGUuaXRlbXMsIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zID0gJGZpbHRlcignb3JkZXJCeScpKHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zLCB0YWJsZUN0cmwuc29ydE9iai5maWVsZCwgdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9PZkNodW5rcyA9IE1hdGguY2VpbChzZWFyY2hUZXh0RmlsdGVyZWRJdGVtcy5sZW5ndGggLyB0YWJsZUN0cmwuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9PZkNodW5rcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9PZkNodW5rcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuY2h1bmtzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vT2ZDaHVua3M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5jaHVua3MucHVzaCh7c2VsZWN0ZWQ6IGZhbHNlLCBwYWdlTm86IGl9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9BZnRlciBmaWx0ZXJpbmcgbnVtYmVyIG9mIGNodW5rcyBjb3VsZCBjaGFuZ2Ugc28gcmVzZXQgcGFnZSBubyBpZiBpdCBpcyBncmVhdGVyIHRoYW4gbm8gb2YgY2h1bmtzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnZU5vID49IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnBhZ2VObyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuY2h1bmtzW3RhYmxlQ3RybC5wYWdlTm9dLnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9VcGRhdGUgbnVtYmVyIG9mIGNodW5rcyBmb3IgcGFnaW5hdGlvbiBtZW51XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVDdHJsLmNodW5rcy5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWNlU3RhcnQsIHNsaWNlRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlU3RhcnQgPSB0YWJsZUN0cmwucGFnZU5vIC0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHRhYmxlQ3RybC5wYWdlTm8gKyAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGljZVN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHNsaWNlRW5kIC0gc2xpY2VTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VTdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGljZUVuZCA+IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlU3RhcnQgPSBzbGljZVN0YXJ0IC0gKHNsaWNlRW5kIC0gdGFibGVDdHJsLmNodW5rcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbk1lbnUuY2h1bmtzID0gdGFibGVDdHJsLmNodW5rcy5zbGljZShzbGljZVN0YXJ0LCBzbGljZUVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uTWVudS5jaHVua3MgPSB0YWJsZUN0cmwuY2h1bmtzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuZmlsdGVyZWRJdGVtcyA9IGxpbWl0VG9GaWx0ZXIoc2VhcmNoVGV4dEZpbHRlcmVkSXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnBhZ2VObyAqIHRhYmxlQ3RybC5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZGl0ZW1zPXRhYmxlQ3RybC5maWx0ZXJlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93UHJldkNodW5rKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkNodW5rO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVDdHJsLnBhZ2VObyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q2h1bmsgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNodW5rID0gdGFibGVDdHJsLnBhZ2VObyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dDaHVuayhwcmV2Q2h1bmspO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dOZXh0Q2h1bmsoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgICAgIG5leHRDaHVuayA9IHRhYmxlQ3RybC5wYWdlTm8gKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENodW5rID4gdGFibGVDdHJsLmNodW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2h1bmsgPSB0YWJsZUN0cmwuY2h1bmtzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dDaHVuayhuZXh0Q2h1bmspO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFNhdmUgcGFnaW5hdGlvbiBzY29wZSB0byBwcm92aWRlIGNodW5rIGluZm9ybWF0aW9uIHRvIHBhZ2luYXRpb24gbWVudS5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gbWVudVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFBhZ2luYXRpb25NZW51KG1lbnUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb25NZW51ID0gbWVudTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplU29ydChzb3J0ZmllbGQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6c29ydGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uRGlyZWN0aW9uOiB7XCJhbmdsZSBkb3duIGljb25cIjogdHJ1ZSwgXCJhbmdsZSB1cCBpY29uXCI6IGZhbHNlfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc29ydChzb3J0ZmllbGQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydGZpZWxkID09IHRhYmxlQ3RybC5zb3J0T2JqLmZpZWxkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zb3J0T2JqLmZpZWxkID0gc29ydGZpZWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSA9ICF0YWJsZUN0cmwuc29ydE9iai5yZXZlcnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnRPYmouaWNvbkRpcmVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFuZ2xlIGRvd24gaWNvblwiOiAhdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFuZ2xlIHVwIGljb25cIjogdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc29ydE9iaiA9IGluaXRpYWxpemVTb3J0KHNvcnRmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNob3dDaHVuayh0YWJsZUN0cmwucGFnZU5vLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rID0gc2hvd0NodW5rO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93TmV4dENodW5rID0gc2hvd05leHRDaHVuaztcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd1ByZXZDaHVuayA9IHNob3dQcmV2Q2h1bms7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLmFkZFBhZ2luYXRpb25NZW51ID0gYWRkUGFnaW5hdGlvbk1lbnU7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnQgPSBzb3J0O1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICAvL1dhdGNoIGZvciBpdGVtcyBhcyB0aGV5IHdpbGwgYmUgYXV0byByZWZyZXNoZWRcbiAgICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChhdHRycy5pdGVtcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3RhYmxlLmh0bWwnXG4gICAgICAgIH1cbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGhlYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dGhlYWQgbmctdHJhbnNjbHVkZT48L3RoZWFkPidcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcXVpcmU6ICdeXmN0dlRhYmxlJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdAJyxcbiAgICAgICAgICAgICAgICBzb3J0ZmllbGQ6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0YWJsZUN0cmwpe1xuICAgICAgICAgICAgICAgIHNjb3BlLnRhYmxlY3RybCA9IHRhYmxlQ3RybDtcbiAgICAgICAgICAgICAgICBpZihzY29wZS5zb3J0ZmllbGQgIT0gdW5kZWZpbmVkICYmIHNjb3BlLnNvcnRmaWVsZCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc29ydChzY29wZS5zb3J0ZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvdGFibGVoZWFkZXIuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRib2R5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRib2R5IG5nLXRyYW5zY2x1ZGU+PC90Ym9keT4nXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUZm9vdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0Zm9vdCBuZy10cmFuc2NsdWRlPjwvdGZvb3Q+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHNlYXJjaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15eY3R2VGFibGUnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgICAgICAgICAgICAgIHNpemU6ICdAJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgdGFibGVDdHJsKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd0NodW5rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHNjb3BlLnNlYXJjaFRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9zZWFyY2hpbnB1dC5odG1sJ1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6ICd0cnVlJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0ciBuZy10cmFuc2NsdWRlPjwvdHI+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0ZCBuZy10cmFuc2NsdWRlPjwvdGQ+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHBhZ2luYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHJlcXVpcmU6ICdeXmN0dlRhYmxlJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY29sc3BhbjogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVwbGFjZTp0cnVlLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuYWRkUGFnaW5hdGlvbk1lbnUoc2NvcGUpO1xuICAgICAgICAgICAgICAgIC8vc2hvd0NodW5rKCkgd2lsbCBjYWxjdWxhdGUgYW5kIHNldCBjaHVua3MgaW4gc2NvcGVcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93Q2h1bmsgPSBmdW5jdGlvbiAocGFnZU5vKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93Q2h1bmsocGFnZU5vLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93UHJldkNodW5rID0gdGFibGVDdHJsLnNob3dQcmV2Q2h1bms7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd05leHRDaHVuayA9IHRhYmxlQ3RybC5zaG93TmV4dENodW5rO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3BhZ2luYXRpb25tZW51Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICB2YXIgZ3JvdXBzbW9kZWwgPSBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuQVBQTElDQVRJT05HUk9VUFNfRU5EUE9JTlQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBrZXkgZm9yIGFwcGxpY2F0aW9uIGdyb3VwXG4gICAgICAgICAqIEBwYXJhbSBncm91cFxuICAgICAgICAgKi9cbiAgICAgICAgZ3JvdXBzbW9kZWwuZ2VuZXJhdGVLZXkgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cC50ZW5hbnROYW1lICsgJzonICsgZ3JvdXAuZ3JvdXBOYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBncm91cHNtb2RlbDtcbiAgICB9XSk7XG4vKipcbiAqIEJhc2VDb2xsZWN0aW9uIGNsYXNzIHRoYXQgZG9lcyBqdXN0IGZldGNoIG9mIHRoZSBvYmplY3RzLlxuICogQHBhcmFtICRodHRwXG4gKiBAcGFyYW0gJHFcbiAqIEBwYXJhbSB1cmwgVXNlZCBmb3IgZG9pbmcgSFRUUCBHRVQgYW5kIGZldGNoIG9iamVjdHMgZnJvbSBzZXJ2ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCYXNlQ29sbGVjdGlvbigkaHR0cCwgJHEsIHVybCkge1xuICAgIHRoaXMubW9kZWxzID0gW107XG4gICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgIHRoaXMuJHEgPSAkcTtcbiAgICB0aGlzLnVybCA9IHVybDtcbn1cblxuQmFzZUNvbGxlY3Rpb24ucHJvdG90eXBlLmV4dHJhY3QgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHJlbG9hZCBPcHRpb25hbC4gRGVmYXVsdCBpcyBmYWxzZVxuICogQHJldHVybnMgeyp9XG4gKi9cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocmVsb2FkKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIGlmIChyZWxvYWQgPT09IHVuZGVmaW5lZCkgcmVsb2FkID0gZmFsc2U7XG4gICAgcmV0dXJuICghcmVsb2FkICYmIGNvbGxlY3Rpb24ubW9kZWxzLmxlbmd0aCA+IDApID9cbiAgICAgICAgY29sbGVjdGlvbi4kcS53aGVuKGNvbGxlY3Rpb24ubW9kZWxzKSA6IGNvbGxlY3Rpb24uJGh0dHAuZ2V0KGNvbGxlY3Rpb24udXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLm1vZGVscyA9IGNvbGxlY3Rpb24uZXh0cmFjdChyZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ubW9kZWxzO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSByZWxvYWQgT3B0aW9uYWwuIERlZmF1bHQgaXMgZmFsc2VcbiAqIEBwYXJhbSBrZXluYW1lXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQmFzZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldE1vZGVsQnlLZXkgPSBmdW5jdGlvbiAoa2V5LCByZWxvYWQsIGtleW5hbWUpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgaWYgKHJlbG9hZCA9PT0gdW5kZWZpbmVkKSByZWxvYWQgPSBmYWxzZTtcbiAgICBpZiAoa2V5bmFtZSA9PT0gdW5kZWZpbmVkKSBrZXluYW1lID0gJ2tleSc7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG5cbiAgICBmdW5jdGlvbiBmaW5kTW9kZWwoKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQoY29sbGVjdGlvbi5tb2RlbHMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gY1trZXluYW1lXSA9PSBrZXk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKCFyZWxvYWQgJiYgY29sbGVjdGlvbi5tb2RlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZpbmRNb2RlbCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb2xsZWN0aW9uLmdldChyZWxvYWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmaW5kTW9kZWwoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBtb2RlbFxuICogQHBhcmFtIHJlbG9hZCBPcHRpb25hbC4gRGVmYXVsdCBpcyBmYWxzZVxuICogQHJldHVybnMgeyp9XG4gKi9cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRNb2RlbCA9IGZ1bmN0aW9uIChtb2RlbCwgcmVsb2FkKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIGlmIChyZWxvYWQgPT09IHVuZGVmaW5lZCkgcmVsb2FkID0gZmFsc2U7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG5cbiAgICBmdW5jdGlvbiBmaW5kTW9kZWwoKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQoY29sbGVjdGlvbi5tb2RlbHMsIG1vZGVsKVxuICAgIH1cblxuICAgIGlmICghcmVsb2FkICYmIGNvbGxlY3Rpb24ubW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmaW5kTW9kZWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29sbGVjdGlvbi5nZXQocmVsb2FkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmluZE1vZGVsKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG5cbi8qKlxuICogRXh0ZW5kcyBCYXNlQ29sbGVjdGlvbiBjbGFzcyB0byBkbyBjcmVhdGUsIHVwZGF0ZSBhbmQgZGVsZXRlIHVzaW5nIFBPU1QsIFBVVCBhbmQgREVMRVRFIHZlcmJzLlxuICogQHBhcmFtICRodHRwXG4gKiBAcGFyYW0gJHFcbiAqIEBwYXJhbSB1cmwgVXNlZCBmb3IgZG9pbmcgSFRUUCBHRVQgYW5kIGZldGNoIG9iamVjdHMgZnJvbSBzZXJ2ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDb2xsZWN0aW9uKCRodHRwLCAkcSwgdXJsKSB7XG4gICAgQmFzZUNvbGxlY3Rpb24uY2FsbCh0aGlzLCAkaHR0cCwgJHEsIHVybCk7XG4gICAgdGhpcy5pbnNwZWN0U3RhdHMgPSB7fTtcbn1cblxuQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBtb2RlbFxuICogQHBhcmFtIHVybCBPcHRpb25hbCBpZiBub3QgcGFzc2VkIGl0IGlzIGNvbnN0cnVjdGVkIHVzaW5nIGtleSBhbmQgdXJsIHBhc3NlZCBpbiBjb25zdHJ1Y3RvclxuICogQHJldHVybnMgeyp9XG4gKi9cbkNvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChtb2RlbCwgdXJsKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICBcbiAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHVybCA9IGNvbGxlY3Rpb24udXJsICsgbW9kZWwua2V5ICsgJy8nO1xuICAgIGNvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG1vZGVsKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZURhdGEgPSBjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgLy9Gb3IgcmVzdCBlbmRwb2ludHMgdGhhdCBkbyBub3QgcmV0dXJuIGNyZWF0ZWQganNvbiBvYmplY3QgaW4gcmVzcG9uc2VcbiAgICAgICAgICAgIGlmICgocmVzcG9uc2VEYXRhID09PSB1bmRlZmluZWQpIHx8IChyZXNwb25zZURhdGEgPT09ICcnKSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IG1vZGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb2xsZWN0aW9uLm1vZGVscy5wdXNoKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMucHVzaChyZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogVGhpcyBpcyBmb3IgbmV0bWFzdGVyIHNwZWNpZmljIGVuZHBvaW50cyBhbmQgdXNlZCBieSBuZXRtYXN0ZXIgb2JqZWN0cyBvbmx5LlxuICogVE9ETzogR2VuZXJhbGl6ZVxuICogQHBhcmFtIG1vZGVsXG4gKiBAcGFyYW0gdXJsIE9wdGlvbmFsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQ29sbGVjdGlvbi5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgdmFyIHVybCA9IGNvbGxlY3Rpb24udXJsICsgbW9kZWwua2V5ICsgJy8nO1xuICAgIGNvbGxlY3Rpb24uJGh0dHAucHV0KHVybCwgbW9kZWwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgXy5yZW1vdmUoY29sbGVjdGlvbi5tb2RlbHMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ua2V5ID09IG1vZGVsLmtleTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMucHVzaChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgZm9yIG5ldG1hc3RlciBzcGVjaWZpYyBlbmRwb2ludHMgYW5kIHVzZWQgYnkgbmV0bWFzdGVyIG9iamVjdHMgb25seS5cbiAqIFRPRE86IEdlbmVyYWxpemVcbiAqIEBwYXJhbSBtb2RlbFxuICogQHJldHVybnMgeyp9XG4gKi9cbkNvbGxlY3Rpb24ucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgdmFyIHVybCA9IGNvbGxlY3Rpb24udXJsICsgbW9kZWwua2V5ICsgJy8nO1xuICAgIGNvbGxlY3Rpb24uJGh0dHAuZGVsZXRlKHVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBfLnJlbW92ZShjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5rZXkgPT0gbW9kZWwua2V5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIGtleW5hbWVcbiAqIEBwYXJhbSB1cmwgT3B0aW9uYWwgaWYgbm90IHBhc3NlZCBpdCBpcyBjb25zdHJ1Y3RlZCB1c2luZyBrZXkgYW5kIHVybCBwYXNzZWQgaW4gY29uc3RydWN0b3JcbiAqIEByZXR1cm5zIHsqfVxuICovXG5Db2xsZWN0aW9uLnByb3RvdHlwZS5kZWxldGVVc2luZ0tleSA9IGZ1bmN0aW9uIChrZXksIGtleW5hbWUsIHVybCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAoa2V5bmFtZSA9PT0gdW5kZWZpbmVkKSBrZXluYW1lID0gJ2tleSc7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkKSB1cmwgPSBjb2xsZWN0aW9uLnVybCArIGtleSArICcvJztcbiAgICBjb2xsZWN0aW9uLiRodHRwLmRlbGV0ZSh1cmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgXy5yZW1vdmUoY29sbGVjdGlvbi5tb2RlbHMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ba2V5bmFtZV0gPT0ga2V5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuXG5Db2xsZWN0aW9uLnByb3RvdHlwZS5nZXRJbnNwZWN0QnlLZXkgPSBmdW5jdGlvbihrZXksIHVybCwgcmVmcmVzaCl7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICBpZihrZXkgaW4gY29sbGVjdGlvbi5pbnNwZWN0U3RhdHMgJiYgcmVmcmVzaCA9PSBmYWxzZSl7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5pbnNwZWN0U3RhdHNba2V5XSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb2xsZWN0aW9uLiRodHRwLmdldCh1cmwgKyBrZXkgKyAnLycpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlU3RhdHMgPSBjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLmluc3BlY3RTdGF0c1trZXldID0gcmVzcG9uc2VTdGF0c1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlU3RhdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuLyoqXG4gKiBDcmVhdGVkIGJ5IGhhcmRpayBnYW5kaGkgb24gNi8xNS8xNi5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ05ldHByb2ZpbGVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICB2YXIgbmV0cHJvZmlsZXNNb2RlbCA9IG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5ORVRQUk9GSUxFU19FTkRQT0lOVCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlIHBvbGljeSBrZXkgdG8gc2F2ZSBwb2xpY3kgb24gc2VydmVyXG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIG5ldHByb2ZpbGVzTW9kZWwuZ2VuZXJhdGVLZXkgPSBmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9saWN5LnRlbmFudE5hbWUgKyAnOicgKyBwb2xpY3kucHJvZmlsZU5hbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5ldHByb2ZpbGVzTW9kZWw7XG4gICAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ05ldHdvcmtzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLk5FVFdPUktTX0VORFBPSU5UKTtcbiAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdOb2Rlc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vZGVzQ29sbGVjdGlvbiBleHRlbmRzIGZyb20gQmFzZUNvbGxlY3Rpb24uIEl0IG92ZXJyaWRlcyBleHRyYWN0KCkgYW5kIGFkZHMgY29tbWlzc2lvbiwgZGVjb21taXNzaW9uLCB1cGdyYWRlIGFuZFxuICAgICAgICAgKiBkaXNjb3ZlciBtZXRob2RzXG4gICAgICAgICAqIEBwYXJhbSAkaHR0cFxuICAgICAgICAgKiBAcGFyYW0gJHFcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBOb2Rlc0NvbGxlY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgICAgICAgICBCYXNlQ29sbGVjdGlvbi5jYWxsKHRoaXMsICRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5OT0RFU19MSVNUX0VORFBPSU5UKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE5vZGVzQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgLy9Db252ZXJ0IHRvIGFycmF5IGlmIHRoZSByZXR1cm5lZCBjb2xsZWN0aW9uIGlzIG5vdCBhbiBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHJlc3VsdC5kYXRhLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLmtleSA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ga2V5XG4gICAgICAgICAqIEBwYXJhbSBleHRyYVZhcnMgSlNPTiBvYmplY3Qgb2YgZXh0cmEgYW5zaWJsZSBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIGJlIHBhc3NlZCB3aGlsZSBjb21taXNzaW9uaW5nIGEgbm9kZVxuICAgICAgICAgKiB7XG4gICAgICAgICAgICAgKiBcImVudlwiOntcImh0dHBfcHJveHlcIjpcImh0dHA6Ly9wcm94eS5lc2wuY2lzY28uY29tOjgwODBcIiwgXCJodHRwc19wcm94eVwiOlwiaHR0cDovL3Byb3h5LmVzbC5jaXNjby5jb206ODA4MFwifSxcbiAgICAgICAgICAgICAqIFwiY29udHJvbF9pbnRlcmZhY2VcIjogXCJldGgxXCIsIFwic2VydmljZV92aXBcIjogXCIxOTIuMTY4LjIuMjUyXCIsIFwidmFsaWRhdGVfY2VydHNcIjogXCJmYWxzZVwiLCBcIm5ldHBsdWdpbl9pZlwiIDogXCJldGgyXCJcbiAgICAgICAgICAgICAqIH1cbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBOb2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNvbW1pc3Npb24gPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0NPTU1JU1NJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvL1NlcnZlciBkb2Vzbid0IHJldHVybiBhbnkganNvbiBpbiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWNvbW1pc3Npb24gPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIG5vZGVzY29sbGVjdGlvbi4kaHR0cC5wb3N0KHVybCwgbm9kZU9wc09iaiwge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVycyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBOb2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnVwZ3JhZGUgPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX01BSU5URU5BTkNFX0VORFBPSU5UO1xuICAgICAgICAgICAgbm9kZXNjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCBub2RlT3BzT2JqLCB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gaXBcbiAgICAgICAgICogQHBhcmFtIGV4dHJhVmFycyBKU09OIG9iamVjdCBvZiBleHRyYSBhbnNpYmxlIGFuZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdG8gYmUgcGFzc2VkIHdoaWxlIGRpc2NvdmVyaW5nIGEgbm9kZVxuICAgICAgICAgKiB7XG4gICAgICAgICAgICAgKiBcImVudlwiOntcImh0dHBfcHJveHlcIjpcImh0dHA6Ly9wcm94eS5lc2wuY2lzY28uY29tOjgwODBcIiwgXCJodHRwc19wcm94eVwiOlwiaHR0cDovL3Byb3h5LmVzbC5jaXNjby5jb206ODA4MFwifSxcbiAgICAgICAgICAgICAqIFwiY29udHJvbF9pbnRlcmZhY2VcIjogXCJldGgxXCIsIFwic2VydmljZV92aXBcIjogXCIxOTIuMTY4LjIuMjUyXCIsIFwiY2x1c3Rlci1uYW1lXCI6IFwiY29udGl2XCIsIFwibm9kZS1sYWJlbFwiIDogXCJub2RlMVwiXG4gICAgICAgICAgICAgKiB9XG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kaXNjb3ZlciA9IGZ1bmN0aW9uIChub2RlT3BzT2JqKSB7XG4gICAgICAgICAgICB2YXIgbm9kZXNjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IG5vZGVzY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuTk9ERVNfRElTQ09WRVJfRU5EUE9JTlQ7XG4gICAgICAgICAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBub2Rlc21vZGVsID0gbmV3IE5vZGVzQ29sbGVjdGlvbigkaHR0cCwgJHEpO1xuICAgICAgICByZXR1cm4gbm9kZXNtb2RlbDtcbiAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnT3JnYW5pemF0aW9uc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5PUkdBTklaQVRJT05TX0VORFBPSU5UKTtcbiAgICB9XSk7XG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1BvbGljaWVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICB2YXIgcG9saWNpZXNtb2RlbCA9IG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5QT0xJQ0lFU19FTkRQT0lOVCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlIHBvbGljeSBrZXkgdG8gc2F2ZSBwb2xpY3kgb24gc2VydmVyXG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHBvbGljaWVzbW9kZWwuZ2VuZXJhdGVLZXkgPSBmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9saWN5LnRlbmFudE5hbWUgKyAnOicgKyBwb2xpY3kucG9saWN5TmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcG9saWNpZXNtb2RlbDtcbiAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy84LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1J1bGVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICB2YXIgcnVsZXNtb2RlbCA9IG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5SVUxFU19FTkRQT0lOVCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBpbmNvbWluZyBydWxlcyBmb3IgYSBnaXZlbiBwb2xpY3kgYW5kIGEgdGVuYW50XG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lOYW1lXG4gICAgICAgICAqIEBwYXJhbSB0ZW5hbnROYW1lXG4gICAgICAgICAqIEByZXR1cm5zIHsqfHdlYmRyaXZlci5wcm9taXNlLlByb21pc2V9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdldEluY29taW5nUnVsZXMgPSBmdW5jdGlvbiAocG9saWN5TmFtZSwgdGVuYW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzbW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAncG9saWN5TmFtZSc6IHBvbGljeU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6IHRlbmFudE5hbWVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBvdXRnb2luZyBydWxlcyBmb3IgYSBnaXZlbiBwb2xpY3kgYW5kIGEgdGVuYW50XG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lOYW1lXG4gICAgICAgICAqIEBwYXJhbSB0ZW5hbnROYW1lXG4gICAgICAgICAqIEByZXR1cm5zIHsqfHdlYmRyaXZlci5wcm9taXNlLlByb21pc2V9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdldE91dGdvaW5nUnVsZXMgPSBmdW5jdGlvbiAocG9saWN5TmFtZSwgdGVuYW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzbW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAncG9saWN5TmFtZSc6IHBvbGljeU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiAnb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiB0ZW5hbnROYW1lXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBydWxlIGtleSB0byBzYXZlIHJ1bGUgb24gc2VydmVyXG4gICAgICAgICAqIEBwYXJhbSBydWxlXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlLnRlbmFudE5hbWUgKyAnOicgKyBydWxlLnBvbGljeU5hbWUgKyAnOicgKyBydWxlLnJ1bGVJZDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnVsZXNtb2RlbDtcbiAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnU2VydmljZWxic01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5TRVJWSUNFTEJTX0VORFBPSU5UKTtcbiAgICB9XSk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNC8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdTdG9yYWdlUG9saWNpZXNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uIGV4dGVuZHMgZnJvbSBCYXNlQ29sbGVjdGlvblxuICAgICAgICAgKiBAcGFyYW0gJGh0dHBcbiAgICAgICAgICogQHBhcmFtICRxXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbigkaHR0cCwgJHEpIHtcbiAgICAgICAgICAgIENvbGxlY3Rpb24uY2FsbCh0aGlzLCAkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuU1RPUkFHRVBPTElDSUVTX0VORFBPSU5UKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5cbiAgICAgICAgU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbi5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdXJsID0gY29sbGVjdGlvbi51cmwgKyBtb2RlbC5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIENvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZS5jYWxsKGNvbGxlY3Rpb24sIG1vZGVsLCB1cmwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24ucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBjb2xsZWN0aW9uLnVybCArIG1vZGVsLm5hbWU7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCBtb2RlbClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoY29sbGVjdGlvbi5tb2RlbHMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5uYW1lID09IG1vZGVsLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLm1vZGVscy5wdXNoKG1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcG9saWNpZXNtb2RlbCA9IG5ldyBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uKCRodHRwLCAkcSk7XG4gICAgICAgIHJldHVybiBwb2xpY2llc21vZGVsO1xuICAgIH1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdWb2x1bWVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVm9sdW1lc0NvbGxlY3Rpb24gZXh0ZW5kcyBmcm9tIEJhc2VDb2xsZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSAkaHR0cFxuICAgICAgICAgKiBAcGFyYW0gJHFcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBWb2x1bWVzQ29sbGVjdGlvbigkaHR0cCwgJHEpIHtcbiAgICAgICAgICAgIENvbGxlY3Rpb24uY2FsbCh0aGlzLCAkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuVk9MVU1FU19FTkRQT0lOVCk7XG4gICAgICAgIH1cblxuICAgICAgICBWb2x1bWVzQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbGxlY3Rpb24ucHJvdG90eXBlKTtcblxuICAgICAgICBWb2x1bWVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lc2NvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gdm9sdW1lc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfREVMRVRFX0VORFBPSU5UO1xuICAgICAgICAgICAgLy9kZWxldGUgZW5kcG9pbnQgZXhwZWN0cyB2b2x1bWUgcHJvcGVydHkgaW4gYWRkaXRpb24gdG8gcG9saWN5LiBUT0RPIGFzayB0byBiZSBmaXhlZFxuICAgICAgICAgICAgbW9kZWwudm9sdW1lID0gbW9kZWwubmFtZTtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogbW9kZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2b2x1bWVzY29sbGVjdGlvbi4kaHR0cC5kZWxldGUodXJsLCBjb25maWcpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKHZvbHVtZXNjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobi5uYW1lID09IG1vZGVsLm5hbWUgJiYgbi5wb2xpY3kgPT0gbW9kZWwucG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodm9sdW1lc2NvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHZvbHVtZXNjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfQ1JFQVRFX0VORFBPSU5UO1xuICAgICAgICAgICAgcmV0dXJuIENvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZS5jYWxsKGNvbGxlY3Rpb24sIG1vZGVsLCB1cmwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG1vZGVsLCBzbmFwc2hvdCwgbmV3Vm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQ7XG4gICAgICAgICAgICB2YXIgdm9sY29weW1vZGVsID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG1vZGVsLm5hbWUsXG4gICAgICAgICAgICAgICAgcG9saWN5OiBtb2RlbC5wb2xpY3ksXG4gICAgICAgICAgICAgICAgT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG5ld1ZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIHZvbGNvcHltb2RlbClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMucHVzaChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB2b2x1bWVzbW9kZWwgPSBuZXcgVm9sdW1lc0NvbGxlY3Rpb24oJGh0dHAsICRxKTtcbiAgICAgICAgcmV0dXJuIHZvbHVtZXNtb2RlbDtcbiAgICB9XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDQvMjkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudXRpbHMnKVxuICAgIC5mYWN0b3J5KCdDUlVESGVscGVyU2VydmljZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0YXJ0TG9hZGVyKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNob3dMb2FkZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdG9wTG9hZGVyKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNob3dMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvd1NlcnZlckVycm9yKGNvbnRyb2xsZXIsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNob3dTZXJ2ZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zZXJ2ZXJFcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoaWRlU2VydmVyRXJyb3IoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc2hvd1NlcnZlckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhcnRMb2FkZXI6IHN0YXJ0TG9hZGVyLFxuICAgICAgICAgICAgICAgIHN0b3BMb2FkZXI6IHN0b3BMb2FkZXIsXG4gICAgICAgICAgICAgICAgc2hvd1NlcnZlckVycm9yOiBzaG93U2VydmVyRXJyb3IsXG4gICAgICAgICAgICAgICAgaGlkZVNlcnZlckVycm9yOiBoaWRlU2VydmVyRXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiA3LzE3LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi51dGlsc1wiKVxuICAgIC5mYWN0b3J5KFwiSW5zcGVjdFNlcnZpY2VcIiwgZnVuY3Rpb24oKXtcblxuICAgICAgICAvKiBUaGlzIGZ1bmN0aW9uIHdvdWxkIGJ1aWxkIHRoZSBjb250YWluZXJEZXRhaWxzIG9iamVjdC5cbiAgICAgICAgIGVnIDpcbiAgICAgICAgIGNvbnRhaW5lckRldGFpbHM9e1xuICAgICAgICAgQ29udGFpbmVySWQxIDogW3tuYW1lOiBcImhvbWluZ0hvc3RcIiwgdmFsdWU6IFwiY2x1c3Rlci1ub2RlMVwiLCB0eXBlOiBcInN0cmluZ1wiLCBmb3JtYXQ6IFwibm9uZVwifSxcbiAgICAgICAgIHtuYW1lOiBtYWNBZGRyZXNzLCB2YWx1ZTogXCIwMjowMlwiLCB0eXBlOlwic3RyaW5nXCIsIGZvcm1hdDpcIm5vbmVcIn1cbiAgICAgICAgIF0sXG4gICAgICAgICBDb250YWluZXJJZDIgOiBbe25hbWU6IFwiaG9taW5nSG9zdFwiLCB2YWx1ZTogXCJjbHVzdGVyLW5vZGUxXCIgdHlwZTogXCJzdHJpbmdcIiwgZm9ybWF0OiBcIm5vbmVcIn0sXG4gICAgICAgICB7bmFtZTogbWFjQWRkcmVzcywgdmFsdWU6IFwiMDI6MDRcIiwgdHlwZTogXCJzdHJpbmdcIiwgZm9ybWF0OiBcIm5vbmVcIn1cbiAgICAgICAgIF1cbiAgICAgICAgIH1cbiAgICAgICAgIC0tVXNlZCBpbiBkaXNwbGF5aW5nIHRoZSBjb250YWluZXIgZGV0YWlsIGluc2lkZSBhbiBhY2NvcmRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBidWlsZEVuZFBvaW50cyhlbmRwb2ludHMpe1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckRldGFpbHMgPSB7fTtcbiAgICAgICAgICAgIGZvcih2YXIgaSBpbiBlbmRwb2ludHMgKXtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyQXR0cmlidXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvcih2YXIga2V5IGluIGVuZHBvaW50c1tpXSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRwb2ludEF0dHJpYnV0ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludEF0dHJpYnV0ZS5uYW1lID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludEF0dHJpYnV0ZS5mb3JtYXQgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlwQWRkcmVzc1wiIDogIGVuZHBvaW50QXR0cmlidXRlLnZhbHVlID0gZW5kcG9pbnRzW2ldW2tleV0uZmlsdGVyKGZ1bmN0aW9uKGlwQWRkcmVzcyl7cmV0dXJuIGlwQWRkcmVzcy5sZW5ndGggPiAwO30pLmpvaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsYWJlbHNcIiA6ICAgICBlbmRwb2ludEF0dHJpYnV0ZS52YWx1ZSA9IGVuZHBvaW50c1tpXVtrZXldLnJlcGxhY2UoLyhtYXBcXFt8XFxdKS9naSwnJykucmVwbGFjZSgvKDopL2dpLCAnPScpLnNwbGl0KCcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHYpe3JldHVybiB2Lmxlbmd0aCA+IDB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludEF0dHJpYnV0ZS5mb3JtYXQgPSAnbGFiZWwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLnR5cGUgPSAnYXJyYXknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCA6ICAgICAgICAgICBlbmRwb2ludEF0dHJpYnV0ZS52YWx1ZSA9IGVuZHBvaW50c1tpXVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckF0dHJpYnV0ZXMucHVzaChlbmRwb2ludEF0dHJpYnV0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckRldGFpbHNbZW5kcG9pbnRzW2ldLmNvbnRhaW5lcklEXSA9IGNvbnRhaW5lckF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyRGV0YWlsc1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKiAgVGhpcyBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciBhbnkgbmV3IGNvbnRhaW5lcnMgd2VyZSBhZGRlZCBvciBub3RcbiAgICAgICAgIFZpZXcgaXMgdXBkYXRlZCBvbmx5IHdoZW4gdGhlcmUgaXMgYSBjaGFuZ2UgaW4gY29udGFpbmVyIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQ29udGFpbmVyQ2hhbmdlZChjb250RGV0YWlsc0EsIGNvbnREZXRhaWxzQil7XG4gICAgICAgICAgICBpZihjb250RGV0YWlsc0EgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBpZihPYmplY3Qua2V5cyhjb250RGV0YWlsc0EpLmxlbmd0aCAhPSBPYmplY3Qua2V5cyhjb250RGV0YWlsc0IpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gY29udERldGFpbHNCKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIShrZXkgaW4gY29udERldGFpbHNBKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBidWlsZEVuZFBvaW50cyA6IGJ1aWxkRW5kUG9pbnRzLFxuICAgICAgICAgICAgY2hlY2tDb250YWluZXJDaGFuZ2VkIDogY2hlY2tDb250YWluZXJDaGFuZ2VkXG4gICAgICAgIH1cbiAgICB9KTtcblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi51dGlscycpXG4gICAgLmZhY3RvcnkoJ05ldHdvcmtTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRTZXR0aW5ncygpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5ORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YVswXSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3Moc2V0dGluZykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQ29udGl2R2xvYmFscy5ORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UIFxuICAgICAgICAgICAgICAgICsgJ2dsb2JhbC8nLCBzZXR0aW5nKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0U2V0dGluZ3M6IGdldFNldHRpbmdzLFxuICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3M6IHVwZGF0ZVNldHRpbmdzXG4gICAgICAgIH1cbiAgICB9XSk7XG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJylcbiAgICAuZmFjdG9yeSgnTm9kZXNTZXJ2aWNlJywgWyckaHR0cCcsICckcScsXG4gICAgICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgICAgIHZhciBub2RlX2NvbnN0YW50cyA9IHtcbiAgICAgICAgICAgICAgICBBUElDX0NPTlRSX1VOUkVTVFJJQ1RfTU9ERTogJ2FwaWNfY29udHJhY3RzX3VucmVzdHJpY3RlZF9tb2RlJyxcbiAgICAgICAgICAgICAgICBBUElDX0VQR19CUklER0VfRE9NQUlOOiAnYXBpY19lcGdfYnJpZGdlX2RvbWFpbicsXG4gICAgICAgICAgICAgICAgQVBJQ19MRUFGX05PREVTOiAnYXBpY19sZWFmX25vZGVzJyxcbiAgICAgICAgICAgICAgICBBUElDX1BBU1NXT1JEOiAnYXBpY19wYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgQVBJQ19QSFlTX0RPTUFJTjogJ2FwaWNfcGh5c19kb21haW4nLFxuICAgICAgICAgICAgICAgIEFQSUNfVVJMOiAnYXBpY191cmwnLFxuICAgICAgICAgICAgICAgIEFQSUNfVVNFUk5BTUU6ICdhcGljX3VzZXJuYW1lJyxcbiAgICAgICAgICAgICAgICBDT05USVZfTkVUX01PREU6ICdjb250aXZfbmV0d29ya19tb2RlJyxcbiAgICAgICAgICAgICAgICBDT05UUk9MX0lOVEVSRkFDRTogJ2NvbnRyb2xfaW50ZXJmYWNlJyxcbiAgICAgICAgICAgICAgICBFTlY6ICdlbnYnLFxuICAgICAgICAgICAgICAgIEZXRF9NT0RFOiAnZndkX21vZGUnLFxuICAgICAgICAgICAgICAgIERBVEFfSU5URVJGQUNFOiAnbmV0cGx1Z2luX2lmJyxcbiAgICAgICAgICAgICAgICBTQ0hFRF9QUk9WSURFUjogJ3NjaGVkdWxlcl9wcm92aWRlcicsXG4gICAgICAgICAgICAgICAgVklQX0FERFI6ICdzZXJ2aWNlX3ZpcCcsXG4gICAgICAgICAgICAgICAgVUNQX0JPT1RTVFJBUF9OT0RFOiAndWNwX2Jvb3RzdHJhcF9ub2RlX25hbWUnLFxuICAgICAgICAgICAgICAgIENMVVNURVJfTkFNRTogJ2NsdXN0ZXJfbmFtZSd9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTZXR0aW5ncyhjdHJsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5OT0RFU19TRVRUSU5HU19HRVRfRU5EUE9JTlQ7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNldHRpbmcgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dHJhVmFycyA9IGN0cmwuc2V0dGluZy5leHRyYV92YXJzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NoZWRfcHJvdmlkZXIgPSBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuU0NIRURfUFJPVklERVJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV0d29ya19tb2RlID0gZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkNPTlRJVl9ORVRfTU9ERV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5DT05UUk9MX0lOVEVSRkFDRV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5DT05UUk9MX0lOVEVSRkFDRV0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQ09OVFJPTF9JTlRFUkZBQ0VdOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkRBVEFfSU5URVJGQUNFXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkRBVEFfSU5URVJGQUNFXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5EQVRBX0lOVEVSRkFDRV07IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuVklQX0FERFJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuVklQX0FERFJdID0gZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLlZJUF9BRERSXTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVkX3Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuU0NIRURfUFJPVklERVJdID0gc2NoZWRfcHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZWRfcHJvdmlkZXIgPT09ICd1Y3Atc3dhcm0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLlVDUF9CT09UU1RSQVBfTk9ERV0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLlVDUF9CT09UU1RSQVBfTk9ERV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtfbW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkNPTlRJVl9ORVRfTU9ERV0gPSBuZXR3b3JrX21vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV0d29ya19tb2RlID09PSAnc3RhbmRhbG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuRldEX01PREVdID0gZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkZXRF9NT0RFXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ldHdvcmtfbW9kZSA9PT0gJ2FjaScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19DT05UUl9VTlJFU1RSSUNUX01PREVdID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5BUElDX0NPTlRSX1VOUkVTVFJJQ1RfTU9ERV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfRVBHX0JSSURHRV9ET01BSU5dID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5BUElDX0VQR19CUklER0VfRE9NQUlOXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19MRUFGX05PREVTXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19MRUFGX05PREVTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19QQVNTV09SRF0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkFQSUNfUEFTU1dPUkRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1BIWVNfRE9NQUlOXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19QSFlTX0RPTUFJTl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfVVJMXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19VUkxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1VTRVJOQU1FXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19VU0VSTkFNRV07ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5DTFVTVEVSX05BTUVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQ0xVU1RFUl9OQU1FXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkNMVVNURVJfTkFNRV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRW52VmFyaWFibGVzKGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5FTlZdLCBjdHJsLmVudlZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUFuc2libGVWYXJpYWJsZXMoZXh0cmFWYXJzLCBjdHJsLmFuc2libGVWYXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVFbnZWYXJpYWJsZXMoZW52VmFycywgZW52VmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgZm9yIChpIGluIGVudlZhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52VmFyaWFibGVzLnB1c2goeyduYW1lJzogaSwgJ3ZhbHVlJzogZW52VmFyc1tpXX0pO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVBbnNpYmxlVmFyaWFibGVzKGV4dHJhVmFycywgYW5zaWJsZVZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgIHZhciBzZXR0aW5nX2ZpbHRlciA9IFtub2RlX2NvbnN0YW50cy5BUElDX0NPTlRSX1VOUkVTVFJJQ1RfTU9ERSxcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9jb25zdGFudHMuQVBJQ19FUEdfQlJJREdFX0RPTUFJTiwgbm9kZV9jb25zdGFudHMuQVBJQ19MRUFGX05PREVTLCBcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9jb25zdGFudHMuQVBJQ19QQVNTV09SRCwgbm9kZV9jb25zdGFudHMuQVBJQ19QSFlTX0RPTUFJTiwgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLkFQSUNfVVJMLCBub2RlX2NvbnN0YW50cy5BUElDX1VTRVJOQU1FLCBcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9jb25zdGFudHMuQ09OVElWX05FVF9NT0RFLCBub2RlX2NvbnN0YW50cy5DT05UUk9MX0lOVEVSRkFDRSwgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLkVOViwgbm9kZV9jb25zdGFudHMuRldEX01PREUsIG5vZGVfY29uc3RhbnRzLkRBVEFfSU5URVJGQUNFLCBcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9jb25zdGFudHMuU0NIRURfUFJPVklERVIsIG5vZGVfY29uc3RhbnRzLlZJUF9BRERSLCBcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9jb25zdGFudHMuVUNQX0JPT1RTVFJBUF9OT0RFLCBub2RlX2NvbnN0YW50cy5DTFVTVEVSX05BTUVdO1xuICAgICAgICAgICAgICAgIHZhciBpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpIGluIGV4dHJhVmFycykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ19maWx0ZXIuaW5kZXhPZihpKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuc2libGVWYXJpYWJsZXMucHVzaCh7J25hbWUnOiBpLCAndmFsdWUnOiBleHRyYVZhcnNbaV19KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNldHRpbmdzKG5vZGVPcHNPYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChDb250aXZHbG9iYWxzLk5PREVTX1NFVFRJTkdTX1NFVF9FTkRQT0lOVCwgbm9kZU9wc09iaiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUV4dHJhVmFycyhjdHJsKSB7XG4gICAgICAgICAgICAgICAgLy9BZGQgYW5zaWJsZSB2YXJpYWJsZXMgdG8gZXh0cmFfdmFyc1xuICAgICAgICAgICAgICAgIGN0cmwuYW5zaWJsZVZhcmlhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tpdGVtLm5hbWVdID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vQWRkIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBleHRyYV92YXJzXG4gICAgICAgICAgICAgICAgdmFyIGVudlZhcnMgPSB7fTtcbiAgICAgICAgICAgICAgICBjdHJsLmVudlZhcmlhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudlZhcnNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkVOVl0gPSBlbnZWYXJzO1xuICAgICAgICAgICAgICAgIGN0cmwubm9kZU9wc09iai5leHRyYV92YXJzID0gSlNPTi5zdHJpbmdpZnkoY3RybC5leHRyYV92YXJzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2xlYW51cCBhbnNpYmxlIHZhcmlhYmxlcyBmb3IgbmV0d29yayBtb2RlIGFuZCBzY2hlZHVsZXIuIG5nLWlmIHJlbW92ZXMgaXQgZnJvbSB0aGUgdmlldyAoRE9NKSBidXQgbm90IGZyb21cbiAgICAgICAgICAgICAqIHRoZSBtb2RlbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gY2xlYW51cEV4dHJhVmFycyhjdHJsKSB7XG4gICAgICAgICAgICAgICAgLy9DbGVhbnVwIGZvciBuZXR3b3JrIG1vZGVcbiAgICAgICAgICAgICAgICBpZiAoY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkNPTlRJVl9ORVRfTU9ERV0gPT0gJ2FjaScpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5GV0RfTU9ERV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1VSTF07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19VU0VSTkFNRV07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19QQVNTV09SRF07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19MRUFGX05PREVTXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1BIWVNfRE9NQUlOXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX0VQR19CUklER0VfRE9NQUlOXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX0NPTlRSX1VOUkVTVFJJQ1RfTU9ERV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vQ2xlYW51cCBmb3Igc2NoZWR1bGVyXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5TQ0hFRF9QUk9WSURFUl0gPT0gJ25hdGl2ZS1zd2FybScpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5VQ1BfQk9PVFNUUkFQX05PREVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFNldHRpbmdzOiBnZXRTZXR0aW5ncyxcbiAgICAgICAgICAgIGNyZWF0ZUVudlZhcmlhYmxlczogY3JlYXRlRW52VmFyaWFibGVzLFxuICAgICAgICAgICAgY3JlYXRlQW5zaWJsZVZhcmlhYmxlczogY3JlYXRlQW5zaWJsZVZhcmlhYmxlcyxcbiAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzOiB1cGRhdGVTZXR0aW5ncyxcbiAgICAgICAgICAgIGNyZWF0ZUV4dHJhVmFyczogY3JlYXRlRXh0cmFWYXJzLFxuICAgICAgICAgICAgY2xlYW51cEV4dHJhVmFyczogY2xlYW51cEV4dHJhVmFyc1xuICAgICAgICB9XG4gICAgfV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi51dGlscycpXG4gICAgLmZhY3RvcnkoJ1ZvbHVtZVNldHRpbmdTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRTZXR0aW5ncygpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WT0xVTUVTX0dMT0JBTF9FTkRQT0lOVDtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNldHRpbmdzKHNldHRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KENvbnRpdkdsb2JhbHMuVk9MVU1FU19HTE9CQUxfRU5EUE9JTlQsIHNldHRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFNldHRpbmdzOiBnZXRTZXR0aW5ncyxcbiAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzOiB1cGRhdGVTZXR0aW5nc1xuICAgICAgICB9XG4gICAgfV0pO1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZBY2l2YWxpZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvYWNpdmFsaWQuaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGZvcm06IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dkNvbnRyb2xpbnRlcmZhY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL25vZGVzL2NvbnRyb2xpbnRlcmZhY2UuaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGV4dHJhdmFyczogXCI9XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2TmV0d29ya21vZGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL25vZGVzL25ldHdvcmttb2RlLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBleHRyYXZhcnM6IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dlNjaGVkdWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvc2NoZWR1bGVyLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBleHRyYXZhcnM6IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7IiwiLyoqXG4gKiBCYXNlQ29sbGVjdGlvbiBjbGFzcyB0aGF0IGRvZXMganVzdCBmZXRjaCBvZiB0aGUgb2JqZWN0cy5cbiAqIEBwYXJhbSAkaHR0cFxuICogQHBhcmFtICRxXG4gKiBAcGFyYW0gdXJsIFVzZWQgZm9yIGRvaW5nIEhUVFAgR0VUIGFuZCBmZXRjaCBvYmplY3RzIGZyb20gc2VydmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQmFzZUNvbGxlY3Rpb24oJGh0dHAsICRxLCB1cmwpIHtcbiAgICB0aGlzLm1vZGVscyA9IFtdO1xuICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICB0aGlzLiRxID0gJHE7XG4gICAgdGhpcy51cmwgPSB1cmw7XG59XG5cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQuZGF0YTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZWxvYWQgT3B0aW9uYWwuIERlZmF1bHQgaXMgZmFsc2VcbiAqIEByZXR1cm5zIHsqfVxuICovXG5CYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJlbG9hZCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAocmVsb2FkID09PSB1bmRlZmluZWQpIHJlbG9hZCA9IGZhbHNlO1xuICAgIHJldHVybiAoIXJlbG9hZCAmJiBjb2xsZWN0aW9uLm1vZGVscy5sZW5ndGggPiAwKSA/XG4gICAgICAgIGNvbGxlY3Rpb24uJHEud2hlbihjb2xsZWN0aW9uLm1vZGVscykgOiBjb2xsZWN0aW9uLiRodHRwLmdldChjb2xsZWN0aW9uLnVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMgPSBjb2xsZWN0aW9uLmV4dHJhY3QocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vZGVscztcbiAgICAgICAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gcmVsb2FkIE9wdGlvbmFsLiBEZWZhdWx0IGlzIGZhbHNlXG4gKiBAcGFyYW0ga2V5bmFtZVxuICogQHJldHVybnMgeyp9XG4gKi9cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRNb2RlbEJ5S2V5ID0gZnVuY3Rpb24gKGtleSwgcmVsb2FkLCBrZXluYW1lKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIGlmIChyZWxvYWQgPT09IHVuZGVmaW5lZCkgcmVsb2FkID0gZmFsc2U7XG4gICAgaWYgKGtleW5hbWUgPT09IHVuZGVmaW5lZCkga2V5bmFtZSA9ICdrZXknO1xuXG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuXG4gICAgZnVuY3Rpb24gZmluZE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gXy5maW5kKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGNba2V5bmFtZV0gPT0ga2V5O1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGlmICghcmVsb2FkICYmIGNvbGxlY3Rpb24ubW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmaW5kTW9kZWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29sbGVjdGlvbi5nZXQocmVsb2FkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmluZE1vZGVsKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbW9kZWxcbiAqIEBwYXJhbSByZWxvYWQgT3B0aW9uYWwuIERlZmF1bHQgaXMgZmFsc2VcbiAqIEByZXR1cm5zIHsqfVxuICovXG5CYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TW9kZWwgPSBmdW5jdGlvbiAobW9kZWwsIHJlbG9hZCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAocmVsb2FkID09PSB1bmRlZmluZWQpIHJlbG9hZCA9IGZhbHNlO1xuXG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuXG4gICAgZnVuY3Rpb24gZmluZE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gXy5maW5kKGNvbGxlY3Rpb24ubW9kZWxzLCBtb2RlbClcbiAgICB9XG5cbiAgICBpZiAoIXJlbG9hZCAmJiBjb2xsZWN0aW9uLm1vZGVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmluZE1vZGVsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbGxlY3Rpb24uZ2V0KHJlbG9hZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZpbmRNb2RlbCgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuXG4vKipcbiAqIEV4dGVuZHMgQmFzZUNvbGxlY3Rpb24gY2xhc3MgdG8gZG8gY3JlYXRlLCB1cGRhdGUgYW5kIGRlbGV0ZSB1c2luZyBQT1NULCBQVVQgYW5kIERFTEVURSB2ZXJicy5cbiAqIEBwYXJhbSAkaHR0cFxuICogQHBhcmFtICRxXG4gKiBAcGFyYW0gdXJsIFVzZWQgZm9yIGRvaW5nIEhUVFAgR0VUIGFuZCBmZXRjaCBvYmplY3RzIGZyb20gc2VydmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29sbGVjdGlvbigkaHR0cCwgJHEsIHVybCkge1xuICAgIEJhc2VDb2xsZWN0aW9uLmNhbGwodGhpcywgJGh0dHAsICRxLCB1cmwpO1xuICAgIHRoaXMuaW5zcGVjdFN0YXRzID0ge307XG59XG5cbkNvbGxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbW9kZWxcbiAqIEBwYXJhbSB1cmwgT3B0aW9uYWwgaWYgbm90IHBhc3NlZCBpdCBpcyBjb25zdHJ1Y3RlZCB1c2luZyBrZXkgYW5kIHVybCBwYXNzZWQgaW4gY29uc3RydWN0b3JcbiAqIEByZXR1cm5zIHsqfVxuICovXG5Db2xsZWN0aW9uLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAobW9kZWwsIHVybCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgXG4gICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkKSB1cmwgPSBjb2xsZWN0aW9uLnVybCArIG1vZGVsLmtleSArICcvJztcbiAgICBjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCBtb2RlbClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VEYXRhID0gY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vRm9yIHJlc3QgZW5kcG9pbnRzIHRoYXQgZG8gbm90IHJldHVybiBjcmVhdGVkIGpzb24gb2JqZWN0IGluIHJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoKHJlc3BvbnNlRGF0YSA9PT0gdW5kZWZpbmVkKSB8fCAocmVzcG9uc2VEYXRhID09PSAnJykpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vY29sbGVjdGlvbi5tb2RlbHMucHVzaChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ubW9kZWxzLnB1c2gocmVzcG9uc2VEYXRhKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgZm9yIG5ldG1hc3RlciBzcGVjaWZpYyBlbmRwb2ludHMgYW5kIHVzZWQgYnkgbmV0bWFzdGVyIG9iamVjdHMgb25seS5cbiAqIFRPRE86IEdlbmVyYWxpemVcbiAqIEBwYXJhbSBtb2RlbFxuICogQHBhcmFtIHVybCBPcHRpb25hbFxuICogQHJldHVybnMgeyp9XG4gKi9cbkNvbGxlY3Rpb24ucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgIHZhciB1cmwgPSBjb2xsZWN0aW9uLnVybCArIG1vZGVsLmtleSArICcvJztcbiAgICBjb2xsZWN0aW9uLiRodHRwLnB1dCh1cmwsIG1vZGVsKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF8ucmVtb3ZlKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLmtleSA9PSBtb2RlbC5rZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ubW9kZWxzLnB1c2goY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBUaGlzIGlzIGZvciBuZXRtYXN0ZXIgc3BlY2lmaWMgZW5kcG9pbnRzIGFuZCB1c2VkIGJ5IG5ldG1hc3RlciBvYmplY3RzIG9ubHkuXG4gKiBUT0RPOiBHZW5lcmFsaXplXG4gKiBAcGFyYW0gbW9kZWxcbiAqIEByZXR1cm5zIHsqfVxuICovXG5Db2xsZWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgIHZhciB1cmwgPSBjb2xsZWN0aW9uLnVybCArIG1vZGVsLmtleSArICcvJztcbiAgICBjb2xsZWN0aW9uLiRodHRwLmRlbGV0ZSh1cmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgXy5yZW1vdmUoY29sbGVjdGlvbi5tb2RlbHMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ua2V5ID09IG1vZGVsLmtleTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBrZXluYW1lXG4gKiBAcGFyYW0gdXJsIE9wdGlvbmFsIGlmIG5vdCBwYXNzZWQgaXQgaXMgY29uc3RydWN0ZWQgdXNpbmcga2V5IGFuZCB1cmwgcGFzc2VkIGluIGNvbnN0cnVjdG9yXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlVXNpbmdLZXkgPSBmdW5jdGlvbiAoa2V5LCBrZXluYW1lLCB1cmwpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgaWYgKGtleW5hbWUgPT09IHVuZGVmaW5lZCkga2V5bmFtZSA9ICdrZXknO1xuXG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkgdXJsID0gY29sbGVjdGlvbi51cmwgKyBrZXkgKyAnLyc7XG4gICAgY29sbGVjdGlvbi4kaHR0cC5kZWxldGUodXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF8ucmVtb3ZlKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuW2tleW5hbWVdID09IGtleTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cblxuQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0SW5zcGVjdEJ5S2V5ID0gZnVuY3Rpb24oa2V5LCB1cmwsIHJlZnJlc2gpe1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgaWYoa2V5IGluIGNvbGxlY3Rpb24uaW5zcGVjdFN0YXRzICYmIHJlZnJlc2ggPT0gZmFsc2Upe1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uaW5zcGVjdFN0YXRzW2tleV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29sbGVjdGlvbi4kaHR0cC5nZXQodXJsICsga2V5ICsgJy8nKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVN0YXRzID0gY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5pbnNwZWN0U3RhdHNba2V5XSA9IHJlc3BvbnNlU3RhdHNcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZVN0YXRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTsiLCIvKipcbiAqIERlZmluaW5nIHRoZSBHcmFwaCBNb2R1bGUuXG4gKiBTZWUgREVTSUdOLm1kIGZvciBpbmZvIG9uIEdyYXBoIE9iamVjdHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnLCBbXSk7XG5cblxuXG5cbiIsImFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIiwgW10pOyIsIi8qKlxuICogVGhlIGJhc2UgY2xhc3MgdGhlIERhdGFTb3VyY2Ugb2JqZWN0LlxuICogXG4gKiBUaGUgRGF0YVNvdXJjZSBvYmplY3QgdGFrZXMgaW4gbm9kZSBhbmQgbGluayBkYXRhIGZyb20gdGhlIHNlcnZlciwgXG4gKiBhbmQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgY29udmVydGluZyBhbmQgbWFuaXB1bGF0aW5nIHRoZSBkYXRhIGZvclxuICogdGhlIGdyYXBoIG9iamVjdC5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gRGF0YVNvdXJjZSBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgXG4gKiBEYXRhU291cmNlIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIFxuICogaXRzIERhdGFTb3VyY2UgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBEYXRhU291cmNlIGFzIGtleS5cbiAqIFxuICogTm9kZSBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOm5vZGVfaWQsIHRleHQ6bm9kZV90ZXh0fVxuICogXG4gKiBMaW5rIGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gKiB7c291cmNlOiBzb3VyY2VOb2RlSWQsIHRhcmdldDogdGFyZ2V0Tm9kZUlkfVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdEYXRhU291cmNlJywgWydOb2RlJywgJ0xpbmsnLCBcbiAgICBcdGZ1bmN0aW9uIChOb2RlLCBMaW5rKSB7XG5cbiAgICBcdGNsYXNzIERhdGFTb3VyY2Uge1xuICAgIFx0XHQvKipcbiAgICBcdFx0ICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgIFx0XHQgKlxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgIFx0XHQgKi9cblx0XHRcdGNvbnN0cnVjdG9yKG5vZGVzLCBsaW5rcykge1xuXHRcdFx0XHR0aGlzLm5vZGVzID0gbm9kZXM7XG5cdFx0XHRcdHRoaXMubGlua3MgPSBsaW5rcztcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXBsYWNlcyB0aGUgbm9kZSBkYXRhXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICBub2RlcyAgIFRoZSBub2Rlc1xuXHRcdFx0ICovXG5cdFx0XHR1cGRhdGVOb2Rlcyhub2Rlcykge1xuXHRcdFx0XHR0aGlzLm5vZGVzID0gbm9kZXM7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUmVwbGFjZXMgdGhlIGxpbmsgZGF0YVxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtMaW5rfSAgbGlua3MgICBUaGUgbGlua3Ncblx0XHRcdCAqL1xuXHRcdFx0dXBkYXRlTGlua3MobGlua3MpIHtcblx0XHRcdFx0dGhpcy5saW5rcyA9IGxpbmtzO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFJldHVybnMgdGhlIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBOb2RlIHdpdGggdGhlIFxuXHRcdFx0ICogbWF0Y2hpbmcgaWRcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuXHRcdFx0ICogQHJldHVybiAgICAge3N0cmluZ30gIG5hbWUgb2YgdGhlIG1hdGNoaW5nIG5vZGVcblx0XHRcdCAqL1xuXHRcdFx0bm9kZUlkVG9OYW1lKGlkKSB7XG5cdFx0ICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIGlmIChub2Rlc1tpXS5pZCA9PSBpZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gbm9kZXNbaV0ubmFtZTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogcHJvY2VzcyB0aGUgbm9kZURhdGEgdG8gY3JlYXRlIE5vZGUgb2JqZWN0c1xuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlRGF0YSAgTm9kZURhdGEgdG8gY29udmVydCBcblx0XHQgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vZGUgb2JqZWN0c1xuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBOb2RlIG9iamVjdHNcblx0XHQgICAgICovXG5cdFx0ICAgIHByb2Nlc3NOb2RlRGF0YShub2RlRGF0YSkge1xuXHRcdCAgICAgICAgdmFyIG5vZGVzID0gW107XG5cdFx0ICAgICAgICBfLmZvckVhY2gobm9kZURhdGEsIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBOb2RlLk5vZGUobnVsbCwgbnVsbCwgZGF0YS5pZCwgZGF0YS50ZXh0LCBudWxsKTtcblx0XHQgICAgICAgICAgICBub2Rlcy5wdXNoKG5ld05vZGUpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICByZXR1cm4gbm9kZXM7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogcHJvY2VzcyB0aGUgbGlua0RhdGFcblx0XHQgICAgICpcblx0XHQgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbGlua0RhdGEgIFRoZSBsaW5rIGRhdGFcblx0XHQgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICAgIFRoZSBub2RlcyBmcm9tIHByb2Nlc3NOb2RlRGF0YVxuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBMaW5rIG9iamVjdHNcblx0XHQgICAgICovXG5cdFx0ICAgIHByb2Nlc3NMaW5rRGF0YShsaW5rRGF0YSwgbm9kZXMpIHtcblx0XHQgICAgXHQvKipcblx0XHRcdCAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgaWRcblx0XHRcdCAgICAgKlxuXHRcdFx0ICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9IGlkICAgICAgVGhlIGlkZW50aWZpZXJcblx0XHRcdCAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gICBUaGUgbm9kZSB3aXRoIHRoZSBtYXRjaGluZyBpZFxuXHRcdFx0ICAgICAqL1xuXHRcdFx0ICAgIGZ1bmN0aW9uIGZpbmROb2RlQnlJZChpZCwgbm9kZXMpIHtcblx0XHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0ICAgICAgICAgICAgaWYgKGlkID09IG5vZGVzW2ldLmlkKSB7XG5cdFx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVzW2ldO1xuXHRcdFx0ICAgICAgICAgICAgfVxuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgfVxuXG5cdFx0ICAgICAgICB2YXIgbGlua3MgPSBbXTtcblx0XHQgICAgICAgIC8vdHJhbnNmb3JtaW5nIGxpbmsgZGF0YVxuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rRGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIGlmIChsaW5rRGF0YVtpXS5zb3VyY2UgIT0gbGlua0RhdGFbaV0udGFyZ2V0KSB7XG5cdFx0ICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmaW5kTm9kZUJ5SWQobGlua0RhdGFbaV0uc291cmNlLCBub2Rlcyk7XG5cdFx0ICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBmaW5kTm9kZUJ5SWQobGlua0RhdGFbaV0udGFyZ2V0LCBub2Rlcyk7XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgPT0gbnVsbCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuXHRcdCAgICAgICAgICAgICAgICBcdGNvbnRpbnVlO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmsgPSBuZXcgTGluay5MaW5rKHNvdXJjZSwgdGFyZ2V0KTtcblx0ICAgICAgICAgICAgICAgICAgICBsaW5rcy5wdXNoKGxpbmspO1xuXHRcdCAgICAgICAgICAgIH0gIFxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIGxpbmtzO1xuXHRcdCAgICB9XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHREYXRhU291cmNlOkRhdGFTb3VyY2Vcblx0XHR9XG59XSk7XG5cblxuXG5cblxuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTQvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJywgW10pO1xudmFyIENvbnRpdkdsb2JhbHMgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgTkVUTUFTVEVSXG4gICAgICAgICdORVRXT1JLU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9uZXR3b3Jrcy8nLFxuICAgICAgICAnTkVUV09SS1NfSU5TUEVDVF9FTkRQT0lOVCc6Jy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3QvbmV0d29ya3MvJyxcbiAgICAgICAgJ1NFUlZJQ0VMQlNfSU5TUEVDVF9FTkRQT0lOVCc6Jy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3Qvc2VydmljZUxCcy8nLFxuICAgICAgICAnUE9MSUNJRVNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvcG9saWN5cy8nLFxuICAgICAgICAnUlVMRVNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvcnVsZXMvJyxcbiAgICAgICAgJ0FQUExJQ0FUSU9OR1JPVVBTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2VuZHBvaW50R3JvdXBzLycsXG4gICAgICAgICdTRVJWSUNFTEJTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL3NlcnZpY2VMQnMvJyxcbiAgICAgICAgJ09SR0FOSVpBVElPTlNfRU5EUE9JTlQnOicvbmV0bWFzdGVyL2FwaS92MS90ZW5hbnRzLycsXG4gICAgICAgICdORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2dsb2JhbHMvJyxcbiAgICAgICAgJ05FVFBST0ZJTEVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL25ldHByb2ZpbGVzLycsXG4gICAgICAgICdCR1BTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL0JncHMvJyxcbiAgICAgICAgJ0JHUFNfSU5TUEVDVF9FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9pbnNwZWN0L0JncHMvJyxcbiAgICAgICAgJ1ZJU1VBTElaQVRJT05fRU5EUE9JTlQnOiAnL3Zpc3VhbGl6YXRpb24vJyxcblxuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBWT0xNQVNURVJcbiAgICAgICAgJ1ZPTFVNRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzLycsXG4gICAgICAgICdWT0xVTUVTX0NSRUFURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvY3JlYXRlLycsXG4gICAgICAgICdWT0xVTUVTX0RFTEVURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvcmVtb3ZlLycsXG4gICAgICAgICdWT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL2NvcHknLFxuICAgICAgICAnVk9MVU1FU19VU0VTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdXNlcy9tb3VudHMvJyxcbiAgICAgICAgJ1ZPTFVNRVNfU05BUFNIT1RTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvc25hcHNob3RzLycsXG4gICAgICAgICdTVE9SQUdFUE9MSUNJRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9wb2xpY2llcy8nLFxuICAgICAgICAnVk9MVU1FU19HTE9CQUxfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9nbG9iYWwvJyxcblxuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBDTFVTVEVSXG4gICAgICAgICdOT0RFU19MSVNUX0VORFBPSU5UJzogJy9pbmZvL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0RJU0NPVkVSX0VORFBPSU5UJzogJy9kaXNjb3Zlci9ub2RlcycsXG4gICAgICAgICdOT0RFU19DT01NSVNTSU9OX0VORFBPSU5UJzogJy9jb21taXNzaW9uL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVCc6ICcvZGVjb21taXNzaW9uL25vZGVzJyxcbiAgICAgICAgJ05PREVTX01BSU5URU5BTkNFX0VORFBPSU5UJzogJy9tYWludGVuYW5jZS9ub2RlcycsXG4gICAgICAgICdOT0RFU19MQVNUX0pPQl9FTkRQT0lOVCc6ICcvaW5mby9qb2IvbGFzdCcsXG4gICAgICAgICdOT0RFU19BQ1RJVkVfSk9CX0VORFBPSU5UJzogJy9pbmZvL2pvYi9hY3RpdmUnLFxuICAgICAgICAnTk9ERVNfU0VUVElOR1NfU0VUX0VORFBPSU5UJzogJy9nbG9iYWxzJyxcbiAgICAgICAgJ05PREVTX1NFVFRJTkdTX0dFVF9FTkRQT0lOVCc6ICcvaW5mby9nbG9iYWxzJyxcblxuICAgICAgICAvL1JlZnJlc2ggaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICdSRUZSRVNIX0lOVEVSVkFMJzogNTAwMCxcblxuICAgICAgICAvL1JlZ0V4IGZvciB2YWxpZGF0aW9uXG4gICAgICAgICdDSURSX1JFR0VYJyA6ICdeKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkoXFwvKFswLTldfFsxLTJdWzAtOV18M1swLTJdKSkkJyxcbiAgICAgICAgJ1ZMQU5fUkVHRVgnIDogJ14oWzAtOV17MSw0fT8tWzAtOV17MSw0fT8pJCcsXG4gICAgICAgICdWWExBTl9SRUdFWCcgOiAnXihbMC05XXsxLDh9Py1bMC05XXsxLDh9PykkJyxcbiAgICAgICAgJ05VTUJFUl9SRUdFWCcgOiAnXlswLTldKiQnXG4gICAgfVxufSkoKTtcbiIsIi8qKlxuICogVGhlIERhdGFTb3VyY2UgdXNlZCBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICogXG4gKiBOb2RlIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOiBub2RlX2lkLCB0ZXh0OiBub2RlX3RleHR9XG4gKiBQYXJlbnQgYW5kIEFuY2VzdG9yIGF0dHJpYnV0ZXMgY2FuIGJlIHNldCBieSBjYWxsaW5nIHNldEFuY2VzdG9yc1xuICogXG4gKiBMaW5rIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge3NvdXJjZTogc291cmNlTm9kZUlkLCB0YXJnZXQ6IHRhcmdldE5vZGVJZCwgd2VpZ2h0OiBsaW5rV2VpZ2h0fVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemVyRGF0YVNvdXJjZScsIFsnRGF0YVNvdXJjZScsICdWaXN1YWxpemVyTm9kZScsICdWaXN1YWxpemVyTGluaycsIFxuICAgIFx0ZnVuY3Rpb24gKERhdGFTb3VyY2UsIFZpc3VhbGl6ZXJOb2RlLCBWaXN1YWxpemVyTGluaykge1xuXG4gICAgXHRjbGFzcyBWaXN1YWxpemVyRGF0YVNvdXJjZSBleHRlbmRzIERhdGFTb3VyY2UuRGF0YVNvdXJjZSB7XG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgXHRcdCAqIFxuICAgIFx0XHQgKiBDaGlsZHJlbiBTdHJ1Y3QgYW5kIGFuY2VzdG9yc19zdHJ1Y3QgYXJlIEpTT04gb2JqZWN0cyxcbiAgICBcdFx0ICogbWFwcGluZyBhIG5vZGUgSWQgdG8gYSBsaXN0IG9mIGl0J3MgY2hpbGRyZW4gb3IgYW5jZXN0b3JzLlxuICAgIFx0XHQgKiBDaGlsZHJlbiBTdHJ1Y3QgaXMgYWxzbyBleHBlY3RlZCB0byBoYXZlIGEgZmllbGQgY2FsbGVkXG4gICAgXHRcdCAqIHRvcExldmVsLCB0aGF0IG1hcHMgdG8gYSBsaXN0IG9mIGFsbCB0aGUgbm9kZXMgdGhhdCBkb24ndFxuICAgIFx0XHQgKiBoYXZlIGFueSBwYXJlbnRzLlxuICAgIFx0XHQgKlxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgY2hpbGRyZW5fc3RydWN0ICAgIFRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmVcbiAgICBcdFx0ICogQHBhcmFtICAgICAge09iamVjdH0gIGFuY2VzdG9yc19zdHJ1Y3QgICBUaGUgYW5jZXN0b3JzIHN0cnVjdHVyZVxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbGFiZWxzICAgICAgICAgICAgIFRoZSBsYWJlbHNcbiAgICBcdFx0ICogQHBhcmFtICAgICAge0FycmF5fSAgIHNlbGVjdG9ycyAgICAgICAgICBUaGUgc2VsZWN0b3JzXG4gICAgXHRcdCAqL1xuXHRcdFx0Y29uc3RydWN0b3Iobm9kZXMsIGxpbmtzLCBjaGlsZHJlbl9zdHJ1Y3QsIGFuY2VzdG9yc19zdHJ1Y3QsIFxuXHRcdFx0XHRcdGxhYmVscywgc2VsZWN0b3JzKSB7XG5cdFx0XHRcdHN1cGVyKG5vZGVzLGxpbmtzKTtcblx0XHRcdFx0dGhpcy5jaGlsZHJlbl9zdHJ1Y3QgPSBjaGlsZHJlbl9zdHJ1Y3Q7XG5cdFx0XHRcdHRoaXMuYW5jZXN0b3JzX3N0cnVjdCA9IGFuY2VzdG9yc19zdHJ1Y3Q7XG5cdFx0XHRcdHRoaXMubGFiZWxzID0gbGFiZWxzO1xuXHRcdFx0XHR0aGlzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcblx0XHRcdH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogRGV0ZXJtaW5lcyBpZiBpdCBoYXMgY2hpbGQuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIFRydWUgaWYgaGFzIGNoaWxkLCBGYWxzZSBvdGhlcndpc2UuXG5cdFx0ICAgICAqL1xuXHRcdCAgICBoYXNDaGlsZChpZCkge1xuXHRcdCAgICBcdGlmICh0aGlzLmNoaWxkcmVuX3N0cnVjdFtpZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgXHRcdHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgXHRyZXR1cm4gdHJ1ZTtcdFxuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFNldHMgdGhlIHBhcmVudCBhbmQgYW5jZXN0b3JzIGF0dHJpYnV0ZSB1c2luZyBcblx0XHQgICAgICogYW5jZXN0b3JzX3N0cnVjdCBmb3IgYWxsIHRoZSBub2Rlc1xuXHRcdCAgICAgKiBBbHNvIGFkZHMgYW55IG5vZGVzIHdpdGhvdXQgYW5jZXN0b3JzLCB0aGF0IGFyZW4ndCBcblx0XHQgICAgICogdG9wbGV2ZWwgdG8gdGhlIGNsaWVudCBzZXJ2aWNlLlxuXHRcdCAgICAgKi9cblx0XHQgICAgc2V0QW5jZXN0b3JzKCkge1xuXHRcdCAgICBcdHZhciB0aGlzRGF0YVNvdXJjZSA9IHRoaXM7XG5cdFx0ICAgIFx0dmFyIGFkZGVkQ2xpZW50ID0gZmFsc2U7XG5cdFx0ICAgIFx0Xy5mb3JFYWNoKHRoaXNEYXRhU291cmNlLm5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG5cdFx0ICAgIFx0XHRub2RlLmFuY2VzdG9ycyA9IHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gfHwgW107XG5cdFx0ICAgIFx0XHRpZiAoXy5pc0VtcHR5KG5vZGUuYW5jZXN0b3JzKSA9PT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0bm9kZS5wYXJlbnQgPSBub2RlLmFuY2VzdG9yc1swXTtcblx0XHQgICAgXHRcdH0gZWxzZSB7XG5cdFx0ICAgIFx0XHRcdGlmIChfLmluY2x1ZGVzKHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCwgbm9kZS5pZCkgPT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0XHQvL2NvbnRhaW5lciBoYXMgbm8gcGFyZW50XG5cdFx0ICAgIFx0XHRcdFx0Ly9hZGRpbmcgdG8gY2xpZW50XG5cdFx0ICAgIFx0XHRcdFx0bm9kZS5hbmNlc3RvcnMucHVzaChcImNsaWVudFwiKTtcblx0XHQgICAgXHRcdFx0XHR0aGlzRGF0YVNvdXJjZS5hbmNlc3RvcnNfc3RydWN0W25vZGUuaWRdID0gW1wiY2xpZW50XCJdO1xuXHRcdCAgICBcdFx0XHRcdGlmIChhZGRlZENsaWVudCA9PT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0XHRcdGFkZGVkQ2xpZW50ID0gdHJ1ZTtcblx0XHRcdCAgICBcdFx0XHRcdHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbC5wdXNoKFwiY2xpZW50XCIpO1xuXHRcdCAgICBcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0WydjbGllbnQnXSA9IFtdO1xuXHRcdCAgICBcdFx0XHRcdH1cblx0XHQgICAgXHRcdFx0XHR0aGlzRGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbJ2NsaWVudCddLnB1c2gobm9kZS5pZCk7XG5cdFx0XHQgICAgXHRcdH1cblx0XHQgICAgXHRcdH1cblx0XHQgICAgXHR9KVxuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFJldHVybnMgdGhlIGZsb3cgYmV0d2VlbiB0aGUgaGlnaGVzdCBsZXZlbCBncm91cGluZ1xuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgVGhlIHRvcCBsZXZlbCBmbG93LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0VG9wTGV2ZWxGbG93KCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmxvd0JldHdlZW5TZXQodGhpcy5jaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwpO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEdldHMgdGhlIGZsb3cgYmV0d2VlbiBhbnkgc2V0IG9mIG5vZGUgbGV2ZWxzXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVfbmFtZXMgIFRoZSBub2RlIG5hbWVzIGluIHRoZSBzZXRcblx0XHQgICAgICogQHJldHVybiAgICAge09iamVjdH0gIFRoZSBmbG93IGJldHdlZW4gc2V0LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lcykge1xuXHRcdCAgICAgICAgdmFyIGxvY2FsX25vZGVzID0gdGhpcy5ub2Rlcztcblx0XHQgICAgICAgIHZhciBpZE1hcHBpbmcgPSB7fTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYWxfbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgbm9kZSA9IGxvY2FsX25vZGVzW2ldO1xuXG5cdFx0ICAgICAgICAgICAgLy9pZiBub2RlIGlzIGFscmVhZHkgYXQgaXRzIGhpZ2hlc3QgbGV2ZWxcblx0XHQgICAgICAgICAgICBpZiAobm9kZS5hbmNlc3RvcnMgPT09IG51bGwpIHtcblx0XHQgICAgICAgICAgICAgICAgaWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZS5uYW1lO1xuXHRcdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgIC8vY2hlY2sgdG8gc2VlIHdoaWNoIHRhZ3MgYXJlIHByZXNlbnQgaW4gdGhlIGFuY2VzdG9yIGxpc3Rcblx0XHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBub2RlX25hbWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5hbmNlc3RvcnMuaW5kZXhPZihub2RlX25hbWVzW2pdKSA+IC0xKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZV9uYW1lc1tqXTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH0gICBcblx0XHQgICAgICAgIC8vbW9kaWZ5IGxpbmtzXG5cdFx0ICAgICAgICB2YXIgbGlua3MgPSB0aGlzLmxpbmtzO1xuXHRcdCAgICAgICAgdmFyIGxpbmtEYXRhID0gW107XG5cdFx0ICAgICAgICBcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgbGluayA9IFtdO1xuXHRcdCAgICAgICAgICAgIGxpbmsuc291cmNlID0gaWRNYXBwaW5nW2xpbmtzW2ldLnNvdXJjZV0gfHwgbGlua3NbaV0uc291cmNlO1xuXHRcdCAgICAgICAgICAgIGxpbmsudGFyZ2V0ID0gaWRNYXBwaW5nW2xpbmtzW2ldLnRhcmdldF0gfHwgbGlua3NbaV0udGFyZ2V0O1xuXHRcdCAgICAgICAgICAgIGxpbmsud2VpZ2h0ID0gbGlua3NbaV0ud2VpZ2h0O1xuXHRcdCAgICAgICAgICAgIGxpbmtEYXRhLnB1c2gobGluayk7XG5cdFx0ICAgICAgICB9XG5cblx0XHQgICAgICAgIC8vY3JlYXRpbmcgdGhlIG5vZGVEYXRhXG5cdFx0ICAgICAgICB2YXIgbm9kZURhdGEgPSBbXTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZV9uYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIHZhciBub2RlX3RvX2FkZCA9IFtdO1xuXHRcdCAgICAgICAgICAgIG5vZGVfdG9fYWRkLmlkID0gbm9kZV9uYW1lc1tpXTtcblx0XHQgICAgICAgICAgICBub2RlX3RvX2FkZC50ZXh0ID0gdGhpcy5ub2RlSWRUb05hbWUobm9kZV9uYW1lc1tpXSkgfHwgbm9kZV9uYW1lc1tpXTtcblxuXG5cdFx0ICAgICAgICAgICAgbm9kZV90b19hZGQuYW5jZXN0b3JzID0gdGhpcy5hbmNlc3RvcnNfc3RydWN0W25vZGVfbmFtZXNbaV1dIHx8IHRoaXMuYW5jZXN0b3JzX3N0cnVjdFtub2RlX3RvX2FkZC50ZXh0XSB8fCBbXTtcblx0XHQgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KG5vZGVfdG9fYWRkLmFuY2VzdG9ycykgPT09IGZhbHNlKSB7XG5cdFx0ICAgICAgICAgICAgICAgIG5vZGVfdG9fYWRkLnBhcmVudCA9IG5vZGVfdG9fYWRkLmFuY2VzdG9yc1swXTtcblx0XHQgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBub2RlX3RvX2FkZC5wYXJlbnQgPSBudWxsO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBub2RlRGF0YS5wdXNoKG5vZGVfdG9fYWRkKTtcblx0XHQgICAgICAgIH1cblxuXHRcdCAgICAgICAgcmV0dXJuIHtub2RlRGF0YTpub2RlRGF0YSwgbGlua0RhdGE6bGlua0RhdGF9O1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIG91dHB1dCBvZiBnZXRGbG93QmV0d2VlblNldFxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlRGF0YSAgTm9kZURhdGEgdG8gY29udmVydCBcblx0XHQgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vZGUgb2JqZWN0c1xuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBOb2RlIG9iamVjdHNcblx0XHQgICAgICovXG5cdFx0ICAgIHByb2Nlc3NOb2RlRGF0YShub2RlRGF0YSkge1xuXHRcdCAgICAgICAgdmFyIG5vZGVzID0gW107XG5cdFx0ICAgICAgICBfLmZvckVhY2gobm9kZURhdGEsIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKG51bGwsIG51bGwsIGRhdGEuaWQsIGRhdGEudGV4dCxcblx0XHQgICAgICAgICAgICAgICAgbnVsbCwgZGF0YS5wYXJlbnQsIGRhdGEuYW5jZXN0b3JzLCBudWxsLCBudWxsKTtcblx0XHQgICAgICAgICAgICBub2Rlcy5wdXNoKG5ld05vZGUpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICByZXR1cm4gbm9kZXM7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogcHJvY2VzcyB0aGUgbGlua0RhdGEgb3V0cHV0IG9mIGdldEZsb3dCZXR3ZWVuU2V0XG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIGxpbmtEYXRhICBUaGUgbGluayBkYXRhXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICBUaGUgbm9kZXNcblx0XHQgICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG5cdFx0ICAgICAqL1xuXHRcdCAgICBwcm9jZXNzTGlua0RhdGEobGlua0RhdGEsIG5vZGVzKSB7XG5cdFx0ICAgIFx0LyoqXG5cdFx0XHQgICAgICogUmV0dXJucyB0aGUgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGlkXG5cdFx0XHQgICAgICpcblx0XHRcdCAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG5cdFx0XHQgICAgICogQHJldHVybiAgICAge05vZGV9ICAgVGhlIG5vZGUgd2l0aCB0aGUgbWF0Y2hpbmcgaWRcblx0XHRcdCAgICAgKi9cblx0XHRcdCAgICBmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdCAgICAgICAgICAgIGlmIChpZCA9PSBub2Rlc1tpXS5pZCkge1xuXHRcdFx0ICAgICAgICAgICAgICAgIHJldHVybiBub2Rlc1tpXTtcblx0XHRcdCAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgIH1cblxuXHRcdCAgICAgICAgdmFyIGxpbmtzID0gW107XG5cdFx0ICAgICAgICAvL2EgbWFwcGluZyBmcm9tIHNvdXJjZS5pZC10YXJnZXQuaWQgdG8gdGhlIGxpbmsgYWRkZWRcblx0XHQgICAgICAgIHZhciBhZGRlZF9saW5rcyA9IHt9O1xuXHRcdCAgICAgICAgLy90cmFuc2Zvcm1pbmcgbGluayBkYXRhXG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtEYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKGxpbmtEYXRhW2ldLnNvdXJjZSAhPSBsaW5rRGF0YVtpXS50YXJnZXQpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS5zb3VyY2UsIG5vZGVzKTtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS50YXJnZXQsIG5vZGVzKTtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IGxpbmtEYXRhW2ldLndlaWdodDtcblx0XHQgICAgICAgICAgICAgICAgLy9pbiBvcmRlciB0byBzdW0gYWxsIHRoZSB3ZWlnaHRzIG9mIHRoZSBsaW5rcyBvZiB0aGUgc3ViLW5vZGVzLFxuXHRcdCAgICAgICAgICAgICAgICAvL3dlIHVzZSBhZGRlZF9saW5rcyB0byBrZWVwIHRyYWNrIGlmIGFuIGxpbmsgd2FzIGFkZGVkXG5cdFx0ICAgICAgICAgICAgICAgIC8vaWYgaXQgaXMsIHdlIG1vZGlmeSBpdHMgd2VpZ2h0XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgPT0gbnVsbCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuXHRcdCAgICAgICAgICAgICAgICBcdGNvbnRpbnVlO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gbmV3IFZpc3VhbGl6ZXJMaW5rLkxpbmsoc291cmNlLCB0YXJnZXQsIHdlaWdodCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID0gbGluaztcblx0XHQgICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGluayk7XG5cdFx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdfbGluayA9IGFkZGVkX2xpbmtzW3NvdXJjZS5pZCArICctJyArIHRhcmdldC5pZF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBleGlzdGluZ19saW5rLnNldFdlaWdodChleGlzdGluZ19saW5rLmdldFJhd1dlaWdodCgpICsgd2VpZ2h0KTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nX2xpbmsuaW5jcmVhc2VDb3VudCgpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfSAgXG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gbGlua3M7XG5cdFx0ICAgIH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdERhdGFTb3VyY2U6IFZpc3VhbGl6ZXJEYXRhU291cmNlXG5cdFx0fVxufV0pO1xuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJywgW10pOyIsIi8qKlxuICogVGhlIGJhc2UgY2xhc3MgdGhlIGdyYXBoIG9iamVjdC4gQW55IG5vZGVzIG9yIGxpbmtzIHRoYXQgYXJlIGNvbnRhaW5lZCBpblxuICogaXRzIG5vZGVzIG9yIGxpbmtzIHByb3BlcnR5IHdpbGwgYmUgZHJhd24gb24gdXBkYXRlR3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gZ3JhcGggb2JqZWN0LCBjcmVhdGUgYSBuZXcgZmFjdG9yeSB0aGF0IHVzZXMgdGhlIGdyYXBoXG4gKiB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBpdHMgZ3JhcGggY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBHcmFwaCBhcyBrZXkuXG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ0dyYXBoJywgWydQb2xpY3lTZXJ2aWNlJywgZnVuY3Rpb24gKFBvbGljeVNlcnZpY2UpIHtcbiAgICAgICAgY2xhc3MgR3JhcGgge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjb25zdHJ1Y3RvciBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgICBUaGUgc3ZnIHRoYXQgd2lsbCBcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICAgTGlzdCBvZiBub2RlcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBsaW5rcyAgICAgIExpc3Qgb2YgbGlua3MgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihzdmcsIG5vZGVzLCBsaW5rcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbm9kZXMgfHwgW107XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gbGlua3MgfHwgW107XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzID0gW107XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuUG9saWN5KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhblpvb206IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhblBhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdEZvcmNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVVwZGF0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlR0NsYXNzOiBcImNvbmNlcHRHXCIsXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoQ2xhc3M6IFwiZ3JhcGhcIixcbiAgICAgICAgICAgICAgICAgICAgcGF0aENsYXNzOiBcInBhdGhcIixcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNsYXNzOiBcImNpcmNsZVwiLFxuICAgICAgICAgICAgICAgICAgICBub2RlVGV4dDogXCJub2RlVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFJhZGl1czogNTAsXG4gICAgICAgICAgICAgICAgICAgIG1heFJhZGl1czogNjAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlPZmZzZXQ6IDYwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHN2Zy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW92ZXJcIl0uY2FsbCh0aGlzLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJkYmxjbGlja1wiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcImNvbnRleHRtZW51XCJdLmNhbGwodGhpcywgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW91dFwiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNlZG93blwiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2V1cFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZXVwXCJdLmNhbGwodGhpcywgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhcnJvdyBtYXJrZXJzIGZvciBncmFwaCBsaW5rc1xuICAgICAgICAgICAgICAgIHZhciBkZWZzID0gc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKTtcbiAgICAgICAgICAgICAgICBkZWZzLmFwcGVuZCgnc3ZnOm1hcmtlcicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdlbmQtYXJyb3cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwicmVmWFwiLCAyMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJyZWZZXCIsIC0xKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIDYpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDYpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKTtcblxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhcnJvdyBtYXJrZXJzIGZvciBsZWFkaW5nIGFycm93XG4gICAgICAgICAgICAgICAgZGVmcy5hcHBlbmQoJ3N2ZzptYXJrZXInKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnbWFyay1lbmQtYXJyb3cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndmlld0JveCcsICcwIC01IDEwIDEwJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3JlZlgnLCA3KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAzLjUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAzLjUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCAnTTAsLTVMMTAsMEwwLDUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmcgPSBzdmc7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z0cgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLmdyYXBoQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdHID0gdGhpc0dyYXBoLnN2Z0c7XG5cbiAgICAgICAgICAgICAgICAvLyBzdmcgbm9kZXMgYW5kIGxpbmtzIFxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocyA9IHN2Z0cuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJnXCIpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gc3ZnRy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcImdcIik7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzaXplRnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgub25XaW5kb3dSZXNpemUoc3ZnKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmJpbmRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6cmVzaXplRnVuY1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShyZXNpemVGdW5jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjYWxscyB0aGUgZGVzdHJveSBtZXRob2QgZm9yIGFsbCBwb2xpY2llc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3kuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXNHcmFwaC5iaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKGtleSwgdGhpc0dyYXBoLmJpbmRpbmdzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSdW5zIHRoZSBpbml0IGZ1bmN0aW9uIGZvciBhbGwgdGhlIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXROb2RlcygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbGlua3NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5pdExpbmtzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcmV0dXJucyB0aGUgbm9kZSBtYXRjaGluZyB0aGUgaWQsIFxuICAgICAgICAgICAgICogb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vbmVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgICAgICAgICAgICogQHJldHVybiAgICAge05vZGV9ICB7IG1hdGNoaW5nIG5vZGUgfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmaW5kTm9kZUJ5SWQoaWQpe1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PT0gdGhpc0dyYXBoLm5vZGVzW2ldLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0dyYXBoLm5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBkM05vZGUgb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgaWQsXG4gICAgICAgICAgICAgKiBvciB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm9uZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7RDNOb2RlfSBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmaW5kRDNOb2RlKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGQzTm9kZTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkM05vZGUgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDNOb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIGRyYWcgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgICAgICAqIHdoZW4gbm9kZXMgYXJlIGRyYWdnZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDMuYmVoYXZpb3IuZHJhZ30gIGQzZHJhZyAgRDMgZHJhZyBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbERyYWdQb2xpY3koZDNkcmFnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnID0gZDNkcmFnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIHBvbGljeSB0aGF0IHdpbGwgYmUgY2FsbGVkIFxuICAgICAgICAgICAgICogd2hlbiB0aGVyZSBpcyBtb3VzZSBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgZ3JhcGgncyBzdmdcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbFN2Z1BvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z1BvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXNcbiAgICAgICAgICAgICAqIG1vdXNlIGludGVyYWN0aW9uIHdpdGggYSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5wdXNoKHBvbGljeSk7XG4gICAgICAgICAgICAgICAgcG9saWN5LmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVtb3ZlIGFuIGluc3RhbGxlZCBwb2xpY3kgZm9yIG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBwb2xpY3lSZW1vdmUgIFRoZSBwb2xpY3kgdG8gcmVtb3ZlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVuaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3ksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kucG9saWN5TmFtZSA9PT0gcG9saWN5UmVtb3ZlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHBvbGljeSBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBwb2xpY3lOYW1lICBUaGUgcG9saWN5IG5hbWVcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtQb2xpY3l9ICBwb2xpY3kgICAgICBUaGUgbWF0Y2hpbmcgcG9saWN5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldE5vZGVQb2xpY3kocG9saWN5TmFtZSkge1xuICAgICAgICAgICAgXHR2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHROb2RlUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXMgYVxuICAgICAgICAgICAgICogbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIHBhdGhcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KHBvbGljeSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzLnB1c2gocG9saWN5KTtcbiAgICAgICAgICAgICAgICBwb2xpY3kuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVtb3ZlIGFuIGluc3RhbGxlZCBwb2xpY3kgZm9yIGxpbmtzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdW5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocG9saWN5UmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvbGljeVJlbW92ZU5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2xpY3lSZW1vdmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3kuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIHBhdGhcbiAgICAgICAgICAgICAqIFByb3BvZ2F0ZXMgdGhlIGV2ZW50IHRvIGFsbCBpbnN0YWxsZWQgcGF0aCBwb2xpY2llc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgIFRoZSBldmVudCB0eXBlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNvYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIExpbmsgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBhdGhQb2xpY3lFdmVudChldmVudCwgZDNwYXRoLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM3BhdGgsIGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgbm9kZVxuICAgICAgICAgICAgICogUHJvcG9nYXRlcyB0aGUgZXZlbnQgdG8gYWxsIGluc3RhbGxlZCBub2RlIHBvbGljaWVzXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgIFRoZSBldmVudCB0eXBlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNvYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIE5vZGUgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzLCBmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyBwYW4gYW5kIHpvb20gcnVsZXMgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkMy5iZWhhdmlvci56b29tfSAgZDN6b29tICBEMyB6b29tIG9ialxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbnN0YWxsWm9vbVBvbGljeShkM3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdTdmcgPSBkM3pvb207XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcuY2FsbCh0aGlzLmRyYWdTdmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxuICAgICAgICAgICAgICogSG9vayBmb3Igb3ZlcnJpZGluZyBpbiBzdWJjbGFzc2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgICBUaGUgc3ZnIHRoYXQgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgYXR0YWNoZWQgdG9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb25XaW5kb3dSZXNpemUoc3ZnKSB7fVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluc2VydHMgbGluZSBicmVha3MgaW4gbm9kZSB0ZXh0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgRWxlbX0gIGdFbCAgICBUaGUgZWxlbSB0byBhZGQgdGV4dCB0b1xuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHRpdGxlICAgVGhlIHRpdGxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluc2VydFRpdGxlTGluZWJyZWFrcyAoZ0VsLCB0aXRsZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB3b3JkcyA9IHRpdGxlLnNwbGl0KC9cXHMrL2cpLFxuICAgICAgICAgICAgICAgICAgICBud29yZHMgPSB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZ0VsLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpc0dyYXBoLmNvbnN0cy5ub2RlVGV4dClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCItXCIgKyAobndvcmRzLTEpKjcuNSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0c3BhbiA9IGVsLmFwcGVuZCgndHNwYW4nKS50ZXh0KHdvcmRzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgICAgIHRzcGFuLmF0dHIoJ3gnLCAwKS5hdHRyKCdkeScsICcxNScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIGFsbCBsaW5rcyBmcm9tIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNwbGljZUxpbmtzRm9yTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRvU3BsaWNlID0gdGhpc0dyYXBoLmxpbmtzLmZpbHRlcihmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGwuc291cmNlID09PSBub2RlIHx8IGwudGFyZ2V0ID09PSBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9TcGxpY2UubWFwKGZ1bmN0aW9uKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnNwbGljZSh0aGlzR3JhcGgubGlua3MuaW5kZXhPZihsKSwgMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyB0aGUgbm9kZSB0byB0aGUgZ3JhcGggYW5kIHVwZGF0ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5vZGUgICAgVGhlIG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIG5vZGUgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZU5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5zcGxpY2UodGhpc0dyYXBoLm5vZGVzLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyB0aGUgbGluayB0byB0aGUgZ3JhcGggYW5kIHVwZGF0ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bGlua30gIGxpbmsgICAgVGhlIGxpbmtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkTGluayhsaW5rKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnB1c2gobGluayk7XG4gICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIGxpbmsgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2xpbmt9ICBsaW5rICAgIFRoZSBsaW5rXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUxpbmsobGluaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcy5zcGxpY2UodGhpc0dyYXBoLmxpbmtzLmluZGV4T2YobGluayksIDEpO1xuICAgICAgICAgICAgICAgIGxpbmsuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyB1cGRhdGluZyBleGlzdGluZyBwYXRoc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQYXRofSAgcGF0aHMgICBMaXN0IG9mIHBhdGhzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpIHtcbiAgICAgICAgICAgICAgICBwYXRocy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC51cGRhdGVBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIGFkZGluZyBuZXcgcGF0aHNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIG5ld1BhdGhzICBMaXN0IG9mIG5ldyBwYXRoc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQubmV3UGF0aEF0dHIoZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vaWYgbm9kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBwb2xpY3ksIHVzZSBkZWZhdWx0IGZvciB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAgICBuZXdQYXRocy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdmVyXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdmVyXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcImRibGNsaWNrXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3V0XCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2Vkb3duXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2Vkb3duXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodGhpc0dyYXBoLmRyYWcpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUV4aXN0aW5nTm9kZXMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMgPSB0aGlzLmNpcmNsZXMuZGF0YSh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5pZDt9KVxuICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZUF0dHIoZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZ3JhcGggaXMgYWRkaW5nIG5ldyBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbmV3Tm9kZXMgIExpc3Qgb2YgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZU5ld05vZGVzKG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuZ3JhcGggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZC5uZXdOb2RlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9pZiBub2RlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIHBvbGljeSwgdXNlIGRlZmF1bHQgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgIG5ld05vZGVzLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW92ZXJcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW92ZXJcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcImNvbnRleHRtZW51XCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZWRvd25cIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZWRvd25cIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNldXBcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNldXBcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCkge3JldHVybiBTdHJpbmcoZC5yYWRpdXMpfSk7XG5cblxuICAgICAgICAgICAgICAgIG5ld05vZGVzLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbnNlcnRUaXRsZUxpbmVicmVha3MoZDMuc2VsZWN0KHRoaXMpLCBkLnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByZXZlbnRzIG5vZGVzIGZyb20gY29sbGlkaW5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGFscGhhICAgQWZmZWN0cyBob3cgbXVjaCBjaGFuZ2VcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsaXNpb24gY2F1c2VzXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIHtXaGV0aGVyIG5vZGVzIGFyZSBjb2xsaWRlZH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZDNGb3JjZUNvbGxpZGUoYWxwaGEpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICBcdFx0Y29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cztcbiAgICAgICAgICAgIFx0dmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgXHR2YXIgcXVhZHRyZWUgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBkLnJhZGl1cyArIGNvbnN0cy5tYXhSYWRpdXMgKyBjb25zdHMucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG54MSA9IGQueCAtIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBueDIgPSBkLnggKyByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnkxID0gZC55IC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG55MiA9IGQueSArIHI7XG4gICAgICAgICAgICAgICAgICAgIHF1YWR0cmVlLnZpc2l0KGZ1bmN0aW9uKHF1YWQsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhZC5wb2ludCAmJiAocXVhZC5wb2ludCAhPT0gZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGQueCAtIHF1YWQucG9pbnQueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGQueSAtIHF1YWQucG9pbnQueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGQucmFkaXVzICsgcXVhZC5wb2ludC5yYWRpdXMgKyBjb25zdHMucGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobCA8IHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAobCAtIHIpIC8gbCAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54IC09IHggKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSAtPSB5ICo9IGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFkLnBvaW50LnggKz0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YWQucG9pbnQueSArPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geDEgPiBueDIgfHwgeDIgPCBueDEgfHwgeTEgPiBueTIgfHwgeTIgPCBueTE7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGljayBvZiB0aGUgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM3RpY2sgZXZlbnR9ICBlICAgIEQzdGljayBldmVudFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdpZHRoICBUaGUgd2lkdGggb2YgdGhlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkM0ZvcmNlVGljayhlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICBcdHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgXHRcdGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHM7XG5cbiAgICAgICAgICAgIFx0dmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1x0XG4gICAgICAgICAgICBcdHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgIFx0dmFyIHEgPSBkMy5nZW9tLnF1YWR0cmVlKHRoaXNHcmFwaC5ub2RlcyksXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcS52aXNpdCh0aGlzLmQzRm9yY2VDb2xsaWRlKG5vZGVzW2ldKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKHRoaXMuZDNGb3JjZUNvbGxpZGUoLjUpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueCA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbih3aWR0aCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLngpKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55ID0gTWF0aC5tYXgoZC5yYWRpdXMgKyBvZmZzZXQsIE1hdGgubWluKGhlaWdodCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLnkpKTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHNcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhcnRzIG9uIHN0YXJ0IG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VTdGFydCgpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lnk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgZW5kIG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VFbmQoKSB7XG4gICAgICAgICAgICBcdHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgXHR0aGlzR3JhcGguY2lyY2xlc1xuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS55OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGJvdW5kcyBmb3IgdGhlIFxuICAgICAgICAgICAgICogZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICB3aWR0aCBhbmQgaGVpZ2h0IGFzIHByb3BlcnRpZXMgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VCb3VuZHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHN2Z0hlaWdodDtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3dpZHRoOndpZHRoLCBoZWlnaHQ6aGVpZ2h0fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEb2VzIGEgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBUaGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0Rm9yY2UoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSB0aGlzR3JhcGgubGlua3M7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShub2RlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSB0aGlzR3JhcGguZDNGb3JjZUJvdW5kcygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZvcmNlID0gZDMubGF5b3V0LmZvcmNlKClcbiAgICAgICAgICAgICAgICAgICAgLnNpemUoW2JvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgICAgIC5ub2Rlcyhub2RlcylcbiAgICAgICAgICAgICAgICAgICAgLmNoYXJnZShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTYwMDA7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5saW5rcyhsaW5rcyk7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5saW5rRGlzdGFuY2UoYm91bmRzLndpZHRoLzMpO1xuICAgICAgICAgICAgICAgIGZvcmNlLmxpbmtTdHJlbmd0aCguMik7XG4gICAgICAgICAgICAgICAgZm9yY2UuZ3Jhdml0eSguMik7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5vbigndGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXNHcmFwaC5kM0ZvcmNlVGljay5jYWxsKHRoaXNHcmFwaCwgXG4gICAgICAgICAgICAgICAgXHRcdFx0ZSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLm9uKCdzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIFx0dGhpc0dyYXBoLmQzRm9yY2VTdGFydC5jYWxsKHRoaXNHcmFwaClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXNHcmFwaC5kM0ZvcmNlRW5kLmNhbGwodGhpc0dyYXBoKVxuICAgICAgICAgICAgICAgIH0pOyBcblxuXG4gICAgICAgICAgICAgICAgZm9yY2Uuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChmb3JjZS5hbHBoYSgpID4gMWUtMikgJiYgKGsgPCAxNTApKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlLnRpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGsgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3JjZS5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFx0Y2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgcG9zaXRpb25zIHRvIGJlIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlbiBpZiBcbiAgICAgICAgICAgICAqIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgICogYWxzbyBzZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFBvc2l0aW9ucygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzR3JhcGguY29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGggLSAoMipvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQgLSAoMipvZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5yYWRpdXMgPSBub2Rlc1tpXS5yYWRpdXMgfHwgdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnggPT0gbnVsbCB8fCBub2Rlc1tpXS55ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzW2ldLnhTdGFydCA9IHdpZHRoLzIgICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS54ID0gd2lkdGgvMiAgKyBub2Rlc1tpXS5yYWRpdXMgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2Rlc1tpXS55U3RhcnQgPSBoZWlnaHQvMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ueSA9IGhlaWdodC8yICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHRvIHVwZGF0ZSB0aGUgdmlldyBvZiB0aGUgZ3JhcGggd2hlblxuICAgICAgICAgICAgICogZGF0YSBjaGFuZ2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVHcmFwaChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZTtcblxuICAgICAgICAgICAgXHRpZiAodGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUpIHtcbiAgICAgICAgICAgIFx0XHRyZXR1cm47XG4gICAgICAgICAgICBcdH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhpc3RpbmdOb2RlcygpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdHcz0gdGhpc0dyYXBoLmNpcmNsZXMuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKTtcblxuICAgICAgICAgICAgXHQvLyBjb25zb2xlLmxvZygndXBkYXRlJywgbmV3R3MpO1xuICAgICAgICAgICAgICAgIG5ld0dzLmNsYXNzZWQoY29uc3RzLmNpcmNsZUdDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZU5ld05vZGVzKG5ld0dzKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaW5pdEZvcmNlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRGb3JjZShmdW5jdGlvbigpIHtcbiAgICBcdCAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlTmV3Tm9kZXMuY2FsbCh0aGlzR3JhcGgsIG5ld0dzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmluaXRGb3JjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3Tm9kZXMobmV3R3MpO1xuXHQgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSB0aGlzR3JhcGgucGF0aHMuZGF0YSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKGQuc291cmNlLmlkKSArIFwiK1wiICsgU3RyaW5nKGQudGFyZ2V0LmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSB0aGlzR3JhcGgucGF0aHM7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeGlzdGluZ1BhdGhzKHBhdGhzKTtcblxuICAgICAgICAgICAgICAgIHZhciBuZXdwYXRocyA9IHBhdGhzLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsJ3VybCgjZW5kLWFycm93KScpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJsaW5rXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3UGF0aHMobmV3cGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBsaW5rc1xuICAgICAgICAgICAgICAgIHBhdGhzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgXHRjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEdyYXBoOiBHcmFwaFxuICAgICAgICB9XG59XSk7XG5cblxuIiwiLyoqXG4gKiBUaGUgZ3JhcGggdGhhdCBpcyB1c2VkIHNwZWNpZmljYWxseSBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnVmlzdWFsaXplckdyYXBoJywgWydHcmFwaCcsIGZ1bmN0aW9uIChHcmFwaCkge1xuICAgIFx0Y2xhc3MgVmlzdWFsaXplckdyYXBoIGV4dGVuZHMgR3JhcGguR3JhcGgge1xuICAgIFx0XHQvKipcbiAgICBcdFx0ICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgIFx0XHQgKlxuICAgIFx0XHQgKiBAcGFyYW0gICB7SFRNTCBTVkd9ICBzdmcgICAgICAgICAgICAgVGhlIHN2ZyB0aGF0IHdpbGwgXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIEBwYXJhbSAgIHtBcnJheX0gIG5vZGVzICAgXHRcdCAgICBMaXN0IG9mIG5vZGVzXG4gICAgICAgICAgICAgKiBAcGFyYW0gICB7QXJyYXl9ICBsaW5rcyAgIFx0XHQgICAgTGlzdCBvZiBsaW5rc1xuICAgIFx0XHQgKiBAcGFyYW0gICB7RGF0YVNvdXJjZX0gIGRhdGFTb3VyY2UgICAgVGhlIGRhdGEgc291cmNlXG4gICAgXHRcdCAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3Ioc3ZnLCBub2RlcywgbGlua3MsIGRhdGFTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihzdmcsIG5vZGVzLCBsaW5rcyk7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAvL2hvbGRzIGN1cnJlbnQgdHJhbnNpdGlvbnMgdGhhdCBhcmUgb2NjdXJpbmdcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUudHJhbnNpdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgIC8vTWluIGRpc3RhbmNlIGJldHdlZW4gbm9kZXMgd2hlbiBzcGF3bmluZyByYW5kb21seVxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jb25zdHMuZWRnZV9idWZmZXIgPSAyMDA7XG4gICAgICAgICAgICAgICAgLy9TaXplIHJlZHVjdGlvbiBhcyB5b3UgZ28gdGhyb3VnaCBsZXZlbHMgaW4gbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5ID0gMTtcbiAgICAgICAgICAgICAgICAvL0NzcyBjbGFzcyBmb3Igbm9kZXMgdGhhdCBhcmUgY29udGFpbmVyc1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jb25zdHMuY29udGFpbmVyQ2xhc3MgPSAnY29udGFpbmVyJztcblxuICAgICAgICAgICAgICAgIC8vZGF0YVNvdXJjZSBob2xkcyB0aGUgc2VydmVyIGRhdGEgYW5kIG1ldGhvZHMgZm9yXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0aW5nIGl0IHRvIGRhdGEgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kYXRhU291cmNlID0gZGF0YVNvdXJjZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL0RyYWcgYmVoYXZpb3IgZm9yIG5vZGVzXG4gICAgICAgICAgICAgICAgdmFyIGRyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgICAgICAgICAgICAgICAgLm9yaWdpbihmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBkLngsIHk6IGQueX07XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRyYWdzdGFydFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZ1wiLCBmdW5jdGlvbihhcmdzKXtcbiAgICAgICAgICAgICAgICAgICAgXHRkMy5zZWxlY3QoIHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gZDMuZXZlbnQuZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IGQzLmV2ZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFsgZC54LGQueSBdICsgXCIpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XHRcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZ2VuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZHJhZyA9IGRyYWc7XG5cbiAgICAgICAgICAgICAgICAvL1BhbiBhbmQgWm9vbSBiZWhhdmlvciBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgdmFyIHpvb20gPSBkMy5iZWhhdmlvci56b29tKClcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiem9vbVwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQzLmV2ZW50LnNvdXJjZUV2ZW50ICE9IG51bGwgJiYgZDMuZXZlbnQuc291cmNlRXZlbnQuY3RybEtleSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQuY2FsbCh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcInpvb21zdGFydFwiLCBmdW5jdGlvbihkLCBpKXtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRyYWdTdmcgPSB6b29tO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmcuY2FsbCh6b29tKS5vbihcImRibGNsaWNrLnpvb21cIiwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdpdGggbm8gYXJncyB3aGVuIHRoZSBncmFwaCBoYXMgYSB6b29tIGFjdGlvblxuICAgICAgICAgICAgICogQ2FuIGFsc28gYmUgY2FsbGVkIHdpdGggYXJncyB0byBmb3JjZSBhIHpvb20gb3IgcGFuIFxuICAgICAgICAgICAgICogZXZlbnQgZm9yIHRoZSBncmFwaC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgdHJhbnNsYXRlICBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHNjYWxlICAgICAgVGhlIGFtb3VudCB0byBzY2FsZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB6b29tZWQodHJhbnNsYXRlLCBzY2FsZSl7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5zdGF0ZS5yaWdodENsaWNrID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmp1c3RTY2FsZVRyYW5zR3JhcGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGUgIT0gbnVsbCAmJiBzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gdGhpc0dyYXBoLmRyYWdTdmc7XG4gICAgICAgICAgICAgICAgICAgIHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB6b29tLnRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIG5hbWVzIHRvIHByZXZlbnQgdHJhbnNpdGlvbiBjb25mbGljdHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb21TZXRDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBcdHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBcdHpvb20udHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVfbmFtZSA9IFwiem9vbVwiICsgdHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoXCIuXCIgKyB0aGlzLmNvbnN0cy5ncmFwaENsYXNzKS50cmFuc2l0aW9uKHRyYW5zbGF0ZV9uYW1lKS5kZWxheSgxMDApLmR1cmF0aW9uKDc1MClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB6b29tLnRyYW5zbGF0ZSgpICsgJykgc2NhbGUoJyArIHpvb20uc2NhbGUoKSArICcpJykuZWFjaChcImVuZFwiLCB6b29tU2V0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLnN0YXRlLmNhblpvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KFwiLlwiICsgdGhpcy5jb25zdHMuZ3JhcGhDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCkgKyBcIikgc2NhbGUoXCIgK3RoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkgKyBcIilcIik7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyByZXNpemVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgIFRoZSBzdmcgdG8gcmVzaXplXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9uV2luZG93UmVzaXplKHN2Zykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIHZhciBkaXZXaWR0aCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gYm9keUVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICBzdmcuYXR0cihcIndpZHRoXCIsIGRpdldpZHRoKS5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCAtIG9mZnNldC50b3AgLSAyMCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHNlcnZlciBzZW5kcyB1cGRhdGVkIGRhdGEgZm9yIHRoZSBsaW5rc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVMaW5rRGF0YSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgbm9kZV9uYW1lc19zZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzX3NldCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtEYXRhID0gcmV0RGF0YS5saW5rRGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTGlua0RhdGEobGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0Tm9kZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRMaW5rcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBHcmFwaDogVmlzdWFsaXplckdyYXBoXG4gICAgICAgIH1cbn1dKTtcblxuXG5cbiIsIi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGxpbmsgb2JqZWN0cyBmb3IgdGhlIGdyYXBoLlxuICogU3VwcG9ydHMgcG9saWNpZXMuXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIGxpbmsgb2JqZWN0LCBjcmVhdGUgYSBuZXcgZmFjdG9yeSB0aGF0IHVzZXMgdGhlIGxpbmtcbiAqIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIGl0cyBsaW5rIGNsYXNzLiBcbiAqIFJldHVybiB0aGUgY2xhc3Mgb2JqZWN0IHdpdGggTGluayBhcyBrZXlcbiAqIFxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnTGluaycsIFtmdW5jdGlvbiAoKSB7XG4gICAgXHRjbGFzcyBMaW5rIHtcbiAgICBcdFx0LyoqXG4gICAgXHRcdCAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICBcdFx0ICpcbiAgICBcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICBzb3VyY2VOb2RlICBUaGUgc291cmNlIG5vZGVcbiAgICBcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICB0YXJnZXROb2RlICBUaGUgdGFyZ2V0IG5vZGVcbiAgICBcdFx0ICovXG5cdFx0XHRjb25zdHJ1Y3Rvcihzb3VyY2VOb2RlLCB0YXJnZXROb2RlKSB7XG5cdFx0XHRcdHRoaXMuc291cmNlID0gc291cmNlTm9kZTtcblx0XHRcdFx0dGhpcy50YXJnZXQgPSB0YXJnZXROb2RlO1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLnBhdGhQb2xpY2llcyA9IFtdO1xuXHRcdFx0XHR0aGlzLmdyYXBoID0gbnVsbDtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCB3aGVuIGEgbGluayBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuXHRcdFx0ICovXG5cdFx0XHRpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5ncmFwaCA9IGdyYXBoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIGR1cmluZyB0aGUgdXBkYXRlIGdyYXBoIGZvciBleGlzdGluZyBsaW5rc1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0ICAgICAgIFxuXHRcdFx0ICovXG5cdFx0XHR1cGRhdGVBdHRyKGQzcGF0aCwgZCkge1xuXHRcdFx0XHRkM3BhdGguc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJylcblx0XHQgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJyb3dQYXRoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbGlua1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0ICAgICAgIFxuXHRcdFx0ICovXG5cdFx0XHRuZXdQYXRoQXR0cihkM3BhdGgsIGQpIHtcblx0XHRcdFx0ZDNwYXRoLmF0dHIoJ2QnLCBhcnJvd1BhdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGN1bGF0ZXMgdGhlIGFycm93IHBhdGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuICAgICB7c3RyaW5nfSAgVGhlIHBhdGggdG8gZHJhd1xuXHRcdFx0ICovXG5cdFx0ICAgIGFycm93UGF0aCgpIHtcblx0XHQgICAgXHR2YXIgZCA9IHRoaXM7XG5cdFx0ICAgICAgICB2YXIgZHggPSBkLnRhcmdldC54IC0gZC5zb3VyY2UueCxcblx0XHQgICAgICAgICAgICBkeSA9IGQudGFyZ2V0LnkgLSBkLnNvdXJjZS55LFxuXHRcdCAgICAgICAgICAgIGRyID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHQgICAgICAgIHJldHVybiBcIk1cIiArIGQuc291cmNlLnggKyBcIixcIiArIGQuc291cmNlLnkgKyBcIkFcIiArIGRyICsgXCIsXCIgKyBkciArIFwiIDAgMCwxIFwiICsgZC50YXJnZXQueCArIFwiLFwiICsgZC50YXJnZXQueTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhpc1xuXHRcdCAgICAgKiBsaW5rIGhhcyBhIG1vdXNlIGV2ZW50XG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuXHRcdCAgICAgKi9cblx0XHRcdGluc3RhbGxQYXRoUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMucGF0aFBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIGxpbmtcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuXHRcdFx0ICovXG5cdFx0XHR1bmluc3RhbGxQYXRoUG9saWN5KHBvbGljeVJlbW92ZSkge1xuXHRcdFx0XHR2YXIgcG9saWN5UmVtb3ZlTmFtZTtcblx0XHRcdFx0dmFyIHRoaXNQYXRoID0gdGhpcztcblx0XHRcdFx0aWYgKHR5cGVvZiBwb2xpY3lSZW1vdmUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlLnBvbGljeU5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Xyh0aGlzUGF0aC5wYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5LCBpbmRleCkge1xuXHRcdFx0XHRcdGlmIChwb2xpY3kucG9saWN5TmFtZSA9PT0gcG9saWN5UmVtb3ZlTmFtZSkge1xuXHRcdFx0XHRcdFx0cG9saWN5LmRlc3Ryb3koKTtcblx0XHRcdFx0XHRcdHRoaXNQYXRoLnBhdGhQb2xpY2llcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGlmICh0aGlzUGF0aC5wYXRoUG9saWNpZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0dGhpc1BhdGguaGFzUG9saWN5ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgd2hlbiB0aGVyZSBpcyBhIG1vdXNlIGV2ZW50IGZvciB0aGlzIHBhdGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgZXZlbnQgICAgIFRoZSBtb3VzZSBldmVudFxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuXHRcdFx0ICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICAgICBUaGUgbWF0Y2hpbmcgbGluayBvYmplY3Rcblx0XHRcdCAqL1xuXHRcdFx0cGF0aFBvbGljeUV2ZW50KGV2ZW50LCBkM3BhdGgsIGQpIHtcblx0XHRcdFx0XyhkLnBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcblx0XHRcdFx0XHRwb2xpY3lbZXZlbnRdKGQzcGF0aCwgZCk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRMaW5rOiBMaW5rXG5cdFx0fVxufV0pO1xuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBUaGUgbGluayB0aGF0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgdmlzdWFsaXphdGlvbiB0YWIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemVyTGluaycsIFsnTGluaycsIGZ1bmN0aW9uIChMaW5rKSB7XG5cdFx0Y2xhc3MgVmlzdWFsaXplckxpbmsgZXh0ZW5kcyBMaW5rLkxpbmsge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICBzb3VyY2VOb2RlICBUaGUgc291cmNlIG5vZGVcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtOb2RlfSAgdGFyZ2V0Tm9kZSAgVGhlIHRhcmdldCBub2RlXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgd2VpZ2h0ICAgIFRoZSB3ZWlnaHQgb2YgdGhlIGxpbmtcblx0XHRcdCAqL1xuXHRcdCAgICBjb25zdHJ1Y3Rvcihzb3VyY2VOb2RlLCB0YXJnZXROb2RlLCB3ZWlnaHQpIHtcblx0XHQgICAgICAgIHN1cGVyKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpO1xuXHRcdCAgICAgICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0ICAgICAgICAvL0NvdW50IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBob3cgbWFueVxuXHRcdCAgICAgICAgLy9wYXRocyB0byBpdHMgc3Vibm9kZXMgdGhlcmUgYXJlXG5cdFx0ICAgICAgICAvL2luIG9yZGVyIHRvIGNhbGN1bGF0ZSBhdmVyYWdlIHRyYWZmaWNcblx0XHQgICAgICAgIHRoaXMuY291bnQgPSAxO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEluY3JlYXNlcyB0aGUgY291bnQgb2YgdGhlIGxpbmtcblx0XHQgICAgICogVVNlZCB0byBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IHBhdGhzIHRvIGl0cyBzdWJub2Rlc1xuXHRcdCAgICAgKiB0aGVyZSBhcmUgaW4gb3JkZXIgdG8gY2FsY3VsYXRlIGF2ZXJhZ2UgdHJhZmZpY1xuXHRcdCAgICAgKi9cblx0XHQgICAgaW5jcmVhc2VDb3VudCgpIHtcblx0XHQgICAgICAgIHRoaXMuY291bnQgKz0gMTtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBDYWxjdWxhdGVzIHdoZXJlIHRvIHBsYWNlIHF0aXAgZm9yXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICBPYmplY3Qgd2l0aCBxVGlwIHNldHRpbmdzXG5cdFx0ICAgICAqL1xuXHRcdCAgICBxdGlwSGVscGVyKCkge1xuXHRcdCAgICBcdHZhciByZXQ7XG5cdFx0ICAgIFx0dmFyIGQgPSB0aGlzO1xuXHRcdCAgICBcdHZhciBkeCA9IChkLnRhcmdldC54IC0gZC5zb3VyY2UueCkgLyAyLFxuXHRcdCAgICAgICAgICAgIGR5ID0gKGQudGFyZ2V0LnkgLSBkLnNvdXJjZS55KSAvIDI7XG5cdFx0ICAgIFx0aWYgKGQuc291cmNlLnggPCBkLnRhcmdldC54KSB7XG5cdCAgICBcdFx0XHRyZXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBteTogJ3RvcCBjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXQ6ICdjZW50ZXIgY2VudGVyJywgLy8gYXQgdGhlIGJvdHRvbSByaWdodCBvZi4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBbZHgsIGR5XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXHR5OiAxMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0XHRcdHJldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15OiAnYm90dG9tIGNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2NlbnRlciBjZW50ZXInLCAvLyBhdCB0aGUgYm90dG9tIHJpZ2h0IG9mLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFtkeCwgZHldLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRqdXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcdHk6IC0xMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgIFx0fVxuXHRcdCAgICBcdHJldHVybiByZXQ7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHRcdCAqIENhbGxlZCB3aGVuIGEgbGluayBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuXHRcdFx0ICovXG5cdFx0XHRpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0c3VwZXIuaW5pdGlhbGl6ZShncmFwaCk7XG5cdFx0XHRcdFx0dmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cdFx0XHRcdFx0aWYgKHN0YXRlID09IG51bGwpIHtcblx0XHRcdFx0XHRcdHN0YXRlID0gZ3JhcGguc3RhdGUuVmlzdWFsaXplckxpbmsgPSB7fTtcblx0XHRcdFx0XHRcdHN0YXRlLm1heFdlaWdodCA9IG51bGw7XG5cdFx0XHRcdFx0XHRzdGF0ZS51c2VBdmdXZWlnaHQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnVwZGF0ZU1heFdlaWdodCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogU2V0cyB3aGV0aGVyIHRoZSBncmFwaCBzaG91bGQgdXNlIGF2ZyB3ZWlnaHRcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7Ym9vbGVhbn0gIHZhbCAgICAgVGhlIHZhbHVlIHRvIHNldCB0b1xuXHRcdFx0ICovXG5cdFx0XHRzZXRVc2VBdmdXZWlnaHQodmFsKSB7XG5cdFx0ICAgICAgICB0aGlzLmdyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rLnVzZUF2Z1dlaWdodCA9ICEhdmFsO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFNldHMgdGhlIHdlaWdodCBvZiB0aGlzIGxpbmtcblx0XHQgICAgICpcblx0XHQgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdlaWdodCAgVGhlIHdlaWdodCB0byBzZXQgdG9cblx0XHQgICAgICovXG5cdFx0ICAgIHNldFdlaWdodCh3ZWlnaHQpIHtcblx0XHQgICAgICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEdldHMgdGhlIHJhdyB3ZWlnaHQuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEByZXR1cm4gICAgIHtudW1iZXJ9ICBUaGUgcmF3IHdlaWdodC5cblx0XHQgICAgICovXG5cdFx0ICAgIGdldFJhd1dlaWdodCgpIHtcblx0XHQgICAgICAgIHJldHVybiB0aGlzLndlaWdodDsgXG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogR2V0cyB0aGUgd2VpZ2h0IHZhbHVlIG9mIHRoZSBsaW5rLCBkZXBlbmRpbmcgb24gdGhlXG5cdFx0ICAgICAqIHVzZUF2Z1dlaWd0aCBzZXR0aW5nXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEByZXR1cm4gICAgIHtudW1iZXJ9ICBUaGUgd2VpZ2h0LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0V2VpZ2h0KCkge1xuXHRcdCAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG5cdFx0ICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cblx0XHQgICAgICAgIGlmIChzdGF0ZS51c2VBdmdXZWlnaHQpIHtcblx0XHQgICAgICAgICAgICB2YXIgd2VpZ2h0ID0gdGhpcy53ZWlnaHQgLyB0aGlzLmNvdW50O1xuXHRcdCAgICAgICAgICAgIHJldHVybiB3ZWlnaHQ7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQ7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogVXBkYXRlcyB0aGUgbWF4IHdlaWdodCBvZiB0aGUgZ3JhcGhcblx0XHQgICAgICovXG5cdFx0ICAgIHVwZGF0ZU1heFdlaWdodCAoKSB7XG5cdFx0ICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHQgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblxuXHRcdCAgICAgICAgdmFyIG1heExpbmsgPSBfLm1heEJ5KHRoaXNHcmFwaC5saW5rcywgZnVuY3Rpb24obCkge1xuXHRcdCAgICAgICAgXHRpZiAobC5ncmFwaCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbC5nZXRXZWlnaHQoKTtcblx0XHQgICAgICAgIFx0fVxuXHRcdCAgICAgICAgXHRyZXR1cm4gMDtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICAgICAgc3RhdGUubWF4V2VpZ2h0ID0gbWF4TGluay5nZXRXZWlnaHQoKTtcblx0XHQgICAgfVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCBkdXJpbmcgdGhlIHVwZGF0ZSBncmFwaCBmb3IgZXhpc3RpbmcgbGlua3Ncblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7TGlua30gIFx0ICAgZCAgICAgICBNYXRjaGluZyBMaW5rIE9iamVjdCAgICAgICBcblx0XHRcdCAqL1xuXHRcdFx0dXBkYXRlQXR0cihkM3BhdGgsIGQpIHtcblx0XHQgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuXHRcdCAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXHRcdCAgICAgICAgdGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0ICAgICAgICAgICAgdmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuXHQgICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgc3RhdGUubWF4V2VpZ2h0XSlcblx0ICAgICAgICAgICAgICAgIC5yYW5nZShbXCIjZmZiMzY2XCIsIFwiI0Y5MjYwNlwiXSk7XG5cdCAgICAgICAgICAgIHN0YXRlLmNvbG9yU2NhbGUgPSBjb2xvclNjYWxlO1xuXHRcdFx0XHRkM3BhdGguc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJylcblx0XHQgICAgICAgICAgICAuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLnNlbGVjdGVkQ2xhc3MsIGZ1bmN0aW9uKGQpe1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gZCA9PT0gc3RhdGUuc2VsZWN0ZWRFZGdlO1xuXHRcdCAgICAgICAgICAgIH0pXG5cdFx0ICAgICAgICAgICAgLmF0dHIoXCJkXCIsIHRoaXMuYXJyb3dQYXRoLmNhbGwoZCkpXG5cdFx0ICAgICAgICAgICAgLnRyYW5zaXRpb24oXCJleGlzdGluZ1BhdGhUcmFuc2l0aW9uXCIpXG5cdFx0ICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcblx0XHQgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkKXtcblx0XHQgICAgICAgICAgICAgICAgdmFyIGMgPSBjb2xvclNjYWxlKGQuZ2V0V2VpZ2h0KCkpO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gYztcblx0XHQgICAgICAgICAgICB9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIHRoaXMgbGlua1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0XG5cdFx0XHQgKi9cblx0XHRcdG5ld1BhdGhBdHRyKGQzcGF0aCwgZCkge1xuXHRcdCAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG5cdFx0ICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cdCAgICAgICAgICAgIHRoaXMudXBkYXRlTWF4V2VpZ2h0KCk7XG5cdCAgICAgICAgICAgIHZhciBjb2xvclNjYWxlID0gZDMuc2NhbGUubGluZWFyKClcblx0ICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHN0YXRlLm1heFdlaWdodF0pXG5cdCAgICAgICAgICAgICAgICAucmFuZ2UoW1wiI2ZmYjM2NlwiLCBcIiNGOTI2MDZcIl0pO1xuXHQgICAgICAgICAgICAgICAgXG5cdFx0XHRcdGQzcGF0aC50cmFuc2l0aW9uKFwibmV3UGF0aFRyYW5zaXRpb25cIilcblx0XHQgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuXHRcdCAgICAgICAgICAgIC5hdHRyVHdlZW4oXCJvcGFjaXR5XCIsIGZ1bmN0aW9uKGQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKDAsMSk7XG5cdFx0ICAgICAgICAgICAgfSlcblx0XHQgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkKXtcblx0XHQgICAgICAgICAgICAgICAgdmFyIGMgPSBjb2xvclNjYWxlKGQuZ2V0V2VpZ2h0KCkpO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gYztcblx0XHQgICAgICAgICAgICB9KVxuXHRcdCAgICAgICAgICAgIC5hdHRyKCdkJywgdGhpcy5hcnJvd1BhdGguY2FsbChkKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdExpbmsgOiBWaXN1YWxpemVyTGlua1xuXHRcdH1cbn1dKTtcblxuXG5cblxuXG4iLCIvKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBub2RlIG9iamVjdHMgZm9yIHRoZSBncmFwaC5cbiAqIFN1cHBvcnRzIHBvbGljaWVzLlxuICogXG4gKiBUbyB3cml0ZSB5b3VyIG93biBOb2RlIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBub2RlXG4gKiB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBpdHMgbm9kZSBjbGFzcy4gXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG9iamVjdCB3aXRoIE5vZGUgYXMga2V5XG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ05vZGUnLCBbZnVuY3Rpb24gKCkge1xuXHRcdGNsYXNzIE5vZGUge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgeCBsb2NhdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHkgICAgICAgeSBsb2NhdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFRoZSB0ZXh0IHRvIGRpc3BsYXlcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICByYWRpdXMgIFRoZSByYWRpdXMgb2YgdGhlIG5vZGVcblx0XHRcdCAqL1xuXHRcdFx0Y29uc3RydWN0b3IoeCwgeSwgaWQsIHRleHQsIHJhZGl1cykge1xuXHRcdFx0XHR0aGlzLnggPSB4O1xuXHRcdFx0XHR0aGlzLnkgPSB5O1xuXHRcdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdFx0dGhpcy5pZCA9IGlkO1xuXHRcdFx0XHR0aGlzLnRleHQgPSB0ZXh0O1xuXHRcdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdFx0dGhpcy5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5wb2xpY3kgPSBudWxsO1xuXHRcdFx0XHR0aGlzLm5vZGVQb2xpY2llcyA9IFtdO1xuXHRcdFx0XHR0aGlzLmdyYXBoID0gbnVsbDtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCB3aGVuIGEgbm9kZSBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuXHRcdFx0ICovXG5cdFx0XHRpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5ncmFwaCA9IGdyYXBoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIGR1cmluZyB0aGUgdXBkYXRlIGdyYXBoIGZvciBleGlzdGluZyBsaW5rc1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcblx0XHRcdCAqL1xuXHRcdFx0dXBkYXRlQXR0cihkM25vZGUsIGQpIHtcblx0XHRcdFx0ZDNub2RlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCl7cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjt9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbm9kZVxuXHRcdFx0ICogSG9vayBmb3Igc3ViIGNsYXNzZXNcblx0XHRcdCAqIFxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuXHRcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICAgICAgZCAgICAgICBNYXRjaGluZyBOb2RlIE9iamVjdFxuXHRcdFx0ICovXG5cdFx0XHRuZXdOb2RlQXR0cihkM25vZGUsIGQpIHtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBTZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1c1xuXHRcdFx0ICovXG5cdFx0XHRzZXRSYWRpdXMocmFkaXVzKSB7XG5cdFx0XHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdFx0fVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhpc1xuXHRcdCAgICAgKiBub2RlIGhhcyBhIG1vdXNlIGV2ZW50XG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuXHRcdCAgICAgKi9cblx0XHRcdGluc3RhbGxOb2RlUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMubm9kZVBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIG5vZGVcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7UG9saWN5fHN0cmluZ30gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcblx0XHRcdCAqL1x0XHRcdFxuXHRcdFx0dW5pbnN0YWxsTm9kZVBvbGljeShwb2xpY3lSZW1vdmUpIHtcblx0XHRcdFx0dmFyIHBvbGljeVJlbW92ZU5hbWU7XG5cdFx0XHRcdHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cdFx0XHRcdGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF8odGhpc05vZGUubm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSwgaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcblx0XHRcdFx0XHRcdHBvbGljeS5kZXN0cm95KCk7XG5cdFx0XHRcdFx0XHR0aGlzTm9kZS5ub2RlUG9saWNpZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAodGhpc05vZGUubm9kZVBvbGljaWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXNOb2RlLmhhc1BvbGljeSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBldmVudCBmb3IgdGhpcyBub2RlXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIGV2ZW50ICAgICBUaGUgbW91c2UgZXZlbnRcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgICAgVGhlIG1hdGNoaW5nIG5vZGUgb2JqZWN0XG5cdFx0XHQgKi9cblx0XHRcdG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzLm5vZGVQb2xpY2llcywgZnVuY3Rpb24ocG9saWN5KSB7XG5cdFx0XHRcdFx0cG9saWN5W2V2ZW50XShkM25vZGUsIGQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdE5vZGU6IE5vZGVcblx0XHR9XG59XSk7XG5cblxuXG5cblxuXG5cbiIsIi8qKlxuICogVGhlIG5vZGUgdGhhdCBpcyB1c2VkIHNwZWNpZmljYWxseSBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnVmlzdWFsaXplck5vZGUnLCBbJ05vZGUnLCBmdW5jdGlvbiAoTm9kZSkge1xuXHRcdGNsYXNzIFZpc3VhbGl6ZXJOb2RlIGV4dGVuZHMgTm9kZS5Ob2RlIHtcblx0XHRcdC8qKlxuXHRcdFx0ICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB4ICAgICAgIFx0eCBsb2NhdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHkgICAgICAgXHR5IGxvY2F0aW9uXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgaWQgICAgICBcdFRoZSBpZGVudGlmaWVyXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgdGV4dCAgICBcdFRoZSB0ZXh0IHRvIGRpc3BsYXlcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICByYWRpdXMgIFx0VGhlIHJhZGl1cyBvZiB0aGUgbm9kZVxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIHBhcmVudCAgICAgVGhlIHBhcmVudCBpZFxuXHRcdFx0ICogQHBhcmFtICAgICAge0FycmF5fSAgIGFuY2VzdG9ycyAgQXJyYXkgb2YgYW5jZXN0b3JzIElkXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeFN0YXJ0ICAgICB4IGxvYyB0byBzdGFydCBhbmltYXRpb25cblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB5U3RhcnQgICAgIHkgbG9jIHRvIHN0YXJ0IGFuaW1hdGlvblxuXHRcdFx0ICovXG5cdFx0ICAgIGNvbnN0cnVjdG9yKHgsIHksIGlkLCB0ZXh0LCByYWRpdXMsIHBhcmVudCwgYW5jZXN0b3JzLCBcblx0XHQgICAgXHR4U3RhcnQsIHlTdGFydCkge1xuXHRcdCAgICAgICAgc3VwZXIoeCwgeSwgaWQsIHRleHQsIHJhZGl1cyk7XG5cdFx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0XHQgICAgICAgIHRoaXMuYW5jZXN0b3JzID0gYW5jZXN0b3JzO1xuXHRcdCAgICAgICAgaWYgKHhTdGFydCA9PSBudWxsKSB7XG5cdFx0ICAgICAgICBcdHRoaXMueFN0YXJ0ID0geDtcblx0XHQgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBcdHRoaXMueFN0YXJ0ID0geFN0YXJ0O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHlTdGFydCA9PSBudWxsKSB7XG5cdFx0ICAgICAgICBcdHRoaXMueVN0YXJ0ID0geTtcblx0XHQgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBcdHRoaXMueVN0YXJ0ID0geVN0YXJ0O1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgdXBkYXRlIGdyYXBoIGZvciBhIG5vZGVcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgZCAgICAgICAgIFRoZSBtYXRjaGluZyBOb2RlXG5cdFx0XHQgKi9cblx0XHRcdG5ld05vZGVBdHRyKGQzbm9kZSwgZCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcblx0XHRcdFx0aWYgKHRoaXNHcmFwaC5jb25zdHMuY29udGFpbmVyQ2xhc3MgIT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0dGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0W2QuaWRdID09IG51bGwpIHtcblx0XHRcdFx0XHRkM25vZGUuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLmNvbnRhaW5lckNsYXNzLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkM25vZGUudHJhbnNpdGlvbihcIm5vZGVQb3NpdGlvblRyYW5zaXRpb25cIilcblx0XHQgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcblx0XHQgICAgICAgICAgICAgICAgLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAoZC54U3RhcnQgIT0gbnVsbCAmJiBkLnlTdGFydCAhPSBudWxsKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhTdGFydCA9IGQueFN0YXJ0O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5U3RhcnQgPSBkLnlTdGFydDtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBkLnhTdGFydCA9IGQueDtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBkLnlTdGFydCA9IGQueTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyB4U3RhcnQgKyBcIixcIiArIHlTdGFydCArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIiwgXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiKTtcblx0XHQgICAgICAgICAgICAgICAgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdE5vZGU6IFZpc3VhbGl6ZXJOb2RlXG5cdFx0fVxuXG59XSk7XG5cblxuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBUaGlzIHBvbGljeSBpcyB1c2VkIHRvIGFkZCBhIHNlbGVjdCBub2RlIGZlYXR1cmUuXG4gKiBTdXBwb3J0cyBzZWxlY3RpbmcgbXVsdGlwbGUgbm9kZXMgYnkgdXNpbmcgdGhlIGN0cmwga2V5LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnTm9kZVNlbGVjdGlvblBvbGljeScsIFsnUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSkge1xuXG4gICAgXHRjbGFzcyBOb2RlU2VsZWN0aW9uUG9saWN5IGV4dGVuZHMgUG9saWN5LlBvbGljeSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoXCJOb2RlU2VsZWN0aW9uUG9saWN5XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHBvbGljeSBpcyBpbnN0YWxsZWRcbiAgICAgICAgICAgICAqIE92ZXJ3cml0ZXMgdGhlIG9uIGRyYWcgZXZlbnQgb2YgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIFxuICAgIFx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgIFx0XHQgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyLmluaXRpYWxpemUoZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cyA9IGdyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgY29uc3RzLnNlbGVjdGVkQ2xhc3MgPSBcInNlbGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgLy9vdmVyd3JpdHRpbmcgZ3JhcGgncyBub2RlIG9uIGRyYWcgZXZlbnQgdG8gc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vbW92aW5nIG11bHRpcGxlIG5vZGVzIGF0IG9uY2VcbiAgICAgICAgICAgICAgICB2YXIgZHJhZyA9IGdyYXBoLmRyYWc7XG4gICAgICAgICAgICAgICAgZHJhZy5vbignZHJhZycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBcdHZhciB0aGlzR3JhcGggPSBncmFwaDtcbiAgICAgICAgICAgICAgICBcdGlmICh0aGlzR3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3kgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFx0XHR2YXIgc2VsZWN0ZWRDbGFzcyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeS5zZWxlY3RlZENsYXNzO1xuICAgICAgICAgICAgICAgIFx0XHR2YXIgc2VsZWN0aW9uID0gZDMuc2VsZWN0QWxsKCAnLicgK3NlbGVjdGVkQ2xhc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc2VsZWN0aW9uWzBdLmluZGV4T2YoIHRoaXMpPT0tMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5jbGFzc2VkKHNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBkMy5zZWxlY3QoIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5jbGFzc2VkKHNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gZDMuZXZlbnQuZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IGQzLmV2ZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFsgZC54LGQueSBdICsgXCIpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICAgICAgXHR9XG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZHMgdGhlIGdpdmVuIG5vZGUgdG8gdGhlIGFycmF5IG9mIHNlbGVjdGVkIG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNOb2RlICAgIFRoZSBkMyBub2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICBub2RlRGF0YSAgTWF0Y2hpbmcgTm9kZSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkU2VsZWN0Tm9kZShkM05vZGUsIG5vZGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeTtcblxuICAgICAgICAgICAgICAgIGQzTm9kZS5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzLnB1c2gobm9kZURhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIGdpdmVuIG5vZGUgZnJvbSB0aGUgYXJyYXkgb2Ygc2VsZWN0ZWQgbm9kZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNOb2RlICAgIFRoZSBkMyBub2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICBub2RlRGF0YSAgTWF0Y2hpbmcgbm9kZSBvYmplY3QgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZVNlbGVjdEZyb21Ob2RlKGQzTm9kZSwgbm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMuZmlsdGVyKGZ1bmN0aW9uKGNkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjZC5pZCA9PT0gbm9kZURhdGEuaWQ7XG4gICAgICAgICAgICAgICAgfSkuY2xhc3NlZChjb25zdHMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXRlLnNlbGVjdGVkTm9kZXMuaW5kZXhPZihub2RlRGF0YSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0ZWROb2Rlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgYWxsIHNlbGVjdGVkIG5vZGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0ZWROb2RlcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9uIE1vdXNlZG93biwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3QgICAgICAgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1vdXNlZG93bihkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKGQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0RnJvbU5vZGUoZDNub2RlLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkU2VsZWN0Tm9kZShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBubyBjb250cm9sIGtleSwgYW5kIGNsaWNrZWQgbm90IHNlbGVjdGVkIG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBvZiBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT24gTW91c2V1cCwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbW91c2V1cChkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBpZiAoIWQzLmV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBsZW5ndGggaXMgZ3JlYXRlciB0aGFuIDEsIHRoZW4gd2UgYXJlIG1vdmluZyBtdWx0aXBsZSBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAvL2xlYXZlIHRoZW0gYWxsIGhpZ2hsaWdodGVkXG4gICAgICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlIHdlIGFyZSBqdXN0IG1vdmluZyBvbmUgbm9kZSwgc28gdW5oaWdobGlnaHRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGVkTm9kZXMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0RnJvbU5vZGUoZDNub2RlLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUG9saWN5OiBOb2RlU2VsZWN0aW9uUG9saWN5XG4gICAgICAgIH1cbn1dKTtcblxuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBUaGlzIHBvbGljeSBjaGFuZ2VzIHRoZSB2aWV3IHRvIHRoZSB0aW1lZ3JhcGggb2YgbGluayBkYXRhIG9uIGNsaWNrLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnUGF0aENoYW5nZVZpZXdQb2xpY3knLCBbJ1BvbGljeScsIGZ1bmN0aW9uIChQb2xpY3kpIHtcbiAgICBcdGNsYXNzIFBhdGhDaGFuZ2VWaWV3UG9saWN5IGV4dGVuZHMgUG9saWN5LlBvbGljeSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB0byBidWlsZCBwb2xpY3lcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICB7QW5ndWxhciBTdGF0ZX0gICAgJHN0YXRlICAgIFVzZWQgdG8gY2hhbmdlIHZpZXdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IoJHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoJ1BhdGhDaGFuZ2VWaWV3UG9saWN5Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhdGUgPSAkc3RhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2VuZXJhdGVzIGEgbGlzdCBvZiBhbGwgY2hpbGQgY29udGFpbmVycyBvZiB0aGUgc2VydmljZVxuICAgICAgICAgICAgICogQ2FuIGhhbmRsZSBuZXN0ZWQgc2VydmljZXMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgTm9kZSBJRFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZW5lcmF0ZUxpc3QoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHJldExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUlkcyA9IHRoaXMuZ3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbaWRdO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChub2RlSWRzLCBmdW5jdGlvbihjaGlsZElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUG9saWN5LmdyYXBoLmRhdGFTb3VyY2UuaGFzQ2hpbGQoY2hpbGRJZCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QuY29uY2F0KHRoaXNQb2xpY3kuZ2VuZXJhdGVMaXN0KGNoaWxkSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QucHVzaChjaGlsZElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXRMaXN0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCB0byByZXJvdXRlIGFuIGVkZ2Ugd2hlbiBjbGlja2VkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0xpbmt9ICBlZGdlICAgIFRoZSBjbGlja2VkIGVkZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmlld0VkZ2UoZWRnZSkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlSWQgPSBlZGdlLnNvdXJjZS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSBlZGdlLnRhcmdldC5pZDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYXBoLmRhdGFTb3VyY2UuaGFzQ2hpbGQoc291cmNlSWQpID09PSB0cnVlKSB7Ly9Ob3QgYSBjb250YWluZXIgbm9kZSwgbmVlZCB0byBhZ2dyZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGlzdCA9IHRoaXMuZ2VuZXJhdGVMaXN0KHNvdXJjZUlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0ID0gW3NvdXJjZUlkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmFwaC5kYXRhU291cmNlLmhhc0NoaWxkKHRhcmdldElkKSA9PT0gdHJ1ZSkgey8vTm90IGEgY29udGFpbmVyIG5vZGUsIG5lZWQgdG8gYWdncmVnYXRlXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExpc3QgPSB0aGlzLmdlbmVyYXRlTGlzdCh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGlzdCA9IFt0YXJnZXRJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuJHN0YXRlLmdvKCdjb250aXYubWVudS52aXN1YWxpemF0aW9uLmVkZ2UnLCBcbiAgICAgICAgICAgICAgICAgICAge3NvdXJjZU5hbWU6IHNvdXJjZUlkLCB0YXJnZXROYW1lOiB0YXJnZXRJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3Q6IHNvdXJjZUxpc3QsIHRhcmdldExpc3Q6IHRhcmdldExpc3R9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW91c2Vkb3duKGQzcGF0aCwgZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0VkZ2UoZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUG9saWN5OiBQYXRoQ2hhbmdlVmlld1BvbGljeVxuICAgICAgICB9XG59XSk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBCYXNlIHBvbGljeSBjbGFzcyBmb3IgdGhlIGdyYXBoIG9iamVjdFxuICogXG4gKiBQb2xpY2llcyBhcmUgdXNlZCB0byBpc29sYXRlIGZlYXR1cmVzIGZvciBhIGdyYXBoLlxuICogUG9saWNpZXMgY2FuIGJlIGluc3RhbGxlZCBvbiBub2RlcywgbGlua3MsIG9yIHRoZSBncmFwaC5cbiAqIEVhY2ggcG9saWN5IGhhcyBpbnRlcmFjdGlvbiBoYW5kbGVycyB0aGF0IHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBncmFwaFxuICogaWYgaW5zdGFsbGVkLiBQb2xpY2llcyBjYW4gYWxzbyBtb2RpZnkgZ3JhcGggZnVuY3Rpb25zIChzZWUgUVRpcFBvbGljeSkuXG4gKiBNdWx0aXBsZSBwb2xpY2llcyBjYW4gYmUgaW5zdGFsbGVkIGZvciBhIG5vZGUgb3IgbGluay4gXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIHBvbGljeSwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBwb2xpY3lcbiAqIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIGl0cyBwb2xpY3kuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBQb2xpY3kgYXMga2V5LCBhbmQgXG4gKiBhZGQgdGhlIHBvbGljeSB0byB0aGUgUG9saWN5U2VydmljZSBmYWN0b3J5LlxuICogXG4gKiBGb3Igc2F2aW5nIHN0YXRlIG9yIGNvbnN0cyBmb3IgdGhlIHBvbGljeSwgY3JlYXRlIGEgbmFtZXNwYWNlXG4gKiBpbiBncmFwaC5zdGF0ZSBhbmQgZ3JhcGguY29uc3RzLlxuICogRXguIFxuICogICAgICBncmFwaC5zdGF0ZS5teVBvbGljeSA9IHt9O1xuICogICAgICBncmFwaC5jb25zdHMubXlQb2xpY3kgPSB7fTtcbiAqICAgICAgXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdQb2xpY3knLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGFzcyBQb2xpY3kge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHBvbGljeU5hbWUgIFRoZSBwb2xpY3kgbmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xpY3lOYW1lID0gcG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHBvbGljeSBpcyBpbnN0YWxsZWQuXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAge0dyYXBofSAgZ3JhcGggICBUaGUgR3JhcGggdGhhdCB0aGUgcG9saWN5IGlzXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgaW5zdGFsbGVkIG9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGFuZGxlciwgbWVhbnQgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzdWJjbGFzc2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICB7ZDMgb2JqZWN0fSAgICBkM29iaiAgICBUaGUgZDNvYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSAge05vZGUvTGluay9HcmFwaH0gIGQgICBUaGUgb2JqZWN0IGl0IHdhc1xuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBmb3IuICAgIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb3VzZW92ZXIgKGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgZGJsY2xpY2soZDNvYmosIGQpIHt9XG4gICAgICAgICAgICBjb250ZXh0bWVudShkM29iaiwgZCkge31cbiAgICAgICAgICAgIG1vdXNlb3V0KGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgbW91c2Vkb3duKGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgbW91c2V1cChkM29iaiwgZCkge31cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgICAgICAgKiBVc2VkIHRvIHJlbW92ZSBhbnkgZWxlbWVudHMgb3IgYmluZGluZ3MgdGhlIHBvbGljeVxuICAgICAgICAgICAgICogaGFzIGFkZGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXN0cm95KCkge31cbiAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFBvbGljeTogUG9saWN5XG4gICAgICAgIH1cbn1dKTtcblxuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3VwcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvYXBwbGljYXRpb25ncm91cHMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDb250YWlucyBhbGwgdGhlIHBvbGljaWVzLlxuICogU2VlIHBvbGljeS5qcyBmb3IgaW5mbyBvbiBob3cgcG9saWNpZXMgd29yay5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ1BvbGljeVNlcnZpY2UnLCBbJ1BvbGljeScsJ1FUaXBQb2xpY3knLCAnUGF0aENoYW5nZVZpZXdQb2xpY3knLCBcbiAgICAgICAgJ05vZGVTZWxlY3Rpb25Qb2xpY3knLCAnU3BsaXRKb2luTm9kZVBvbGljeScsICdTcGxpdEpvaW5WaWV3UG9saWN5JyxcbiAgICAgICAgJ1NhdmVTdGF0ZVBvbGljeScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoUG9saWN5LCBRVGlwUG9saWN5LCBQYXRoQ2hhbmdlVmlld1BvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vZGVTZWxlY3Rpb25Qb2xpY3ksICBTcGxpdEpvaW5Ob2RlUG9saWN5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFNwbGl0Sm9pblZpZXdQb2xpY3ksIFNhdmVTdGF0ZVBvbGljeSkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgUG9saWN5OiBQb2xpY3kuUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBRVGlwUG9saWN5OiBRVGlwUG9saWN5LlBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgUGF0aENoYW5nZVZpZXdQb2xpY3k6IFBhdGhDaGFuZ2VWaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgTm9kZVNlbGVjdGlvblBvbGljeTogTm9kZVNlbGVjdGlvblBvbGljeS5Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIFNwbGl0Sm9pbk5vZGVQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3kuUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBTcGxpdEpvaW5WaWV3UG9saWN5OiBTcGxpdEpvaW5WaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgU2F2ZVN0YXRlUG9saWN5OiBTYXZlU3RhdGVQb2xpY3kuUG9saWN5XG4gICAgICAgICAgICAgICAgfVxufV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5kYXNoYm9hcmQnLCBbJ2NvbnRpdi5tb2RlbHMnXSk7XG4iLCIvKipcbiAqIFRoaXMgcG9saWN5IGFkZHMgdG9vbHRpcCBmdW5jdGlvbmFsaXR5IHRvIG5vZGVzIGFuZCBsaW5rcy5cbiAqIFdoZW4gaW5zdGFsbGluZywgaW5zdGFsbCBvbiBib3RoIGxpbmtzIGFuZCBub2Rlcy5cbiAqIFxuICogVXNlcyB0aGUgcVRpcCBqUXVlcnkgcGx1Z2luXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdRVGlwUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgICAgIGNsYXNzIFFUaXBQb2xpY3kgZXh0ZW5kcyBQb2xpY3kuUG9saWN5IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihcIlFUaXBQb2xpY3lcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHBvbGljeSBpcyBpbnN0YWxsZWRcbiAgICAgICAgICAgICAqIE1vZGlmaWVzIHRoZSB1cGRhdGVOZXdOb2RlcyBhbmQgXG4gICAgICAgICAgICAgKiB1cGRhdGVOZXdQYXRocyBtZXRob2Qgb2YgdGhlIGdyYXBoIHRvIGluc3RhbGwgcXRpcFxuICAgICAgICAgICAgICogb250byBlYWNoIG5vZGUgYW5kIHBhdGguXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdXBlci5pbml0aWFsaXplKGdyYXBoKTtcblxuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBncmFwaC5zdGF0ZS5RVGlwUG9saWN5ID0ge307XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZWRvd24gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGdyYXBoLmNvbnN0cy5RVGlwUG9saWN5ID0ge307XG5cbiAgICAgICAgICAgICAgICAvL1RyYWNraW5nIG1vdXNlIGNsaWNrIHN0YXRlIHRvIG1ha2UgdG9vbHRpcFxuICAgICAgICAgICAgICAgIC8vZGlzYXBwZWFyIGlmIHRoZSBub2RlIGlzIGJlaW5nIGRyYWdnZWQuXG4gICAgICAgICAgICAgICAgJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5tb3VzZXVwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW91c2V1cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9vdmVycmlkZSB1cGRhdGVOZXdOb2RlcyBhbmQgdXBkYXRlTmV3UGF0aHNcbiAgICAgICAgICAgICAgICAvL3RvIGluc3RhbGwgcXRpcFxuICAgICAgICAgICAgICAgIHZhciBncmFwaFVwZGF0ZU5ld05vZGVzID0gZ3JhcGgudXBkYXRlTmV3Tm9kZXM7XG4gICAgICAgICAgICAgICAgZ3JhcGgudXBkYXRlTmV3Tm9kZXMgPSBmdW5jdGlvbihuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBncmFwaFVwZGF0ZU5ld05vZGVzLmNhbGwoZ3JhcGgsIG5ld05vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBncmFwaFVwZGF0ZU5ld1BhdGhzID0gZ3JhcGgudXBkYXRlTmV3UGF0aHM7XG4gICAgICAgICAgICAgICAgZ3JhcGgudXBkYXRlTmV3UGF0aHMgPSBmdW5jdGlvbihuZXdQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBncmFwaFVwZGF0ZU5ld1BhdGhzLmNhbGwoZ3JhcGgsIG5ld1BhdGhzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51cGRhdGVOZXdQYXRocyhuZXdQYXRocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgYWxsIHFUaXBzIGZyb20gdGhlIERPTS5cbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBwb2xpY3kgaXMgdW5pbnN0YWxsZWQgb3JcbiAgICAgICAgICAgICAqIHRoZSBncmFwaCBpcyBkZXN0cm95ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmluZyBhbGwgcXRpcCBmcm9tIERPTVxuICAgICAgICAgICAgICAgICQoJ1tpZF49XCJxdGlwXCJdJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2VlcGluZyB0cmFjayBvZiBtb3VzZWRvd24gc3RhdGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNPYmplY3R9ICBkM29iaiAgVGhlIGQzIHBiamVjdFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGUvTGlua30gIGQgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb3VzZWRvd24oZDNvYmosIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuUVRpcFBvbGljeTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZWRvd24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtlZXBpbmcgdHJhY2sgb2YgbW91c2Vkb3duIHN0YXRlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzT2JqZWN0fSAgZDNvYmogIFRoZSBkMyBwYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlL0xpbmt9ICBkICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbW91c2V1cChkM29iaiwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vdXNlZG93biA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGVuUVRpcEF2YWlsYWJsZShjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSA1MDA7IC8vIG1zXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGRvY3VtZW50KS5xdGlwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzUG9saWN5LndoZW5RVGlwQXZhaWxhYmxlKGNhbGxiYWNrKSwgaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIE5ldyBOb2RlcyBhcmUgYWRkZWQgZHVyaW5nIHRoZVxuICAgICAgICAgICAgICogdXBkYXRlIGdyYXBoIGZ1bmN0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzTm9kZX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzIHRoYXQgYXJlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXR0YWNoUVRpcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hdHRhY2hpbmcgcXRpcFxuICAgICAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0lmIG5vZGUgaGFzIGNoaWxkcmVuLCB0aGVuIGl0IGlzIGEgc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtkLmlkXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiPGI+PHU+U2VsZWN0b3JzOjwvYj48L3U+IFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rvck1hcCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnNlbGVjdG9yc1tkLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzS2V5cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxlY3Rvck1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNLZXlzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBrZXkgKyBcIiA6IDxpPlwiKyBzZWxlY3Rvck1hcFtrZXldICsgXCI8L2k+LFxcbiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0tleXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29tbWEgd2lsbCBiZSByZW1vdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBcIk5vIFNlbGVjdG9ycywgXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBcIjxiPjx1PkxhYmVsczo8L2I+PC91PiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxzTWFwID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UubGFiZWxzW2QuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNLZXlzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGxhYmVsc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNLZXlzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBrZXkgKyBcIiA6IDxpPlwiKyBsYWJlbHNNYXBba2V5XSArIFwiPC9pPixcXG4gXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNLZXlzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbW1hIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gXCJObyBsYWJlbHMsIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGxhc3QgY29tbWFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzTm9kZSkucXRpcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcGkgPSAkKHRoaXNOb2RlKS5xdGlwKCdhcGknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkKCcjZ3JhcGhDb250YWluZXInKS5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IFtvZmZzZXQubGVmdCArICgoZC54ICogdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSkgKyB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKVswXSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQudG9wICsgKChkLnkgK2QucmFkaXVzKSAqIHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkpICArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5zZXQoJ3Bvc2l0aW9uLnRhcmdldCcsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhc3RhdGUubW91c2Vkb3duO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2xvOiAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzOiAncXRpcC1ibHVlIHF0aXAtc2hhZG93J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXk6ICd0b3AgY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXQ6ICdib3R0b20gY2VudGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXQ6IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnbW91c2Vkb3duIG1vdXNlbGVhdmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vaW5jYXNlIGxpYnJhcnkgaGFzbid0IGxvYWRlZCB5ZXRcbiAgICAgICAgICAgICAgICBpZiAoJChkb2N1bWVudCkucXRpcCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoUVRpcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hlblFUaXBBdmFpbGFibGUoYXR0YWNoUVRpcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIG5ldyBwYXRocyBhcmUgYWRkZWQgZHVyaW5nIHRoZVxuICAgICAgICAgICAgICogdXBkYXRlIGdyYXBoIGZ1bmN0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzUGF0aH0gIG5ld1BhdGhzICBUaGUgbmV3IHBhdGhzIHRoYXQgYXJlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9pbmNhc2UgbGlicmFyeSBoYXNuJ3QgbG9hZGVkIHlldFxuICAgICAgICAgICAgICAgIGlmICgkKGRvY3VtZW50KS5xdGlwICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvL2FkZGluZyBxdGlwXG4gICAgICAgICAgICAgICAgICAgIG5ld1BhdGhzLmVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNQYXRoID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0dGluZyBtaWRwb2ludCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aEVsICAgPSBkMy5zZWxlY3QodGhpcykubm9kZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pZHBvaW50ID0gcGF0aEVsLmdldFBvaW50QXRMZW5ndGgocGF0aEVsLmdldFRvdGFsTGVuZ3RoKCkvMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmV0ID0gZC5xdGlwSGVscGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IFwiQnl0ZXM6IFwiICsgZC5nZXRXZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpc1BhdGgpLnF0aXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBtb3VzZSBpcyBkb3duLCBkb24ndCBsZXQgcXRpcCBzaG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXN0YXRlLm1vdXNlZG93bjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29sbzogJCgnI2dyYXBoQ29udGFpbmVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6ICdxdGlwLWJsdWUgcXRpcC1zaGFkb3cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteTogdGFyZ2V0UmV0Lm15LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2NlbnRlciBjZW50ZXInLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnbW91c2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3Q6IHRhcmdldFJldC5hZGp1c3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdtb3VzZWRvd24gbW91c2VsZWF2ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQb2xpY3k6IFFUaXBQb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG5cblxuXG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5sb2dpbicsIFsnY29udGl2LnV0aWxzJ10pOyIsIi8qKlxuICogVGhpcyBwb2xpY3kgcHJvdmlkZXMgYSB3YXkgZm9yIHByb3BlcnRpZXMgdG8gYmUgc2F2ZWQgXG4gKiBiZXR3ZWVuIHZpZXcgY2hhbmdlc1xuICogXG4gKiBJdCBtb2RpZmllcyB0aGUgZGVzdHJveSBmdW5jdGlvbiB0byBhbHNvIHBhc3MgaW4gYW4gb2JqZWN0IHRoYXRcbiAqIHdpbGwgaGF2ZSBhbGwgaXRzIHByb3BlcnRpZXMgc2F2ZWQgYW5kIHdpbGwgYmUgYXZhaWxhYmxlIFxuICogb24gZ3JhcGggbG9hZC4gV2hlbiBzYXZpbmcgdmFyaWFibGVzIHRvIHRoZSBvYmplY3QsIG5hbWVzcGFjZSB3aXRoXG4gKiB0aGUgcG9saWN5IG5hbWUuXG4gKiBcbiAqIFRoaXMgcG9saWN5IG11c3QgYmUgbG9hZGVkIGZpcnN0IGluIG9yZGVyIGZvciBpdCBzYXZlZCB2YXJpYWJsZXMgXG4gKiB0byBiZSBsb2FkZWQgd2hlbiB0aGUgdmlldyBjb21lcyBiYWNrIHRvIHRoZSBncmFwaFxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnU2F2ZVN0YXRlUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgXHRjbGFzcyBTYXZlU3RhdGVQb2xpY3kgZXh0ZW5kcyBQb2xpY3kuUG9saWN5IHtcbiAgICBcdFx0XG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBUYWtlcyBpbiB0aGUgYW5ndWxhciBzZXJ2aWNlIHRvIHdoaWNoIGl0IHdpbGxcbiAgICBcdFx0ICogc2F2ZSBpdCdzIHByb3BlcnRpZXMgdG8uXG4gICAgXHRcdCAqXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBPYmplY3QgdG8gc2F2ZSBcbiAgICBcdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgdG9cbiAgICBcdFx0ICovXG4gICAgXHRcdGNvbnN0cnVjdG9yKHNhdmVkU3RhdGUpIHtcbiAgICBcdFx0XHRzdXBlcignU2F2ZVN0YXRlUG9saWN5Jyk7XG4gICAgXHRcdFx0dGhpcy5zYXZlZFN0YXRlID0gc2F2ZWRTdGF0ZTtcbiAgICBcdFx0fVxuXG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgIFx0XHQgKiBNb2RpZmllcyB0aGUgZGVzdHJveSBtZXRob2QgXG4gICAgXHRcdCAqIGFuZCBhZGRzIGEgbG9hZCBtZXRob2QgdG8gdGhlIGdyYXBoXG4gICAgXHRcdCAqXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIFxuICAgIFx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgIFx0XHQgKi9cbiAgICBcdFx0aW5pdGlhbGl6ZShncmFwaCkge1xuICAgIFx0XHRcdHRoaXMuZ3JhcGggPSBncmFwaDtcbiAgICBcdFx0XHR2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgXHRcdFx0Z3JhcGguZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIFx0XHRcdFx0dGhpc1BvbGljeS5ncmFwaERlc3Ryb3kuY2FsbChncmFwaCwgdGhpc1BvbGljeS5zYXZlZFN0YXRlKTtcbiAgICBcdFx0XHR9O1xuXG4gICAgXHRcdFx0Z3JhcGgubG9hZCA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICBcdFx0XHRcdHRoaXNQb2xpY3kuZ3JhcGhMb2FkLmNhbGwoZ3JhcGgsIHNhdmVkU3RhdGUpO1xuICAgIFx0XHRcdH1cbiAgICBcdFx0fVxuXG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBXaWxsIG92ZXJyaWRlIHRoZSBncmFwaCdzIGRlZmF1bHQgZGVzdHJveSwgd2l0aCBcbiAgICBcdFx0ICogdGhpcyBwb2xpY3kncyBzYXZlZFN0YXRlIHBhc3NlZCBpbi5cbiAgICBcdFx0ICogQ2FsbGVkIHdpdGggdGhpcyBhcyB0aGUgZ3JhcGhcbiAgICBcdFx0ICpcbiAgICBcdFx0ICogQHBhcmFtICAgICAge09iamVjdH0gIHNhdmVkU3RhdGUgIFRoZSBzYXZlZCBzdGF0ZVxuICAgIFx0XHQgKi9cbiAgICBcdFx0Z3JhcGhEZXN0cm95KHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXNHcmFwaC5iaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKGtleSwgdGhpc0dyYXBoLmJpbmRpbmdzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBncmFwaCBhcyB0aGlzXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGhhdmUgYWxsIG90aGVyIHBvbGljaWVzIHVzZSB0aGUgbG9hZCBzdGF0ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBUaGUgc2F2ZWQgc3RhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ3JhcGhMb2FkKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHROb2RlUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgIFx0aWYgKHBvbGljeS5sb2FkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXHRwb2xpY3kubG9hZChzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgXHR9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgXHRpZiAocG9saWN5LmxvYWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBcdHBvbGljeS5sb2FkKHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgICBcdH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICBcdH1cbiAgICBcdHJldHVybiB7XG4gICAgXHRcdFBvbGljeTogU2F2ZVN0YXRlUG9saWN5XG4gICAgXHR9XG59XSk7XG5cblxuXG5cblxuXG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tZW51JywgW10pOyIsIi8qKlxuICogVGhpcyBwb2xpY3kgaXMgdXNlZCBmb3Igc3BsaXR0aW5nIGEgbm9kZSBpbnRvIGl0cyBjaGlsZHJlbixcbiAqIGFuZCBqb2luaW5nIHRoZW0gYmFjayB0byB0aGVpciBwYXJlbnQuXG4gKiBTcGxpdHMgb24gZG91YmxlIGNsaWNrLCBhbmQgam9pbnMgb24gcmlnaHQgY2xpY2suXG4gKiBJZiBtdWx0aXBsZSBub2RlcyBhcmUgc2VsZWN0ZWQgYXQgdGhlIHRpbWUgb2YgYSBzcGxpdCBvciBqb2luIGV2ZW50LFxuICogaXQgd2lsbCBzcGxpdCBvciBqb2luIGFsbCBvZiB0aGVtLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnU3BsaXRKb2luTm9kZVBvbGljeScsIFsnTm9kZVNlbGVjdGlvblBvbGljeScsICdWaXN1YWxpemVyTm9kZScsIFxuICAgIFx0XHRmdW5jdGlvbiAoTm9kZVNlbGVjdGlvblBvbGljeSwgVmlzdWFsaXplck5vZGUpIHtcblx0XHRjbGFzcyBTcGxpdEpvaW5Ob2RlUG9saWN5IGV4dGVuZHMgTm9kZVNlbGVjdGlvblBvbGljeS5Qb2xpY3kge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xpY3lOYW1lID0gXCJTcGxpdEpvaW5Ob2RlUG9saWN5XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyLmluaXRpYWxpemUoZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlNwbGl0Sm9pbk5vZGVQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zcGxpdE5vZGVzID0gW107IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyaWdnZXJpbmcgc3BsaXQgb24gZG91YmxlIGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGJsY2xpY2soZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcblxuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE11bHRpcGxlTm9kZXMoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsU2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE5vZGUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlcmluZyBqb2luIG9uIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqfSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29udGV4dG1lbnUoZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIHRyeSB0byBqb2luIGEgaGlnaGxpZ2h0ZWQgbm9kZSB3aGlsZSBtdWx0aXBsZSBub2RlcyBhcmUgc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIC8vd2Ugam9pbiBhbGwgaGlnaGxpZ2h0ZWQgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSBzdXBlclN0YXRlLnNlbGVjdGVkTm9kZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qb2luTm9kZShzZWxlY3RlZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgd2UgdHJ5IHRvIGpvaW4gYSBub2RlIHRoYXQgaXNuJ3QgcGFydCBvZiBhIGhpZ2hsaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2UgcmVtb3ZlIGFsbCBoaWdobGlnaHRzIGFuZCB0aGVuIGpvaW4gdGhlIGNsaWNrZWQgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmpvaW5Ob2RlKGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwbGl0cyBhIG5vZGUuXG4gICAgICAgICAgICAgKiB1c2VkIHRvIHNoYXJlIGNvZGUgYmV0d2VlbiBzcGxpdE5vZGUgYW5kIHNwbGl0TXVsdGlwbGVOb2Rlc1xuICAgICAgICAgICAgICogd2hpbGUgcHJldmVudGluZyB0aGUgaGFuZGxlcnMgZm9yIHRoZW0gYm90aCBmaXJpbmdcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIGJlaW5nIHNwbGl0XG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBUaGUgbmV3IG5vZGVzIGNyZWF0ZWQgYnkgdGhlIHNwbGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9fc3BsaXROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBjaGlsZHJlbiB0byBzcGxpdCBpbnRvXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdFtuYW1lXSA9PT0gdW5kZWZpbmVkIHx8IF8uaXNFbXB0eShjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3JlbW92aW5nIHRoZSBub2RlIGZyb20gdGhlIGxpc3Qgb2Ygbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSBfLmZpbHRlcih0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKGdyYXBoTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyYXBoTm9kZXMgIT0gbm9kZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvL2dldHRpbmcgYWxsIHRoZSBub2RlIGlkJ3MgZm9yIGZpbmRpbmcgZmxvd1xuICAgICAgICAgICAgICAgIHZhciBub2RlX25hbWVzX3NldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3NldCBvZiBub2RlcyBhZnRlciB0aGUgc3BsaXRcbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9uYW1lc19zZXQucHVzaChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV1baV0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZXMucHVzaChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV1baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmV0RGF0YSA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmdldEZsb3dCZXR3ZWVuU2V0KG5vZGVfbmFtZXNfc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRhIGZvciBuZXcgbm9kZXNcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gbm9kZS5hbmNlc3RvcnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAvL2tlZXBpbmcgb3JkZXJpbmcgdGhhdCBmaXJzdCBpbiBhbmNlc3RvciBsaXN0IGlzIGNsb3Nlc3QgaW4gcmVsYXRpb25zaGlwXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JzLnNwbGljZSgwLCAwLCBub2RlLmlkKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVfb2JqcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBub2RlLnJhZGl1cyAqIHRoaXNHcmFwaC5jb25zdHMucmFkaXVzRGVjYXk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEYXRhID0gcmV0RGF0YS5ub2RlRGF0YTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRpbmcgd2hpY2ggb2YgdGhlIG5vZGVzIGluIHJldERhdGFbMF0gYXJlIG5ld1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3X25vZGVzLmluZGV4T2Yobm9kZURhdGFbaV0uaWQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IG5vZGVEYXRhW2ldLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBub2RlRGF0YVtpXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlID0gbmV3IFZpc3VhbGl6ZXJOb2RlLk5vZGUobnVsbCwgbnVsbCwgaWQsIHRleHQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMsIHhMb2MsIHlMb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X25vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X25vZGVfb2Jqcy5wdXNoKG5ld19ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTGlua0RhdGEocmV0RGF0YS5saW5rRGF0YSwgdGhpc0dyYXBoLm5vZGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgc3RhdGUuc3BsaXROb2Rlcy5wdXNoKG5vZGUuaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfbm9kZV9vYmpzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwbGl0cyB0aGUgZ2l2ZSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIGJlaW5nIHNwbGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNwbGl0Tm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX19zcGxpdE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpdE5vZGVFdmVudChyZXMpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BsaXRzIGFsbCB0aGUgbm9kZXMgcGFzc2VkIGluXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICBBcnJheSBvZiBub2RlcyB0byBiZSBzcGxpdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE11bHRpcGxlTm9kZXMobm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzTm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fc3BsaXROb2RlKG5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzTm9kZXMgPSByZXNOb2Rlcy5jb25jYXQocmVzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0TXVsdGlwbGVOb2Rlc0V2ZW50KHJlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIGEgc2luZ2xlIG5vZGUgaXMgc3BsaXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE5vZGVFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgbXVsdGlwbGUgbm9kZXMgYXJlIHNwbGl0IGF0IG9uY2VcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE11bHRpcGxlTm9kZXNFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB1c2VkIHRvIHNoYXJlIGNvZGUgYmV0d2VlbiBqb2luTm9kZSBhbmQgam9pbk11bHRpcGxlTm9kZVxuICAgICAgICAgICAgICogd2hpbGUgcHJldmVudGluZyBib3RoIGhhbmRsZXJzIGZpcmluZ1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICAgICAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gIFRoZSBuZXcgbm9kZSBhZnRlciB0aGUgam9pblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfX2pvaW5Ob2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhhdCBub2RlIHN0aWxsIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgLy9pZiBpdCBoYXMgbm8gYW5jZXN0b3IsIG5vdGhpbmcgdG8gam9pblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9fYmVfZGVsZXRlZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlX25hbWVzX3NldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbm9kZSB3b24ndCBiZSBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlc1tpXS5hbmNlc3RvcnMuaW5kZXhPZihub2RlLnBhcmVudCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX2JlX2RlbGV0ZWQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZV9pZCA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2gobm9kZS5wYXJlbnQpO1xuXG4gICAgICAgICAgICAgICAgLy9mb3JtYXR0aW5nIGRhdGFcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gbm9kZS5yYWRpdXMgLyB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5OyBcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5hbmNlc3RvcnNbMV07XG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IG5vZGUuYW5jZXN0b3JzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKHhMb2MsIHlMb2MsIG5ld19ub2RlX2lkLCBuZXdfbm9kZV9pZCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzX3NldCk7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG5vZGVzIHRoYXQgd2lsbCBiZSBqb2luZWRcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvX2JlX2RlbGV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVfdG9fZGVsZXRlID0gdG9fYmVfZGVsZXRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlX3RvX2RlbGV0ZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGVfdG9fZGVsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHJldERhdGEubGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnNwbGl0Tm9kZXMuc3BsaWNlKHN0YXRlLnNwbGl0Tm9kZXMuaW5kZXhPZihuZXdfbm9kZS5pZCksIDEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld19ub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEpvaW5zIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIHRvIGpvaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgam9pbk5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gdGhpcy5fX2pvaW5Ob2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXMuam9pbk5vZGVFdmVudChuZXdOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSm9pbnMgYWxsIHRoZSBnaXZlbiBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgVGhlIG5vZGVzIHRvIGpvaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgam9pbk11bHRpcGxlTm9kZShub2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fam9pbk5vZGUobm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZXMucHVzaChyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmpvaW5NdWx0aXBsZU5vZGVzRXZlbnQobmV3X25vZGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBqb2luZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5ld05vZGUgIFRoZSBuZXcgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBqb2luTm9kZUV2ZW50KG5ld05vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgbXVsdGlwbGUgbm9kZXMgYXJlIGpvaW5lZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGpvaW5NdWx0aXBsZU5vZGVzRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbmV0d29ya3BvbGljaWVzJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9pc29sYXRpb24nLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVpLXZpZXcvPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGgnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2JhbmR3aWR0aCcsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWktdmlldy8+J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLnJlZGlyZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9yZWRpcmVjdGlvbicsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWktdmlldy8+J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKTtcbiIsIi8qKlxuICogVGhpcyBwb2xpY3kgaXMgdXNlZCB0byBjaGFuZ2UgdGhlIHZpZXcgdG8gZm9jdXMgb24gc3BsaXR0aW5nIGFuZCBcbiAqIGpvaW5pbmcgZXZlbnRzLlxuICogT3ZlcnJpZGVzIHRoZSBjZXJ0YWluIGZvcmNlIGxheW91dCBmdW5jdGlvbnMgb2YgdGhlIGdyYXBoIHRvIHBhcnRpdGlvbiBhIHNwbGl0XG4gKiBpbnRvIHRoZSBmb2N1c2VkIG5vZGVzIGFuZCB0aGUgY29ubmVjdGVkIG5vZGVzLlxuICogXG4gKiBIYXMgc2F2ZS9sb2FkIG1ldGhvZHMgZm9yIHRoZSBzYXZlIHN0YXRlIHBvbGljeS5cbiAqIEhhcyBiYWNrIGJ1dHRvbiBzdXBwb3J0LlxuICogQ2FuIGF1dG8gY2hhbmdlIHRoZSB0aXRsZSBvZiB0aGUgZ3JhcGguXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdTcGxpdEpvaW5WaWV3UG9saWN5JywgWydTcGxpdEpvaW5Ob2RlUG9saWN5JywgJ1Zpc3VhbGl6ZXJOb2RlJywgZnVuY3Rpb24gKFNwbGl0Sm9pbk5vZGVQb2xpY3ksIFZpc3VhbGl6ZXJOb2RlKSB7IFxuICAgICAgICBjbGFzcyBTcGxpdEpvaW5WaWV3UG9saWN5IGV4dGVuZHMgU3BsaXRKb2luTm9kZVBvbGljeS5Qb2xpY3l7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvbGljeU5hbWUgPSBcIlNwbGl0Sm9pblZpZXdQb2xpY3lcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5pdGlhbGl6ZShncmFwaCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZShncmFwaCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNhdmVkU3RhdGVzID0gW107XG4gICAgICAgICAgICAgICAgLy8gc3RhdGUuZm9jdXNHcm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5ID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2NpID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbXMgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXREZWZhdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS56b29tRGVmYXVsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHZhciBjb25zdHMgPSBncmFwaC5jb25zdHMuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnN0cy5ib3VuZGFyeSA9IDAuODtcblxuICAgICAgICAgICAgICAgIC8vb3ZlcnJpZGluZyBkM2ZvcmNlIG1ldGhvZHMgb2YgdGhlIGdyYXBoLlxuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VCb3VuZHMgPSB0aGlzLmQzRm9yY2VCb3VuZHM7XG4gICAgICAgICAgICAgICAgZ3JhcGguZDNGb3JjZVRpY2sgPSB0aGlzLmQzRm9yY2VUaWNrO1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VTdGFydCA9IHRoaXMuZDNGb3JjZVN0YXJ0O1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VFbmQgPSB0aGlzLmQzRm9yY2VFbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGlua3MgdGhlIHByb3ZpZGVkIGVsZW1lbnQgYSBiYWNrIGJ1dHRvbiBmZWF0dXJlXG4gICAgICAgICAgICAgKiBEb2Vzbid0IHRyaWdnZXIgdGhlIG9uLWNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgKiBUaGF0IHNob3VsZCBiZSBkb25lIHRocm91Z2ggYW5ndWxhciBuZy1jbGljay5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7alF1ZXJ5fSAgZWxlbSAgICBUaGUganF1ZXJ5IHNlbGVjdGVkIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbEJhY2tCdXR0b24oZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtID0gZWxlbTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51bmRvTGFzdEV2ZW50LmNhbGwodGhpc1BvbGljeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2lsbCBhbGxvdyB0aGlzIHBvbGljeSB0byBjaGFuZ2UgdGhlIHRpdGxlIG9mIHRoZSBncmFwaFxuICAgICAgICAgICAgICogYXMgc3BsaXQgYW5kIGpvaW4gZXZlbnRzIG9jY3VyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtqUXVlcnl9ICBlbGVtICAgIFRoZSBqcXVlcnkgc2VsZWN0ZWQgZWxlbWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbnN0YWxsVGl0bGUoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtID0gZWxlbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZ3JhcGggaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIHNhdmVkU3RhdGUgIEFueSBwcm9wZXJ0eSBvbiB0aGlzXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IHdpbGwgYmUgYWNjZXNzaWJsZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHZpZXcgcmVsb2Fkc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXN0cm95KHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvL09ubHkgaWYgdGhlIHNhdmUgc3RhdGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICAgIGlmIChzYXZlZFN0YXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIHNhdmUgdGhlIGN1cnJlbnQgc3RhdGUsIGFuZCBhbGwgaGlzdG9yeS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgc2F2ZWRTdGF0ZSAgQW55IHByb3BlcnR5IG9uIHRoaXNcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2lsbCBiZSBhY2Nlc3NpYmxlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgdmlldyByZWxvYWRzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNhdmUoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgICAgIHZhciBsaW5rcyA9IHRoaXNHcmFwaC5saW5rcztcbiAgICAgICAgICAgICAgICB2YXIgY3VyclRpdGxlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyclRpdGxlID0gc3RhdGUudGl0bGVFbGVtLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzR3JvdXBzID0gc3RhdGUuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SGlzdG9yeSA9IHN0YXRlLmV2ZW50SGlzdG9yeTtcbiAgICAgICAgICAgICAgICB2YXIgem9vbXMgPSBzdGF0ZS56b29tcztcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0ID0gc3RhdGUubGF5b3V0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGxheW91dERlZmF1bHQgPSBzdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgIHZhciB6b29tRGVmYXVsdCA9IHN0YXRlLnpvb21EZWZhdWx0O1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB7bm9kZXM6bm9kZXMsIGxpbmtzOmxpbmtzLCBcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOnN0YXRlLnNhdmVkU3RhdGVzLCBjdXJyVGl0bGU6Y3VyclRpdGxlLCBcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNHcm91cHM6IGZvY3VzR3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICBldmVudEhpc3Rvcnk6ZXZlbnRIaXN0b3J5LCB6b29tczp6b29tcyxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OmxheW91dCwgbGF5b3V0RGVmYXVsdDpsYXlvdXREZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICB6b29tRGVmYXVsdDp6b29tRGVmYXVsdH07XG4gICAgICAgICAgICAgICAgc2F2ZWRTdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5ID0gcmV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHJlbG9hZGVkLCBhc3N1bWluZ1xuICAgICAgICAgICAgICogc2F2ZSBzdGF0ZSBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGxvYWRTdGF0ZSAgQ29udGFpbnMgYWxsIHRoZSBzYXZlZFxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxvYWQobG9hZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgbG9hZFN0YXRlID0gbG9hZFN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2F2ZWRTdGF0ZXMgPSBsb2FkU3RhdGUuc3RhdGVzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IGxvYWRTdGF0ZS5saW5rcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSBsb2FkU3RhdGUubm9kZXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VyclRpdGxlID0gbG9hZFN0YXRlLmN1cnJUaXRsZTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtLnRleHQoY3VyclRpdGxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5ID0gbG9hZFN0YXRlLmV2ZW50SGlzdG9yeTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3VwcyA9IGxvYWRTdGF0ZS5mb2N1c0dyb3VwcztcbiAgICAgICAgICAgICAgICBzdGF0ZS56b29tcyA9IGxvYWRTdGF0ZS56b29tcztcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXQgPSBsb2FkU3RhdGUubGF5b3V0O1xuICAgICAgICAgICAgICAgIHN0YXRlLmxheW91dERlZmF1bHQgPSBsb2FkU3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICBzdGF0ZS56b29tRGVmYXVsdCA9IGxvYWRTdGF0ZS56b29tRGVmYXVsdDtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5iYWNrQnV0dG9uRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0uZmFkZVRvKCdzbG93JywgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2xvYWRpbmcgYSBwcmV2aW91cyBsYXlvdXRcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gc3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSBzdGF0ZS56b29tRGVmYXVsdDsgXG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQoem9vbVswXSwgem9vbVsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSBzdGF0ZS56b29tc1tzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgICAgIGlmICh6b29tICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQoem9vbVswXSwgem9vbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gc3RhdGUubGF5b3V0W3N0YXRlLmZvY3VzR3JvdXBzXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2xheW91dCBjYW4ndCBiZSBudWxsXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbGF5b3V0W24uaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxheW91dCwgbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbi54ID0gcG9zLng7XG4gICAgICAgICAgICAgICAgICAgIG4ueSA9IHBvcy55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5pbml0Rm9yY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaC5jYWxsKHRoaXNHcmFwaCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyaWdnZXJpbmcgc3BsaXQgb24gZG91YmxlIGNsaWNrXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEZvY3VzIGdyb3VwIHN0b3JlcyB0aGUgbm9kZSB0aGF0IGlzIGFib3V0IHRvIGJlIHNwbGl0LlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBXaGVuIGZvY3VzIGdyb3VwIGhhcyBsZW5ndGggMCwgdGhlIGZpcnN0IHNwbGl0IFxuICAgICAgICAgICAgICogd2lsbCBqdXN0IGJlIHB1c2hlZCBvbi5cbiAgICAgICAgICAgICAqIFRoZSBub2RlIHdpbGwgYmUgc3BsaXQgYW5kIHB1c2hlZCB0byB0aGUgdG9wIGhhbGYgXG4gICAgICAgICAgICAgKiBvZiB0aGUgc2NyZWVuLCBhbmQgdGhlIGJvdHRvbSBoYWxmIHdpbGwgY29udGFpbiBhbnlcbiAgICAgICAgICAgICAqIG5vZGVzIGl0IGhhcyBjb25uZWN0aW9ucyB0by5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogV2hlbiBhIGZvY3VzIGdyb3VwIGxlbmd0aCBpcyA+PSAxLCBpZiB0aGUgbm9kZSB0byBiZVxuICAgICAgICAgICAgICogc3BsaXQgaXMgYSBmb2N1cyBub2RlLCBpdCB3aWxsIHJlcGxhY2UgZm9jdXNHcm91cHNbMF0gYW5kXG4gICAgICAgICAgICAgKiB0aGUgdG9wIGhhbGYgd2lsbCBiZSBpdHMgY2hpbGRyZW4sIGFuZCBib3R0b20gaGFsZiB3aWxsXG4gICAgICAgICAgICAgKiBiZSB0aGUgbm9kZXMgaXQgaGFzIGNvbm5lY3Rpb25zIHRvLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBJZiB0aGUgc3BsaXQgaXMgaW4gdGhlIGJvdHRvbSBoYWxmLCB0aGVuIHRoZSBib3R0b20gaGFsZlxuICAgICAgICAgICAgICogd2lsbCBkaXNwbGF5IGl0J3MgY2hpbGRyZW4gYW5kIHdpbGwgb25seSBzaG93IGNvbm5lY3Rpb25zIGJldHdlZW5cbiAgICAgICAgICAgICAqIHRoZSB0d28gZ3JvdXBzLCBhbmQgd2lsbCByZXBsYWNlIGZvY3VzR3JvdXBzWzFdLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmp9ICAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRibGNsaWNrKGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBjYW4gc3BsaXRcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5fc3RydWN0W25hbWVdID09PSB1bmRlZmluZWQgfHwgXy5pc0VtcHR5KGNoaWxkcmVuX3N0cnVjdFtuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAwKSB7IC8vdG9wbGV2ZWwgc3BsaXRcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMucHVzaChkLmlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQpKSB7IC8vc3BsaXR0aW5nIGEgZm9jdXMgbm9kZVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwc1swXSA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDEpIHsvL3NwbGl0dGluZyBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Nvbm5lY3RlZCBub2RlXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnB1c2goZC5pZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1sxXV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQpKSB7Ly9zcGxpdHRpbmcgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29ubmVjdGVkIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbMV0gPSBkLmlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMiAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzWzFdID09PSBkLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vU3BsaXR0aW5nIGEgY29ubmVjdGVkIG5vZGUsIGtlZXAgYWxsIGZvY3VzIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvS2VlcCA9IFtkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHNUb1Jlc2hvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBPbmVOb2RlcyA9IGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV07XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGdyb3VwT25lTm9kZXMsIG5vZGUuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobm9kZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0tlZXAucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9NYWtlIHNwbGl0IG5vZGVzIHRoZSBmb2N1cyBhbmQga2VlcCBub2RlcyB0aGF0IGFyZSBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzVG9LZWVwID0gW2RdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUlkc1RvUmVzaG93ID0gW107XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5rLnNvdXJjZSA9PT0gZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzVG9SZXNob3cuaW5kZXhPZihsaW5rLnRhcmdldC5pZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLnRhcmdldC5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay50YXJnZXQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzVG9SZXNob3cucHVzaChsaW5rLnRhcmdldC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0tlZXAucHVzaChsaW5rLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmsudGFyZ2V0ID09PSBkICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzVG9SZXNob3cuaW5kZXhPZihsaW5rLnNvdXJjZS5pZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLnNvdXJjZS5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5zb3VyY2UuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlSWRzVG9SZXNob3cucHVzaChsaW5rLnNvdXJjZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb0tlZXAucHVzaChsaW5rLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vUmVtb3ZpbmcgbGlua3MgZnJvbSB0aGUgbm9kZSB0byBiZSBzcGxpdFxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5pZCAhPT0gZC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuXG4gICAgICAgICAgICAgICAgLy9kaXNhYmxpbmcgdXBkYXRlIGdyYXBoIHRvIHByZXZlbnQgbmV3IGRhdGEgZnJvbVxuICAgICAgICAgICAgICAgIC8vcmVkcmF3aW5nIGxpbmtzIHdoaWxlIHRoZXJlIGFyZSBhbmltYXRpb25zIGdvaW5nIG9uXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5pZCAhPT0gZC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kZWxheSgyMDApLmR1cmF0aW9uKDQwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9kaXNhYmxpbmcgcXRpcCBpZiBpbnN0YWxsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnF0aXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucXRpcCgnZGlzYWJsZScsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IChwYXJzZUZsb2F0KHRoaXNHcmFwaC5zdmcuc3R5bGUoXCJ3aWR0aFwiKSkgLyBzY2FsZSkgLyAyICArIHRyYW5zbGF0ZVswXTtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IChwYXJzZUZsb2F0KHRoaXNHcmFwaC5zdmcuc3R5bGUoXCJoZWlnaHRcIikpIC8gc2NhbGUpLyAyICArIHRyYW5zbGF0ZVsxXTtcbiAgICAgICAgICAgICAgICBkLnhTdGFydCA9IGQueDtcbiAgICAgICAgICAgICAgICBkLnlTdGFydCA9IGQueTtcbiAgICAgICAgICAgICAgICBkLnggPSB4TG9jO1xuICAgICAgICAgICAgICAgIGQueSA9IHlMb2M7XG4gICAgICAgICAgICAgICAgZDNub2RlLnRyYW5zaXRpb24oXCJub2RlUG9zaXRpb25UcmFuc2l0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhTdGFydCA9IGQueFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5U3RhcnQgPSBkLnlTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnhTdGFydCA9IGQueDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnlTdGFydCA9IGQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyB4U3RhcnQgKyBcIixcIiArIHlTdGFydCArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BsaXROb2RlRnVuYyA9IHN1cGVyLnNwbGl0Tm9kZTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5ub2RlSWRzVG9SZXNob3cgPSBub2RlSWRzVG9SZXNob3c7XG4gICAgICAgICAgICAgICAgLy93YWl0aW5nIGZvciBub2RlIHRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbm9kZXNUb0tlZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0Tm9kZUZ1bmMuY2FsbCh0aGlzUG9saWN5LCBkKTtcbiAgICAgICAgICAgICAgICB9LCA3NTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIGJlIGNhbGxlZCBhZnRlciB0aGUgZ3JhcGggaXMgc3BsaXQuXG4gICAgICAgICAgICAgKiBCcmluZ3MgYWxsIG5vZGVzIGJhY2sgaW50byB2aWV3IGFuZCBzZXRzIHRoZWlyIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdXBkYXRlR3JhcGhDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNDAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImZvY3VzXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY29ubmVjdGVkXCIsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuU3BsaXRKb2luVmlld1BvbGljeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImZvY3VzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJmb2N1c1wiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY29ubmVjdGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYW5kb21seSBzZXRzIHRoZSBwb3NpdGlvbnMgb2YgYW55IHVuc2V0IG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0UG9zaXRpb25zKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhDb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGdyYXBoQ29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgICAgIHZhciByZXQgPSB0aGlzUG9saWN5LmQzRm9yY2VCb3VuZHMuY2FsbCh0aGlzR3JhcGgpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS54ID09IG51bGwgfHwgbm9kZS55ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gZ2V0UmFuZG9tSW50KG5vZGUucmFkaXVzICsgb2Zmc2V0LCByZXQud2lkdGggLSBub2RlLnJhZGl1cyAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGdldFJhbmRvbUludChub2RlLnJhZGl1cyArIG9mZnNldCwgcmV0LmhlaWdodCAtIG5vZGUucmFkaXVzIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUueCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnkgPSB5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgb24gdGhlIHN0YXJ0IG9mIHRoZSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKiBXaWxsIG92ZXJyaWRlIHRoZSBtZXRob2Qgb2YgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBcInRoaXNcIiBwb2ludHMgdG8gdGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VTdGFydCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlc1xuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQueFN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnhTdGFydCA9IChkLnhTdGFydCAqIHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkpICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC54O1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQueVN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnlTdGFydCA9IChkLnlTdGFydCAqdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSkgKyB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lnk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgc3RhcnQgb2YgdGhlIGQzIGZvcmNlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIFdpbGwgb3ZlcnJpZGUgdGhlIG1ldGhvZCBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIFwidGhpc1wiIHBvaW50cyB0byB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZDNGb3JjZUVuZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5ID0gc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVQb2xpY3kubGF5b3V0RGVmYXVsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0TGF5b3V0ID0ge307XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYXlvdXRbbi5pZF0gPSB7eDpuLngsIHk6bi55fTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5LmxheW91dERlZmF1bHQgPSBkZWZhdWx0TGF5b3V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5Lnpvb21EZWZhdWx0ID0gW3RyYW5zbGF0ZSwgc2NhbGVdOyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlc1xuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS55OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCBkdXJpbmcgRDMgZm9yY2Ugc2ltdWxhdGlvbnNcbiAgICAgICAgICAgICAqIGJ5IHRoZSBncmFwaCwgc28gXCJ0aGlzXCIgd2lsbCBwb2ludCB0byB0aGUgZ3JhcGggb2JqZWN0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdpZHRoICAgRDMgTGF5b3V0IFdpZHRoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgaGVpZ2h0ICBEMyBMYXlvdXQgSGVpZ2h0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VUaWNrKGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5ID0gc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBjb25zdHMuZGlzcGxheU9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gTW92ZSBub2RlcyB0b3dhcmQgY2x1c3RlciBmb2N1cy5cbiAgICAgICAgICAgICAgICB2YXIgZm9jaSA9IHN0YXRlUG9saWN5LmZvY2k7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ3Jhdml0eShhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvY2kubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImZvY3VzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IChmb2NpWzBdIC0gZC55KSAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSArPSAoZm9jaVsxXSAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54ICs9ICh3aWR0aC8yIC0gZC54KSAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gKGhlaWdodC8yIC0gZC55KSAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueCArPSAod2lkdGgvMiAtIGQueCkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgbm9kZXMgYXJlIHdpdGhpbiBib3VuZHNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlc1xuICAgICAgICAgICAgICAgICAgICAuZWFjaCh0aGlzLmQzRm9yY2VDb2xsaWRlKC41KSlcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goZ3Jhdml0eSguMiAqIGUuYWxwaGEpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC54ID0gTWF0aC5tYXgoKGQucmFkaXVzICsgb2Zmc2V0KS9zY2FsZSwgTWF0aC5taW4od2lkdGggKyAoKC1vZmZzZXQtIGQucmFkaXVzKSAvIHNjYWxlKSwgZC54KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPT0gbnVsbCB8fCBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSA9IE1hdGgubWF4KChkLnJhZGl1cyArIG9mZnNldCkvc2NhbGUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oaGVpZ2h0ICsgKCgtb2Zmc2V0IC0gZC5yYWRpdXMpL3NjYWxlKSwgZC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiZm9jdXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKChoZWlnaHQgKyAoKC1vZmZzZXQgLSBkLnJhZGl1cykvc2NhbGUpKSpjb25zdHMuU3BsaXRKb2luVmlld1BvbGljeS5ib3VuZGFyeSwgZC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgPSBNYXRoLm1heCgoaGVpZ2h0ICsgKChvZmZzZXQgLSBkLnJhZGl1cykvc2NhbGUpKSAqY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3kuYm91bmRhcnksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oaGVpZ2h0ICsgKCgtb2Zmc2V0IC0gZC5yYWRpdXMpL3NjYWxlKSwgZC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHNcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIFdpbGwgYmUgY2FsbGVkIGR1cmluZyBEMyBmb3JjZSBzaW11bGF0aW9uc1xuICAgICAgICAgICAgICogYnkgdGhlIGdyYXBoLCBzbyBcInRoaXNcIiB3aWxsIHBvaW50IHRvIHRoZSBncmFwaCBvYmplY3RcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHJldHVybiAgICAge09iamVjdH0gICAgICAgICAgUmV0dXJucyBhbiBvYmplY3RcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaGFzIHRoZSB3aWR0aFxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhlaWdodCBhcyBcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VCb3VuZHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHNQb2xpY3kgPSBjb25zdHMuU3BsaXRKb2luVmlld1BvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kgPSBzdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjTWF4Tm9kZXMod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IHdpZHRoICogaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgLy90cmVhdGluZyB0aGVtIGFzIGEgc3F1YXJlIGZvciBhcHByb3hcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IChyYWRpdXMgKjMuNSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBhcmVhIC8obGVuZ3RoICpsZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1RoZSBvZmZzZXQgaXMgdGhlIGJ1ZmZlciBmcm9tIHRoZSBlZGdlc1xuICAgICAgICAgICAgICAgIC8vT3JpZ2luYWwgV2lkdGggYW5kIEhlaWdodCBhcmUgZ2l2ZW4gdG8gdGhlIGZvcmNlIGxheW91dFxuICAgICAgICAgICAgICAgIC8vc28gdGhhdCBpdCBpcyBjZW50ZXJlZCwgYnV0IG5vZGVzIHdpbGwgYmUgZm9yY2VkIHRvIGJlXG4gICAgICAgICAgICAgICAgLy93aXRoaW4gdGhlIG9mZnNldCBib3VuZHNcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gY29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwid2lkdGhcIikpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KHRoaXNHcmFwaC5zdmcuc3R5bGUoXCJoZWlnaHRcIikpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHN2Z0hlaWdodDtcblxuICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBjYWxjTWF4Tm9kZXMod2lkdGggLSAoMipvZmZzZXQpLCBoZWlnaHQgLSAoMipvZmZzZXQpKTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiBhbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBhbW91bnQgLyBub2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQodGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCksIHNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggLz0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAvPSBzY2FsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLCBzY2FsZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jYWxjdWxhdGluZyBmb2NpIGZvciBzaW11bGF0aW9uXG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzR3JvdXBzID0gc3RhdGVQb2xpY3kuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgdmFyIGZvY2k7XG4gICAgICAgICAgICAgICAgaWYgKGZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb2NpID0gW2hlaWdodC8yXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3NldHRpbmcgZm9jaSBoZWlnaHQgcG9zaXRpb24gYmFzZWQgb24gcGVyY2VudGFnZVxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNOb2RlcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtmb2N1c0dyb3Vwc1swXV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9IGZvY3VzTm9kZXMubGVuZ3RoIC8gbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gaGVpZ2h0ICogY29uc3RzUG9saWN5LmJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm90ID0gaGVpZ2h0IC0gdG9wO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wIDwgMip0aGlzR3JhcGguY29uc3RzLm1heFJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RzUG9saWN5LmJvdW5kYXJ5ID0gKDIuNSAqIHRoaXNHcmFwaC5jb25zdHMubWF4UmFkaXVzKSAvIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGhlaWdodCAqIGNvbnN0c1BvbGljeS5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdCA9IGhlaWdodCAtIHRvcDtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChib3QgPCAyKiB0aGlzR3JhcGguY29uc3RzLm1heFJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RzUG9saWN5LmJvdW5kYXJ5ID0gMSAtICgoMi41ICogdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMpIC8gaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGhlaWdodCAqIGNvbnN0c1BvbGljeS5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdCA9IGhlaWdodCAtIHRvcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb2NpID0gW3RvcC8yLCB0b3AgKyBib3QgLyAyXTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS5mb2NpID0gZm9jaTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3dpZHRoOndpZHRoLCBoZWlnaHQ6aGVpZ2h0fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBzcGxpdFxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE5vZGVFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5ld05vZGVzLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gbmV3Tm9kZXNbMF0ucGFyZW50O1xuICAgICAgICAgICAgICAgIC8vIHN0YXRlLmZvY3VzR3JvdXAgPSB0aXRsZTtcblxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGxhc3QgZXZlbnQgaGFzIHRoZSBzYW1lIGlkLCBpdCBtdXN0IGJlIHRoZVxuICAgICAgICAgICAgICAgIC8vb3BwcG9zaXRlIG9mIHRoaXMgZXZlbnQsIHNvIHdlIHJlbW92ZSB0aGF0IGV2ZW50IGZyb21cbiAgICAgICAgICAgICAgICAvL3RoZSBldmVudCBzdGFjay5cbiAgICAgICAgICAgICAgICAvL090aGVyd2lzZSwgd2UgYWRkIHRoZSBldmVudCBvdCB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5W3N0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggLSAxXS5pZCA9PT0gdGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5LnBvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wdXNoKHtpZDp0aXRsZSwgZXZlbnQ6J3NwbGl0J30pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5iYWNrQnV0dG9uRWxlbSAhPSBudWxsICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0uZmFkZVRvKCdzbG93JywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS50aXRsZUVsZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHN0YXRlLmZvY3VzR3JvdXBzWzBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gJyAmICcgKyBzdGF0ZS5mb2N1c0dyb3Vwc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50aXRsZUVsZW0udGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3JlLWVuYWJsZSBncmFwaCB1cGRhdGVcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUuZGlzYWJsZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kuc2V0TGF5b3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgbGF5b3V0IG9mIHRoZSBub2Rlcy4gXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSBpcyBhIHByZXZpb3VzIGxheW91dCwgaXQgd2lsbCBiZSBsb2FkZWQuXG4gICAgICAgICAgICAgKiBFbHNlLCBpdCB3aWxsIHJ1biBhIEQzIEZvcmNlIHNpbXVsYXRpb24gYW5kIGNyZWF0ZSBvbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldExheW91dCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgICAgICAgICAgICAgdmFyIGxheW91dDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dERlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbURlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQoem9vbVswXSwgem9vbVsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSBzdGF0ZS56b29tc1tzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgICAgIGlmICh6b29tICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQoem9vbVswXSwgem9vbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gc3RhdGUubGF5b3V0W3N0YXRlLmZvY3VzR3JvdXBzXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobGF5b3V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGxheW91dFtuLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxheW91dCwgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnggPSBwb3MueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ueSA9IHBvcy55O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoLmNhbGwodGhpc0dyYXBoLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL05lZWQgdG8gcnVuIGEgZm9yY2Ugc2ltdWxhdGlvbiBhcyB0aGlzIGxheW91dFxuICAgICAgICAgICAgICAgICAgICAvL2hhc24ndCBiZWVuIGRvbmUgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5pbml0Rm9yY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpc1BvbGljeS5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS51cGRhdGVHcmFwaENhbGxiYWNrLmNhbGwodGhpc1BvbGljeSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS56b29tc1tzdGF0ZS5mb2N1c0dyb3Vwc10gPSBbdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGF5b3V0ID0ge307XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFtuLmlkXSA9IHt4Om4ueCwgeTpuLnl9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0W3N0YXRlLmZvY3VzR3JvdXBzXSA9IGxheW91dDtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE92ZXJyaWRpbmcgZnJvbSBzdXBlciBjbGFzcyBzbyB0aGF0IHdlIGNhbiBoYXZlXG4gICAgICAgICAgICAgKiB0b3AgbGV2ZWwgbm9kZXMgcmVhcHBlYXIgd2hlbiB0aGV5IGFyZSBoaWRkZW5cbiAgICAgICAgICAgICAqIGR1ZSB0byB0aGVyZSBiZWluZyB0d28gZm9jdXMgZ3JvdXBzLlxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICAgICAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gIFRoZSBuZXcgbm9kZSBhZnRlciB0aGUgam9pblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfX2pvaW5Ob2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVTdXBlciA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5Ob2RlUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayB0aGF0IG5vZGUgc3RpbGwgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG5vZGUpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBhbmNlc3Rvciwgbm90aGluZyB0byBqb2luXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbC5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICB2YXIgdG9fYmVfZGVsZXRlZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZVNldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbm9kZSB3b24ndCBiZSBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlc1tpXS5hbmNlc3RvcnMuaW5kZXhPZihub2RlLnBhcmVudCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX2JlX2RlbGV0ZWQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZV9pZCA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0LnB1c2gobm9kZS5wYXJlbnQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9yc19zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5hbmNlc3RvcnNfc3RydWN0O1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgLy8gLSBzZXR0aW5nIGZvY3VzR3JvdXBzIC1cbiAgICAgICAgICAgICAgICAvL2VpdGhlciByZXBsYWNpbmcgb25lIG9mIHRoZSBncm91cHMsXG4gICAgICAgICAgICAgICAgLy9vciBqb2luaW5nIGJhY2sgaW50byBhIHRvcCBsZXZlbCwgc28gdGhlcmUgaXMgb25seVxuICAgICAgICAgICAgICAgIC8vb25lIGZvY3VzXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuZm9jdXNHcm91cHMuaW5kZXhPZihwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChhbmNlc3RvcnNfc3RydWN0W3BhcmVudF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwc1tpbmRleF0gPSBhbmNlc3RvcnNfc3RydWN0W3BhcmVudF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL25hbWVUb0FkZCBhcmUgdG9wIGxldmVsIG5vZGVzIHRoYXQgYXJlIHRvIGJlIGFkZGVkXG4gICAgICAgICAgICAgICAgLy90byB0aGUgZ3JhcGguXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVUb0FkZCA9IFtdO1xuICAgICAgICAgICAgICAgIC8vd2lsbCBvbmx5IG5lZWQgdG8gYWRkIGEgdG9wIGxldmVsIG5vZGUgaWYgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAvL29ubHkgb25lIGZvY3VzXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL0FkZCBvbmx5IHRob3N0IHRoYXQgYXJlbid0IGFuIGFuY2VzdG9yIG9mIHRoZSBub2RlXG4gICAgICAgICAgICAgICAgICAgIC8vdG8gam9pbiwgdGhlIGZvY3VzIGdyb3VwIG9yIGFuIGFuY2VzdG9yIG9mIGl0LFxuICAgICAgICAgICAgICAgICAgICAvL2FuZCBhcmVuJ3QgYWxyZWFkeSBpbiBub2RlTmFtZVNldC5cbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgZmxvdyBiZXR3ZWVuIHRvcCBsZXZlbCBhcyBsb25nIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIHRvcCBsZXZlbCBpc24ndCBhbiBhbmNlc3RvciBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy9mb2N1cyBncm91cCwgYW5kIGlzbid0IGFscmVhZHkgcGFydCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy9ub2RlIHNldDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IGFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF07XG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHN0YXRlLmZvY3VzR3JvdXBzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgb3IgZW1wdHkgYXJyYXkgaXMgdG8gcHJldmVudCBjb25jYXRlbmF0aW5nIGEgbnVsbFxuICAgICAgICAgICAgICAgICAgICAvL29yIHVuZGVmaW5lZCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgPSBhbmNlc3RvcnMuY29uY2F0KGFuY2VzdG9yc19zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dIHx8IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCwgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2VzdG9ycy5pbmRleE9mKG4pID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldC5pbmRleE9mKG4pID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldCA9IG5vZGVOYW1lU2V0LmNvbmNhdChuYW1lVG9BZGQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbm8gZm9jdXMgZ3JvdXBzIG1lYW5zIHdlIGFyZSBhdCB0b3AgbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgLy9TaG91bGQgYWRkIGFueSB0b3AgbGV2ZWwgbm9kZXMgdGhhdCBhcmVuJ3RcbiAgICAgICAgICAgICAgICAgICAgLy9hbHJlYWR5IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZVNldC5pbmRleE9mKG4pID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldCA9IG5vZGVOYW1lU2V0LmNvbmNhdChuYW1lVG9BZGQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRhXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG5vZGUucmFkaXVzIC8gdGhpc0dyYXBoLmNvbnN0cy5yYWRpdXNEZWNheTsgXG4gICAgICAgICAgICAgICAgdmFyIHhMb2MgPSBub2RlLng7XG4gICAgICAgICAgICAgICAgdmFyIHlMb2MgPSBub2RlLnk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUuYW5jZXN0b3JzWzFdO1xuICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBub2RlLmFuY2VzdG9ycy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKHhMb2MsIHlMb2MsIG5ld19ub2RlX2lkLCBuZXdfbm9kZV9pZCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3Tm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvL3JlbW92ZSBhbGwgbm9kZXMgdGhhdCB3aWxsIGJlIGpvaW5lZFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9fYmVfZGVsZXRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZV90b19kZWxldGUgPSB0b19iZV9kZWxldGVkW2ldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMuc3BsaWNlKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG5vZGVfdG9fZGVsZXRlKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZV90b19kZWxldGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByZXREYXRhID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuZ2V0Rmxvd0JldHdlZW5TZXQobm9kZU5hbWVTZXQpO1xuICAgICAgICAgICAgICAgIC8vaG9sZHMgdGhlIG5vZGVEYXRhIHdoaWNoIHdpbGwgYmUgcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzVG9Qcm9jZXNzID0gW107XG4gICAgICAgICAgICAgICAgLy9maW5kaW5nIHRoZSBub2RlIGRhdGEgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgdG9wIGxldmVsXG4gICAgICAgICAgICAgICAgLy9ub2RlcyB0byBhZGQgLSBuYW1lVG9BZGQuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEYXRhID0gcmV0RGF0YS5ub2RlRGF0YTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQuaW5kZXhPZihub2RlRGF0YVtpXS5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUHJvY2Vzcy5wdXNoKG5vZGVEYXRhW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vVGhlIHRvcCBsZXZlbCBub2RlcyB0aGF0IGFyZSBhZGRlZFxuICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NOb2RlRGF0YShub2Rlc1RvUHJvY2Vzcyk7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5ld05vZGVzLCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgIG4ucmFkaXVzID0gbi5yYWRpdXMgfHwgdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSB0aGlzR3JhcGgubm9kZXMuY29uY2F0KG5ld05vZGVzKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YShyZXREYXRhLmxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIC8vT25seSBrZWVwIHRvcCBsZXZlbCBub2RlcyB0aGF0IGhhdmUgY29ubmVjdGlvbnMgdG9cbiAgICAgICAgICAgICAgICAvL3RoZSBjdXJyZW50IGZvY3VzIGdyb3VwXG4gICAgICAgICAgICAgICAgLy93ZSByZW1vdmUgdGhlIG5vZGUgbmFtZSBmcm9tIG5hbWVUb0FkZCBpZiB3ZSBhcmVcbiAgICAgICAgICAgICAgICAvL2tlZXBpbmcgaXRcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgdGhlcmUgZXhpc3RzIGEgbGluayB0b3VjaGluZyBlYWNoIG9mIG5hbWVUb0FkZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVUb0FkZC5pbmRleE9mKGwuc291cmNlLmlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHNbMF0gPT09IGwudGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQuc3BsaWNlKG5hbWVUb0FkZC5pbmRleE9mKGwuc291cmNlLmlkKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lVG9BZGQuaW5kZXhPZihsLnRhcmdldC5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzWzBdID09PSBsLnNvdXJjZS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZihsLnRhcmdldC5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL1dlIHdhbnQgdG8ga2VlcCB0aGVtIGFsbFxuICAgICAgICAgICAgICAgICAgICAvL3NpbmNlIGFueSBsZWZ0IGluIG5hbWVUb0FkZCB3aWxsIGJlIHJlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgIC8vd2UgcmVzZXQgbmFtZVRvQWRkIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZCA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL3doYXRldmVyIGlzIHJlbWFpbmluZyBpbiBuYW1lVG9BZGQgaXNuJ3QgY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgLy90byB0aGUgZm9jdXMgZ3JvdXAsIHNvIHdlIHNob3VsZCByZW1vdmUgaXQuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVUb1JlbW92ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmluZGV4T2YodGhpc0dyYXBoLm5vZGVzW2ldLmlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQuc3BsaWNlKG5hbWVUb0FkZC5pbmRleE9mKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUodGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVG9SZW1vdmUucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobm9kZVRvUmVtb3ZlLCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5zcGxpY2UodGhpc0dyYXBoLm5vZGVzLmluZGV4T2YobiksIDEpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlU3VwZXIuc3BsaXROb2Rlcy5zcGxpY2Uoc3RhdGVTdXBlci5zcGxpdE5vZGVzLmluZGV4T2YobmV3Tm9kZS5pZCksIDEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld05vZGU7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBhZnRlciBhIHNpbmdsZSBub2RlIGlzIGpvaW5lZFxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBJZiB0aGUgZm9jdXMgZ3JvdXAgaGFzIGJlZW4gc2VlbiBiZWZvcmUsIGl0IHdpbGxcbiAgICAgICAgICAgICAqIGxvYWQgdGhhdCBsYXlvdXQuIE90aGVyd2lzZSwgaXQgd2lsbCBydW4gYSBkMyBmb3JjZVxuICAgICAgICAgICAgICogc2ltdWxhdGlvbiB0byBnZW5lcmF0ZSBvbmUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBuZXdOb2RlICBUaGUgbmV3IG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgam9pbk5vZGVFdmVudChuZXdOb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgbGFzdCBldmVudCBoYXMgdGhlIHNhbWUgaWQsIGl0IG11c3QgYmUgdGhlXG4gICAgICAgICAgICAgICAgLy9vcHBwb3NpdGUgb2YgdGhpcyBldmVudCwgc28gd2UgcmVtb3ZlIHRoYXQgZXZlbnQgZnJvbVxuICAgICAgICAgICAgICAgIC8vdGhlIGV2ZW50IHN0YWNrLlxuICAgICAgICAgICAgICAgIC8vT3RoZXJ3aXNlLCB3ZSBhZGQgdGhlIGV2ZW50IHRvIHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoICE9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeVtzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoIC0gMV0uaWQgPT09IG5ld05vZGUuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5LnBvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wdXNoKHtpZDpuZXdOb2RlLmlkLCBldmVudDonam9pbid9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImZvY3VzXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vc2V0dGluZyBiYWNrIGJ1dHRvblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5iYWNrQnV0dG9uRWxlbSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbS5mYWRlVG8oJ3Nsb3cnLCAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3NldHRpbmcgdGl0bGVcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBzdGF0ZS5mb2N1c0dyb3Vwc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9ICcgJiAnICsgc3RhdGUuZm9jdXNHcm91cHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtLnRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kuc2V0TGF5b3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVW5kb2VzIHRoZSBsYXN0IHNwbGl0IG9yIGpvaW4gZXZlbnQuXG4gICAgICAgICAgICAgKiBNZWFudCB0byBiZSBjYWxsZWQgYnkgdGhlIGJhY2sgYnV0dG9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1bmRvTGFzdEV2ZW50KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gc3RhdGUuZXZlbnRIaXN0b3J5W3N0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBsYXN0LmlkO1xuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0LmV2ZW50ID09PSAnam9pbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXNHcmFwaC5maW5kTm9kZUJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZDNub2RlID0gdGhpc0dyYXBoLmZpbmREM05vZGUoaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LmRibGNsaWNrKGQzbm9kZSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtpZF1bMF07XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzR3JhcGguZmluZE5vZGVCeUlkKG5vZGVJZCk7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLmpvaW5Ob2RlLmNhbGwodGhpc1BvbGljeSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFBvbGljeTogU3BsaXRKb2luVmlld1BvbGljeVxuICAgICAgICB9XG59XSk7XG5cblxuXG5cblxuXG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzJywge1xuICAgICAgICAgICAgdXJsOiAnL25ldHdvcmtzJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL25vZGVzJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KVxuICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYub3JnYW5pemF0aW9ucycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51Lm9yZ2FuaXphdGlvbnMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvb3JnYW5pemF0aW9ucycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NlcnZpY2VsYnMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXR0aW5ncycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcclxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvZ2xvYmFsJyxcclxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2V0dGluZ3MnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXR0aW5ncy9zZXR0aW5nc21lbnUuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLmxvZ3MnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9ncycsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMuYXV0aCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9hdXRoJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5saWNlbnNlJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpY2Vuc2UnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLnBvbGljaWVzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3BvbGljaWVzJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc3RvcmFnZXBvbGljaWVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zdG9yYWdlcG9saWNpZXMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pOyIsIlxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJywgXG5cdCdjb250aXYuZ3JhcGgnXSlcbiAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24nLCB7XG4gICAgICAgICAgICB1cmw6ICcvdmlzdWFsaXphdGlvbicsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudm9sdW1lcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvdm9sdW1lcycsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICAgICAgfSlcbiAgICB9XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cblxuLy8gRGVjbGFyZSBhcHAgbGV2ZWwgbW9kdWxlIHdoaWNoIGRlcGVuZHMgb24gdmlld3MsIGFuZCBjb21wb25lbnRzXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2QXBwJywgW1xuICAgICAgICAndWkucm91dGVyJyxcbiAgICAgICAgJ2NvbnRpdi5sb2dpbicsXG4gICAgICAgICdjb250aXYubWVudScsXG4gICAgICAgICdjb250aXYuZGFzaGJvYXJkJyxcbiAgICAgICAgJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycsXG4gICAgICAgICdjb250aXYubmV0d29ya3MnLFxuICAgICAgICAnY29udGl2Lm5ldHdvcmtwb2xpY2llcycsXG4gICAgICAgICdjb250aXYuc3RvcmFnZXBvbGljaWVzJyxcbiAgICAgICAgJ2NvbnRpdi5zZXJ2aWNlbGJzJyxcbiAgICAgICAgJ2NvbnRpdi52b2x1bWVzJyxcbiAgICAgICAgJ2NvbnRpdi5ub2RlcycsXG4gICAgICAgICdjb250aXYub3JnYW5pemF0aW9ucycsXG4gICAgICAgICdjb250aXYuc2V0dGluZ3MnLFxuICAgICAgICAnY29udGl2LnZpc3VhbGl6YXRpb24nXG4gICAgXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgLy9hYnN0cmFjdCBzdGF0ZSBzZXJ2ZXMgYXMgYSBQTEFDRUhPTERFUiBvciBOQU1FU1BBQ0UgZm9yIGFwcGxpY2F0aW9uIHN0YXRlc1xuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGZsdWlkIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMS8xNi5cbiAqL1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzEwLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCBhcyBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwY3JlYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgJ05ldHdvcmtzTW9kZWwnLFxuICAgICAgICAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLFxuICAgICAgICAgICAgICAgICAgJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbCxcbiAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwsXG4gICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsID0gdGhpcztcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLm5ldHdvcmtzID0gW107XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwID0ge307XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5zZWxlY3RlZE5ldHdvcmsgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLm1vZGUgPSBcImVkaXRcIjtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgbmV0d29ya3MgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ldHdvcmtzKCkge1xuICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLm5ldHdvcmtzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVBcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy9jaGVja2luZyBpZiBhbGwgdmFsaWRhdGlvbnMgaGF2ZSBwYXNzZWRcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwLm5ldHdvcmtOYW1lID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLnNlbGVjdGVkTmV0d29yay5uZXR3b3JrTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwLmtleSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdlbmVyYXRlS2V5KGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBhcHBsaWNhdGlvbkdyb3VwIGNvbnNpc3Qgb2YgR3JvdXAgTmFtZSwgTmV0d29yayBOYW1lLCBJc29sYXRpb24gUG9saWNpZXMsIEJhbmR3aWR0aCBQb2xpY3lcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmNyZWF0ZShhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvQXBwbGljYXRpb25Hcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTmFtZTogJycsICAgICAgICAgIC8vIEZvciBHcm91cCBOYW1lXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtOYW1lOiAnJywgICAgICAgIC8vIEZvciBOZXR3b3JrIE5hbWVcbiAgICAgICAgICAgICAgICAgICAgcG9saWNpZXM6IFtdLCAgICAgICAgICAgLy8gRm9yIElzb2xhdGlvbiBwb2xpY2llc1xuICAgICAgICAgICAgICAgICAgICBuZXRQcm9maWxlOiAnJywgICAgICAgICAvLyBGb3IgQmFuZHdpZHRoIHBvbGljeSBOYW1lXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0TmV0d29ya3MoKTtcblxuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuY3JlYXRlQXBwbGljYXRpb25Hcm91cCA9IGNyZWF0ZUFwcGxpY2F0aW9uR3JvdXA7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pOyIsIiAvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTUvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuYXBwbGljYXRpb25ncm91cHMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwgYXMgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcGxpY2F0aW9uZ3JvdXBzL2FwcGxpY2F0aW9uZ3JvdXBkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwgYXMgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcGxpY2F0aW9uZ3JvdXBzL2FwcGxpY2F0aW9uZ3JvdXBkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICckc3RhdGVQYXJhbXMnLFxuICAgICAgICAnQXBwbGljYXRpb25Hcm91cHNNb2RlbCcsXG4gICAgICAgICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLFxuICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCA9IHt9O1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLnNlbGVjdGVkTmV0d29yayA9IHt9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIHNob3cgZWRpdCBvciBkZXRhaWxzIHNjcmVlbiBiYXNlZCBvbiB0aGUgcm91dGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0TW9kZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmlzKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLm1vZGUgPSAnZGV0YWlscyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvQXBwbGljYXRpb25Hcm91cERldGFpbHMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5kZXRhaWxzJywgeydrZXknOiBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cC5rZXl9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsRWRpdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUFwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmRlbGV0ZShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZUFwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuc2F2ZShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwRGV0YWlscygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuc2F2ZUFwcGxpY2F0aW9uR3JvdXAgPSBzYXZlQXBwbGljYXRpb25Hcm91cDtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5jYW5jZWxFZGl0aW5nID0gY2FuY2VsRWRpdGluZztcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5kZWxldGVBcHBsaWNhdGlvbkdyb3VwID0gZGVsZXRlQXBwbGljYXRpb25Hcm91cDtcblxuICAgICAgICAgICAgc2V0TW9kZSgpO1xuXG4gICAgICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuYXBwbGljYXRpb25ncm91cHMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXBwbGljYXRpb25Hcm91cExpc3RDdHJsIGFzIGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwbGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwnLFxuICAgICAgICBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgQXBwbGljYXRpb25Hcm91cHNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cExpc3RDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFwcGxpY2F0aW9uR3JvdXBzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybC5ncm91cHMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cExpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3Qgc3RhcnQgYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGhhcmRpayBnYW5kaGkgb24gNi8yOC8xNi5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5hcHBsaWNhdGlvbmdyb3Vwc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZCYW5kd2lkdGhwb2xpY3lcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBtb2RlOlwiPVwiLFxuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uZ3JvdXA6Jz0nXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsXG4gICAgICAgICAgICAgICAgJ05ldHByb2ZpbGVzTW9kZWwnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ldFByb2ZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE5ldHByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3k6e31cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0IHByb2ZpbGVzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0cHJvZmlsZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXRQcm9maWxlcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0JyAgICAgICAgLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuYXBwbGljYXRpb25ncm91cC5uZXRQcm9maWxlICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE5ldHByb2ZpbGUucG9saWN5ID0gXy5maW5kKCRzY29wZS5uZXRQcm9maWxlcyxmdW5jdGlvbihwb2xpY3kpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvbGljeS5wcm9maWxlTmFtZSA9PT0gJHNjb3BlLmFwcGxpY2F0aW9uZ3JvdXAubmV0UHJvZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQXNzaWduIHByb2ZpbGVOYW1lIHRvIGFwcGxpY2F0aW9uZ3JvdXAgd2hpY2hldmVyIHVzZXIgaGFzIGdpdmVuIFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUFwcGxpY2F0aW9uZ3JvdXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLnNlbGVjdGVkTmV0cHJvZmlsZS5wb2xpY3kgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5uZXRQcm9maWxlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5uZXRQcm9maWxlID0gJHNjb3BlLnNlbGVjdGVkTmV0cHJvZmlsZS5wb2xpY3kucHJvZmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGdldE5ldHByb2ZpbGVzKCk7XG4gICAgICAgICAgICB9XSxcblxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHBsaWNhdGlvbmdyb3Vwcy9iYW5kd2lkdGhwb2xpY3kuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGhhcmRpayBnYW5kaGkgb24gNy84LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dklzb2xhdGlvbnBvbGljeVwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybntcbiAgICAgICAgICAgIHJlc3RyaWN0OidFJyxcbiAgICAgICAgICAgIHNjb3BlOntcbiAgICAgICAgICAgICAgICBtb2RlOic9JyxcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbmdyb3VwOic9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgICAgICAgICAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgICAgICAgICAnQXBwbGljYXRpb25Hcm91cHNNb2RlbCcsXG4gICAgICAgICAgICAgICAgJ1BvbGljaWVzTW9kZWwnLFxuICAgICAgICAgICAgICAgICdSdWxlc01vZGVsJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsKXtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jb21pbmdSdWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3V0Z29pbmdSdWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRQb2xpY3kgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3k6e31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUG9saWNpZXMgPSBbXTsgICAgICAgICAgIC8vIFRvIFN0b3JlIHBvbGljaWVzIHNlbGVjdGVkIGJ5IHVzZXIgdG8gZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNvbGF0aW9uUG9saWNpZXMgPSBbXTsgICAgICAgICAgLy8gVG8gR2V0IGFsbCBpc29sYXRpb24gcG9saWNpZXMgb2YgdGVuYW50XG5cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0IGluY29taW5nIGFuZCBvdXRnb2luZyBydWxlcyBmb3IgZWFjaCBwb2xpY3kgcHJlc2VudCBpbiBhcHBsaWNhdGlvbmdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLnBvbGljaWVzLmZvckVhY2goZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVG8gZGlzcGxheSBydWxlcyBvZiBzZWxlY3RlZCBwb2xpY2llc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZ2V0SW5jb21pbmdSdWxlcyhwb2xpY3ksICdkZWZhdWx0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSgkc2NvcGUuaW5jb21pbmdSdWxlcywgcnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldE91dGdvaW5nUnVsZXMocG9saWN5LCAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoJHNjb3BlLm91dGdvaW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBHZXQgcG9saWNpZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRJc29sYXRpb25Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzb2xhdGlvblBvbGljaWVzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZW5hbnROYW1lJzogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEFkZCBwb2xpY3kgdG8gYXBwbGljYXRpb24gZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRJc29sYXRpb25Qb2xpY3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9saWN5TmFtZSA9ICRzY29wZS5zZWxlY3RlZFBvbGljeS5wb2xpY3kucG9saWN5TmFtZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3lOYW1lICE9PSB1bmRlZmluZWQgJiYgXy5pbmNsdWRlcygkc2NvcGUuc2VsZWN0ZWRQb2xpY2llcywgY3VycmVudFBvbGljeU5hbWUpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UbyBkaXNwbGF5IHNlbGVjdGVkIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUG9saWNpZXMucHVzaChjdXJyZW50UG9saWN5TmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RvIGRpc3BsYXkgcnVsZXMgb2Ygc2VsZWN0ZWQgcG9saWNpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldEluY29taW5nUnVsZXMoY3VycmVudFBvbGljeU5hbWUsICdkZWZhdWx0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSgkc2NvcGUuaW5jb21pbmdSdWxlcywgcnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldE91dGdvaW5nUnVsZXMoY3VycmVudFBvbGljeU5hbWUsICdkZWZhdWx0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSgkc2NvcGUub3V0Z29pbmdSdWxlcywgcnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVG8gYmUgYWRkZWQgdG8gYXBwbGljYXRpb24gZ3JvdXAgYW5kIHNhdmVkIHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbGljYXRpb25ncm91cC5wb2xpY2llc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHVzaChjdXJyZW50UG9saWN5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJlbW92ZSBwb2xpY3kgZnJvbSBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUlzb2xhdGlvblBvbGljeSA9IGZ1bmN0aW9uKHBvbGljeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKCRzY29wZS5zZWxlY3RlZFBvbGljaWVzLGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9saWN5ID09PSBwb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUuYXBwbGljYXRpb25ncm91cC5wb2xpY2llcywgZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2xpY3kgPT09IHBvbGljeU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKCRzY29wZS5pbmNvbWluZ1J1bGVzLCBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlLnBvbGljeU5hbWUgPT09IHBvbGljeU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKCRzY29wZS5vdXRnb2luZ1J1bGVzLCBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlLnBvbGljeU5hbWUgPT09IHBvbGljeU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogIFRvIGNoZWNrICdkZXRhaWxzJyBvciAnZWRpdCcgbW9kZSAobm90IGNyZWF0ZSBtb2RlKVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm1vZGUgPT0gJ2RldGFpbHMnIHx8ICgkc2NvcGUubW9kZSA9PSAnZWRpdCcgJiYgJHNjb3BlLmFwcGxpY2F0aW9uZ3JvdXAuZ3JvdXBOYW1lICE9IFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0FwcGxpY2F0aW9uIEdyb3VwcyBtaWdodCBub3QgaGF2ZSBhbnkgcG9saWNpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZW0gc28gZGVmaW5lIGFuIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFwcGxpY2F0aW9uZ3JvdXAucG9saWNpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBsaWNhdGlvbmdyb3VwLnBvbGljaWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRSdWxlcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGdldElzb2xhdGlvblBvbGljaWVzKCk7XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDonYXBwbGljYXRpb25ncm91cHMvaXNvbGF0aW9ucG9saWN5Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcblxuXG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5kYXNoYm9hcmQnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5kYXNoYm9hcmQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rhc2hib2FyZEN0cmwgYXMgZGFzaGJvYXJkQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdkYXNoYm9hcmQvZGFzaGJvYXJkLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsXG4gICAgICAgIFtcbiAgICAgICAgICAgICckc2NvcGUnLFxuICAgICAgICAgICAgJyRpbnRlcnZhbCcsXG4gICAgICAgICAgICAnTm9kZXNNb2RlbCcsXG4gICAgICAgICAgICAnTmV0d29ya3NNb2RlbCcsXG4gICAgICAgICAgICAnVm9sdW1lc01vZGVsJyxcbiAgICAgICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgICAgICdQb2xpY2llc01vZGVsJyxcbiAgICAgICAgICAgICdTdG9yYWdlUG9saWNpZXNNb2RlbCcsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbCxcbiAgICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXNoYm9hcmRDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERhc2hib2FyZEluZm8ocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5vZGVzID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5uZXR3b3JrcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC52b2x1bWVzID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5ncm91cHMgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtwb2xpY2llcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLnN0b3JhZ2Vwb2xpY2llcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1dpbGwgZGlzcGxheSAwIGlmIHRoZXJlIGlzIGVycm9yIGZldGNoaW5nIGRhdGFcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5vZGVzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLnZvbHVtZXMgPSAwO1xuICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwuZ3JvdXBzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLm5ldHdvcmtwb2xpY2llcyA9IDA7XG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5zdG9yYWdlcG9saWNpZXMgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICAgICAgZ2V0RGFzaGJvYXJkSW5mbyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldERhc2hib2FyZEluZm8odHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubG9naW4nKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubG9naW4nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsb2dpbi9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsIGFzIGxvZ2luQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc3RhdGUnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGxvZ2luQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvRGFzaGJvYXJkKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuZGFzaGJvYXJkJywge3VzZXJuYW1lOiBsb2dpbkN0cmwudXNlcm5hbWV9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbG9naW4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9EYXNoYm9hcmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihsb2dpbkN0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGxvZ2luQ3RybCk7XG4gICAgICAgICAgICBsb2dpbkN0cmwubG9naW4gPSBsb2dpbjtcblxuICAgICAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1lbnUnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbScsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtZW51L21lbnUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ01lbnVDdHJsIGFzIG1lbnVDdHJsJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHt1c2VybmFtZTogbnVsbH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTWVudUN0cmwnLCBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgdmFyIG1lbnVDdHJsID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5sb2dpbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVudUN0cmwudXNlcm5hbWUgPSAkc3RhdGVQYXJhbXMudXNlcm5hbWU7XG4gICAgICAgIG1lbnVDdHJsLmxvZ291dCA9IGxvZ291dDtcblxuICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzI0LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2Lm5ldHdvcmtwb2xpY2llc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZCYW5kd2lkdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5Oic9JyxcbiAgICAgICAgICAgICAgICBtb2RlOlwiQFwiXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYmFuZHdpZHRoUG9saWN5LmJhbmR3aWR0aCAhPSAnJyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYW5kd2lkdGhBcnJheSA9IHNjb3BlLmJhbmR3aWR0aFBvbGljeS5iYW5kd2lkdGguc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmJhbmR3aWR0aFBvbGljeS5iYW5kd2lkdGhOdW1iZXIgPSBOdW1iZXIoYmFuZHdpZHRoQXJyYXlbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5iYW5kd2lkdGhQb2xpY3kuYmFuZHdpZHRoVW5pdCA9IGJhbmR3aWR0aEFycmF5WzFdO1xuXG4gICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aC5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG4iLCIvKlxuLyoqXG4gKiBDcmVhdGVkIGJ5IGhhcmRpayBnYW5kaGkgb24gNi8xNC8xNi5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsIGFzIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9iYW5kd2lkdGhwb2xpY3ljcmVhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsJ05ldHByb2ZpbGVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIE5ldHByb2ZpbGVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvUG9saWNpZXMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdC5iYW5kd2lkdGgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ3JlYXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsKTtcblxuICAgICAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeS5rZXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgTmV0cHJvZmlsZXNNb2RlbC5nZW5lcmF0ZUtleShiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeS5iYW5kd2lkdGggPSBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeS5iYW5kd2lkdGhOdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgXCIrIGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmJhbmR3aWR0aFVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmNyZWF0ZShiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLm5ld1BvbGljeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZU5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0ZW5hbnROYW1lOiAnZGVmYXVsdCcsIC8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aDogJycsXG4gICAgICAgICAgICAgICAgICAgIERTQ1A6ICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5Q3JlYXRlQ3RybC5jcmVhdGVQb2xpY3kgPSBjcmVhdGVQb2xpY3k7XG4gICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lDcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG5cbiAgICAgICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgICB9XSk7XG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGhhcmRpayBnYW5kaGkgb24gNi8xNi8xNi5cbiAqL1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCBhcyBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoLmVkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2VkaXQvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0JhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsIGFzIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvYmFuZHdpZHRocG9saWN5ZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0JhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgICAgICdOZXRwcm9maWxlc01vZGVsJyxcbiAgICAgICAgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBOZXRwcm9maWxlc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwuYmFuZHdpZHRoUHJvZmlsZXMgPSBbXTtcblxuICAgICAgICAgICAgLyogR2V0IHBhcnRpY3VsYXIgUHJvZmlsZSBmb3IgYmFzZWQgb24ga2V5Ki9cbiAgICAgICAgICAgIE5ldHByb2ZpbGVzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwucG9saWN5ID0gcG9saWN5O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRvIHNob3cgZWRpdCBvciBkZXRhaWxzIHNjcmVlbiBiYXNlZCBvbiB0aGUgcm91dGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0TW9kZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmlzKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoLmVkaXQnKSkge1xuICAgICAgICAgICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLm1vZGUgPSAnZGV0YWlscyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgTmV0cHJvZmlsZXNNb2RlbC5kZWxldGVVc2luZ0tleShiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kua2V5LCAnbmFtZScpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvUG9saWNpZXMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdC5iYW5kd2lkdGgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5kZXRhaWxzJywgeydrZXknOiBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgLy9mb3JtIGNvbnRyb2xsZXIgaXMgaW5qZWN0ZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmIChiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLnBvbGljeS5iYW5kd2lkdGggPSBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuYmFuZHdpZHRoTnVtYmVyICsgXCIgXCIgKyBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuYmFuZHdpZHRoVW5pdDtcbiAgICAgICAgICAgICAgICAgICAgTmV0cHJvZmlsZXNNb2RlbC5zYXZlKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsLnBvbGljeSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvUG9saWN5RGV0YWlscygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGJhbmR3aWR0aFBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlUG9saWN5ID0gZGVsZXRlUG9saWN5O1xuICAgICAgICAgICAgYmFuZHdpZHRoUG9saWN5RGV0YWlsc0N0cmwuc2F2ZVBvbGljeSA9IHNhdmVQb2xpY3k7XG4gICAgICAgICAgICBiYW5kd2lkdGhQb2xpY3lEZXRhaWxzQ3RybC5jYW5jZWxFZGl0aW5nID0gY2FuY2VsRWRpdGluZztcblxuICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgaGFyZGlrIGdhbmRoaSBvbiA2LzE0LzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuYmFuZHdpZHRoJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9iYW5kd2lkdGgnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYW5kd2lkdGhQb2xpY3lMaXN0Q3RybCBhcyBiYW5kd2lkdGhQb2xpY3lMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2JhbmR3aWR0aHBvbGljeWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQmFuZHdpZHRoUG9saWN5TGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdOZXRwcm9maWxlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBOZXRwcm9maWxlc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHBvbGljaWVzTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2xpY2llcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBOZXRwcm9maWxlc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIocG9saWNpZXNMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY2llc0xpc3RDdHJsLnBvbGljaWVzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ3Byb2ZpbGVOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IHN0YXJ0IGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzEwLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsIGFzIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3ljcmVhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignSXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJ1BvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCBQb2xpY2llc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICB2YXIgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuaXNvbGF0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgIHJldHVyblRvUG9saWNpZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgIGlmIChpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmtleSA9XG4gICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2VuZXJhdGVLZXkoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kpO1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuY3JlYXRlKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5ID0ge1xuICAgICAgICAgICAgICAgIHBvbGljeU5hbWU6ICcnLFxuICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5jcmVhdGVQb2xpY3kgPSBjcmVhdGVQb2xpY3k7XG4gICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICByZXNldEZvcm0oKTtcbiAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeURldGFpbHNDdHJsIGFzIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5ZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRpdC86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnSXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwgYXMgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3lkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignSXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwnLCBbXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgJ1BvbGljaWVzTW9kZWwnLFxuICAgICAgICAnUnVsZXNNb2RlbCcsXG4gICAgICAgICdOZXR3b3Jrc01vZGVsJyxcbiAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLFxuICAgICAgICAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFBvbGljaWVzTW9kZWwsIFJ1bGVzTW9kZWwsIE5ldHdvcmtzTW9kZWwsIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV0d29ya3MgPSBbXTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXBzID0gW107XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0lQQWRkcmVzc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAgPSAnJztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwID0gJyc7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkTmV0d29yayA9ICcnO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZE5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnZhbGlkYXRlQ0lEUkZsYWcgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QuaXNvbGF0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvUG9saWN5RGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZGV0YWlscycsIHtrZXk6IGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeS5rZXl9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsRWRpdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHbyBiYWNrIHRvIHBvbGljeSBkZXRhaWxzIGFmdGVyIGRvbmUgZWRpdGluZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBkb25lRWRpdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlUG9saWN5KCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZGVsZXRlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljaWVzKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyBzaG93IGVkaXQgb3IgZGV0YWlscyBzY3JlZW4gYmFzZWQgb24gdGhlIHJvdXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubW9kZSA9ICdlZGl0JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXROZXdJbmNvbWluZ1J1bGUoKSB7XG4gICAgICAgICAgICAgICAgLy9SdWxlIG9iamVjdCB0byBiZSBjcmVhdGVkIG9uIHNlcnZlclxuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcnVsZUlkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2FsbG93JywvL3RvIG1ha2UgaXQgZGVmYXVsdCBzZWxlY3RlZCBvcHRpb24gaW4gVUlcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZHBvaW50R3JvdXA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBmcm9tTmV0d29yazogJycsXG4gICAgICAgICAgICAgICAgICAgIGZyb21JcEFkZHJlc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogJ3RjcCcsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIHBvcnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2luJyxcbiAgICAgICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICBwb2xpY3lOYW1lOiBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kucG9saWN5TmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAgPSAnJztcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkTmV0d29yayA9ICcnO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nSVBBZGRyZXNzU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnZhbGlkYXRlQ0lEUkZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXROZXdPdXRnb2luZ1J1bGUoKSB7XG4gICAgICAgICAgICAgICAgLy9SdWxlIG9iamVjdCB0byBiZSBjcmVhdGVkIG9uIHNlcnZlclxuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcnVsZUlkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2FsbG93JywvL3RvIG1ha2UgaXQgZGVmYXVsdCBzZWxlY3RlZCBvcHRpb24gaW4gVUlcbiAgICAgICAgICAgICAgICAgICAgdG9FbmRwb2ludEdyb3VwOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdG9OZXR3b3JrOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdG9JcEFkZHJlc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogJ3RjcCcsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIHBvcnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ291dCcsXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5TmFtZTogaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LnBvbGljeU5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwID0gJyc7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZE5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0lQQWRkcmVzc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29ycmVjdENJRFIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC52YWxpZGF0ZUNJRFJGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IG5ldHdvcmsgbmFtZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ldHdvcmtzKCkge1xuICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vXy5maWx0ZXIoKSByZXR1cm5zIGEgbmV3IGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ldHdvcmtzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBhcHBsaWNhdGlvbiBncm91cCBuYW1lcyBmb3IgdGhlIGdpdmVuIHRlbmFudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXBwbGljYXRpb25Hcm91cHMoKSB7XG4gICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbC5nZXQoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL18uZmlsdGVyKCkgcmV0dXJucyBhIG5ldyBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cHMgPSBfLmZpbHRlcihyZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlciB0byBkaXNhYmxlIG5ldHdvcmsgc2VsZWN0aW9uIGJveCBvbmNlIGFwcGxpY2F0aW9uIGdyb3VwIGlzIHNlbGVjdGVkIHdoaWxlIGNyZWF0aW5nIGEgbmV3XG4gICAgICAgICAgICAgKiBydWxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNoYW5nZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIGFwcGxpY2F0aW9uIGdyb3VwIGhhcyBiZWVuIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS50b0VuZHBvaW50R3JvdXAgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAuZ3JvdXBOYW1lO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9OZXR3b3JrID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vV2hlbiAnbm9uZScgaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvRW5kcG9pbnRHcm91cCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXIgdG8gZGlzYWJsZSBuZXR3b3JrIHNlbGVjdGlvbiBib3ggb25jZSBhcHBsaWNhdGlvbiBncm91cCBpcyBzZWxlY3RlZCB3aGlsZSBjcmVhdGluZyBhIG5ld1xuICAgICAgICAgICAgICogcnVsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VJbmNvbWluZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9JZiBhcHBsaWNhdGlvbiBncm91cCBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUVuZHBvaW50R3JvdXAgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAuZ3JvdXBOYW1lO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbU5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9XaGVuICdub25lJyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUVuZHBvaW50R3JvdXAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlciB0byBkaXNhYmxlIGFwcGxpY2F0aW9uIGdyb3VwIHNlbGVjdGlvbiBib3ggb25jZSBuZXR3b3JrIGlzIHNlbGVjdGVkIHdoaWxlIGNyZWF0aW5nIGEgbmV3XG4gICAgICAgICAgICAgKiBydWxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNoYW5nZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZE5ldHdvcmshPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vSWYgbmV0d29yayBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9OZXR3b3JrID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWROZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUuVG9FbmRwb2ludEdyb3VwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS50b0lwQWRkcmVzcyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ0lQQWRkcmVzc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFdmVudCBoYW5kbGVyIHRvIGRpc2FibGUgYXBwbGljYXRpb24gZ3JvdXAgc2VsZWN0aW9uIGJveCBvbmNlIG5ldHdvcmsgaXMgc2VsZWN0ZWQgd2hpbGUgY3JlYXRpbmcgYSBuZXdcbiAgICAgICAgICAgICAqIHJ1bGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uQ2hhbmdlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkTmV0d29yayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vSWYgbmV0d29yayBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbU5ldHdvcmsgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZE5ldHdvcms7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5mcm9tRW5kcG9pbnRHcm91cCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nSVBBZGRyZXNzU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbU5ldHdvcmsgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdJUEFkZHJlc3NTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2VuZXJhdGVzIHJ1bGUgaWRcbiAgICAgICAgICAgICAqIFRPRE8gTWFrZSBpdCBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmdlciBvbmNlIHdlIGhhdmUgbXVsdGlwbGUgdXNlcnMgdXBkYXRpbmcgc2FtZSBwb2xpY3lcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVSdWxlSWQocnVsZSkge1xuICAgICAgICAgICAgICAgIHJ1bGUucnVsZUlkID1cbiAgICAgICAgICAgICAgICAgICAgKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29taW5nUnVsZXMubGVuZ3RoICsgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub3V0Z29pbmdSdWxlcy5sZW5ndGggKyAxKS50b1N0cmluZygpICsgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgRGF0ZS5ub3coKS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bGUgaXMgc2F2ZWQgdG8gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZEluY29taW5nUnVsZSgpIHtcbiAgICAgICAgICAgICAgICBpZih2YWxpZGF0ZUNJRFIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmZyb21JcEFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVSdWxlSWQoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlLmtleSA9IFJ1bGVzTW9kZWwuZ2VuZXJhdGVLZXkoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5jcmVhdGUoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb21pbmdSdWxlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE5ld0luY29taW5nUnVsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VJbmNvbWluZ0lQQWRkcmVzcygpe1xuICAgICAgICAgICAgICAgIGlmKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5mcm9tSXBBZGRyZXNzID09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnZhbGlkYXRlQ0lEUkZsYWcgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUil7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ0lEUihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUlwQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNoYW5nZU91dGdvaW5nSVBBZGRyZXNzKCl7XG4gICAgICAgICAgICAgICAgaWYoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvSXBBZGRyZXNzID09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnZhbGlkYXRlQ0lEUkZsYWcgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUil7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ0lEUihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9JcEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVDSURSKGlwYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHZhciBjaWRyUGF0dGVybiA9IG5ldyBSZWdFeHAoQ29udGl2R2xvYmFscy5DSURSX1JFR0VYKTtcblxuICAgICAgICAgICAgICAgIGlmKGlwYWRkcmVzcyA9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjaWRyUGF0dGVybi50ZXN0KGlwYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb3JyZWN0Q0lEUiA9IHRydWU7XG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwudmFsaWRhdGVDSURSRmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bGUgaXMgc2F2ZWQgdG8gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZE91dGdvaW5nUnVsZSgpIHtcbiAgICAgICAgICAgICAgICBpZih2YWxpZGF0ZUNJRFIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvSXBBZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlUnVsZUlkKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS5rZXkgPSBSdWxlc01vZGVsLmdlbmVyYXRlS2V5KGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuY3JlYXRlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm91dGdvaW5nUnVsZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXROZXdPdXRnb2luZ1J1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVsZXRlIGluY29taW5nIHJ1bGUgZnJvbSBzZXJ2ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlSW5jb21pbmdSdWxlKGtleSkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZGVsZXRlVXNpbmdLZXkoa2V5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29taW5nUnVsZXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5rZXkgPT0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlbGV0ZSBvdXRnb2luZyBydWxlIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU91dGdvaW5nUnVsZShrZXkpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmRlbGV0ZVVzaW5nS2V5KGtleSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vdXRnb2luZ1J1bGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ua2V5ID09IGtleTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRJbmNvbWluZ1J1bGVzKHBvbGljeS5wb2xpY3lOYW1lLCAnZGVmYXVsdCcpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb21pbmdSdWxlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3SW5jb21pbmdSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldE91dGdvaW5nUnVsZXMocG9saWN5LnBvbGljeU5hbWUsICdkZWZhdWx0JykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vdXRnb2luZ1J1bGVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXROZXdPdXRnb2luZ1J1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdldE5ldHdvcmtzKCk7XG4gICAgICAgICAgICBnZXRBcHBsaWNhdGlvbkdyb3VwcygpO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlUG9saWN5ID0gZGVsZXRlUG9saWN5O1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlSW5jb21pbmdSdWxlID0gZGVsZXRlSW5jb21pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlT3V0Z29pbmdSdWxlID0gZGVsZXRlT3V0Z29pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuYWRkSW5jb21pbmdSdWxlID0gYWRkSW5jb21pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuYWRkT3V0Z29pbmdSdWxlID0gYWRkT3V0Z29pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZG9uZUVkaXRpbmcgPSBkb25lRWRpdGluZztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuICAgICAgICAgICAgLy9FdmVudCBIYW5kbGVyc1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub25DaGFuZ2VPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSBvbkNoYW5nZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbjtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gb25DaGFuZ2VJbmNvbWluZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb247XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vbkNoYW5nZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IG9uQ2hhbmdlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub25DaGFuZ2VJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24gPSBvbkNoYW5nZUluY29taW5nTmV0d29ya1NlbGVjdGlvbjtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlSW5jb21pbmdJUEFkZHJlc3MgPSBvbkNoYW5nZUluY29taW5nSVBBZGRyZXNzO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub25DaGFuZ2VPdXRnb2luZ0lQQWRkcmVzcyA9IG9uQ2hhbmdlT3V0Z29pbmdJUEFkZHJlc3M7XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdC5pc29sYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2lzb2xhdGlvbicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeUxpc3RDdHJsIGFzIGlzb2xhdGlvblBvbGljeUxpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdJc29sYXRpb25Qb2xpY3lMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1BvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgcG9saWNpZXNMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBvbGljaWVzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWNpZXNMaXN0Q3RybC5wb2xpY2llcyA9ICRmaWx0ZXIoJ29yZGVyQnknKShyZXN1bHQsICdwb2xpY3lOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHBvbGljaWVzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXRQb2xpY2llcyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBzdGFydCBhdXRvLXJlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9saWNpZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOZXR3b3JrUG9saWNpZXNUYWJzQ3RybCBhcyBuZXR3b3JrUG9saWNpZXNUYWJzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL25ldHdvcmtwb2xpY2llc3RhYnMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0LnJlZGlyZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9yZWRpcmVjdGlvbicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsJywgWyckc3RhdGUnLGZ1bmN0aW9uICgkc3RhdGUpIHtcbiAgICAgICAgdmFyIG5ldHdvcmtQb2xpY2llc1RhYnNDdHJsID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU5ldHdvcmtQb2xpY3koKSB7XG4gICAgICAgICAgICBpZigkc3RhdGUuJGN1cnJlbnQuaW5jbHVkZXNbJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0Lmlzb2xhdGlvbiddKXtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uY3JlYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZigkc3RhdGUuJGN1cnJlbnQuaW5jbHVkZXNbJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0LmJhbmR3aWR0aCddKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoLmNyZWF0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmV0d29ya1BvbGljaWVzVGFic0N0cmwuY3JlYXRlTmV0d29ya1BvbGljeSA9IGNyZWF0ZU5ldHdvcmtQb2xpY3k7XG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAyLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2NyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya0NyZWF0ZUN0cmwgYXMgbmV0d29ya0NyZWF0ZUN0cmwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ05ldHdvcmtzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIE5ldHdvcmtzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgbmV0d29ya0NyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwuY2lkclBhdHRlcm4gPSBDb250aXZHbG9iYWxzLkNJRFJfUkVHRVg7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvTmV0d29ya3MoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3Jrcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvTmV0d29ya3MoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTmV0d29yaygpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay5rZXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay50ZW5hbnROYW1lICsgJzonICsgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay5uZXR3b3JrTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5jcmVhdGUobmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yaykudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvTmV0d29ya3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5ldHdvcmtDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yayA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBlbmNhcDogJ3Z4bGFuJyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheTogJycsXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwuY3JlYXRlTmV0d29yayA9IGNyZWF0ZU5ldHdvcms7XG4gICAgICAgICAgICBuZXR3b3JrQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtEZXRhaWxzQ3RybCBhcyBuZXR3b3JrRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2RldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMuaW5mbycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3Jrcy9uZXR3b3JraW5mby5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtEZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnTmV0d29ya3NNb2RlbCcsICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE5ldHdvcmtzTW9kZWwsIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ldHdvcmtEZXRhaWxzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05ldHdvcmtzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmxpc3QnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVOZXR3b3JrKCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5kZWxldGUobmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmspLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9OZXR3b3JrcygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5ldHdvcmtEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogR2V0IGFwcGxpY2F0aW9uIGdyb3VwcyBiZWxvbmdpbmcgdG8gYSBuZXR3b3JrXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXBwbGljYXRpb25Hcm91cHMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0KHJlbG9hZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cHMgPSAkZmlsdGVyKCdvcmRlckJ5JykoXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25ldHdvcmtOYW1lJzogbmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmsubmV0d29ya05hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAnZ3JvdXBOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IobmV0d29ya0RldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobmV0d29yaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0RldGFpbHNDdHJsLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QXBwbGljYXRpb25Hcm91cHMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzQ3RybC5kZWxldGVOZXR3b3JrID0gZGVsZXRlTmV0d29yaztcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QXBwbGljYXRpb25Hcm91cHModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOZXR3b3Jrc0xpc3RDdHJsIGFzIG5ldHdvcmtzTGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2xpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTmV0d29ya3NMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ05ldHdvcmtzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE5ldHdvcmtzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgbmV0d29ya3NMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ldHdvcmtzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya3NMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya3NMaXN0Q3RybC5uZXR3b3JrcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya3NMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXROZXR3b3JrcyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXROZXR3b3Jrcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiA2LzIzLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MuZGV0YWlscy5zdGF0cycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RhdHMnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOZXR3b3JrU3RhdHNDdHJsIGFzIG5ldHdvcmtTdGF0c0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya3N0YXRzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtTdGF0c0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ05ldHdvcmtzTW9kZWwnLCAnSW5zcGVjdFNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgTmV0d29ya3NNb2RlbCwgSW5zcGVjdFNlcnZpY2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBuZXR3b3JrU3RhdHNDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8qIEdldHMgdGhlIE5ldHdvcmsgT3BlcmF0aW9uYWwgc3RhdGUgZnJvbSB0aGUgc2VydmVyICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0d29ya0luc3BlY3QocmVmcmVzaCl7XG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZ2V0SW5zcGVjdEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXksIENvbnRpdkdsb2JhbHMuTkVUV09SS1NfSU5TUEVDVF9FTkRQT0lOVCwgcmVmcmVzaClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHNDdHJsLm5ldHdvcmtJbnNwZWN0U3RhdHMgPSByZXN1bHQuT3BlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHNDdHJsLmNvbmZpZyA9IHJlc3VsdC5Db25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0Lk9wZXIuZW5kcG9pbnRzIT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyRGV0YWlscyA9IEluc3BlY3RTZXJ2aWNlLmJ1aWxkRW5kUG9pbnRzKHJlc3VsdC5PcGVyLmVuZHBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKEluc3BlY3RTZXJ2aWNlLmNoZWNrQ29udGFpbmVyQ2hhbmdlZChuZXR3b3JrU3RhdHNDdHJsLmNvbnRhaW5lckRldGFpbHMsY29udGFpbmVyRGV0YWlscykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0YXRzQ3RybC5lbmRwb2ludHMgPSByZXN1bHQuT3Blci5lbmRwb2ludHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHNDdHJsLmNvbnRhaW5lckRldGFpbHMgPSBjb250YWluZXJEZXRhaWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0c0N0cmwuZW5kcG9pbnRzID0gW11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0YXRzQ3RybC5jb250YWluZXJEZXRhaWxzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2V0TmV0d29ya0luc3BlY3QoZmFsc2UpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TmV0d29ya0luc3BlY3QodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pOyIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnKVxuICAgIC5mYWN0b3J5KCdCZ3BTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRCZ3AoY3RybCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLkJHUFNfRU5EUE9JTlQgKyBjdHJsLmtleSArICcvJztcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGN0cmwubmVpZ2hib3IgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICBjdHJsLm5laWdoYm9ycy5wdXNoKHsnbmFtZSc6IGN0cmwubmVpZ2hib3JbJ25laWdoYm9yJ10sICd2YWx1ZSc6IGN0cmwubmVpZ2hib3JbJ25laWdoYm9yLWFzJ119KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVCZ3AoY3RybCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuQkdQU19FTkRQT0lOVCArIGN0cmwua2V5ICsgJy8nO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QodXJsLCBjdHJsLm5laWdoYm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRCZ3BJbnNwZWN0KGtleSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLkJHUFNfSU5TUEVDVF9FTkRQT0lOVCArIGtleSArICcvJztcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0QmdwOiBnZXRCZ3AsXG4gICAgICAgICAgICB1cGRhdGVCZ3A6IHVwZGF0ZUJncCxcbiAgICAgICAgICAgIGdldEJncEluc3BlY3Q6IGdldEJncEluc3BlY3RcbiAgICAgICAgfVxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZShcImNvbnRpdi5ub2Rlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZMb2dzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL2xvZ3MuaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvZzogXCI9XCIsXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiQFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmZhY3RvcnkoJ0xvZ1NlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICBmdW5jdGlvbiBnZXRBY3RpdmVMb2dzKCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0FDVElWRV9KT0JfRU5EUE9JTlQ7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRMYXN0TG9ncygpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5OT0RFU19MQVNUX0pPQl9FTkRQT0lOVDtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRBY3RpdmVMb2dzOiBnZXRBY3RpdmVMb2dzLFxuICAgICAgICAgICAgZ2V0TGFzdExvZ3M6IGdldExhc3RMb2dzXG4gICAgICAgIH1cbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmFjdGl2ZWxvZycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvYWN0aXZlbG9nJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZUFjdGl2ZUpvYkxvZ3NDdHJsIGFzIG5vZGVBY3RpdmVKb2JMb2dzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8Y3R2LWxvZ3MgdGl0bGU9XCJBY3RpdmUgSm9iXCIgbG9nPVwibm9kZUFjdGl2ZUpvYkxvZ3NDdHJsLmFjdGl2ZUxvZ3NcIj48L2N0di1sb2dzPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUFjdGl2ZUpvYkxvZ3NDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJ0xvZ1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsIExvZ1NlcnZpY2UpIHtcbiAgICAgICAgdmFyIG5vZGVBY3RpdmVKb2JMb2dzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZlTG9ncygpIHtcbiAgICAgICAgICAgIExvZ1NlcnZpY2UuZ2V0QWN0aXZlTG9ncygpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG5vZGVBY3RpdmVKb2JMb2dzQ3RybC5hY3RpdmVMb2dzID0gcmVzdWx0O1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL09uY2UgdGhlIGpvYiBmaW5pc2hlcywgZW5kcG9pbnQgcmV0dXJucyA1MDAgZXJyb3IuIFNvIHJlc2V0IHRoZSBhY3RpdmVMb2dzXG4gICAgICAgICAgICAgICAgbm9kZUFjdGl2ZUpvYkxvZ3NDdHJsLmFjdGl2ZUxvZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICdUaGVyZSBpcyBjdXJyZW50bHkgbm8gYWN0aXZlIGpvYi4gQ2hlY2sgTGFzdCBKb2IgZm9yIGEgam9iIHRoYXQgcmVjZW50bHkgZmluaXNoZWQuJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBnZXRBY3RpdmVMb2dzKCk7XG5cbiAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdldEFjdGl2ZUxvZ3MoKTtcbiAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMjUvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5ub2Rlcy5jb21taXNzaW9uJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jb21taXNzaW9uLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOb2RlQ29tbWlzc2lvbkN0cmwgYXMgbm9kZUNvbW1pc3Npb25DdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL25vZGVjb21taXNzaW9uLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05vZGVDb21taXNzaW9uQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnTm9kZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsICdOb2Rlc1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIE5vZGVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlLCBOb2Rlc1NlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBub2RlQ29tbWlzc2lvbkN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05vZGVEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5pbmZvJywgeydrZXknOiAkc3RhdGVQYXJhbXMua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENvbW1pc3Npb25pbmdOb2RlKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvTm9kZURldGFpbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tbWlzc2lvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZUNvbW1pc3Npb25DdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwubm9kZU9wc09iai5ub2RlcyA9IFskc3RhdGVQYXJhbXMua2V5XTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNsZWFudXBFeHRyYVZhcnMobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNyZWF0ZUV4dHJhVmFycyhub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmNvbW1pc3Npb24obm9kZUNvbW1pc3Npb25DdHJsLm5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Ob2RlRGV0YWlscygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5vZGVDb21taXNzaW9uQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwubm9kZU9wc09iaiA9IHt9O1xuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmV4dHJhX3ZhcnMgPSB7fTsgLy9UT0RPIEludGlhbGl6ZSBmcm9tIGdsb2JhbCBzZXR0aW5nc1xuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmFuc2libGVWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5lbnZWYXJpYWJsZXMgPSBbXTtcblxuICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmdldFNldHRpbmdzKG5vZGVDb21taXNzaW9uQ3RybCk7XG5cbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5jYW5jZWxDb21taXNzaW9uaW5nTm9kZSA9IGNhbmNlbENvbW1pc3Npb25pbmdOb2RlO1xuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmNvbW1pc3Npb24gPSBjb21taXNzaW9uO1xuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzI1LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5pbmZvJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9pbmZvJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlaW5mby5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5zdGF0cycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RhdHMnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOb2RlRGV0YWlsc0N0cmwgYXMgbm9kZURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL25vZGVzdGF0cy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5sb2dzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9sb2dzJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlbG9ncy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGl0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlaW5mby5odG1sJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZURldGFpbHNDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRzY29wZScsICckaW50ZXJ2YWwnLCAnTm9kZXNNb2RlbCcsICdCZ3BTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgTm9kZXNNb2RlbCwgQmdwU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVEZXRhaWxzQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubnVtYmVycGF0dGVybiA9IENvbnRpdkdsb2JhbHMuTlVNQkVSX1JFR0VYO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWNvbW1pc3Npb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVPcHNPYmogPSB7XG4gICAgICAgICAgICAgICAgICBub2RlczogWyRzdGF0ZVBhcmFtcy5rZXldXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmRlY29tbWlzc2lvbihub2RlT3BzT2JqKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9EaXNhYmxlIGFsbCBidXR0b25zIGluaXRpYWxseS4gUG9sbCB3aWxsIGFzc2lnbiB2YWx1ZXMgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBncmFkZSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU9wc09iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IFskc3RhdGVQYXJhbXMua2V5XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTm9kZXNNb2RlbC51cGdyYWRlKG5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvL0Rpc2FibGUgYWxsIGJ1dHRvbnMgaW5pdGlhbGx5LiBQb2xsIHdpbGwgYXNzaWduIHZhbHVlcyBhcHByb3ByaWF0ZWx5LlxuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERpc3BsYXkgYnV0dG9ucyBiYXNlZCBvbiBzdGF0dXMgb2Ygbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRCdXR0b25EaXNwbGF5KCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZURldGFpbHNDdHJsLm5vZGVbJ2ludmVudG9yeV9zdGF0ZSddLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdVbmFsbG9jYXRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RlY29tbWlzc2lvbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUHJvdmlzaW9uaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FsbG9jYXRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NhbmNlbGxlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTWFpbnRlbmFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDovL0NsdXN0ZXIgc2hvdWxkIG5vdCBiZSBpbiB0aGlzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZUluZm8ocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgTm9kZXNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXksIHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1dHRvbkRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUubm9kZXMuZGV0YWlscy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm1vZGUgPSAnZGV0YWlscyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0luZm8oKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5ub2Rlcy5kZXRhaWxzLmluZm8nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlQmdwSW5mbygpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZURldGFpbHNDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5uZWlnaGJvci5rZXkgPSAkc3RhdGVQYXJhbXMua2V5O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJhY2tlbmQgb25seSBzdXBwb3J0cyBhZGRpbmcgb25lIG5laWdoYm9yIGN1cnJlbnRseVxuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3JzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5uZWlnaGJvclsnbmVpZ2hib3InXSA9IGl0ZW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5uZWlnaGJvclsnbmVpZ2hib3ItYXMnXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIEJncFNlcnZpY2UudXBkYXRlQmdwKG5vZGVEZXRhaWxzQ3RybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3IgPSByZXN1bHQuY29uZmlnLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub0luZm8oKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJncEluZm8oKSB7XG4gICAgICAgICAgICAgICAgQmdwU2VydmljZS5nZXRCZ3Aobm9kZURldGFpbHNDdHJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLm5laWdoYm9yID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJncEluc3BlY3QoKSB7XG4gICAgICAgICAgICAgICAgQmdwU2VydmljZS5nZXRCZ3BJbnNwZWN0KCRzdGF0ZVBhcmFtcy5rZXkpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuaW5zcGVjdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnJvdXRlcyA9IHJlc3VsdC5PcGVyLnJvdXRlcztcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmZpbHRlcmVkcm91dGVzID0gcmVzdWx0Lk9wZXIucm91dGVzO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5kZWNvbW1pc3Npb24gPSBkZWNvbW1pc3Npb247XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZSA9IHVwZ3JhZGU7XG5cbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zZXRNb2RlID0gc2V0TW9kZTtcbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGRhdGVCZ3BJbmZvID0gdXBkYXRlQmdwSW5mbztcbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5yZXR1cm5Ub0luZm8gPSByZXR1cm5Ub0luZm87XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3JzID0gW107XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwubmVpZ2hib3IgPSB7fTtcbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5rZXkgPSAkc3RhdGVQYXJhbXMua2V5O1xuICAgICAgICAgICAgZ2V0QmdwSW5mbygpO1xuICAgICAgICAgICAgZ2V0QmdwSW5zcGVjdCgpO1xuICAgICAgICAgICAgc2V0TW9kZSgpO1xuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldE5vZGVJbmZvKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXROb2RlSW5mbyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzE0LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5ub2Rlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOb2Rlc3RhdHVzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbm9kZTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2Rlc3RhdHVzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOb2Rlc3RhdGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBub2RlOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vZGVzL25vZGVzdGF0ZS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRpc2NvdmVyJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kaXNjb3ZlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEaXNjb3ZlckN0cmwgYXMgbm9kZURpc2NvdmVyQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlZGlzY292ZXIuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZURpc2NvdmVyQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnTm9kZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsICdOb2Rlc1NlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIE5vZGVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlLCBOb2Rlc1NlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBub2RlRGlzY292ZXJDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Ob2RlcygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5vZGVzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsRGlzY292ZXJpbmdOb2RlKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvTm9kZXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZGlzY292ZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVEaXNjb3ZlckN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihub2RlRGlzY292ZXJDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlSVBBZGRyQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNyZWF0ZUV4dHJhVmFycyhub2RlRGlzY292ZXJDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNNb2RlbC5kaXNjb3Zlcihub2RlRGlzY292ZXJDdHJsLm5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihub2RlRGlzY292ZXJDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvTm9kZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZURpc2NvdmVyQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Iobm9kZURpc2NvdmVyQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVJUEFkZHJBcnJheSgpIHtcbiAgICAgICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLm5vZGVPcHNPYmouYWRkcnMgPSBfLndvcmRzKG5vZGVEaXNjb3ZlckN0cmwubm9kZUlQQWRkciwgL1teLCBdKy9nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZURpc2NvdmVyQ3RybC5ub2RlT3BzT2JqID0ge307XG4gICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLmV4dHJhX3ZhcnMgPSB7fTsgLy9UT0RPIEludGlhbGl6ZSBmcm9tIGdsb2JhbCBzZXR0aW5nc1xuICAgICAgICAgICAgbm9kZURpc2NvdmVyQ3RybC5hbnNpYmxlVmFyaWFibGVzID0gW107XG4gICAgICAgICAgICBub2RlRGlzY292ZXJDdHJsLmVudlZhcmlhYmxlcyA9IFtdO1xuICAgICAgICAgICAgbm9kZURpc2NvdmVyQ3RybC5ub2RlSVBBZGRyID0gJyc7IC8vSVAgYWRkcmVzcyBvZiBub2RlcyB0byBkaXNjb3ZlclxuXG4gICAgICAgICAgICBOb2Rlc1NlcnZpY2UuZ2V0U2V0dGluZ3Mobm9kZURpc2NvdmVyQ3RybCk7XG5cbiAgICAgICAgICAgIG5vZGVEaXNjb3ZlckN0cmwuZGlzY292ZXIgPSBkaXNjb3ZlcjtcbiAgICAgICAgICAgIG5vZGVEaXNjb3ZlckN0cmwuY2FuY2VsRGlzY292ZXJpbmdOb2RlID0gY2FuY2VsRGlzY292ZXJpbmdOb2RlO1xuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5vZGVEaXNjb3ZlckN0cmwpO1xuICAgICAgICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMubGFzdGxvZycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGFzdGxvZycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVMYXN0Sm9iTG9nc0N0cmwgYXMgbm9kZUxhc3RKb2JMb2dzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8Y3R2LWxvZ3MgdGl0bGU9XCJMYXN0IEpvYlwiIGxvZz1cIm5vZGVMYXN0Sm9iTG9nc0N0cmwubGFzdExvZ3NcIj48L2N0di1sb2dzPidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUxhc3RKb2JMb2dzQ3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICdMb2dTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCBMb2dTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBub2RlTGFzdEpvYkxvZ3NDdHJsID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiBnZXRMYXN0TG9ncygpIHtcbiAgICAgICAgICAgIExvZ1NlcnZpY2UuZ2V0TGFzdExvZ3MoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBub2RlTGFzdEpvYkxvZ3NDdHJsLmxhc3RMb2dzID0gcmVzdWx0O1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdldExhc3RMb2dzKCk7XG5cbiAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdldExhc3RMb2dzKCk7XG4gICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICB9XG4gICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICB9KTtcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzIyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubm9kZXMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVMaXN0Q3RybCBhcyBub2RlTGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnTm9kZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgTm9kZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgdmFyIG5vZGVMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZXMocmVsb2FkKSB7XG4gICAgICAgICAgICBOb2Rlc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVMaXN0Q3RybC5ub2RlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgZ2V0Tm9kZXMoZmFsc2UpO1xuXG4gICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBnZXROb2Rlcyh0cnVlKTtcbiAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2Lm9yZ2FuaXphdGlvbnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ29yZ2FuaXphdGlvbnMvb3JnYW5pemF0aW9uY3JlYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPcmdhbml6YXRpb25DcmVhdGVDdHJsIGFzIG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ09yZ2FuaXphdGlvbkNyZWF0ZUN0cmwnLCBbJyRzdGF0ZScsICdPcmdhbml6YXRpb25zTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCBPcmdhbml6YXRpb25zTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgb3JnYW5pemF0aW9uQ3JlYXRlQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvT3JnYW5pemF0aW9ucygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm9yZ2FuaXphdGlvbnMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub09yZ2FuaXphdGlvbnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlT3JnYW5pemF0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy9jaGVja2luZyBpZiBhbGwgdmFsaWRhdGlvbnMgaGF2ZSBwYXNzZWRcbiAgICAgICAgICAgICAgICBpZiAob3JnYW5pemF0aW9uQ3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25DcmVhdGVDdHJsLm5ld09yZ2FuaXphdGlvbi5rZXkgPSBvcmdhbml6YXRpb25DcmVhdGVDdHJsLm5ld09yZ2FuaXphdGlvbi50ZW5hbnROYW1lOyBcbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uc01vZGVsLmNyZWF0ZShvcmdhbml6YXRpb25DcmVhdGVDdHJsLm5ld09yZ2FuaXphdGlvbikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Pcmdhbml6YXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIob3JnYW5pemF0aW9uQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwubmV3T3JnYW5pemF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICB0ZW5hbnROYW1lOiAnJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbkNyZWF0ZUN0cmwuY3JlYXRlT3JnYW5pemF0aW9uID0gY3JlYXRlT3JnYW5pemF0aW9uO1xuICAgICAgICAgICAgb3JnYW5pemF0aW9uQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5vcmdhbml6YXRpb25zJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUub3JnYW5pemF0aW9ucy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPcmdhbml6YXRpb25EZXRhaWxzQ3RybCBhcyBvcmdhbml6YXRpb25EZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdvcmdhbml6YXRpb25zL29yZ2FuaXphdGlvbmRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdPcmdhbml6YXRpb25EZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdPcmdhbml6YXRpb25zTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBPcmdhbml6YXRpb25zTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvT3JnYW5pemF0aW9ucygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmxpc3QnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVPcmdhbml6YXRpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihvcmdhbml6YXRpb25EZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uc01vZGVsLmRlbGV0ZShvcmdhbml6YXRpb25EZXRhaWxzQ3RybC5vcmdhbml6YXRpb24pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25EZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub09yZ2FuaXphdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIob3JnYW5pemF0aW9uRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iob3JnYW5pemF0aW9uRGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG9yZ2FuaXphdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uRGV0YWlsc0N0cmwub3JnYW5pemF0aW9uID0gb3JnYW5pemF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbkRldGFpbHNDdHJsLmRlbGV0ZU9yZ2FuaXphdGlvbiA9IGRlbGV0ZU9yZ2FuaXphdGlvbjtcbiAgICAgICAgICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2Lm9yZ2FuaXphdGlvbnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPcmdhbml6YXRpb25zTGlzdEN0cmwgYXMgb3JnYW5pemF0aW9uc0xpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ29yZ2FuaXphdGlvbnMvb3JnYW5pemF0aW9ubGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdPcmdhbml6YXRpb25zTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdPcmdhbml6YXRpb25zTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIE9yZ2FuaXphdGlvbnNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBvcmdhbml6YXRpb25zTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRPcmdhbml6YXRpb25zKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbnNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25zTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbnNMaXN0Q3RybC5vcmdhbml6YXRpb25zID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihvcmdhbml6YXRpb25zTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0T3JnYW5pemF0aW9ucyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRPcmdhbml6YXRpb25zKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXJ2aWNlbGJzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5jcmVhdGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJjcmVhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkNyZWF0ZUN0cmwgYXMgc2VydmljZWxiQ3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU2VydmljZWxiQ3JlYXRlQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnU2VydmljZWxic01vZGVsJywgJ05ldHdvcmtzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFNlcnZpY2VsYnNNb2RlbCwgTmV0d29ya3NNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlbGJDcmVhdGVDdHJsID0gdGhpcztcbiAgICAgICAgICAgIHNlcnZpY2VsYkNyZWF0ZUN0cmwubGFiZWxTZWxlY3RvcnMgPSBbXTtcbiAgICAgICAgICAgIHNlcnZpY2VsYkNyZWF0ZUN0cmwubmV0d29ya3MgPSBbXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9TZXJ2aWNlbGJzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuc2VydmljZWxicy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvU2VydmljZWxicygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBuZXR3b3JrcyBmb3IgdGhlIGdpdmVuIHRlbmFudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0d29ya3MoKSB7XG4gICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5uZXR3b3JrcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTGFiZWxTZWxlY3RvclN0cmluZ3MoKSB7XG4gICAgICAgICAgICAgICAgLy9FbXB0eSBvdXQgdGhlIHNlbGVjdG9ycy4gSW4gY2FzZSBvZiBzZXJ2ZXIgZXJyb3JzIHRoaXMgbmVlZHMgdG8gYmUgcmVzZXQuXG4gICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzID0gW107XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlcnZpY2VsYkNyZWF0ZUN0cmwubGFiZWxTZWxlY3RvcnMsIGZ1bmN0aW9uKGxhYmVsU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yU3RyaW5nID0gbGFiZWxTZWxlY3Rvci5uYW1lICsgJz0nICsgbGFiZWxTZWxlY3Rvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzLnB1c2goc2VsZWN0b3JTdHJpbmcpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVTZXJ2aWNlbGIoKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlTGFiZWxTZWxlY3RvclN0cmluZ3MoKTtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VsYkNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzZXJ2aWNlbGJDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkNyZWF0ZUN0cmwuc2VydmljZWxiLnRlbmFudE5hbWUgKyAnOicgKyBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5zZXJ2aWNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmNyZWF0ZShzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9TZXJ2aWNlbGJzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHNlcnZpY2VsYkNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpcEFkZHJlc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBwb3J0czogW10sXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcnZpY2VsYkNyZWF0ZUN0cmwuY3JlYXRlU2VydmljZWxiID0gY3JlYXRlU2VydmljZWxiO1xuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICBnZXROZXR3b3JrcygpO1xuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXJ2aWNlbGJzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge3N0YXRlOm51bGx9LCAgICAgICAvLyBUbyByZWxvYWQgcGFyZW50IHZpZXcgXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkRldGFpbHNDdHJsIGFzIHNlcnZpY2VsYkRldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscy5pbmZvJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9pbmZvJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2VydmljZWxiRGV0YWlsc0N0cmwgYXMgc2VydmljZWxiRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2VydmljZV9sYnMvc2VydmljZWxiaW5mby5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5kZXRhaWxzLmVkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2VkaXQvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkRldGFpbHNDdHJsIGFzIHNlcnZpY2VsYkRldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmluZm8uaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTZXJ2aWNlbGJEZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdTZXJ2aWNlbGJzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBTZXJ2aWNlbGJzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VsYkRldGFpbHNDdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5sYWJlbFNlbGVjdG9ycyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVG8gc2hvdyBlZGl0IG9yIGRldGFpbHMgc2NyZWVuIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9TZXJ2aWNlbGJzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMubGlzdCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvU2VydmljZWxiRGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmRldGFpbHMuaW5mbycsIHsna2V5Jzogc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLmtleSwnc3RhdGUnOidkZXRhaWxzJ30pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblRvU2VydmljZWxiRGV0YWlscygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNlcnZpY2VsYigpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlbGJzTW9kZWwuZGVsZXRlKHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvU2VydmljZWxicygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmVTZXJ2aWNlbGIoKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nTGFiZWxzID0gc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycztcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGFiZWxTZWxlY3RvclN0cmluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLnNhdmUoc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9TZXJ2aWNlbGJEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzID0gZXhpc3RpbmdMYWJlbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVMYWJlbFNlbGVjdG9ycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxhYmVsU2VsZWN0b3JzKCkge1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycywgZnVuY3Rpb24oc2VsZWN0b3JTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzZWxlY3RvclN0ci5zcGxpdCgnPScpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxlY3RvclN0ci5zcGxpdCgnPScpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwubGFiZWxTZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxhYmVsU2VsZWN0b3JTdHJpbmdzKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZXJ2aWNlbGJEZXRhaWxzQ3RybC5sYWJlbFNlbGVjdG9ycywgZnVuY3Rpb24obGFiZWxTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yU3RyaW5nID0gbGFiZWxTZWxlY3Rvci5uYW1lICsgJz0nICsgbGFiZWxTZWxlY3Rvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnMucHVzaChzZWxlY3RvclN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhzZXJ2aWNlbGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYiA9IHNlcnZpY2VsYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxhYmVsU2VsZWN0b3JzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuc2F2ZVNlcnZpY2VsYiA9IHNhdmVTZXJ2aWNlbGI7XG4gICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuY2FuY2VsRWRpdGluZyA9IGNhbmNlbEVkaXRpbmc7XG4gICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuZGVsZXRlU2VydmljZWxiID0gZGVsZXRlU2VydmljZWxiO1xuICAgICAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXJ2aWNlbGJMaXN0Q3RybCBhcyBzZXJ2aWNlbGJMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXJ2aWNlX2xicy9zZXJ2aWNlbGJsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NlcnZpY2VsYkxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnU2VydmljZWxic01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTZXJ2aWNlbGJzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgc2VydmljZWxiTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlbGJzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiTGlzdEN0cmwuc2VydmljZWxicyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0U2VydmljZWxicyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlbGJzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzEzLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5zZXJ2aWNlbGJzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dlNlcnZpY2VsYnBvcnRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgIHJldHVybiB7XG4gICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgaXRlbXM6ICc9J1xuICAgICAgICAgICB9LFxuICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBDb21wYXJlIGlmIHR3byBpdGVtcyBoYXZlIHNhbWUgcG9ydHMgYW5kIHByb3RvY29sc1xuICAgICAgICAgICAgICAgICogQHBhcmFtIHZhbDFcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWwyXG4gICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcGFyZSh2YWwxLCB2YWwyKSB7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwxID09PSB2YWwyKTtcbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXROZXdJdGVtKCkge1xuICAgICAgICAgICAgICAgICAgIHNjb3BlLm5ld0l0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJQb3J0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICcnXG4gICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNFbXB0eUl0ZW0oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiAoaXRlbS5zZXJ2aWNlUG9ydCA9PT0gJycgJiYgaXRlbS5wcm92aWRlclBvcnQgPT09ICcnICYmIGl0ZW0ucHJvdG9jb2wgPT09ICcnKTtcbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgc2NvcGUuYWRkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgaWYgKGlzRW1wdHlJdGVtKHNjb3BlLm5ld0l0ZW0pKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLml0ZW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgdmFyIG5ld0l0ZW1TdHIgPSBzY29wZS5uZXdJdGVtLnNlcnZpY2VQb3J0ICsgJzonXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2NvcGUubmV3SXRlbS5wcm92aWRlclBvcnQgKyAnOidcbiAgICAgICAgICAgICAgICAgICAgICAgKyBzY29wZS5uZXdJdGVtLnByb3RvY29sO1xuICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlcyBleGlzdGluZyBpdGVtIHdpdGggdGhlIHNhbWUgdmFsdWUgZmlyc3QgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgICAgICAgIF8ucHVsbEFsbFdpdGgoc2NvcGUuaXRlbXMsIFtuZXdJdGVtU3RyXSwgY29tcGFyZSk7XG4gICAgICAgICAgICAgICAgICAgc2NvcGUuaXRlbXMucHVzaChuZXdJdGVtU3RyKTtcbiAgICAgICAgICAgICAgICAgICByZXNldE5ld0l0ZW0oKTtcbiAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgIHNjb3BlLnJlbW92ZSA9IGZ1bmN0aW9uKHBhc3NlZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShzY29wZS5pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmUoaXRlbSwgcGFzc2VkSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgcmVzZXROZXdJdGVtKCk7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2VydmljZV9sYnMvc2VydmljZWxicG9ydHMuaHRtbCdcbiAgICAgICB9XG4gICAgfSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgY3NoYW1wdXIgb24gNy8xNy8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXJ2aWNlbGJzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5kZXRhaWxzLnN0YXRzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zdGF0cycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYlN0YXRzQ3RybCBhcyBzZXJ2aWNlbGJTdGF0c0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2VydmljZV9sYnMvc2VydmljZWxic3RhdHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU2VydmljZWxiU3RhdHNDdHJsJyxcbiAgICAgICAgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdTZXJ2aWNlbGJzTW9kZWwnLCAnSW5zcGVjdFNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgU2VydmljZWxic01vZGVsLCBJbnNwZWN0U2VydmljZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VsYlN0YXRzQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAvKiBHZXRzIHRoZSBOZXR3b3JrIE9wZXJhdGlvbmFsIHN0YXRlIGZyb20gdGhlIHNlcnZlciAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNlcnZpY2VsYkluc3BlY3QocmVmcmVzaCl7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5nZXRJbnNwZWN0QnlLZXkoJHN0YXRlUGFyYW1zLmtleSwgQ29udGl2R2xvYmFscy5TRVJWSUNFTEJTX0lOU1BFQ1RfRU5EUE9JTlQsIHJlZnJlc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiU3RhdHNDdHJsLnNlcnZpY2VsYkluc3BlY3RTdGF0cyA9IHJlc3VsdC5PcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYlN0YXRzQ3RybC5jb25maWcgPSByZXN1bHQuQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5PcGVyLnByb3ZpZGVycyE9dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm92aWRlckRldGFpbHMgPSBJbnNwZWN0U2VydmljZS5idWlsZEVuZFBvaW50cyhyZXN1bHQuT3Blci5wcm92aWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSW5zcGVjdFNlcnZpY2UuY2hlY2tDb250YWluZXJDaGFuZ2VkKHNlcnZpY2VsYlN0YXRzQ3RybC5wcm92aWRlckRldGFpbHMsIHByb3ZpZGVyRGV0YWlscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYlN0YXRzQ3RybC5wcm92aWRlcnMgPSByZXN1bHQuT3Blci5wcm92aWRlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJTdGF0c0N0cmwucHJvdmlkZXJEZXRhaWxzID0gcHJvdmlkZXJEZXRhaWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYlN0YXRzQ3RybC5wcm92aWRlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiU3RhdHNDdHJsLnByb3ZpZGVyRGV0YWlscyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGdldFNlcnZpY2VsYkluc3BlY3QoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlbGJJbnNwZWN0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnNldHRpbmdzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5jbHVzdGVyJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jbHVzdGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ2x1c3RlclNldHRpbmdDdHJsIGFzIGNsdXN0ZXJTZXR0aW5nQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXR0aW5ncy9jbHVzdGVyc2V0dGluZ3MuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQ2x1c3RlclNldHRpbmdDdHJsJywgWyckc3RhdGVQYXJhbXMnLCAnQ1JVREhlbHBlclNlcnZpY2UnLCAnTm9kZXNTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZVBhcmFtcywgQ1JVREhlbHBlclNlcnZpY2UsIE5vZGVzU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIGNsdXN0ZXJTZXR0aW5nQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsdXN0ZXJTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2x1c3RlclNldHRpbmdDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyU2V0dGluZ0N0cmwubm9kZU9wc09iai5ub2RlcyA9IFskc3RhdGVQYXJhbXMua2V5XTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNsZWFudXBFeHRyYVZhcnMoY2x1c3RlclNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmNyZWF0ZUV4dHJhVmFycyhjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc1NlcnZpY2UudXBkYXRlU2V0dGluZ3MoY2x1c3RlclNldHRpbmdDdHJsLm5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGNsdXN0ZXJTZXR0aW5nQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbHVzdGVyU2V0dGluZ0N0cmwubm9kZU9wc09iaiA9IHt9O1xuICAgICAgICAgICAgY2x1c3RlclNldHRpbmdDdHJsLmV4dHJhX3ZhcnMgPSB7fTsgLy9UT0RPIEludGlhbGl6ZSBmcm9tIGdsb2JhbCBzZXR0aW5nc1xuICAgICAgICAgICAgY2x1c3RlclNldHRpbmdDdHJsLmFuc2libGVWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgICAgIGNsdXN0ZXJTZXR0aW5nQ3RybC5lbnZWYXJpYWJsZXMgPSBbXTtcblxuICAgICAgICAgICAgTm9kZXNTZXJ2aWNlLmdldFNldHRpbmdzKGNsdXN0ZXJTZXR0aW5nQ3RybCk7XG5cbiAgICAgICAgICAgIGNsdXN0ZXJTZXR0aW5nQ3RybC51cGRhdGVDbHVzdGVyU2V0dGluZ3MgPSB1cGRhdGVDbHVzdGVyU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoY2x1c3RlclNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihjbHVzdGVyU2V0dGluZ0N0cmwpO1xuICAgICAgICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnNldHRpbmdzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5uZXR3b3JrcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbmV0d29ya3MnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOZXR3b3JrU2V0dGluZ0N0cmwgYXMgbmV0d29ya1NldHRpbmdDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NldHRpbmdzL25ldHdvcmtzZXR0aW5ncy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOZXR3b3JrU2V0dGluZ0N0cmwnLCBbJ0NSVURIZWxwZXJTZXJ2aWNlJywgJ05ldHdvcmtTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKENSVURIZWxwZXJTZXJ2aWNlLCBOZXR3b3JrU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5ldHdvcmtTZXR0aW5nQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICBuZXR3b3JrU2V0dGluZ0N0cmwudmxhblBhdHRlcm4gPSBDb250aXZHbG9iYWxzLlZMQU5fUkVHRVg7XG4gICAgICAgICAgICBuZXR3b3JrU2V0dGluZ0N0cmwudnhsYW5QYXR0ZXJuID0gQ29udGl2R2xvYmFscy5WWExBTl9SRUdFWDtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlTmV0d29ya1NldHRpbmdzKCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrU2V0dGluZ0N0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5ldHdvcmtTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5ldHdvcmtTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmtTZXJ2aWNlLnVwZGF0ZVNldHRpbmdzKG5ldHdvcmtTZXR0aW5nQ3RybC5zZXR0aW5nKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya1NldHRpbmdDdHJsKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5ldHdvcmtTZXR0aW5nQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrU2V0dGluZ3MoKSB7XG4gICAgICAgICAgICAgICAgTmV0d29ya1NlcnZpY2UuZ2V0U2V0dGluZ3MoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya1NldHRpbmdDdHJsLnNldHRpbmcgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldE5ldHdvcmtTZXR0aW5ncygpO1xuICAgICAgICAgICAgbmV0d29ya1NldHRpbmdDdHJsLnVwZGF0ZU5ldHdvcmtTZXR0aW5ncyA9IHVwZGF0ZU5ldHdvcmtTZXR0aW5ncztcblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihuZXR3b3JrU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5ldHdvcmtTZXR0aW5nQ3RybCk7XG4gICAgICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnNldHRpbmdzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy52b2x1bWVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy92b2x1bWVzJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVm9sdW1lU2V0dGluZ0N0cmwgYXMgdm9sdW1lU2V0dGluZ0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3NldHRpbmdzL3ZvbHVtZXNldHRpbmdzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1ZvbHVtZVNldHRpbmdDdHJsJywgWydDUlVESGVscGVyU2VydmljZScsICdWb2x1bWVTZXR0aW5nU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uIChDUlVESGVscGVyU2VydmljZSwgVm9sdW1lU2V0dGluZ1NlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVTZXR0aW5nQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZvbHVtZVNldHRpbmdzKCkge1xuICAgICAgICAgICAgICAgIGlmICh2b2x1bWVTZXR0aW5nQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcih2b2x1bWVTZXR0aW5nQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIFZvbHVtZVNldHRpbmdTZXJ2aWNlLnVwZGF0ZVNldHRpbmdzKHZvbHVtZVNldHRpbmdDdHJsLnNldHRpbmcpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVTZXR0aW5nQ3RybCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lU2V0dGluZ0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHZvbHVtZVNldHRpbmdDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZVNldHRpbmdzKCkge1xuICAgICAgICAgICAgICAgIFZvbHVtZVNldHRpbmdTZXJ2aWNlLmdldFNldHRpbmdzKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZVNldHRpbmdDdHJsLnNldHRpbmcgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldFZvbHVtZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB2b2x1bWVTZXR0aW5nQ3RybC51cGRhdGVWb2x1bWVTZXR0aW5ncyA9IHVwZGF0ZVZvbHVtZVNldHRpbmdzO1xuXG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZVNldHRpbmdDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcih2b2x1bWVTZXR0aW5nQ3RybCk7XG4gICAgICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zdG9yYWdlcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RvcmFnZV9wb2xpY2llcy9zdG9yYWdlcG9saWN5Y3JlYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCBhcyBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwnLCBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnU3RvcmFnZVBvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFN0b3JhZ2VQb2xpY2llc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9TdG9yYWdlUG9saWNpZXMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub1N0b3JhZ2VQb2xpY2llcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGaWxlc3lzdGVtQ21kcygpIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5maWxlc3lzdGVtY21kcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kuZmlsZXN5c3RlbXNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmlsZXN5c3RlbUNtZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuY3JlYXRlKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9TdG9yYWdlUG9saWNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLm5ld1N0b3JhZ2VQb2xpY3kgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tlbmRzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3J1ZFwiOiBcImNlcGhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibW91bnRcIjogXCJjZXBoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNuYXBzaG90XCI6IFwiY2VwaFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwidW5sb2NrZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZHJpdmVyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicG9vbFwiOiBcInJiZFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlsZXN5c3RlbVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNuYXBzaG90c1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzbmFwc2hvdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmVxdWVuY3lcIjogXCIzMG1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtlZXBcIjogMjBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJhdGUtbGltaXRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid3JpdGUtaW9wc1wiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVhZC1pb3BzXCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3cml0ZS1icHNcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlYWQtYnBzXCI6IDAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZXN5c3RlbXNcIjoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5jcmVhdGVQb2xpY3kgPSBjcmVhdGVQb2xpY3k7XG4gICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuICAgICAgICAgICAgc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwuZmlsZXN5c3RlbWNtZHMgPSBbXTtcblxuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8yNy8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zdG9yYWdlcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvcmFnZVBvbGljeURldGFpbHNDdHJsIGFzIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvcmFnZVBvbGljeURldGFpbHNDdHJsIGFzIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU3RvcmFnZVBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdTdG9yYWdlUG9saWNpZXNNb2RlbCcsICdWb2x1bWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgU3RvcmFnZVBvbGljaWVzTW9kZWwsIFZvbHVtZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwuZmlsZXN5c3RlbWNtZHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRvIHNob3cgZWRpdCBvciBkZXRhaWxzIHNjcmVlbiBiYXNlZCBvbiB0aGUgcm91dGVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXRNb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmlzKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwubW9kZSA9ICdlZGl0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMubGlzdCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvUG9saWN5RGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMuZGV0YWlscycsIHsna2V5Jzogc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnBvbGljeS5uYW1lfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsRWRpdGluZygpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlUG9saWN5KCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuZGVsZXRlVXNpbmdLZXkoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnBvbGljeS5uYW1lLCAnbmFtZScpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvUG9saWNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBHZXQgdm9sdW1lcyBiZWxvbmdpbmcgdG8gYSBwb2xpY3lcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuZ2V0KHJlbG9hZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwudm9sdW1lcyA9ICRmaWx0ZXIoJ29yZGVyQnknKShfLmZpbHRlcihyZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9saWN5Jzogc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnBvbGljeS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZpbGVzeXN0ZW1DbWRzQXJyYXkoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmZpbGVzeXN0ZW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2goe25hbWU6IGtleSwgdmFsdWU6IHZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5maWxlc3lzdGVtY21kcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRmlsZXN5c3RlbUNtZHMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5maWxlc3lzdGVtY21kcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5LmZpbGVzeXN0ZW1zW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzYXZlUG9saWN5KCkge1xuICAgICAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGaWxlc3lzdGVtQ21kcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuc2F2ZShzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXksIGZhbHNlLCAnbmFtZScpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kgPSBwb2xpY3k7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplRmlsZXN5c3RlbUNtZHNBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5kZWxldGVQb2xpY3kgPSBkZWxldGVQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnNhdmVQb2xpY3kgPSBzYXZlUG9saWN5O1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5jYW5jZWxFZGl0aW5nID0gY2FuY2VsRWRpdGluZztcblxuICAgICAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuc3RvcmFnZXBvbGljaWVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dlN0b3JhZ2Vwb2xpY3liYXNpY3NldHRpbmdzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5ZmlsZXN5c3RlbXNldHRpbmdzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcG9saWN5OiAnPScsXG4gICAgICAgICAgICAgICAgZmlsZXN5c3RlbWNtZHM6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuZmlsZXN5c3RlbXMgPSBbJ2V4dDQnLCAnYnRyZnMnXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvZmlsZXN5c3RlbXNldHRpbmdzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5c25hcHNob3RzZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3NuYXBzaG90c2V0dGluZ3MuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlN0b3JhZ2Vwb2xpY3lyd29wc3NldHRpbmdzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcG9saWN5OiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvcndvcHNzZXR0aW5ncy5odG1sJ1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2U3RvcmFnZXBvbGljeWJhY2tlbmRkcml2ZXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcG9saWN5OiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvYmFja2VuZGRyaXZlcnMuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvcmFnZVBvbGljeUxpc3RDdHJsIGFzIHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1N0b3JhZ2VQb2xpY3lMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBzdG9yYWdlUG9saWN5TGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2xpY2llcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5TGlzdEN0cmwucG9saWNpZXMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFBvbGljaWVzKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XSk7IiwiXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24uZWRnZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRnZS97c291cmNlTmFtZSwgdGFyZ2V0TmFtZSwgc291cmNlTGlzdCwgdGFyZ2V0TGlzdH0nLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMaXN0OiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVmlzdWFsaXphdGlvbkVkZ2VDdHJsIGFzIHZpc3VhbGl6YXRpb25lZGdlQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25lZGdlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1Zpc3VhbGl6YXRpb25FZGdlQ3RybCcsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsICckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ1Zpc3VhbGl6YXRpb25TZXJ2aWNlJywgJyRpbnRlcnZhbCcsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBWaXN1YWxpemF0aW9uU2VydmljZSwgJGludGVydmFsKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlTmFtZSA9ICRzdGF0ZVBhcmFtcy5zb3VyY2VOYW1lO1xuICAgICAgICAgICAgdmFyIHRhcmdldE5hbWUgPSAkc3RhdGVQYXJhbXMudGFyZ2V0TmFtZTtcbiAgICAgICAgICAgIHZhciBzb3VyY2VMaXN0ID0gJHN0YXRlUGFyYW1zLnNvdXJjZUxpc3Q7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TGlzdCA9ICRzdGF0ZVBhcmFtcy50YXJnZXRMaXN0O1xuXG4gICAgICAgICAgICAvL0lmIHRoZSBwYWdlIGlzIHJlbG9hZGVkLCB0aGVzZSBzdGF0ZSBwYXJhbXMgYXJlIGFsbCBudWxsLFxuICAgICAgICAgICAgLy9zbyBpdCB3aWxsIHJvdXRlIHRoZW0gYmFjayB0byB0aGUgdmlzdWFsaXphdGlvbiB0YWIgdG9wIHZpZXdcbiAgICAgICAgICAgIGlmIChzb3VyY2VMaXN0ID09IG51bGwgfHwgdGFyZ2V0TGlzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS52aXN1YWxpemF0aW9uLmxpc3QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciB0ID0gZC5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAkc2NvcGUuZWRnZURhdGFJbnRlcnZhbCA9IFxuICAgICAgICAgICAgICAgICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0RWRnZURhdGEoc291cmNlTGlzdCwgdGFyZ2V0TGlzdCwgdC50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdWx0LnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyZXN1bHRzLCBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkocikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhICs9IHIuc2VyaWVzWzBdLnZhbHVlc1swXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VOYW1lID0gc291cmNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkZ2VEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRnZURhdGFUaW1lID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XG5cbiAgICAgICAgICAgIC8vRGVzdHJveWluZyB0aGUgaW50ZXJ2YWwgZnVuY3Rpb24gb24gcm91dGUgY2hhbmdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsgJGludGVydmFsLmNhbmNlbCgkc2NvcGUuZWRnZURhdGFJbnRlcnZhbCk7IH0pO1xuXG5cbiAgICAgICAgICAgIFZpc3VhbGl6YXRpb25TZXJ2aWNlLmdldE9sZEVkZ2VEYXRhKHNvdXJjZUxpc3QsIHRhcmdldExpc3QpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3VsdC5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZURhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXN1bHRzLCBpZiBub3QgZW1wdHksIGFyZSBleHBlY3RlZCB0byBoYXZlXG4gICAgICAgICAgICAgICAgICAgIC8vNiBkYXRhIGVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHJlc3VsdHMsIGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkocikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByLnNlcmllc1swXS52YWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShlZGdlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VEYXRhLnB1c2goZFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VEYXRhW2ldICs9IGRbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlTmFtZSA9IHNvdXJjZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZUxpc3QgPSBzb3VyY2VMaXN0O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFyZ2V0TGlzdCA9IHRhcmdldExpc3Q7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vbGRFZGdlRGF0YSA9IGVkZ2VEYXRhO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfV0pO1xuXG5cblxuXG4iLCJcblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuZGlyZWN0aXZlKFwidmlzdWFsaXphdGlvbkVkZ2VcIiwgWyckd2luZG93JyxcbiAgICAgICAgZnVuY3Rpb24oJHdpbmRvdykge1xuICAgICAgICAgICAgZnVuY3Rpb24gdmlzdWFsaXphdGlvbkVkZ2VEMyhzY29wZSwgZDMpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gYm9keUVsLmNsaWVudFdpZHRoIC0gNDAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAgYm9keUVsLmNsaWVudEhlaWdodCAtIDQwMDtcblxuXG4gICAgICAgICAgICAgICAgLy90YWtlbiBmcm9tIGh0dHA6Ly9ibC5vY2tzLm9yZy9zaW1lbmJyZWtrZW4vNjYzNDA3MFxuICAgICAgICAgICAgICAgIC8vIC8qKiBNQUlOIFNWRyAqKi9cbiAgICAgICAgICAgICAgICB2YXIgbGltaXQgPSA1OSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IDc1MCxcbiAgICAgICAgICAgICAgICBub3cgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gZHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ29yYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkMy5yYW5nZShsaW1pdCkubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUub2xkRWRnZURhdGFbTWF0aC5mbG9vcihkLzEwKV0gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciB4ID0gZDMudGltZS5zY2FsZSgpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oW25vdyAtIChsaW1pdCAtIDIpLCBub3cgLSBkdXJhdGlvbl0pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICAgICAgICAgICAgICAgIHZhciB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgZDMubWF4KGdyb3Vwcy5jdXJyZW50LmRhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkICsgMTA7IH0pXSlcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKTtcblxuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gZDMuc3ZnLmxpbmUoKVxuICAgICAgICAgICAgICAgICAgICAuaW50ZXJwb2xhdGUoJ2Jhc2lzJylcbiAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgobm93IC0gKGxpbWl0IC0gMSAtIGkpICogZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5KGQpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHhTdmcgPSBkMy5zZWxlY3QoJy5ncmFwaCcpLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgMjUpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnb3ZlcmZsb3cnLCAndmlzaWJsZScpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnZml4ZWQnKTtcblxuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgdmFyIHlBeGlzID0geFN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAneSBheGlzJylcbiAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgd2lkdGggKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKHkuYXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeSkub3JpZW50KCdsZWZ0JykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBzdmc9IGQzLnNlbGVjdCgnLmdyYXBoJykuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2hhcnQnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCAtIDUwKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0ICsgNTApO1xuICAgICAgICAgICAgICAgICAgICAvLyAuc3R5bGUoJ292ZXJmbG93JywgXCJ2aXNpYmxlXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGF4aXMgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ggYXhpcycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJylcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwoeC5heGlzID0gZDMuc3ZnLmF4aXMoKS5zY2FsZSh4KS5vcmllbnQoJ2JvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXRocyA9IHN2Zy5hcHBlbmQoJ2cnKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAucGF0aCA9IHBhdGhzLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShbZ3JvdXAuZGF0YV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBuYW1lICsgJyBncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGdyb3VwLmNvbG9yKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIG5ldyB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmRhdGEucHVzaChzY29wZS5lZGdlRGF0YSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLnBhdGguYXR0cignZCcsIGxpbmUpXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTaGlmdCBkb21haW5cbiAgICAgICAgICAgICAgICAgICAgeC5kb21haW4oW25vdyAtIChsaW1pdCAtIDIpICogZHVyYXRpb24sIG5vdyAtIGR1cmF0aW9uXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2xpZGUgeC1heGlzIGxlZnRcbiAgICAgICAgICAgICAgICAgICAgYXhpcy50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYXNlKCdsaW5lYXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeC5heGlzKTtcblxuICAgICAgICAgICAgICAgICAgICB5QXhpcy50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYXNlKCdsaW5lYXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeS5heGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTbGlkZSBwYXRocyBsZWZ0XG4gICAgICAgICAgICAgICAgICAgIHBhdGhzLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB4KG5vdyAtIChsaW1pdCAtIDEpICogZHVyYXRpb24pICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhY2goJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2soKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG9sZGVzdCBkYXRhIHBvaW50IGZyb20gZWFjaCBncm91cFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZGF0YS5zaGlmdCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGljaygpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICByZXN0cmljdDonRUEnLFxuICAgICAgICAgICAgICAgIHJlcGxhY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9uZWRnZXRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlKXtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoR3JvdXAoWydlZGdlRGF0YScsICdvbGRFZGdlRGF0YSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmVkZ2VEYXRhICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm9sZEVkZ2VEYXRhICE9IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2NvcGUuaW5pdGlhbGl6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaW5pdGlhbGl6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZDMgPSAkd2luZG93LmQzOyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXN1YWxpemF0aW9uRWRnZUQzKHNjb3BlLCBkMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICBdXG4pO1xuIiwiXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5zZXJ2aWNlKCdTdGF0ZVNhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2ZWRTdGF0ZXMgPSB7fTtcbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJ2aXN1YWxpemF0aW9uR3JhcGhcIiwgWyckd2luZG93JywgJyRzdGF0ZScsICdWaXN1YWxpemVyR3JhcGgnLCAnUG9saWN5U2VydmljZScsICdWaXN1YWxpemVyRGF0YVNvdXJjZScsICdTdGF0ZVNhdmUnLFxuICAgICAgICBmdW5jdGlvbigkd2luZG93LCAkc3RhdGUsIFZpc3VhbGl6ZXJHcmFwaCwgUG9saWN5U2VydmljZSwgVmlzdWFsaXplckRhdGFTb3VyY2UsIFN0YXRlU2F2ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdmlzdWFsaXphdGlvbmxpc3RkMyhzY29wZSwgZWxlbSwgVmlzdWFsaXplckdyYXBoLCBQb2xpY3lTZXJ2aWNlLCBWaXN1YWxpemVyRGF0YVNvdXJjZSwgU3RhdGVTYXZlKSB7XG4gICAgICAgICAgICAgICAgLy9kb24ndCBydW4gdW50aWwgYWxsIGluaXRpYWxpemF0aW9uIGNhbGxzIGhhdmUgcmV0dXJuZWRcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUubm9kZXMgPT09IHVuZGVmaW5lZCB8fCBzY29wZS5saW5rcyA9PT0gdW5kZWZpbmVkIHx8IHNjb3BlLmNoaWxkcmVuX3N0cnVjdCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jcmVhdGluZyBEYXRhU291cmNlXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFTb3VyY2UgPSBuZXcgVmlzdWFsaXplckRhdGFTb3VyY2UuRGF0YVNvdXJjZShzY29wZS5ub2Rlcywgc2NvcGUubGlua3MsIHNjb3BlLmNoaWxkcmVuX3N0cnVjdCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5hbmNlc3RvcnNfc3RydWN0LCBzY29wZS5sYWJlbHMsIHNjb3BlLnNlcnZpY2VTZWxlY3RvcnMpO1xuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2Uuc2V0QW5jZXN0b3JzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMsIGxpbmtzO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRvcERhdGEgPSBkYXRhU291cmNlLmdldFRvcExldmVsRmxvdygpO1xuICAgICAgICAgICAgICAgIG5vZGVzID0gZGF0YVNvdXJjZS5wcm9jZXNzTm9kZURhdGEodG9wRGF0YS5ub2RlRGF0YSk7XG4gICAgICAgICAgICAgICAgbGlua3MgPSBkYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YSh0b3BEYXRhLmxpbmtEYXRhLCBub2Rlcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gYm9keUVsLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAgYm9keUVsLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgICAgIC8qKiBNQUlOIFNWRyAqKi9cbiAgICAgICAgICAgICAgICB2YXIgcmF3U3ZnPWVsZW0uZmluZCgnc3ZnJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJChyYXdTdmcucGFyZW50KCkpLm9mZnNldCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRpdldpZHRoID0gJChyYXdTdmcucGFyZW50KCkpLndpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KHJhd1N2Z1swXSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkaXZXaWR0aClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0IC0gb2Zmc2V0LnRvcCAtIDIwKTtcblxuICAgICAgICAgICAgICAgIC8vaW5zdGFsbGluZyBwb2xpY2llc1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaCA9IG5ldyBWaXN1YWxpemVyR3JhcGguR3JhcGgoc3ZnLCBub2RlcywgbGlua3MsIGRhdGFTb3VyY2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmNoaWxkcmVuX3N0cnVjdCwgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0UGF0aFBvbGljeShuZXcgUG9saWN5U2VydmljZS5TYXZlU3RhdGVQb2xpY3koU3RhdGVTYXZlLnNhdmVkU3RhdGVzKSk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0UGF0aFBvbGljeShuZXcgUG9saWN5U2VydmljZS5QYXRoQ2hhbmdlVmlld1BvbGljeSgkc3RhdGUpKTtcbiAgICAgICAgICAgICAgICAvL1FUaXBQb2xpY3kgaXMgZm9yIGJvdGggTm9kZXMgYW5kIFBhdGhzLCBpbnN0YWxsIHNhbWUgb25lIG9uIGJvdGhcbiAgICAgICAgICAgICAgICB2YXIgcVRpcFBvbGljeSA9IG5ldyBQb2xpY3lTZXJ2aWNlLlFUaXBQb2xpY3koKTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHFUaXBQb2xpY3kpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocVRpcFBvbGljeSk7XG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0Sm9pblZpZXdQb2xpY3kgPSBuZXcgUG9saWN5U2VydmljZS5TcGxpdEpvaW5WaWV3UG9saWN5KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShzcGxpdEpvaW5WaWV3UG9saWN5KTtcbiAgICAgICAgICAgICAgICBzcGxpdEpvaW5WaWV3UG9saWN5Lmluc3RhbGxCYWNrQnV0dG9uKCQoJyNiYWNrQnV0dG9uJykpO1xuICAgICAgICAgICAgICAgIHNwbGl0Sm9pblZpZXdQb2xpY3kuaW5zdGFsbFRpdGxlKCQoJyNncmFwaC10aXRsZScpKTtcblxuICAgICAgICAgICAgICAgIC8vbG9hZCBvbGQgdmlldyBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShTdGF0ZVNhdmUuc2F2ZWRTdGF0ZXMpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncmFwaCA9IHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaDtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGgubG9hZChTdGF0ZVNhdmUuc2F2ZWRTdGF0ZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0OidFQScsXG4gICAgICAgICAgICAgICAgcmVwbGFjZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb250ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS51bmJpbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5kZXN0cm95KCk7fSk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaEdyb3VwKFsnbm9kZXMnLCAnbGlua3MnLCAnY2hpbGRyZW5fc3RydWN0JywgJ2FuY2VzdG9yc19zdHJ1Y3QnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5ub2RlcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmxpbmtzICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2hpbGRyZW5fc3RydWN0ICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzY29wZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbGl6YXRpb25saXN0ZDMoc2NvcGUsIGVsZW0sIFZpc3VhbGl6ZXJHcmFwaCwgUG9saWN5U2VydmljZSwgVmlzdWFsaXplckRhdGFTb3VyY2UsIFN0YXRlU2F2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmRhdGFTb3VyY2UubGlua3MgPSBzY29wZS5saW5rcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLnVwZGF0ZUxpbmtEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIF1cbik7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS52aXN1YWxpemF0aW9uLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWaXN1YWxpemF0aW9uTGlzdEN0cmwgYXMgdmlzdWFsaXphdGlvbkxpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVmlzdWFsaXphdGlvbkxpc3RDdHJsJywgW1wiJHNjb3BlXCIsIFwiJGh0dHBcIiwgJ1Zpc3VhbGl6YXRpb25TZXJ2aWNlJywgJyRpbnRlcnZhbCcsIFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBWaXN1YWxpemF0aW9uU2VydmljZSwgJGludGVydmFsKSB7XG4gICAgICAgICAgICAvL3RvIHNlZSB0aGUgZXhwZWN0ZWQgZm9ybWF0IHRvIGJlIHJldHVybmVkIGZyb20gdGhlc2UgY2FsbHMsXG4gICAgICAgICAgICAvL2xvb2sgYXQgYXBwL2NvbXBvbmVudHMvZ3JhcGhvYmplY3RzL2RhdGFzb3VyY2UvdmlzdWFsaXplcmRhdGFzb3VyY2UuanNcbiAgICAgICAgICAgIHZhciBzdWNjZXNzR3JhcGhEYXRhQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUlkcyA9IFtdO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyZXN1bHQucmVzdWx0c1swXS5zZXJpZXMsIGZ1bmN0aW9uKHNlcmllcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSBzZXJpZXMudGFncy5FbmRwb2ludElQO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBzZXJpZXMudGFncy5Qcm92aWRlcklQO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBub2Rlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhub2RlSWRzLCBlbmRwb2ludCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnM6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkcy5wdXNoKGVuZHBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhub2RlSWRzLCBwcm92aWRlcikgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnM6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkcy5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIGxpbmtzXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rT3V0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IHNlcmllcy52YWx1ZXNbMF1bMl1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbGlua3MucHVzaChsaW5rT3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtJbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBzZXJpZXMudmFsdWVzWzBdWzFdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGlua0luKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubm9kZXMgPSBub2RlcztcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlua3MgPSBsaW5rcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvL2luaXRpYWwgY2FsbFxuICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0R3JhcGhEYXRhKCkudGhlbihzdWNjZXNzR3JhcGhEYXRhQ2FsbGJhY2ssIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy93aWxsIGZhaWwgc2lsZW50bHksIGdyYXBoIHdvbid0IGJlIGRpc3BsYXllZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgeyAkaW50ZXJ2YWwuY2FuY2VsKCRzY29wZS5ncmFwaERhdGFJbnRlcnZhbCk7IH0pO1xuXG4gICAgICAgICAgICBWaXN1YWxpemF0aW9uU2VydmljZS5nZXRTdHJ1Y3R1cmVEYXRhKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy90byBzZWUgdGhlIGV4cGVjdGVkIGZvcm0gb2YgYW5jZXN0b3Jfc3RydWN0IGFuZCBjaGlsZHJlbl9zdHJ1Y3QsIFxuICAgICAgICAgICAgICAgIC8vbG9vayBhdCBhcHAvY29tcG9uZW50cy9ncmFwaG9iamVjdHMvZGF0YXNvdXJjZS92aXN1YWxpemVyZGF0YXNvdXJjZS5qc1xuICAgICAgICAgICAgICAgICRzY29wZS5hbmNlc3RvcnNfc3RydWN0ID0gcmVzdWx0LmFuY2VzdG9yc19zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoaWxkcmVuX3N0cnVjdCA9IHJlc3VsdC5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxhYmVscyA9IHJlc3VsdC5sYWJlbHM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZpY2VTZWxlY3RvcnMgPSByZXN1bHQuc2VydmljZVNlbGVjdG9ycztcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy93aWxsIGZhaWwgc2lsZW50bHksIGdyYXBoIHdvbid0IGJlIGRpc3BsYXllZFxuICAgICAgICAgICAgfSk7XG4gICAgfV0pO1xuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmZhY3RvcnkoJ1Zpc3VhbGl6YXRpb25TZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2VzIGEgZ2V0IHJlcXVlc3Qgd2l0aCB0aGUgdXJsIGFuZCBjb25maWcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB1cmwgICAgIFRoZSB1cmxcbiAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGNvbmZpZyAgVGhlIGNvbmZpZ3VyYXRpb25zXG4gICAgICAgICAqIEByZXR1cm4gICAgIHskSHR0cCBQcm9taXNlfSAgIFByb21pc2Ugb2YgdGhlIHJlcXVlc3RcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VHZXQodXJsLCBjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsLCBjb25maWcpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlcyBhIHBvc3QgcmVxdWVzdCB3aXRoIHRoZSB1cmwgYW5kIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHVybCAgICAgVGhlIHVybFxuICAgICAgICAgKiBAcGFyYW0gICAgICB7SlNPTn0gICAgZGF0YSAgICBUaGUgZGF0YVxuICAgICAgICAgKiBAcmV0dXJuICAgICB7JEh0dHAgUHJvbWlzZX0gICBQcm9taXNlIG9mIHRoZSByZXF1ZXN0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtYWtlUG9zdCh1cmwsIGRhdGEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogY29udmVydHMgdGhlIGRhdGEgaW50byB4LXd3dy1mcm9tLXVybGVuY29kZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7SlNPTn0gIG9iaiAgICAgSlNPTiBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybiAgICAge3N0cmluZ30gIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBzdHJpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gJycsIG5hbWUsIHZhbHVlLCBmdWxsU3ViTmFtZSwgc3ViTmFtZSwgc3ViVmFsdWUsIGlubmVyT2JqLCBpO1xuICAgICAgICAgICAgICAgIGZvciAobmFtZSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTx2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgJ1snICsgaSArICddJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IHBhcmFtKGlubmVyT2JqKSArICcmJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChzdWJOYW1lIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtzdWJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsU3ViTmFtZSA9IG5hbWUgKyAnWycgKyBzdWJOYW1lICsgJ10nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmpbZnVsbFN1Yk5hbWVdID0gc3ViVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgKz0gcGFyYW0oaW5uZXJPYmopICsgJyYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgKz0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArICcmJztcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Lmxlbmd0aCA/IHF1ZXJ5LnN1YnN0cigwLCBxdWVyeS5sZW5ndGggLSAxKSA6IHF1ZXJ5O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICB1cmw6dXJsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzT2JqZWN0KGRhdGEpICYmIFN0cmluZyhkYXRhKSAhPT0gJ1tvYmplY3QgRmlsZV0nID8gcGFyYW0oZGF0YSkgOiBkYXRhO1xuICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3JhcGhEYXRhKCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnaW5mbHV4L3F1ZXJ5JztcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGRiOlwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTpcIlNFTEVDVCBCeXRlc0luLCBCeXRlc091dCwgRW5kcG9pbnRJUCwgUHJvdmlkZXJJUCBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEdST1VQIEJZICogTElNSVQgMVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlR2V0KHVybCwgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFN0cnVjdHVyZURhdGEoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdzZXJ2aWNlcyc7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUdldCh1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRXaGVyZVF1ZXJ5KHBvaW50cywgdHlwZSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gXCIoXCI7XG4gICAgICAgICAgICBxdWVyeSArPSB0eXBlICsgXCI9XCI7XG4gICAgICAgICAgICBxdWVyeSArPSBcIidcIiArIHBvaW50c1swXSArIFwiJyBcIjtcbiAgICAgICAgICAgIC8vc3RhcnRzIGF0IDEsIHNvIHdpbGwgbm90IHJ1biBpZiBsZW5ndGggaXMgMVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBxdWVyeSArPSAnT1IgJztcbiAgICAgICAgICAgICAgICBxdWVyeSArPSB0eXBlICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gXCInXCIgKyBwb2ludHNbaV0gKyBcIicgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSArPSBcIilcIjtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEVkZ2VEYXRhKHNvdXJjZUxpc3QsIHRhcmdldExpc3QsIHRpbWUpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZJU1VBTElaQVRJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICB1cmwgKz0gJ2luZmx1eC9xdWVyeSc7XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkYiA6IFwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTogXCJTRUxFQ1Qgc3VtKFwiICsgJ0J5dGVzT3V0JyArIFwiKSBmcm9tIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDE1cyBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCBcIkVuZHBvaW50SVBcIikgK1wiIEFORCBcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeSh0YXJnZXRMaXN0LCAnUHJvdmlkZXJJUCcpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJHUk9VUCBCWSB0aW1lKDIwcykgTElNSVQgMTsgU0VMRUNUIHN1bShcIiArICdCeXRlc0luJyArIFwiKSBmcm9tIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDE1cyBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCAnUHJvdmlkZXJJUCcpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgJ0VuZHBvaW50SVAnKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiR1JPVVAgQlkgdGltZSgyMHMpIGZpbGwoMCkgTElNSVQgMVwiXG4gICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VQb3N0KHVybCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBcblxuICAgICAgICBmdW5jdGlvbiBnZXRPbGRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0KSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdpbmZsdXgvcXVlcnknO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRiIDogXCJ0ZWxlZ3JhZlwiLFxuICAgICAgICAgICAgICAgICAgICBxOiBcIlNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNPdXQnICsgXCIpIEZST00gaHR0cGpzb25fc3Zjc3RhdHMgV0hFUkUgdGltZSA+IG5vdygpIC0gMW0gQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgXCJFbmRwb2ludElQXCIpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgXCJQcm92aWRlcklQXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgR1JPVVAgQlkgdGltZSgxMHMpIGZpbGwoMCkgTElNSVQgNjsgU0VMRUNUIHN1bShcIiArICdCeXRlc0luJyArIFwiKSBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEFORCBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHNvdXJjZUxpc3QsIFwiUHJvdmlkZXJJUFwiKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsIFwiRW5kcG9pbnRJUFwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIEdST1VQIEJZIHRpbWUoMTBzKSBmaWxsKDApIExJTUlUIDZcIlxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlUG9zdCh1cmwsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEdyYXBoRGF0YTogZ2V0R3JhcGhEYXRhLFxuICAgICAgICAgICAgZ2V0U3RydWN0dXJlRGF0YTogZ2V0U3RydWN0dXJlRGF0YSxcbiAgICAgICAgICAgIGdldEVkZ2VEYXRhOiBnZXRFZGdlRGF0YSxcbiAgICAgICAgICAgIGdldE9sZEVkZ2VEYXRhOiBnZXRPbGRFZGdlRGF0YVxuICAgICAgICB9XG4gICAgfV0pO1xuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzMvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndm9sdW1lcy92b2x1bWVjcmVhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZvbHVtZUNyZWF0ZUN0cmwgYXMgdm9sdW1lQ3JlYXRlQ3RybCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lQ3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdWb2x1bWVzTW9kZWwnLCAnU3RvcmFnZVBvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFZvbHVtZXNNb2RlbCwgU3RvcmFnZVBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lQ3JlYXRlQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLmZpbGVzeXN0ZW1zID0gWydleHQ0JywgJ2J0cmZzJ107XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvVm9sdW1lc01vZGVsKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudm9sdW1lcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvVm9sdW1lc01vZGVsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHN0b3JhZ2UgcG9saWNpZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFN0b3JhZ2VQb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5wb2xpY2llcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXBwbHlQb2xpY3lTZXR0aW5ncygpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLm5ld1ZvbHVtZS5wb2xpY3kgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5Lm5hbWU7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUuYmFja2VuZHMgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5LmJhY2tlbmRzO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLmRyaXZlciA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kuZHJpdmVyO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLmNyZWF0ZSA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kuY3JlYXRlO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLnJ1bnRpbWUgPSB2b2x1bWVDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5LnJ1bnRpbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHZvbHVtZUNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlQb2xpY3lTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuY3JlYXRlKHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1ZvbHVtZXNNb2RlbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcih2b2x1bWVDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lID0ge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJiYWNrZW5kc1wiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJkcml2ZXJcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcInJ1bnRpbWVcIjoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLmNyZWF0ZVZvbHVtZSA9IGNyZWF0ZVZvbHVtZTtcbiAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICAgICAgZ2V0U3RvcmFnZVBvbGljaWVzKCk7XG5cbiAgICAgICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDQvMTUvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMuZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVm9sdW1lRGV0YWlsc0N0cmwgYXMgdm9sdW1lRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndm9sdW1lcy92b2x1bWVkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lRGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckaHR0cCcsICdWb2x1bWVzTW9kZWwnLCAnVm9sdW1lU2VydmljZScsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsICRodHRwLCBWb2x1bWVzTW9kZWwsIFZvbHVtZVNlcnZpY2UsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lRGV0YWlsc0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1ZvbHVtZXMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS52b2x1bWVzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHZvbHVtZURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuZGVsZXRlKHZvbHVtZURldGFpbHNDdHJsLnZvbHVtZSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1ZvbHVtZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Vm9sdW1lSW5mbyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5zID0gJHN0YXRlUGFyYW1zLmtleS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9e307XG4gICAgICAgICAgICAgICAgbW9kZWwucG9saWN5ID0gdG9rZW5zWzBdO1xuICAgICAgICAgICAgICAgIG1vZGVsLm5hbWUgPSB0b2tlbnNbMV07XG4gICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldE1vZGVsKG1vZGVsLCByZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2b2x1bWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZURldGFpbHNDdHJsLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZVVzZUluZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZVNuYXBzaG90cygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Vm9sdW1lVXNlSW5mbygpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVTZXJ2aWNlLmdldFZvbHVtZVVzZUluZm8odm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lVXNlID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vUmV0dXJucyBlcnJvciBpZiB2b2x1bWUgaXMgbm90IG1vdW50ZWQgYnkgYW55IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVTbmFwc2hvdHMoKSB7XG4gICAgICAgICAgICAgICAgVm9sdW1lU2VydmljZS5nZXRWb2x1bWVTbmFwc2hvdHModm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuc25hcHNob3RzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJWb2x1bWVTbmFwc2hvdCgpe1xuICAgICAgICAgICAgICAgIHZvbHVtZURldGFpbHNDdHJsLnNuYXBzaG90U3VjY2Vzcz1mYWxzZTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHZvbHVtZURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBWb2x1bWVTZXJ2aWNlLnRyaWdnZXJTbmFwc2hvdCh2b2x1bWVEZXRhaWxzQ3RybC52b2x1bWUpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuc25hcHNob3RTdWNjZXNzPXRydWU7XG4gICAgICAgICAgICAgICAgfSwgIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KXtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcih2b2x1bWVEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuZGVsZXRlVm9sdW1lID0gZGVsZXRlVm9sdW1lO1xuICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwudHJpZ2dlclZvbHVtZVNuYXBzaG90ID0gdHJpZ2dlclZvbHVtZVNuYXBzaG90O1xuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFZvbHVtZUluZm8oZmFsc2UpO1xuXG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvLXJlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lSW5mbyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMjIvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZvbHVtZUxpc3RDdHJsIGFzIHZvbHVtZUxpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZvbHVtZXMvdm9sdW1lbGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWb2x1bWVMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1ZvbHVtZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgVm9sdW1lc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZUxpc3RDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Vm9sdW1lcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVMaXN0Q3RybC52b2x1bWVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFZvbHVtZXMoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzUvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmZhY3RvcnkoJ1ZvbHVtZVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVVc2VJbmZvKHZvbHVtZSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfVVNFU19FTkRQT0lOVFxuICAgICAgICAgICAgICAgICsgdm9sdW1lLnBvbGljeVxuICAgICAgICAgICAgICAgICsgJy8nICsgdm9sdW1lLm5hbWU7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy9SZXR1cm5zIGVycm9yIGlmIHZvbHVtZSBpcyBub3QgbW91bnRlZCBieSBhbnkgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVTbmFwc2hvdHModm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlRcbiAgICAgICAgICAgICAgICArIHZvbHVtZS5wb2xpY3lcbiAgICAgICAgICAgICAgICArICcvJyArIHZvbHVtZS5uYW1lO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlclNuYXBzaG90KHZvbHVtZSl7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlQgKyBcInRha2UvXCIgXG4gICAgICAgICAgICAgICAgKyB2b2x1bWUucG9saWN5XG4gICAgICAgICAgICAgICAgKyAnLycgKyB2b2x1bWUubmFtZTtcbiAgICAgICAgICAgICRodHRwLnBvc3QodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRWb2x1bWVVc2VJbmZvOiBnZXRWb2x1bWVVc2VJbmZvLFxuICAgICAgICAgICAgZ2V0Vm9sdW1lU25hcHNob3RzOiBnZXRWb2x1bWVTbmFwc2hvdHMsXG4gICAgICAgICAgICB0cmlnZ2VyU25hcHNob3Q6IHRyaWdnZXJTbmFwc2hvdFxuICAgICAgICB9XG4gICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiA4LzkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudm9sdW1lcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnZvbHVtZXMuY29weScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY29weS8nLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge3NuYXBzaG90Om51bGwsIHBvbGljeTpudWxsLCB2b2x1bWU6bnVsbH0sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZvbHVtZVNuYXBzaG90Q29weUN0cmwgYXMgdm9sdW1lU25hcHNob3RDb3B5Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZXNuYXBzaG90Y29weS5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1ZvbHVtZVNuYXBzaG90Q29weUN0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckaHR0cCcsICdWb2x1bWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGh0dHAsIFZvbHVtZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdm9sdW1lU25hcHNob3RDb3B5Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDb3B5KCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnZvbHVtZXMuZGV0YWlscycsIHtrZXk6JHN0YXRlUGFyYW1zLnBvbGljeSsnLycrJHN0YXRlUGFyYW1zLnZvbHVtZX0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdvVG9OZXdWb2x1bWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudm9sdW1lcy5kZXRhaWxzJywge2tleTokc3RhdGVQYXJhbXMucG9saWN5KycvJyt2b2x1bWVTbmFwc2hvdENvcHlDdHJsLm5ld3ZvbHVtZX0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlTbmFwc2hvdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodm9sdW1lU25hcHNob3RDb3B5Q3RybC5mb3JtLiR2YWxpZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lU25hcHNob3RDb3B5Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcih2b2x1bWVTbmFwc2hvdENvcHlDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9e307XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wb2xpY3kgPSAkc3RhdGVQYXJhbXMucG9saWN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubmFtZSA9ICRzdGF0ZVBhcmFtcy52b2x1bWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuY29weShtb2RlbCwgJHN0YXRlUGFyYW1zLnNuYXBzaG90LCB2b2x1bWVTbmFwc2hvdENvcHlDdHJsLm5ld3ZvbHVtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lU25hcHNob3RDb3B5Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvVG9OZXdWb2x1bWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZVNuYXBzaG90Q29weUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Iodm9sdW1lU25hcHNob3RDb3B5Q3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZvbHVtZVNuYXBzaG90Q29weUN0cmwucG9saWN5ID0gJHN0YXRlUGFyYW1zLnBvbGljeTtcbiAgICAgICAgICAgICAgICB2b2x1bWVTbmFwc2hvdENvcHlDdHJsLnZvbHVtZSA9ICRzdGF0ZVBhcmFtcy52b2x1bWU7XG4gICAgICAgICAgICAgICAgdm9sdW1lU25hcHNob3RDb3B5Q3RybC5zbmFwc2hvdCA9ICRzdGF0ZVBhcmFtcy5zbmFwc2hvdDtcbiAgICAgICAgICAgICAgICB2b2x1bWVTbmFwc2hvdENvcHlDdHJsLmNvcHlTbmFwc2hvdCA9IGNvcHlTbmFwc2hvdDtcbiAgICAgICAgICAgICAgICB2b2x1bWVTbmFwc2hvdENvcHlDdHJsLmNhbmNlbENvcHkgPSBjYW5jZWxDb3B5O1xuICAgICAgICAgICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiA3LzEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2QWNjb3JkaW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBpdGVtczogJz0nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBlbGVtZW50LmZpbmQoJy51aS5hY2NvcmRpb24nKS5hY2NvcmRpb24gPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5maW5kKCcudWkuYWNjb3JkaW9uJykuYWNjb3JkaW9uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvYWNjb3JkaW9uLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZDb2xsYXBzaWJsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0AnLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5jb2xsYXBzZWQgPT09IHVuZGVmaW5lZCkgc2NvcGUuY29sbGFwc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9jb2xsYXBzaWJsZS5odG1sJ1xuICAgICAgICB9XG4gICAgfSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDQvMjgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2RXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQCcsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnaScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCduZy1oaWRlJyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9lcnJvcm1lc3NhZ2UuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOYW1ldmFsdWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgIGl0ZW1zOiAnPScsXG4gICAgICAgICAgICAgICBuYW1laGVhZGVyOiAnQCcsLy9GaWVsZCBuYW1lIHRvIGRpc3BsYXkgZm9yIGtleVxuICAgICAgICAgICAgICAgdmFsdWVoZWFkZXI6ICdAJywvL0ZpZWxkIG5hbWUgdG8gZGlzcGxheSBmb3IgdmFsdWVcbiAgICAgICAgICAgICAgIHR5cGU6ICdAJywvLyd0ZXh0JyBvciAnc2VsZWN0JyB0byBjaG9vc2UgaW5wdXQgb3Igc2VsZWN0IGh0bWwgdGFnIGZvciBrZXlcbiAgICAgICAgICAgICAgIG9wdGlvbnM6ICc9Jy8vVG8gYmUgdXNlZCB3aGVuIHR5cGUgaXMgJ3NlbGVjdCdcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogQ29tcGFyZSBpZiB0d28gaXRlbXMgaGF2ZSBzYW1lIG5hbWVcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWwxXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsMlxuICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmUodmFsMSwgdmFsMikge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwxLm5hbWUgPT0gdmFsMi5uYW1lO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldE5ld0l0ZW0oKSB7XG4gICAgICAgICAgICAgICAgICAgc2NvcGUubmV3SXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJ1xuICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRW1wdHlJdGVtKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gKGl0ZW0ubmFtZSA9PT0gJycgJiYgaXRlbS52YWx1ZSA9PT0gJycpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBzY29wZS5hZGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eUl0ZW0oc2NvcGUubmV3SXRlbSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgLy9SZW1vdmVzIGV4aXN0aW5nIGl0ZW0gd2l0aCB0aGUgc2FtZSBuYW1lIGZpcnN0IGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICBfLnB1bGxBbGxXaXRoKHNjb3BlLml0ZW1zLCBbc2NvcGUubmV3SXRlbV0sIGNvbXBhcmUpO1xuICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW1zLnB1c2goc2NvcGUubmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICAgcmVzZXROZXdJdGVtKCk7XG4gICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICBzY29wZS5yZW1vdmUgPSBmdW5jdGlvbihwYXNzZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoc2NvcGUuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT0gcGFzc2VkSXRlbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIHJlc2V0TmV3SXRlbSgpO1xuXG4gICAgICAgICAgICAgICBpZiAoc2NvcGUubmFtZWhlYWRlciA9PT0gdW5kZWZpbmVkKSBzY29wZS5uYW1laGVhZGVyID0gJ05hbWUnO1xuICAgICAgICAgICAgICAgaWYgKHNjb3BlLnZhbHVlaGVhZGVyID09PSB1bmRlZmluZWQpIHNjb3BlLnZhbHVlaGVhZGVyID0gJ1ZhbHVlJztcbiAgICAgICAgICAgICAgIGlmIChzY29wZS50eXBlID09PSB1bmRlZmluZWQpIHNjb3BlLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL25hbWV2YWx1ZS5odG1sJ1xuICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS80LzE2LlxuICovXG5cbi8qXG5EaXJlY3RpdmUgVXNhZ2UgOlxuXG5hKSBjdHZUYWJsZSAtXG4gICB1c2FnZSA6IDxjdHYtdGFibGUgZGVmYXVsdHNvcnRjb2x1bW49J25hbWUnIGl0ZW1zPSd0YWJsZUl0ZW1zJyBmaWx0ZXJlZGl0ZW1zPSdmaWx0SXRlbXMnIHNpemU9J3NpemUnPjwvY3R2LXRhYmxlPlxuICAgYXR0cmlidXRlIGRldGFpbHMgOiAgZGVmYXVsdHNvcnRjb2x1bW4gLSBUaGUgZGVmYXVsdCBjb2x1bW4gbmFtZShjb3JyZXNwb25kaW5nIGtleSBpbnNpZGUgdGhlIG9iamVjdCBvZiBpdGVtcyBhcnJheSkgb24gd2hpY2ggdGhlIHRhYmxlIHdpbGwgYmUgc29ydGVkIHdoZW4gaXQgaXMgbG9hZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgLSBBbiBhcnJheSBvZiBvYmplY3RzIHdoaWNoIHdpbGwgYmUgZGlzcGxheWVkIGJ5IHRoZSBjdHYtdGFibGUgZGlyZWN0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSAtIG51bWJlciBvZiByb3dzIHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgdGhlIHRhYmxlLiBJZiBpdGVtcy5sZW5ndGggPiBzaXplIHRoZW4gcmVtYWluaW5nIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gbmV4dCBwYWdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRpdGVtcyAtIFRoaXMgaXMgYW4gb3V0cHV0IGZpZWxkIHdoaWNoIHByb2R1Y2VzIGEgZmlsdGVyZWQgc3Vic2V0IG9mIGl0ZW1zIHNwZWNlZmllZCBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcmV2aW91cyBhdHRyaWJ1dGUsIEl0ZW1zIGFyZSBmaWx0ZXJlZCBiYXNlZCBvbiBzZWFyY2ggdGV4dCBkZWZpbmVkIGluc2lkZSBjdHYtc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBieSB0aGUgc2l6ZSBtZW50aW9uZWQgaW4gdGhlIGN0di10YWJsZSBhdHRyaWJ1dGVcbmIpIGN0dlRIIC1cbiAgIHVzYWdlIDogPGN0di10aCBzb3J0ZmllbGQ9J25hbWUnPm5hbWU8L2N0di10aD5cbiAgIGF0dHJpYnV0ZSBkZXRhaWxzIDogc29ydGZpZWxkIC0gVGhpcyBpcyB0aGUga2V5IG9mIHRoZSBvYmplY3QgcHJlc2VudCBpbnNpZGUgaXRlbXMgYXJyYXkgc3BlY2VmaWVkIGluIGN0dlRhYmxlLCBmb3IgZWcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgYXJyYXkgb2JqZWN0IGlzIDogW3tpcDogXCIyMC4xLjIuM1wiLCBob3N0OiBcImNsdXN0ZXItMVwifSx7aXA6IFwiMjAuMS4yLjRcIiwgaG9zdDogXCJjbHVzdGVyLTJcIn1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gZGlyZWN0aXZlIHdpbGwgYmUgPGN0di10aCBzb3J0ZmllbGQ9XCInaXAnXCI+IElwIEFkZHJlc3MgPC9jdHYtdGg+XG4gICBUYWJsZSBjYW4gb25seSBiZSBzb3J0ZWQgb24gY29sdW1ucyB3aGljaCBoYXMgc29ydGZpZWxkIGF0dHJpYnV0ZSBzcGVjZWZpZWQuXG5cbmMpIGN0dlRzZWFyY2ggLVxuICAgdXNhZ2UgOiA8Y3R2LXRzZWFyY2ggcGxhY2Vob2xkZXI9J1NlYXJjaCcgc2l6ZT0nMzAnPjwvY3R2LXRzZWFyY2g+XG4gICBhdHRyaWJ1dGUgZGV0YWlscyA6IHBsYWNlaG9sZGVyIC0gc3BlY2lmeSB0aGUgcGxhY2Vob2xkZXIgZm9yIHRoZSBpbnB1dCB0ZXh0IGZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgIHNpemUgLSBzcGVjaWZ5IHRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgc2VhcmNoIHN0cmluZ1xuICAgT25seSBpdGVtcyBtYXRjaGluZyB0aGUgc2VhcmNoIHN0cmluZyBhcmUgZGlzcGxheWVkIGluc2lkZSB0aGUgdGFibGUuXG5cbmQpIGN0dlRwYWdpbmF0aW9uIC1cbiAgIHVzYWdlIDogPGN0di10cGFnaW5hdGlvbj48L2N0di10cGFnaW5hdGlvbj5cbiAgIFByb3ZpZGVzIGxpbmsgZm9yIG1vdmluZyBiYWNrIGFuZCBmb3J0aCBvZiB0aGUgcmVzdWx0IHBhZ2UuXG5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUYWJsZVwiLCBbJ2ZpbHRlckZpbHRlcicsICdsaW1pdFRvRmlsdGVyJywgZnVuY3Rpb24gKGZpbHRlckZpbHRlciwgbGltaXRUb0ZpbHRlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiAnPScsXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRpdGVtczogJz0nLFxuICAgICAgICAgICAgICAgIHNpemU6ICdAJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0c29ydGNvbHVtbjogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRmaWx0ZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlQ3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLmNodW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5wYWdlTm8gPSAwO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zb3J0T2JqPWluaXRpYWxpemVTb3J0KCRzY29wZS5kZWZhdWx0c29ydGNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2l6ZSA9IHBhcnNlSW50KCRzY29wZS5zaXplLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHRhYmxlQ3RybC5zaXplKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2l6ZSA9IDEyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEFsd2F5cyBjYWxsIHNob3dDaHVuayB3aXRoIGJvdGggcGFyYW1ldGVycy5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gcGFnZU5vXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHNlYXJjaFRleHRcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93Q2h1bmsocGFnZU5vLCBzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zZWFyY2hUZXh0ID0gc2VhcmNoVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VObyA9PT0gdW5kZWZpbmVkIHx8IHBhZ2VObyA8IDApIHBhZ2VObyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5wYWdlTm8gPSBwYWdlTm87XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7Ly9UT0RPOiBDaGVjayB3aHkgaXRlbXMgYXJlIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hUZXh0RmlsdGVyZWRJdGVtcyA9IGZpbHRlckZpbHRlcigkc2NvcGUuaXRlbXMsIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zID0gJGZpbHRlcignb3JkZXJCeScpKHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zLCB0YWJsZUN0cmwuc29ydE9iai5maWVsZCwgdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9PZkNodW5rcyA9IE1hdGguY2VpbChzZWFyY2hUZXh0RmlsdGVyZWRJdGVtcy5sZW5ndGggLyB0YWJsZUN0cmwuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9PZkNodW5rcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9PZkNodW5rcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuY2h1bmtzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vT2ZDaHVua3M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5jaHVua3MucHVzaCh7c2VsZWN0ZWQ6IGZhbHNlLCBwYWdlTm86IGl9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9BZnRlciBmaWx0ZXJpbmcgbnVtYmVyIG9mIGNodW5rcyBjb3VsZCBjaGFuZ2Ugc28gcmVzZXQgcGFnZSBubyBpZiBpdCBpcyBncmVhdGVyIHRoYW4gbm8gb2YgY2h1bmtzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnZU5vID49IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnBhZ2VObyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuY2h1bmtzW3RhYmxlQ3RybC5wYWdlTm9dLnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9VcGRhdGUgbnVtYmVyIG9mIGNodW5rcyBmb3IgcGFnaW5hdGlvbiBtZW51XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVDdHJsLmNodW5rcy5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWNlU3RhcnQsIHNsaWNlRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlU3RhcnQgPSB0YWJsZUN0cmwucGFnZU5vIC0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHRhYmxlQ3RybC5wYWdlTm8gKyAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGljZVN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHNsaWNlRW5kIC0gc2xpY2VTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VTdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGljZUVuZCA+IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlU3RhcnQgPSBzbGljZVN0YXJ0IC0gKHNsaWNlRW5kIC0gdGFibGVDdHJsLmNodW5rcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZUVuZCA9IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbk1lbnUuY2h1bmtzID0gdGFibGVDdHJsLmNodW5rcy5zbGljZShzbGljZVN0YXJ0LCBzbGljZUVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uTWVudS5jaHVua3MgPSB0YWJsZUN0cmwuY2h1bmtzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuZmlsdGVyZWRJdGVtcyA9IGxpbWl0VG9GaWx0ZXIoc2VhcmNoVGV4dEZpbHRlcmVkSXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnBhZ2VObyAqIHRhYmxlQ3RybC5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZGl0ZW1zPXRhYmxlQ3RybC5maWx0ZXJlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93UHJldkNodW5rKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkNodW5rO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVDdHJsLnBhZ2VObyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q2h1bmsgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNodW5rID0gdGFibGVDdHJsLnBhZ2VObyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dDaHVuayhwcmV2Q2h1bmspO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dOZXh0Q2h1bmsoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgICAgIG5leHRDaHVuayA9IHRhYmxlQ3RybC5wYWdlTm8gKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENodW5rID4gdGFibGVDdHJsLmNodW5rcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2h1bmsgPSB0YWJsZUN0cmwuY2h1bmtzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dDaHVuayhuZXh0Q2h1bmspO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFNhdmUgcGFnaW5hdGlvbiBzY29wZSB0byBwcm92aWRlIGNodW5rIGluZm9ybWF0aW9uIHRvIHBhZ2luYXRpb24gbWVudS5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gbWVudVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFBhZ2luYXRpb25NZW51KG1lbnUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb25NZW51ID0gbWVudTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplU29ydChzb3J0ZmllbGQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6c29ydGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uRGlyZWN0aW9uOiB7XCJhbmdsZSBkb3duIGljb25cIjogdHJ1ZSwgXCJhbmdsZSB1cCBpY29uXCI6IGZhbHNlfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc29ydChzb3J0ZmllbGQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydGZpZWxkID09IHRhYmxlQ3RybC5zb3J0T2JqLmZpZWxkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zb3J0T2JqLmZpZWxkID0gc29ydGZpZWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSA9ICF0YWJsZUN0cmwuc29ydE9iai5yZXZlcnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnRPYmouaWNvbkRpcmVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFuZ2xlIGRvd24gaWNvblwiOiAhdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFuZ2xlIHVwIGljb25cIjogdGFibGVDdHJsLnNvcnRPYmoucmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc29ydE9iaiA9IGluaXRpYWxpemVTb3J0KHNvcnRmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNob3dDaHVuayh0YWJsZUN0cmwucGFnZU5vLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rID0gc2hvd0NodW5rO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93TmV4dENodW5rID0gc2hvd05leHRDaHVuaztcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd1ByZXZDaHVuayA9IHNob3dQcmV2Q2h1bms7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLmFkZFBhZ2luYXRpb25NZW51ID0gYWRkUGFnaW5hdGlvbk1lbnU7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLnNvcnQgPSBzb3J0O1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICAvL1dhdGNoIGZvciBpdGVtcyBhcyB0aGV5IHdpbGwgYmUgYXV0byByZWZyZXNoZWRcbiAgICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChhdHRycy5pdGVtcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3RhYmxlLmh0bWwnXG4gICAgICAgIH1cbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGhlYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dGhlYWQgbmctdHJhbnNjbHVkZT48L3RoZWFkPidcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcXVpcmU6ICdeXmN0dlRhYmxlJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdAJyxcbiAgICAgICAgICAgICAgICBzb3J0ZmllbGQ6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0YWJsZUN0cmwpe1xuICAgICAgICAgICAgICAgIHNjb3BlLnRhYmxlY3RybCA9IHRhYmxlQ3RybDtcbiAgICAgICAgICAgICAgICBpZihzY29wZS5zb3J0ZmllbGQgIT0gdW5kZWZpbmVkICYmIHNjb3BlLnNvcnRmaWVsZCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc29ydChzY29wZS5zb3J0ZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvdGFibGVoZWFkZXIuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRib2R5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRib2R5IG5nLXRyYW5zY2x1ZGU+PC90Ym9keT4nXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUZm9vdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0Zm9vdCBuZy10cmFuc2NsdWRlPjwvdGZvb3Q+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHNlYXJjaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15eY3R2VGFibGUnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgICAgICAgICAgICAgIHNpemU6ICdAJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgdGFibGVDdHJsKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd0NodW5rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHNjb3BlLnNlYXJjaFRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9zZWFyY2hpbnB1dC5odG1sJ1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6ICd0cnVlJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0ciBuZy10cmFuc2NsdWRlPjwvdHI+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgc2NvcGU6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx0ZCBuZy10cmFuc2NsdWRlPjwvdGQ+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VHBhZ2luYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHJlcXVpcmU6ICdeXmN0dlRhYmxlJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY29sc3BhbjogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVwbGFjZTp0cnVlLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuYWRkUGFnaW5hdGlvbk1lbnUoc2NvcGUpO1xuICAgICAgICAgICAgICAgIC8vc2hvd0NodW5rKCkgd2lsbCBjYWxjdWxhdGUgYW5kIHNldCBjaHVua3MgaW4gc2NvcGVcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93Q2h1bmsgPSBmdW5jdGlvbiAocGFnZU5vKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93Q2h1bmsocGFnZU5vLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93UHJldkNodW5rID0gdGFibGVDdHJsLnNob3dQcmV2Q2h1bms7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd05leHRDaHVuayA9IHRhYmxlQ3RybC5zaG93TmV4dENodW5rO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3BhZ2luYXRpb25tZW51Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIGdyb3Vwc21vZGVsID0gbmV3IENvbGxlY3Rpb24oJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLkFQUExJQ0FUSU9OR1JPVVBTX0VORFBPSU5UKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGUga2V5IGZvciBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBcbiAgICAgICAgICovXG4gICAgICAgIGdyb3Vwc21vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAudGVuYW50TmFtZSArICc6JyArIGdyb3VwLmdyb3VwTmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZ3JvdXBzbW9kZWw7XG4gICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSBoYXJkaWsgZ2FuZGhpIG9uIDYvMTUvMTYuXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdOZXRwcm9maWxlc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIG5ldHByb2ZpbGVzTW9kZWwgPSBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuTkVUUFJPRklMRVNfRU5EUE9JTlQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBwb2xpY3kga2V5IHRvIHNhdmUgcG9saWN5IG9uIHNlcnZlclxuICAgICAgICAgKiBAcGFyYW0gcG9saWN5XG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBuZXRwcm9maWxlc01vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgcmV0dXJuIHBvbGljeS50ZW5hbnROYW1lICsgJzonICsgcG9saWN5LnByb2ZpbGVOYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXRwcm9maWxlc01vZGVsO1xuICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnTmV0d29ya3NNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuTkVUV09SS1NfRU5EUE9JTlQpO1xuICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdOb2Rlc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vZGVzQ29sbGVjdGlvbiBleHRlbmRzIGZyb20gQmFzZUNvbGxlY3Rpb24uIEl0IG92ZXJyaWRlcyBleHRyYWN0KCkgYW5kIGFkZHMgY29tbWlzc2lvbiwgZGVjb21taXNzaW9uLCB1cGdyYWRlIGFuZFxuICAgICAgICAgKiBkaXNjb3ZlciBtZXRob2RzXG4gICAgICAgICAqIEBwYXJhbSAkaHR0cFxuICAgICAgICAgKiBAcGFyYW0gJHFcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBOb2Rlc0NvbGxlY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgICAgICAgICBCYXNlQ29sbGVjdGlvbi5jYWxsKHRoaXMsICRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5OT0RFU19MSVNUX0VORFBPSU5UKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE5vZGVzQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgLy9Db252ZXJ0IHRvIGFycmF5IGlmIHRoZSByZXR1cm5lZCBjb2xsZWN0aW9uIGlzIG5vdCBhbiBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHJlc3VsdC5kYXRhLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLmtleSA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ga2V5XG4gICAgICAgICAqIEBwYXJhbSBleHRyYVZhcnMgSlNPTiBvYmplY3Qgb2YgZXh0cmEgYW5zaWJsZSBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIGJlIHBhc3NlZCB3aGlsZSBjb21taXNzaW9uaW5nIGEgbm9kZVxuICAgICAgICAgKiB7XG4gICAgICAgICAgICAgKiBcImVudlwiOntcImh0dHBfcHJveHlcIjpcImh0dHA6Ly9wcm94eS5lc2wuY2lzY28uY29tOjgwODBcIiwgXCJodHRwc19wcm94eVwiOlwiaHR0cDovL3Byb3h5LmVzbC5jaXNjby5jb206ODA4MFwifSxcbiAgICAgICAgICAgICAqIFwiY29udHJvbF9pbnRlcmZhY2VcIjogXCJldGgxXCIsIFwic2VydmljZV92aXBcIjogXCIxOTIuMTY4LjIuMjUyXCIsIFwidmFsaWRhdGVfY2VydHNcIjogXCJmYWxzZVwiLCBcIm5ldHBsdWdpbl9pZlwiIDogXCJldGgyXCJcbiAgICAgICAgICAgICAqIH1cbiAgICAgICAgICogQHJldHVybnMgeyp9XG4gICAgICAgICAqL1xuICAgICAgICBOb2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNvbW1pc3Npb24gPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0NPTU1JU1NJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvL1NlcnZlciBkb2Vzbid0IHJldHVybiBhbnkganNvbiBpbiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWNvbW1pc3Npb24gPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIG5vZGVzY29sbGVjdGlvbi4kaHR0cC5wb3N0KHVybCwgbm9kZU9wc09iaiwge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVycyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBOb2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlLnVwZ3JhZGUgPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgICAgICAgICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX01BSU5URU5BTkNFX0VORFBPSU5UO1xuICAgICAgICAgICAgbm9kZXNjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCBub2RlT3BzT2JqLCB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gaXBcbiAgICAgICAgICogQHBhcmFtIGV4dHJhVmFycyBKU09OIG9iamVjdCBvZiBleHRyYSBhbnNpYmxlIGFuZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdG8gYmUgcGFzc2VkIHdoaWxlIGRpc2NvdmVyaW5nIGEgbm9kZVxuICAgICAgICAgKiB7XG4gICAgICAgICAgICAgKiBcImVudlwiOntcImh0dHBfcHJveHlcIjpcImh0dHA6Ly9wcm94eS5lc2wuY2lzY28uY29tOjgwODBcIiwgXCJodHRwc19wcm94eVwiOlwiaHR0cDovL3Byb3h5LmVzbC5jaXNjby5jb206ODA4MFwifSxcbiAgICAgICAgICAgICAqIFwiY29udHJvbF9pbnRlcmZhY2VcIjogXCJldGgxXCIsIFwic2VydmljZV92aXBcIjogXCIxOTIuMTY4LjIuMjUyXCIsIFwiY2x1c3Rlci1uYW1lXCI6IFwiY29udGl2XCIsIFwibm9kZS1sYWJlbFwiIDogXCJub2RlMVwiXG4gICAgICAgICAgICAgKiB9XG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kaXNjb3ZlciA9IGZ1bmN0aW9uIChub2RlT3BzT2JqKSB7XG4gICAgICAgICAgICB2YXIgbm9kZXNjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IG5vZGVzY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuTk9ERVNfRElTQ09WRVJfRU5EUE9JTlQ7XG4gICAgICAgICAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBub2Rlc21vZGVsID0gbmV3IE5vZGVzQ29sbGVjdGlvbigkaHR0cCwgJHEpO1xuICAgICAgICByZXR1cm4gbm9kZXNtb2RlbDtcbiAgICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ09yZ2FuaXphdGlvbnNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuT1JHQU5JWkFUSU9OU19FTkRQT0lOVCk7XG4gICAgfV0pOyIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnUG9saWNpZXNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIHZhciBwb2xpY2llc21vZGVsID0gbmV3IENvbGxlY3Rpb24oJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLlBPTElDSUVTX0VORFBPSU5UKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGUgcG9saWN5IGtleSB0byBzYXZlIHBvbGljeSBvbiBzZXJ2ZXJcbiAgICAgICAgICogQHBhcmFtIHBvbGljeVxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgcG9saWNpZXNtb2RlbC5nZW5lcmF0ZUtleSA9IGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgIHJldHVybiBwb2xpY3kudGVuYW50TmFtZSArICc6JyArIHBvbGljeS5wb2xpY3lOYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBwb2xpY2llc21vZGVsO1xuICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy84LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1J1bGVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICB2YXIgcnVsZXNtb2RlbCA9IG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5SVUxFU19FTkRQT0lOVCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBpbmNvbWluZyBydWxlcyBmb3IgYSBnaXZlbiBwb2xpY3kgYW5kIGEgdGVuYW50XG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lOYW1lXG4gICAgICAgICAqIEBwYXJhbSB0ZW5hbnROYW1lXG4gICAgICAgICAqIEByZXR1cm5zIHsqfHdlYmRyaXZlci5wcm9taXNlLlByb21pc2V9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdldEluY29taW5nUnVsZXMgPSBmdW5jdGlvbiAocG9saWN5TmFtZSwgdGVuYW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzbW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAncG9saWN5TmFtZSc6IHBvbGljeU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6IHRlbmFudE5hbWVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBvdXRnb2luZyBydWxlcyBmb3IgYSBnaXZlbiBwb2xpY3kgYW5kIGEgdGVuYW50XG4gICAgICAgICAqIEBwYXJhbSBwb2xpY3lOYW1lXG4gICAgICAgICAqIEBwYXJhbSB0ZW5hbnROYW1lXG4gICAgICAgICAqIEByZXR1cm5zIHsqfHdlYmRyaXZlci5wcm9taXNlLlByb21pc2V9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdldE91dGdvaW5nUnVsZXMgPSBmdW5jdGlvbiAocG9saWN5TmFtZSwgdGVuYW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzbW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAncG9saWN5TmFtZSc6IHBvbGljeU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiAnb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiB0ZW5hbnROYW1lXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBydWxlIGtleSB0byBzYXZlIHJ1bGUgb24gc2VydmVyXG4gICAgICAgICAqIEBwYXJhbSBydWxlXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBydWxlc21vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlLnRlbmFudE5hbWUgKyAnOicgKyBydWxlLnBvbGljeU5hbWUgKyAnOicgKyBydWxlLnJ1bGVJZDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnVsZXNtb2RlbDtcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1NlcnZpY2VsYnNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuU0VSVklDRUxCU19FTkRQT0lOVCk7XG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24gZXh0ZW5kcyBmcm9tIEJhc2VDb2xsZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSAkaHR0cFxuICAgICAgICAgKiBAcGFyYW0gJHFcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uKCRodHRwLCAkcSkge1xuICAgICAgICAgICAgQ29sbGVjdGlvbi5jYWxsKHRoaXMsICRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5TVE9SQUdFUE9MSUNJRVNfRU5EUE9JTlQpO1xuICAgICAgICB9XG5cbiAgICAgICAgU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbGxlY3Rpb24ucHJvdG90eXBlKTtcblxuICAgICAgICBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciB1cmwgPSBjb2xsZWN0aW9uLnVybCArIG1vZGVsLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5wcm90b3R5cGUuY3JlYXRlLmNhbGwoY29sbGVjdGlvbiwgbW9kZWwsIHVybCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbi5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IGNvbGxlY3Rpb24udXJsICsgbW9kZWwubmFtZTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG1vZGVsKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLm5hbWUgPT0gbW9kZWwubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ubW9kZWxzLnB1c2gobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwb2xpY2llc21vZGVsID0gbmV3IFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24oJGh0dHAsICRxKTtcbiAgICAgICAgcmV0dXJuIHBvbGljaWVzbW9kZWw7XG4gICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdWb2x1bWVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVm9sdW1lc0NvbGxlY3Rpb24gZXh0ZW5kcyBmcm9tIEJhc2VDb2xsZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSAkaHR0cFxuICAgICAgICAgKiBAcGFyYW0gJHFcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBWb2x1bWVzQ29sbGVjdGlvbigkaHR0cCwgJHEpIHtcbiAgICAgICAgICAgIENvbGxlY3Rpb24uY2FsbCh0aGlzLCAkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuVk9MVU1FU19FTkRQT0lOVCk7XG4gICAgICAgIH1cblxuICAgICAgICBWb2x1bWVzQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbGxlY3Rpb24ucHJvdG90eXBlKTtcblxuICAgICAgICBWb2x1bWVzQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lc2NvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gdm9sdW1lc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfREVMRVRFX0VORFBPSU5UO1xuICAgICAgICAgICAgLy9kZWxldGUgZW5kcG9pbnQgZXhwZWN0cyB2b2x1bWUgcHJvcGVydHkgaW4gYWRkaXRpb24gdG8gcG9saWN5LiBUT0RPIGFzayB0byBiZSBmaXhlZFxuICAgICAgICAgICAgbW9kZWwudm9sdW1lID0gbW9kZWwubmFtZTtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogbW9kZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2b2x1bWVzY29sbGVjdGlvbi4kaHR0cC5kZWxldGUodXJsLCBjb25maWcpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKHZvbHVtZXNjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobi5uYW1lID09IG1vZGVsLm5hbWUgJiYgbi5wb2xpY3kgPT0gbW9kZWwucG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodm9sdW1lc2NvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHZvbHVtZXNjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfQ1JFQVRFX0VORFBPSU5UO1xuICAgICAgICAgICAgcmV0dXJuIENvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZS5jYWxsKGNvbGxlY3Rpb24sIG1vZGVsLCB1cmwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG1vZGVsLCBzbmFwc2hvdCwgbmV3Vm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQ7XG4gICAgICAgICAgICB2YXIgdm9sY29weW1vZGVsID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG1vZGVsLm5hbWUsXG4gICAgICAgICAgICAgICAgcG9saWN5OiBtb2RlbC5wb2xpY3ksXG4gICAgICAgICAgICAgICAgT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG5ld1ZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIHZvbGNvcHltb2RlbClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMucHVzaChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB2b2x1bWVzbW9kZWwgPSBuZXcgVm9sdW1lc0NvbGxlY3Rpb24oJGh0dHAsICRxKTtcbiAgICAgICAgcmV0dXJuIHZvbHVtZXNtb2RlbDtcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzI5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJylcbiAgICAuZmFjdG9yeSgnQ1JVREhlbHBlclNlcnZpY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzdGFydExvYWRlcihjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93TG9hZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RvcExvYWRlcihjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93TG9hZGVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dTZXJ2ZXJFcnJvcihjb250cm9sbGVyLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93U2VydmVyRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc2VydmVyRXJyb3JNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVNlcnZlckVycm9yKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNob3dTZXJ2ZXJFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGVyOiBzdGFydExvYWRlcixcbiAgICAgICAgICAgICAgICBzdG9wTG9hZGVyOiBzdG9wTG9hZGVyLFxuICAgICAgICAgICAgICAgIHNob3dTZXJ2ZXJFcnJvcjogc2hvd1NlcnZlckVycm9yLFxuICAgICAgICAgICAgICAgIGhpZGVTZXJ2ZXJFcnJvcjogaGlkZVNlcnZlckVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGNzaGFtcHVyIG9uIDcvMTcvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LnV0aWxzXCIpXG4gICAgLmZhY3RvcnkoXCJJbnNwZWN0U2VydmljZVwiLCBmdW5jdGlvbigpe1xuXG4gICAgICAgIC8qIFRoaXMgZnVuY3Rpb24gd291bGQgYnVpbGQgdGhlIGNvbnRhaW5lckRldGFpbHMgb2JqZWN0LlxuICAgICAgICAgZWcgOlxuICAgICAgICAgY29udGFpbmVyRGV0YWlscz17XG4gICAgICAgICBDb250YWluZXJJZDEgOiBbe25hbWU6IFwiaG9taW5nSG9zdFwiLCB2YWx1ZTogXCJjbHVzdGVyLW5vZGUxXCIsIHR5cGU6IFwic3RyaW5nXCIsIGZvcm1hdDogXCJub25lXCJ9LFxuICAgICAgICAge25hbWU6IG1hY0FkZHJlc3MsIHZhbHVlOiBcIjAyOjAyXCIsIHR5cGU6XCJzdHJpbmdcIiwgZm9ybWF0Olwibm9uZVwifVxuICAgICAgICAgXSxcbiAgICAgICAgIENvbnRhaW5lcklkMiA6IFt7bmFtZTogXCJob21pbmdIb3N0XCIsIHZhbHVlOiBcImNsdXN0ZXItbm9kZTFcIiB0eXBlOiBcInN0cmluZ1wiLCBmb3JtYXQ6IFwibm9uZVwifSxcbiAgICAgICAgIHtuYW1lOiBtYWNBZGRyZXNzLCB2YWx1ZTogXCIwMjowNFwiLCB0eXBlOiBcInN0cmluZ1wiLCBmb3JtYXQ6IFwibm9uZVwifVxuICAgICAgICAgXVxuICAgICAgICAgfVxuICAgICAgICAgLS1Vc2VkIGluIGRpc3BsYXlpbmcgdGhlIGNvbnRhaW5lciBkZXRhaWwgaW5zaWRlIGFuIGFjY29yZGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkRW5kUG9pbnRzKGVuZHBvaW50cyl7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyRGV0YWlscyA9IHt9O1xuICAgICAgICAgICAgZm9yKHZhciBpIGluIGVuZHBvaW50cyApe1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJBdHRyaWJ1dGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gZW5kcG9pbnRzW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZHBvaW50QXR0cmlidXRlID0ge307XG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLm5hbWUgPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLmZvcm1hdCA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRBdHRyaWJ1dGUudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaXBBZGRyZXNzXCIgOiAgZW5kcG9pbnRBdHRyaWJ1dGUudmFsdWUgPSBlbmRwb2ludHNbaV1ba2V5XS5maWx0ZXIoZnVuY3Rpb24oaXBBZGRyZXNzKXtyZXR1cm4gaXBBZGRyZXNzLmxlbmd0aCA+IDA7fSkuam9pbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxhYmVsc1wiIDogICAgIGVuZHBvaW50QXR0cmlidXRlLnZhbHVlID0gZW5kcG9pbnRzW2ldW2tleV0ucmVwbGFjZSgvKG1hcFxcW3xcXF0pL2dpLCcnKS5yZXBsYWNlKC8oOikvZ2ksICc9Jykuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24odil7cmV0dXJuIHYubGVuZ3RoID4gMH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLmZvcm1hdCA9ICdsYWJlbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRBdHRyaWJ1dGUudHlwZSA9ICdhcnJheSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IDogICAgICAgICAgIGVuZHBvaW50QXR0cmlidXRlLnZhbHVlID0gZW5kcG9pbnRzW2ldW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQXR0cmlidXRlcy5wdXNoKGVuZHBvaW50QXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRGV0YWlsc1tlbmRwb2ludHNbaV0uY29udGFpbmVySURdID0gY29udGFpbmVyQXR0cmlidXRlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXJEZXRhaWxzXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qICBUaGlzIGZ1bmN0aW9uIGNoZWNrcyB3aGV0aGVyIGFueSBuZXcgY29udGFpbmVycyB3ZXJlIGFkZGVkIG9yIG5vdFxuICAgICAgICAgVmlldyBpcyB1cGRhdGVkIG9ubHkgd2hlbiB0aGVyZSBpcyBhIGNoYW5nZSBpbiBjb250YWluZXIgY29uZmlndXJhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDb250YWluZXJDaGFuZ2VkKGNvbnREZXRhaWxzQSwgY29udERldGFpbHNCKXtcbiAgICAgICAgICAgIGlmKGNvbnREZXRhaWxzQSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlmKE9iamVjdC5rZXlzKGNvbnREZXRhaWxzQSkubGVuZ3RoICE9IE9iamVjdC5rZXlzKGNvbnREZXRhaWxzQikubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBjb250RGV0YWlsc0Ipe1xuICAgICAgICAgICAgICAgICAgICBpZighKGtleSBpbiBjb250RGV0YWlsc0EpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ1aWxkRW5kUG9pbnRzIDogYnVpbGRFbmRQb2ludHMsXG4gICAgICAgICAgICBjaGVja0NvbnRhaW5lckNoYW5nZWQgOiBjaGVja0NvbnRhaW5lckNoYW5nZWRcbiAgICAgICAgfVxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi51dGlscycpXG4gICAgLmZhY3RvcnkoJ05ldHdvcmtTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgICAgICBmdW5jdGlvbiBnZXRTZXR0aW5ncygpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5ORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YVswXSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3Moc2V0dGluZykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQ29udGl2R2xvYmFscy5ORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UIFxuICAgICAgICAgICAgICAgICsgJ2dsb2JhbC8nLCBzZXR0aW5nKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0U2V0dGluZ3M6IGdldFNldHRpbmdzLFxuICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3M6IHVwZGF0ZVNldHRpbmdzXG4gICAgICAgIH1cbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi51dGlscycpXG4gICAgLmZhY3RvcnkoJ05vZGVzU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLFxuICAgICAgICBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgICAgICB2YXIgbm9kZV9jb25zdGFudHMgPSB7XG4gICAgICAgICAgICAgICAgQVBJQ19DT05UUl9VTlJFU1RSSUNUX01PREU6ICdhcGljX2NvbnRyYWN0c191bnJlc3RyaWN0ZWRfbW9kZScsXG4gICAgICAgICAgICAgICAgQVBJQ19FUEdfQlJJREdFX0RPTUFJTjogJ2FwaWNfZXBnX2JyaWRnZV9kb21haW4nLFxuICAgICAgICAgICAgICAgIEFQSUNfTEVBRl9OT0RFUzogJ2FwaWNfbGVhZl9ub2RlcycsXG4gICAgICAgICAgICAgICAgQVBJQ19QQVNTV09SRDogJ2FwaWNfcGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgIEFQSUNfUEhZU19ET01BSU46ICdhcGljX3BoeXNfZG9tYWluJyxcbiAgICAgICAgICAgICAgICBBUElDX1VSTDogJ2FwaWNfdXJsJyxcbiAgICAgICAgICAgICAgICBBUElDX1VTRVJOQU1FOiAnYXBpY191c2VybmFtZScsXG4gICAgICAgICAgICAgICAgQ09OVElWX05FVF9NT0RFOiAnY29udGl2X25ldHdvcmtfbW9kZScsXG4gICAgICAgICAgICAgICAgQ09OVFJPTF9JTlRFUkZBQ0U6ICdjb250cm9sX2ludGVyZmFjZScsXG4gICAgICAgICAgICAgICAgRU5WOiAnZW52JyxcbiAgICAgICAgICAgICAgICBGV0RfTU9ERTogJ2Z3ZF9tb2RlJyxcbiAgICAgICAgICAgICAgICBEQVRBX0lOVEVSRkFDRTogJ25ldHBsdWdpbl9pZicsXG4gICAgICAgICAgICAgICAgU0NIRURfUFJPVklERVI6ICdzY2hlZHVsZXJfcHJvdmlkZXInLFxuICAgICAgICAgICAgICAgIFZJUF9BRERSOiAnc2VydmljZV92aXAnLFxuICAgICAgICAgICAgICAgIFVDUF9CT09UU1RSQVBfTk9ERTogJ3VjcF9ib290c3RyYXBfbm9kZV9uYW1lJyxcbiAgICAgICAgICAgICAgICBDTFVTVEVSX05BTUU6ICdjbHVzdGVyX25hbWUnfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0dGluZ3MoY3RybCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuTk9ERVNfU0VUVElOR1NfR0VUX0VORFBPSU5UO1xuICAgICAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zZXR0aW5nID0gcmVzdWx0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHRyYVZhcnMgPSBjdHJsLnNldHRpbmcuZXh0cmFfdmFycztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjaGVkX3Byb3ZpZGVyID0gZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLlNDSEVEX1BST1ZJREVSXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ldHdvcmtfbW9kZSA9IGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5DT05USVZfTkVUX01PREVdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQ09OVFJPTF9JTlRFUkZBQ0VdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQ09OVFJPTF9JTlRFUkZBQ0VdID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkNPTlRST0xfSU5URVJGQUNFXTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5EQVRBX0lOVEVSRkFDRV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5EQVRBX0lOVEVSRkFDRV0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuREFUQV9JTlRFUkZBQ0VdOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLlZJUF9BRERSXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLlZJUF9BRERSXSA9IGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5WSVBfQUREUl07IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2hlZF9wcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLlNDSEVEX1BST1ZJREVSXSA9IHNjaGVkX3Byb3ZpZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVkX3Byb3ZpZGVyID09PSAndWNwLXN3YXJtJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5VQ1BfQk9PVFNUUkFQX05PREVdID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5VQ1BfQk9PVFNUUkFQX05PREVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrX21vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5DT05USVZfTkVUX01PREVdID0gbmV0d29ya19tb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtfbW9kZSA9PT0gJ3N0YW5kYWxvbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkZXRF9NT0RFXSA9IGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5GV0RfTU9ERV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXR3b3JrX21vZGUgPT09ICdhY2knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfQ09OVFJfVU5SRVNUUklDVF9NT0RFXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19DT05UUl9VTlJFU1RSSUNUX01PREVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX0VQR19CUklER0VfRE9NQUlOXSA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19FUEdfQlJJREdFX0RPTUFJTl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfTEVBRl9OT0RFU10gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkFQSUNfTEVBRl9OT0RFU107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfUEFTU1dPUkRdID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1BBU1NXT1JEXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19QSFlTX0RPTUFJTl0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkFQSUNfUEhZU19ET01BSU5dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5BUElDX1VSTF0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkFQSUNfVVJMXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19VU0VSTkFNRV0gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFWYXJzW25vZGVfY29uc3RhbnRzLkFQSUNfVVNFUk5BTUVdOyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuQ0xVU1RFUl9OQU1FXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkNMVVNURVJfTkFNRV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhVmFyc1tub2RlX2NvbnN0YW50cy5DTFVTVEVSX05BTUVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVudlZhcmlhYmxlcyhleHRyYVZhcnNbbm9kZV9jb25zdGFudHMuRU5WXSwgY3RybC5lbnZWYXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVBbnNpYmxlVmFyaWFibGVzKGV4dHJhVmFycywgY3RybC5hbnNpYmxlVmFyaWFibGVzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRW52VmFyaWFibGVzKGVudlZhcnMsIGVudlZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIGZvciAoaSBpbiBlbnZWYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudlZhcmlhYmxlcy5wdXNoKHsnbmFtZSc6IGksICd2YWx1ZSc6IGVudlZhcnNbaV19KTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQW5zaWJsZVZhcmlhYmxlcyhleHRyYVZhcnMsIGFuc2libGVWYXJpYWJsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ19maWx0ZXIgPSBbbm9kZV9jb25zdGFudHMuQVBJQ19DT05UUl9VTlJFU1RSSUNUX01PREUsXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLkFQSUNfRVBHX0JSSURHRV9ET01BSU4sIG5vZGVfY29uc3RhbnRzLkFQSUNfTEVBRl9OT0RFUywgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLkFQSUNfUEFTU1dPUkQsIG5vZGVfY29uc3RhbnRzLkFQSUNfUEhZU19ET01BSU4sIFxuICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnN0YW50cy5BUElDX1VSTCwgbm9kZV9jb25zdGFudHMuQVBJQ19VU0VSTkFNRSwgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLkNPTlRJVl9ORVRfTU9ERSwgbm9kZV9jb25zdGFudHMuQ09OVFJPTF9JTlRFUkZBQ0UsIFxuICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnN0YW50cy5FTlYsIG5vZGVfY29uc3RhbnRzLkZXRF9NT0RFLCBub2RlX2NvbnN0YW50cy5EQVRBX0lOVEVSRkFDRSwgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLlNDSEVEX1BST1ZJREVSLCBub2RlX2NvbnN0YW50cy5WSVBfQUREUiwgXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY29uc3RhbnRzLlVDUF9CT09UU1RSQVBfTk9ERSwgbm9kZV9jb25zdGFudHMuQ0xVU1RFUl9OQU1FXTtcbiAgICAgICAgICAgICAgICB2YXIgaTtcblxuICAgICAgICAgICAgICAgIGZvciAoaSBpbiBleHRyYVZhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdfZmlsdGVyLmluZGV4T2YoaSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnNpYmxlVmFyaWFibGVzLnB1c2goeyduYW1lJzogaSwgJ3ZhbHVlJzogZXh0cmFWYXJzW2ldfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTZXR0aW5ncyhub2RlT3BzT2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQ29udGl2R2xvYmFscy5OT0RFU19TRVRUSU5HU19TRVRfRU5EUE9JTlQsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVFeHRyYVZhcnMoY3RybCkge1xuICAgICAgICAgICAgICAgIC8vQWRkIGFuc2libGUgdmFyaWFibGVzIHRvIGV4dHJhX3ZhcnNcbiAgICAgICAgICAgICAgICBjdHJsLmFuc2libGVWYXJpYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmV4dHJhX3ZhcnNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvL0FkZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdG8gZXh0cmFfdmFyc1xuICAgICAgICAgICAgICAgIHZhciBlbnZWYXJzID0ge307XG4gICAgICAgICAgICAgICAgY3RybC5lbnZWYXJpYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBlbnZWYXJzW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5FTlZdID0gZW52VmFycztcbiAgICAgICAgICAgICAgICBjdHJsLm5vZGVPcHNPYmouZXh0cmFfdmFycyA9IEpTT04uc3RyaW5naWZ5KGN0cmwuZXh0cmFfdmFycyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENsZWFudXAgYW5zaWJsZSB2YXJpYWJsZXMgZm9yIG5ldHdvcmsgbW9kZSBhbmQgc2NoZWR1bGVyLiBuZy1pZiByZW1vdmVzIGl0IGZyb20gdGhlIHZpZXcgKERPTSkgYnV0IG5vdCBmcm9tXG4gICAgICAgICAgICAgKiB0aGUgbW9kZWwuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFudXBFeHRyYVZhcnMoY3RybCkge1xuICAgICAgICAgICAgICAgIC8vQ2xlYW51cCBmb3IgbmV0d29yayBtb2RlXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwuZXh0cmFfdmFyc1tub2RlX2NvbnN0YW50cy5DT05USVZfTkVUX01PREVdID09ICdhY2knKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuRldEX01PREVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19VUkxdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfVVNFUk5BTUVdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfUEFTU1dPUkRdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3RybC5leHRyYV92YXJzW25vZGVfY29uc3RhbnRzLkFQSUNfTEVBRl9OT0RFU107XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19QSFlTX0RPTUFJTl07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19FUEdfQlJJREdFX0RPTUFJTl07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuQVBJQ19DT05UUl9VTlJFU1RSSUNUX01PREVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL0NsZWFudXAgZm9yIHNjaGVkdWxlclxuICAgICAgICAgICAgICAgIGlmIChjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuU0NIRURfUFJPVklERVJdID09ICduYXRpdmUtc3dhcm0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdHJsLmV4dHJhX3ZhcnNbbm9kZV9jb25zdGFudHMuVUNQX0JPT1RTVFJBUF9OT0RFXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRTZXR0aW5nczogZ2V0U2V0dGluZ3MsXG4gICAgICAgICAgICBjcmVhdGVFbnZWYXJpYWJsZXM6IGNyZWF0ZUVudlZhcmlhYmxlcyxcbiAgICAgICAgICAgIGNyZWF0ZUFuc2libGVWYXJpYWJsZXM6IGNyZWF0ZUFuc2libGVWYXJpYWJsZXMsXG4gICAgICAgICAgICB1cGRhdGVTZXR0aW5nczogdXBkYXRlU2V0dGluZ3MsXG4gICAgICAgICAgICBjcmVhdGVFeHRyYVZhcnM6IGNyZWF0ZUV4dHJhVmFycyxcbiAgICAgICAgICAgIGNsZWFudXBFeHRyYVZhcnM6IGNsZWFudXBFeHRyYVZhcnNcbiAgICAgICAgfVxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJylcbiAgICAuZmFjdG9yeSgnVm9sdW1lU2V0dGluZ1NlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNldHRpbmdzKCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfR0xPQkFMX0VORFBPSU5UO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3Moc2V0dGluZykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoQ29udGl2R2xvYmFscy5WT0xVTUVTX0dMT0JBTF9FTkRQT0lOVCwgc2V0dGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0U2V0dGluZ3M6IGdldFNldHRpbmdzLFxuICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3M6IHVwZGF0ZVNldHRpbmdzXG4gICAgICAgIH1cbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZBY2l2YWxpZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvYWNpdmFsaWQuaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGZvcm06IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZDb250cm9saW50ZXJmYWNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGlyZWN0aXZlcy9ub2Rlcy9jb250cm9saW50ZXJmYWNlLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBleHRyYXZhcnM6IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOZXR3b3JrbW9kZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvbmV0d29ya21vZGUuaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGV4dHJhdmFyczogXCI9XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dlNjaGVkdWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvbm9kZXMvc2NoZWR1bGVyLmh0bWwnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBleHRyYXZhcnM6IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
