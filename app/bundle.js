<<<<<<< b0823a9f8a7f10fd05397aa3e1c71b19e9935f90
<<<<<<< e26e30ad47f02d3dbd7337090f1e492c7e4d4e5e
function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o)}function NodesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/api/networks/",POLICIES_ENDPOINT:"/api/policys/",RULES_ENDPOINT:"/api/rules/",APPLICATIONGROUPS_ENDPOINT:"/api/endpointGroups/",SERVICELBS_ENDPOINT:"/api/serviceLBs/",VOLUMES_ENDPOINT:"/volumes/",VOLUMES_CREATE_ENDPOINT:"/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volumes/copy/",VOLUMES_USES_ENDPOINT:"/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/snapshots/",STORAGEPOLICIES_ENDPOINT:"/policies/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","ApplicationGroupsModel","NetworksModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.applicationgroups.list")}function s(){c()}function a(){o.get().then(function(e){f.networks=_.filter(e,{tenantName:"default"})})}function u(){n.get().then(function(e){f.isolationPolicies=_.filter(e,{tenantName:"default"})})}function d(){r.addIsolationPolicy(f)}function p(e){r.removeIsolationPolicy(f,e)}function m(){f.form.$valid&&(l.hideServerError(f),l.startLoader(f),f.applicationGroup.networkName=f.selectedNetwork.networkName,f.applicationGroup.key=t.generateKey(f.applicationGroup),t.create(f.applicationGroup).then(function(e){l.stopLoader(f),c()},function(e){l.stopLoader(f),l.showServerError(f,e)}))}function v(){l.stopLoader(f),l.hideServerError(f),f.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var f=this;f.networks=[],f.isolationPolicies=[],f.applicationGroup={},f.selectedNetwork={},f.selectedPolicy={},f.selectedPolicies=[],f.incomingRules=[],f.outgoingRules=[],f.isolationPoliciesVisible=!1,a(),u(),f.createApplicationGroup=m,f.cancelCreating=s,f.addIsolationPolicy=d,f.removeIsolationPolicy=p,v()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.is("contiv.menu.applicationgroups.edit")?h.mode="edit":h.mode="details"}function s(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:h.applicationGroup.key})}function u(){a()}function d(){h.applicationGroup.policies.forEach(function(e){i.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(h.incomingRules,e)}),i.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(h.outgoingRules,e)})})}function p(){l.hideServerError(h),l.startLoader(h),o["delete"](h.applicationGroup).then(function(e){l.stopLoader(h),s()},function(e){l.stopLoader(h),l.showServerError(h,e)})}function m(){n.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function v(){r.addIsolationPolicy(h)}function f(e){r.removeIsolationPolicy(h,e)}function g(){l.hideServerError(h),l.startLoader(h),o.save(h.applicationGroup).then(function(e){l.stopLoader(h),a()},function(e){l.stopLoader(h),l.showServerError(h,e)})}var h=this;h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,l.stopLoader(h),l.hideServerError(h),o.getModelByKey(t.key).then(function(e){h.applicationGroup=e,void 0===h.applicationGroup.policies&&(h.applicationGroup.policies=[]),d()}),m(),h.saveApplicationGroup=g,h.cancelEditing=u,h.addIsolationPolicy=v,h.removeIsolationPolicy=f,h.deleteApplicationGroup=p,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,c){function s(e){o.get(e).then(function(e){a.nodes=e.length}),n.get(e).then(function(e){a.networks=e.length}),i.get(e).then(function(e){a.volumes=e.length}),r.get(e).then(function(e){a.groups=e.length}),l.get(e).then(function(e){a.networkpolicies=e.length}),c.get(e).then(function(e){a.storagepolicies=e.length})}var a=this;a.nodes=0,a.networks=0,a.volumes=0,a.groups=0,a.networkpolicies=0,a.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),c.newPolicy.key=t.generateKey(c.newPolicy),t.create(c.newPolicy).then(function(e){o.stopLoader(c),n()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newPolicy={policyName:"",tenantName:"default"}}var c=this;c.createPolicy=r,c.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.networkpolicies.isolation.list")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:P.policy.key})}function a(){s()}function u(){s()}function d(){l.hideServerError(P),l.startLoader(P),o["delete"](P.policy).then(function(e){l.stopLoader(P),c()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?P.mode="edit":P.mode="details"}function m(){P.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:P.policy.policyName},P.newIncomingSelectedApplicationGroup="",P.disableIncomingNetworkSelection=!1,P.disableIncomingApplicationGroupSelection=!1}function v(){P.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:P.policy.policyName},P.newOutgoingSelectedApplicationGroup="",P.disableOutgoingNetworkSelection=!1,P.disableOutgoingApplicationGroupSelection=!1}function f(){i.get().then(function(e){P.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){P.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=P.newOutgoingSelectedApplicationGroup?(P.newOutgoingRule.toEndpointGroup=P.newOutgoingSelectedApplicationGroup.groupName,P.newOutgoingRule.toNetwork="",P.disableOutgoingNetworkSelection=!0):(P.newOutgoingRule.toEndpointGroup="",P.disableOutgoingNetworkSelection=!1)}function y(){null!=P.newIncomingSelectedApplicationGroup?(P.newIncomingRule.fromEndpointGroup=P.newIncomingSelectedApplicationGroup.groupName,P.newIncomingRule.fromNetwork="",P.disableIncomingNetworkSelection=!0):(P.newIncomingRule.fromEndpointGroup="",P.disableIncomingNetworkSelection=!1)}function C(){null!=P.newOutgoingRule.toNetwork?(P.newOutgoingRule.ToEndpointGroup="",P.disableOutgoingApplicationGroupSelection=!0):P.disableOutgoingApplicationGroupSelection=!1}function w(){null!=P.newIncomingRule.fromNetwork?(P.newIncomingRule.fromEndpointGroup="",P.disableIncomingApplicationGroupSelection=!0):P.disableIncomingApplicationGroupSelection=!1}function N(e){e.ruleId=(P.incomingRules.length+P.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function E(){l.hideServerError(P),l.startLoader(P),N(P.newIncomingRule),P.newIncomingRule.key=n.generateKey(P.newIncomingRule),n.create(P.newIncomingRule).then(function(e){l.stopLoader(P),P.incomingRules.push(e),m()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function S(){l.hideServerError(P),l.startLoader(P),N(P.newOutgoingRule),P.newOutgoingRule.key=n.generateKey(P.newOutgoingRule),n.create(P.newOutgoingRule).then(function(e){l.stopLoader(P),P.outgoingRules.push(e),v()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function k(e){l.hideServerError(P),l.startLoader(P),n.deleteUsingKey(e).then(function(t){l.stopLoader(P),_.remove(P.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(P),l.showServerError(P,e)})}function b(e){l.hideServerError(P),l.startLoader(P),n.deleteUsingKey(e).then(function(t){l.stopLoader(P),_.remove(P.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(P),l.showServerError(P,e)})}var P=this;P.networks=[],P.applicationGroups=[],P.disableOutgoingNetworkSelection=!1,P.disableIncomingNetworkSelection=!1,P.disableOutgoingApplicationGroupSelection=!1,P.disableIncomingApplicationGroupSelection=!1,P.newIncomingSelectedApplicationGroup="",P.newOutgoingSelectedApplicationGroup="",l.stopLoader(P),l.hideServerError(P),o.getModelByKey(t.key).then(function(e){P.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){P.incomingRules=e,m()}),n.getOutgoingRules(e.policyName,"default").then(function(e){P.outgoingRules=e,v()})}),f(),g(),P.deletePolicy=d,P.deleteIncomingRule=k,P.deleteOutgoingRule=b,P.addIncomingRule=E,P.addOutgoingRule=S,P.doneEditing=u,P.cancelEditing=a,P.onChangeOutgoingApplicationGroupSelection=h,P.onChangeIncomingApplicationGroupSelection=y,P.onChangeOutgoingNetworkSelection=C,P.onChangeIncomingNetworkSelection=w,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function c(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=l,s.cancelCreating=r,c()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.go("contiv.menu.networks.list")}function a(){c.hideServerError(d),c.startLoader(d),r["delete"](d.network).then(function(e){c.stopLoader(d),s()},function(e){c.stopLoader(d),c.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;c.stopLoader(d),c.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=a;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"}).state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.nodes.commission")?v.mode="commission":v.mode="discover"}function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){e.go("contiv.menu.nodes.list")}function c(){r()}function s(){l()}function a(){v.ansibleVariables.forEach(function(e){v.extra_vars[e.name]=e.value});var e={};v.envVariables.forEach(function(t){e[t.name]=t.value}),v.extra_vars.env=e,v.nodeOpsObj.extra_vars=JSON.stringify(v.extra_vars)}function u(){v.form.$valid&&(n.hideServerError(v),n.startLoader(v),v.nodeOpsObj.nodes=[t.key],p(),a(),o.commission(v.nodeOpsObj).then(function(e){n.stopLoader(v),r()},function(e){n.stopLoader(v),n.showServerError(v,e)}))}function d(){v.form.$valid&&(n.hideServerError(v),n.startLoader(v),m(),a(),o.discover(v.nodeOpsObj).then(function(e){n.stopLoader(v),l()},function(e){n.stopLoader(v),n.showServerError(v,e)}))}function p(){"aci"==v.extra_vars.contiv_network_mode?delete v.extra_vars.fwd_mode:(delete v.extra_vars.apic_url,delete v.extra_vars.apic_username,delete v.extra_vars.apic_password,delete v.extra_vars.apic_leaf_nodes,delete v.extra_vars.apic_phys_domain,delete v.extra_vars.apic_epg_bridge_domain,delete v.extra_vars.apic_contracts_unrestricted_mode),"native-swarm"==v.extra_vars.scheduler_provider&&delete v.extra_vars.ucp_bootstrap_node_name}function m(){v.nodeOpsObj.addrs=_.words(v.nodeIPAddr,/[^, ]+/g)}var v=this;v.nodeOpsObj={},v.extra_vars={},v.ansibleVariables=[],v.envVariables=[],v.nodeIPAddr="",v.cancelCommissioningNode=c,v.commission=u,v.discover=d,v.cancelDiscoveringNode=s,i(),n.stopLoader(v),n.hideServerError(v)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function c(){switch(a.node.inventory_state.status){case"Unallocated":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Decommissioned":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Provisioning":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Allocated":a.showCommissionButton=!1,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!0;break;case"Cancelled":a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Maintenance":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;default:a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1}}function s(e){i.getModelByKey(t.key,e).then(function(e){a.node=e,c()})}var a=this;a.decommission=r,a.upgrade=l,s(!1);var u;angular.isDefined(u)||(u=n(function(){s(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function c(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,s(),o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details",{key:p.servicelb.key})}function c(){l()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function a(){n.hideServerError(p),n.startLoader(p),d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){void 0===p.servicelb.selectors&&(p.servicelb.selectors=[]),angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=a,p.cancelEditing=c,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function l(){a.filesystemcmds.forEach(function(e){a.newStoragePolicy.filesystems[e.name]=e.value})}function c(){a.form.$valid&&(n.hideServerError(a),n.startLoader(a),l(),o.create(a.newStoragePolicy).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)}))}function s(){n.stopLoader(a),n.hideServerError(a),a.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"10MB",filesystem:"ext4"},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":1e3,"read-iops":1e3,"write-bps":1e8,"read-bps":1e8}},filesystems:{}}}var a=this;a.createPolicy=c,a.cancelCreating=r,a.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function a(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){c.hideServerError(g),c.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(e){c.stopLoader(g),a()},function(e){c.stopLoader(g),c.showServerError(g,e)})}function m(){angular.forEach(g.policy.filesystems,function(e,t){this.push({name:t,value:e})},g.filesystemcmds)}function v(){g.filesystemcmds.forEach(function(e){g.policy.filesystems[e.name]=e.value})}function f(){g.form.$valid&&(c.hideServerError(g),c.startLoader(g),v(),r.save(g.policy).then(function(e){c.stopLoader(g),u()},function(e){c.stopLoader(g),c.showServerError(g,e)}))}var g=this;g.filesystemcmds=[],c.stopLoader(g),c.hideServerError(g),r.getModelByKey(t.key,!1,"name").then(function(e){g.policy=e,m()}),g.deletePolicy=p,g.savePolicy=f,g.cancelEditing=d,s();var h;angular.isDefined(h)||(h=n(function(){},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"
}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){r()}function c(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.volumes.list")}function s(){r["delete"](m.volume).then(function(e){c()})}function a(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){m.volume=e,u(),d()})}function u(){l.getVolumeUseInfo(m.volume).then(function(e){m.volumeUse=e},function(e){})}function d(){l.getVolumeSnapshots(m.volume).then(function(e){m.snapshots=e},function(e){})}function p(e,t){r.copy(model,e,t).then(function(e){},function(e){})}var m=this;m.deleteVolume=s,m.copySnapshot=p,a(!1);var v;angular.isDefined(v)||(v=n(function(){a(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(v)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n}}]),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(a.searchText=i,(void 0===n||0>n)&&(n=0),a.pageNo=n,void 0!==o.items){var r=e(o.items,a.searchText),l=Math.ceil(r.length/a.size);0==l&&(l=1),a.chunks=[];for(var c=0;l>c;c++)a.chunks.push({selected:!1,pageNo:c});if(n>=a.chunks.length&&(a.pageNo=0),a.chunks[a.pageNo].selected=!0,a.chunks.length>5){var s,u;s=a.pageNo-2,u=a.pageNo+3,0>s&&(u-=s,s=0),u>a.chunks.length&&(s-=u-a.chunks.length,u=a.chunks.length),o.paginationMenu.chunks=a.chunks.slice(s,u)}else o.paginationMenu.chunks=a.chunks;a.filteredItems=t(r,a.size,a.pageNo*a.size),o.filtereditems=a.filteredItems}return!1}function l(){var e;return e=a.pageNo<=0?0:a.pageNo-1,r(e)}function c(){var e;return e=a.pageNo+1,e>a.chunks.length-1&&(e=a.chunks.length-1),r(e)}function s(e){o.paginationMenu=e}var a=this;a.chunks=[],a.pageNo=0,a.size=parseInt(o.size,10),isNaN(a.size)&&(a.size=12),a.showChunk=r,a.showNextChunk=c,a.showPrevChunk=l,a.addPaginationMenu=s}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){var o=new NodesCollection(e,t);return o}]),NodesCollection.prototype=Object.create(BaseCollection.prototype),NodesCollection.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},NodesCollection.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(BaseCollection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,l={volume:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,l).then(function(e){i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}});
//# sourceMappingURL=data:application/json;base64,
=======
function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o)}function NodesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/api/networks/",POLICIES_ENDPOINT:"/api/policys/",RULES_ENDPOINT:"/api/rules/",APPLICATIONGROUPS_ENDPOINT:"/api/endpointGroups/",SERVICELBS_ENDPOINT:"/api/serviceLBs/",VOLUMES_ENDPOINT:"/volumes/",VOLUMES_CREATE_ENDPOINT:"/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volumes/copy/",VOLUMES_USES_ENDPOINT:"/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/snapshots/",STORAGEPOLICIES_ENDPOINT:"/policies/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","ApplicationGroupsModel","NetworksModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.applicationgroups.list")}function s(){c()}function a(){o.get().then(function(e){f.networks=_.filter(e,{tenantName:"default"})})}function u(){n.get().then(function(e){f.isolationPolicies=_.filter(e,{tenantName:"default"})})}function d(){r.addIsolationPolicy(f)}function p(e){r.removeIsolationPolicy(f,e)}function v(){f.form.$valid&&(l.hideServerError(f),l.startLoader(f),f.applicationGroup.networkName=f.selectedNetwork.networkName,f.applicationGroup.key=t.generateKey(f.applicationGroup),t.create(f.applicationGroup).then(function(e){l.stopLoader(f),c()},function(e){l.stopLoader(f),l.showServerError(f,e)}))}function m(){l.stopLoader(f),l.hideServerError(f),f.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var f=this;f.networks=[],f.isolationPolicies=[],f.applicationGroup={},f.selectedNetwork={},f.selectedPolicy={},f.selectedPolicies=[],f.incomingRules=[],f.outgoingRules=[],f.isolationPoliciesVisible=!1,a(),u(),f.createApplicationGroup=v,f.cancelCreating=s,f.addIsolationPolicy=d,f.removeIsolationPolicy=p,m()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.is("contiv.menu.applicationgroups.edit")?h.mode="edit":h.mode="details"}function s(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:h.applicationGroup.key})}function u(){a()}function d(){h.applicationGroup.policies.forEach(function(e){i.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(h.incomingRules,e)}),i.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(h.outgoingRules,e)})})}function p(){l.hideServerError(h),l.startLoader(h),o["delete"](h.applicationGroup).then(function(e){l.stopLoader(h),s()},function(e){l.stopLoader(h),l.showServerError(h,e)})}function v(){n.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function m(){r.addIsolationPolicy(h)}function f(e){r.removeIsolationPolicy(h,e)}function g(){l.hideServerError(h),l.startLoader(h),o.save(h.applicationGroup).then(function(e){l.stopLoader(h),a()},function(e){l.stopLoader(h),l.showServerError(h,e)})}var h=this;h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,l.stopLoader(h),l.hideServerError(h),o.getModelByKey(t.key).then(function(e){h.applicationGroup=e,void 0===h.applicationGroup.policies&&(h.applicationGroup.policies=[]),d()}),v(),h.saveApplicationGroup=g,h.cancelEditing=u,h.addIsolationPolicy=m,h.removeIsolationPolicy=f,h.deleteApplicationGroup=p,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,c){function s(e){o.get(e).then(function(e){a.nodes=e.length}),n.get(e).then(function(e){a.networks=e.length}),i.get(e).then(function(e){a.volumes=e.length}),r.get(e).then(function(e){a.groups=e.length}),l.get(e).then(function(e){a.networkpolicies=e.length}),c.get(e).then(function(e){a.storagepolicies=e.length})}var a=this;a.nodes=0,a.networks=0,a.volumes=0,a.groups=0,a.networkpolicies=0,a.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),c.newPolicy.key=t.generateKey(c.newPolicy),t.create(c.newPolicy).then(function(e){o.stopLoader(c),n()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newPolicy={policyName:"",tenantName:"default"}}var c=this;c.createPolicy=r,c.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.networkpolicies.isolation.list")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:S.policy.key})}function a(){s()}function u(){s()}function d(){l.hideServerError(S),l.startLoader(S),o["delete"](S.policy).then(function(e){l.stopLoader(S),c()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?S.mode="edit":S.mode="details"}function v(){S.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:S.policy.policyName}}function m(){S.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:S.policy.policyName}}function f(){i.get().then(function(e){S.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){S.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=S.newOutgoingSelectedApplicationGroup?(S.newOutgoingRule.toEndpointGroup=S.newOutgoingSelectedApplicationGroup.groupName,S.newOutgoingRule.toNetwork=S.newOutgoingSelectedApplicationGroup.networkName,S.disableOutgoingNetworkSelection=!0):(S.newOutgoingRule.toEndpointGroup="",S.disableOutgoingNetworkSelection=!1)}function y(){null!=S.newIncomingSelectedApplicationGroup?(S.newIncomingRule.fromEndpointGroup=S.newIncomingSelectedApplicationGroup.groupName,S.newIncomingRule.fromNetwork=S.newIncomingSelectedApplicationGroup.networkName,S.disableIncomingNetworkSelection=!0):(S.newIncomingRule.fromEndpointGroup="",S.disableIncomingNetworkSelection=!1)}function C(e){e.ruleId=(S.incomingRules.length+S.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function w(){l.hideServerError(S),l.startLoader(S),C(S.newIncomingRule),S.newIncomingRule.key=n.generateKey(S.newIncomingRule),n.create(S.newIncomingRule).then(function(e){l.stopLoader(S),S.incomingRules.push(e),v()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function N(){l.hideServerError(S),l.startLoader(S),C(S.newOutgoingRule),S.newOutgoingRule.key=n.generateKey(S.newOutgoingRule),n.create(S.newOutgoingRule).then(function(e){l.stopLoader(S),S.outgoingRules.push(e),m()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function E(e){l.hideServerError(S),l.startLoader(S),n.deleteUsingKey(e).then(function(t){l.stopLoader(S),_.remove(S.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(S),l.showServerError(S,e)})}function k(e){l.hideServerError(S),l.startLoader(S),n.deleteUsingKey(e).then(function(t){l.stopLoader(S),_.remove(S.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(S),l.showServerError(S,e)})}var S=this;S.networks=[],S.applicationGroups=[],S.disableOutgoingNetworkSelection=!1,S.disableIncomingNetworkSelection=!1,S.newIncomingSelectedApplicationGroup="",S.newOutgoingSelectedApplicationGroup="",l.stopLoader(S),l.hideServerError(S),o.getModelByKey(t.key).then(function(e){S.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){S.incomingRules=e,v()}),n.getOutgoingRules(e.policyName,"default").then(function(e){S.outgoingRules=e,m()})}),f(),g(),S.deletePolicy=d,S.deleteIncomingRule=E,S.deleteOutgoingRule=k,S.addIncomingRule=w,S.addOutgoingRule=N,S.doneEditing=u,S.cancelEditing=a,S.onChangeOutgoingApplicationGroupSelection=h,S.onChangeIncomingApplicationGroupSelection=y,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function c(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=l,s.cancelCreating=r,c()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.go("contiv.menu.networks.list")}function a(){c.hideServerError(d),c.startLoader(d),r["delete"](d.network).then(function(e){c.stopLoader(d),s()},function(e){c.stopLoader(d),c.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;c.stopLoader(d),c.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=a;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"}).state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.nodes.commission")?m.mode="commission":m.mode="discover"}function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){e.go("contiv.menu.nodes.list")}function c(){r()}function s(){l()}function a(){m.ansibleVariables.forEach(function(e){m.extra_vars[e.name]=e.value});var e={};m.envVariables.forEach(function(t){e[t.name]=t.value}),m.extra_vars.env=e,m.nodeOpsObj.extra_vars=JSON.stringify(m.extra_vars)}function u(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),m.nodeOpsObj.nodes=[t.key],p(),a(),o.commission(m.nodeOpsObj).then(function(e){n.stopLoader(m),r()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function d(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),v(),a(),o.discover(m.nodeOpsObj).then(function(e){n.stopLoader(m),l()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function p(){"aci"==m.extra_vars.contiv_network_mode?delete m.extra_vars.fwd_mode:(delete m.extra_vars.apic_url,delete m.extra_vars.apic_username,delete m.extra_vars.apic_password,delete m.extra_vars.apic_leaf_nodes,delete m.extra_vars.apic_phys_domain,delete m.extra_vars.apic_epg_bridge_domain,delete m.extra_vars.apic_contracts_unrestricted_mode),"native-swarm"==m.extra_vars.scheduler_provider&&delete m.extra_vars.ucp_bootstrap_node_name}function v(){m.nodeOpsObj.addrs=_.words(m.nodeIPAddr,/[^, ]+/g)}var m=this;m.nodeOpsObj={},m.extra_vars={},m.ansibleVariables=[],m.envVariables=[],m.nodeIPAddr="",m.cancelCommissioningNode=c,m.commission=u,m.discover=d,m.cancelDiscoveringNode=s,i(),n.stopLoader(m),n.hideServerError(m)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function c(){switch(a.node.inventory_state.status){case"Unallocated":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Decommissioned":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Provisioning":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Allocated":a.showCommissionButton=!1,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!0;break;case"Cancelled":a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Maintenance":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;default:a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1}}function s(e){i.getModelByKey(t.key,e).then(function(e){a.node=e,c()})}var a=this;a.decommission=r,a.upgrade=l,s(!1);var u;angular.isDefined(u)||(u=n(function(){s(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function c(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,s(),o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details",{key:p.servicelb.key})}function c(){l()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function a(){n.hideServerError(p),n.startLoader(p),d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){void 0===p.servicelb.selectors&&(p.servicelb.selectors=[]),angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=a,p.cancelEditing=c,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function l(){a.filesystemcmds.forEach(function(e){a.newStoragePolicy.filesystems[e.name]=e.value})}function c(){a.form.$valid&&(n.hideServerError(a),n.startLoader(a),l(),o.create(a.newStoragePolicy).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)}))}function s(){n.stopLoader(a),n.hideServerError(a),a.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"10MB",filesystem:"ext4"},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":1e3,"read-iops":1e3,"write-bps":1e8,"read-bps":1e8}},filesystems:{}}}var a=this;a.createPolicy=c,a.cancelCreating=r,a.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function a(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){c.hideServerError(g),c.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(e){c.stopLoader(g),a()},function(e){c.stopLoader(g),c.showServerError(g,e)})}function v(){angular.forEach(g.policy.filesystems,function(e,t){this.push({name:t,value:e})},g.filesystemcmds)}function m(){g.filesystemcmds.forEach(function(e){g.policy.filesystems[e.name]=e.value})}function f(){g.form.$valid&&(c.hideServerError(g),c.startLoader(g),m(),r.save(g.policy).then(function(e){c.stopLoader(g),u()},function(e){c.stopLoader(g),c.showServerError(g,e)}))}var g=this;g.filesystemcmds=[],c.stopLoader(g),c.hideServerError(g),r.getModelByKey(t.key,!1,"name").then(function(e){g.policy=e,v()}),g.deletePolicy=p,g.savePolicy=f,g.cancelEditing=d,s();var h;angular.isDefined(h)||(h=n(function(){},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){
function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){r()}function c(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.volumes.list")}function s(){r["delete"](v.volume).then(function(e){c()})}function a(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,u(),d()})}function u(){l.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function d(){l.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function p(e,t){r.copy(model,e,t).then(function(e){},function(e){})}var v=this;v.deleteVolume=s,v.copySnapshot=p,a(!1);var m;angular.isDefined(m)||(m=n(function(){a(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(m)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n}}]),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(a.searchText=i,(void 0===n||0>n)&&(n=0),a.pageNo=n,void 0!==o.items){var r=e(o.items,a.searchText),l=Math.ceil(r.length/a.size);0==l&&(l=1),a.chunks=[];for(var c=0;l>c;c++)a.chunks.push({selected:!1,pageNo:c});if(n>=a.chunks.length&&(a.pageNo=0),a.chunks[a.pageNo].selected=!0,a.chunks.length>5){var s,u;s=a.pageNo-2,u=a.pageNo+3,0>s&&(u-=s,s=0),u>a.chunks.length&&(s-=u-a.chunks.length,u=a.chunks.length),o.paginationMenu.chunks=a.chunks.slice(s,u)}else o.paginationMenu.chunks=a.chunks;a.filteredItems=t(r,a.size,a.pageNo*a.size),o.filtereditems=a.filteredItems}return!1}function l(){var e;return e=a.pageNo<=0?0:a.pageNo-1,r(e)}function c(){var e;return e=a.pageNo+1,e>a.chunks.length-1&&(e=a.chunks.length-1),r(e)}function s(e){o.paginationMenu=e}var a=this;a.chunks=[],a.pageNo=0,a.size=parseInt(o.size,10),isNaN(a.size)&&(a.size=12),a.showChunk=r,a.showNextChunk=c,a.showPrevChunk=l,a.addPaginationMenu=s}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.networkName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){var o=new NodesCollection(e,t);return o}]),NodesCollection.prototype=Object.create(BaseCollection.prototype),NodesCollection.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},NodesCollection.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,l={volume:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,l).then(function(e){i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}});
//# sourceMappingURL=data:application/json;base64,
>>>>>>> Fixed bug: VolumesCollection inherits from Collection
=======
function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o)}function NodesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/networks/",POLICIES_ENDPOINT:"/netmaster/api/policys/",RULES_ENDPOINT:"/netmaster/api/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/serviceLBs/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy/",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","ApplicationGroupsModel","NetworksModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.applicationgroups.list")}function s(){c()}function a(){o.get().then(function(e){f.networks=_.filter(e,{tenantName:"default"})})}function u(){n.get().then(function(e){f.isolationPolicies=_.filter(e,{tenantName:"default"})})}function d(){r.addIsolationPolicy(f)}function p(e){r.removeIsolationPolicy(f,e)}function m(){f.form.$valid&&(l.hideServerError(f),l.startLoader(f),f.applicationGroup.networkName=f.selectedNetwork.networkName,f.applicationGroup.key=t.generateKey(f.applicationGroup),t.create(f.applicationGroup).then(function(e){l.stopLoader(f),c()},function(e){l.stopLoader(f),l.showServerError(f,e)}))}function v(){l.stopLoader(f),l.hideServerError(f),f.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var f=this;f.networks=[],f.isolationPolicies=[],f.applicationGroup={},f.selectedNetwork={},f.selectedPolicy={},f.selectedPolicies=[],f.incomingRules=[],f.outgoingRules=[],f.isolationPoliciesVisible=!1,a(),u(),f.createApplicationGroup=m,f.cancelCreating=s,f.addIsolationPolicy=d,f.removeIsolationPolicy=p,v()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.is("contiv.menu.applicationgroups.edit")?h.mode="edit":h.mode="details"}function s(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:h.applicationGroup.key})}function u(){a()}function d(){h.applicationGroup.policies.forEach(function(e){i.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(h.incomingRules,e)}),i.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(h.outgoingRules,e)})})}function p(){l.hideServerError(h),l.startLoader(h),o["delete"](h.applicationGroup).then(function(e){l.stopLoader(h),s()},function(e){l.stopLoader(h),l.showServerError(h,e)})}function m(){n.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function v(){r.addIsolationPolicy(h)}function f(e){r.removeIsolationPolicy(h,e)}function g(){l.hideServerError(h),l.startLoader(h),o.save(h.applicationGroup).then(function(e){l.stopLoader(h),a()},function(e){l.stopLoader(h),l.showServerError(h,e)})}var h=this;h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,l.stopLoader(h),l.hideServerError(h),o.getModelByKey(t.key).then(function(e){h.applicationGroup=e,void 0===h.applicationGroup.policies&&(h.applicationGroup.policies=[]),d()}),m(),h.saveApplicationGroup=g,h.cancelEditing=u,h.addIsolationPolicy=v,h.removeIsolationPolicy=f,h.deleteApplicationGroup=p,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,c){function s(e){o.get(e).then(function(e){a.nodes=e.length}),n.get(e).then(function(e){a.networks=e.length}),i.get(e).then(function(e){a.volumes=e.length}),r.get(e).then(function(e){a.groups=e.length}),l.get(e).then(function(e){a.networkpolicies=e.length}),c.get(e).then(function(e){a.storagepolicies=e.length})}var a=this;a.nodes=0,a.networks=0,a.volumes=0,a.groups=0,a.networkpolicies=0,a.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),c.newPolicy.key=t.generateKey(c.newPolicy),t.create(c.newPolicy).then(function(e){o.stopLoader(c),n()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newPolicy={policyName:"",tenantName:"default"}}var c=this;c.createPolicy=r,c.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.networkpolicies.isolation.list")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:S.policy.key})}function a(){s()}function u(){s()}function d(){l.hideServerError(S),l.startLoader(S),o["delete"](S.policy).then(function(e){l.stopLoader(S),c()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?S.mode="edit":S.mode="details"}function m(){S.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:S.policy.policyName}}function v(){S.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:S.policy.policyName}}function f(){i.get().then(function(e){S.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){S.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=S.newOutgoingSelectedApplicationGroup?(S.newOutgoingRule.toEndpointGroup=S.newOutgoingSelectedApplicationGroup.groupName,S.newOutgoingRule.toNetwork=S.newOutgoingSelectedApplicationGroup.networkName,S.disableOutgoingNetworkSelection=!0):(S.newOutgoingRule.toEndpointGroup="",S.disableOutgoingNetworkSelection=!1)}function y(){null!=S.newIncomingSelectedApplicationGroup?(S.newIncomingRule.fromEndpointGroup=S.newIncomingSelectedApplicationGroup.groupName,S.newIncomingRule.fromNetwork=S.newIncomingSelectedApplicationGroup.networkName,S.disableIncomingNetworkSelection=!0):(S.newIncomingRule.fromEndpointGroup="",S.disableIncomingNetworkSelection=!1)}function C(e){e.ruleId=(S.incomingRules.length+S.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function w(){l.hideServerError(S),l.startLoader(S),C(S.newIncomingRule),S.newIncomingRule.key=n.generateKey(S.newIncomingRule),n.create(S.newIncomingRule).then(function(e){l.stopLoader(S),S.incomingRules.push(e),m()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function N(){l.hideServerError(S),l.startLoader(S),C(S.newOutgoingRule),S.newOutgoingRule.key=n.generateKey(S.newOutgoingRule),n.create(S.newOutgoingRule).then(function(e){l.stopLoader(S),S.outgoingRules.push(e),v()},function(e){l.stopLoader(S),l.showServerError(S,e)})}function E(e){l.hideServerError(S),l.startLoader(S),n.deleteUsingKey(e).then(function(t){l.stopLoader(S),_.remove(S.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(S),l.showServerError(S,e)})}function k(e){l.hideServerError(S),l.startLoader(S),n.deleteUsingKey(e).then(function(t){l.stopLoader(S),_.remove(S.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(S),l.showServerError(S,e)})}var S=this;S.networks=[],S.applicationGroups=[],S.disableOutgoingNetworkSelection=!1,S.disableIncomingNetworkSelection=!1,S.newIncomingSelectedApplicationGroup="",S.newOutgoingSelectedApplicationGroup="",l.stopLoader(S),l.hideServerError(S),o.getModelByKey(t.key).then(function(e){S.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){S.incomingRules=e,m()}),n.getOutgoingRules(e.policyName,"default").then(function(e){S.outgoingRules=e,v()})}),f(),g(),S.deletePolicy=d,S.deleteIncomingRule=E,S.deleteOutgoingRule=k,S.addIncomingRule=w,S.addOutgoingRule=N,S.doneEditing=u,S.cancelEditing=a,S.onChangeOutgoingApplicationGroupSelection=h,S.onChangeIncomingApplicationGroupSelection=y,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function c(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=l,s.cancelCreating=r,c()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.go("contiv.menu.networks.list")}function a(){c.hideServerError(d),c.startLoader(d),r["delete"](d.network).then(function(e){c.stopLoader(d),s()},function(e){c.stopLoader(d),c.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;c.stopLoader(d),c.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=a;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"}).state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.nodes.commission")?v.mode="commission":v.mode="discover"}function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){e.go("contiv.menu.nodes.list")}function c(){r()}function s(){l()}function a(){v.ansibleVariables.forEach(function(e){v.extra_vars[e.name]=e.value});var e={};v.envVariables.forEach(function(t){e[t.name]=t.value}),v.extra_vars.env=e,v.nodeOpsObj.extra_vars=JSON.stringify(v.extra_vars)}function u(){v.form.$valid&&(n.hideServerError(v),n.startLoader(v),v.nodeOpsObj.nodes=[t.key],p(),a(),o.commission(v.nodeOpsObj).then(function(e){n.stopLoader(v),r()},function(e){n.stopLoader(v),n.showServerError(v,e)}))}function d(){v.form.$valid&&(n.hideServerError(v),n.startLoader(v),m(),a(),o.discover(v.nodeOpsObj).then(function(e){n.stopLoader(v),l()},function(e){n.stopLoader(v),n.showServerError(v,e)}))}function p(){"aci"==v.extra_vars.contiv_network_mode?delete v.extra_vars.fwd_mode:(delete v.extra_vars.apic_url,delete v.extra_vars.apic_username,delete v.extra_vars.apic_password,delete v.extra_vars.apic_leaf_nodes,delete v.extra_vars.apic_phys_domain,delete v.extra_vars.apic_epg_bridge_domain,delete v.extra_vars.apic_contracts_unrestricted_mode),"native-swarm"==v.extra_vars.scheduler_provider&&delete v.extra_vars.ucp_bootstrap_node_name}function m(){v.nodeOpsObj.addrs=_.words(v.nodeIPAddr,/[^, ]+/g)}var v=this;v.nodeOpsObj={},v.extra_vars={},v.ansibleVariables=[],v.envVariables=[],v.nodeIPAddr="",v.cancelCommissioningNode=c,v.commission=u,v.discover=d,v.cancelDiscoveringNode=s,i(),n.stopLoader(v),n.hideServerError(v)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1})}function c(){switch(a.node.inventory_state.status){case"Unallocated":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Decommissioned":a.showCommissionButton=!0,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!1;break;case"Provisioning":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Allocated":a.showCommissionButton=!1,a.commissionButtonEnabled=!0,a.upgradeButtonEnabled=!0;break;case"Cancelled":a.showCommissionButton=!1,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;case"Maintenance":a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1;break;default:a.showCommissionButton=!0,a.commissionButtonEnabled=!1,a.upgradeButtonEnabled=!1}}function s(e){i.getModelByKey(t.key,e).then(function(e){a.node=e,c()})}var a=this;a.decommission=r,a.upgrade=l,s(!1);var u;angular.isDefined(u)||(u=n(function(){s(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function c(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,s(),o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details",{key:p.servicelb.key})}function c(){l()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function a(){n.hideServerError(p),n.startLoader(p),d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){void 0===p.servicelb.selectors&&(p.servicelb.selectors=[]),angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=a,p.cancelEditing=c,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function l(){a.filesystemcmds.forEach(function(e){a.newStoragePolicy.filesystems[e.name]=e.value})}function c(){a.form.$valid&&(n.hideServerError(a),n.startLoader(a),l(),o.create(a.newStoragePolicy).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)}))}function s(){n.stopLoader(a),n.hideServerError(a),a.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"10MB",filesystem:"ext4"},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":1e3,"read-iops":1e3,"write-bps":1e8,"read-bps":1e8}},filesystems:{}}}var a=this;a.createPolicy=c,a.cancelCreating=r,a.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function s(){e.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function a(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){c.hideServerError(g),c.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(e){c.stopLoader(g),a()},function(e){c.stopLoader(g),c.showServerError(g,e)})}function m(){angular.forEach(g.policy.filesystems,function(e,t){this.push({name:t,value:e})},g.filesystemcmds)}function v(){g.filesystemcmds.forEach(function(e){g.policy.filesystems[e.name]=e.value})}function f(){g.form.$valid&&(c.hideServerError(g),c.startLoader(g),v(),r.save(g.policy).then(function(e){c.stopLoader(g),u()},function(e){c.stopLoader(g),c.showServerError(g,e)}))}var g=this;g.filesystemcmds=[],c.stopLoader(g),c.hideServerError(g),r.getModelByKey(t.key,!1,"name").then(function(e){g.policy=e,m()}),g.deletePolicy=p,g.savePolicy=f,g.cancelEditing=d,s();var h;angular.isDefined(h)||(h=n(function(){},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"
})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){r()}function c(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function a(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=a,d.cancelCreating=l,c(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.volumes.list")}function s(){r["delete"](m.volume).then(function(e){c()})}function a(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){m.volume=e,u(),d()})}function u(){l.getVolumeUseInfo(m.volume).then(function(e){m.volumeUse=e},function(e){})}function d(){l.getVolumeSnapshots(m.volume).then(function(e){m.snapshots=e},function(e){})}function p(e,t){r.copy(model,e,t).then(function(e){},function(e){})}var m=this;m.deleteVolume=s,m.copySnapshot=p,a(!1);var v;angular.isDefined(v)||(v=n(function(){a(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(v)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n}}]),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(a.searchText=i,(void 0===n||0>n)&&(n=0),a.pageNo=n,void 0!==o.items){var r=e(o.items,a.searchText),l=Math.ceil(r.length/a.size);0==l&&(l=1),a.chunks=[];for(var c=0;l>c;c++)a.chunks.push({selected:!1,pageNo:c});if(n>=a.chunks.length&&(a.pageNo=0),a.chunks[a.pageNo].selected=!0,a.chunks.length>5){var s,u;s=a.pageNo-2,u=a.pageNo+3,0>s&&(u-=s,s=0),u>a.chunks.length&&(s-=u-a.chunks.length,u=a.chunks.length),o.paginationMenu.chunks=a.chunks.slice(s,u)}else o.paginationMenu.chunks=a.chunks;a.filteredItems=t(r,a.size,a.pageNo*a.size),o.filtereditems=a.filteredItems}return!1}function l(){var e;return e=a.pageNo<=0?0:a.pageNo-1,r(e)}function c(){var e;return e=a.pageNo+1,e>a.chunks.length-1&&(e=a.chunks.length-1),r(e)}function s(e){o.paginationMenu=e}var a=this;a.chunks=[],a.pageNo=0,a.size=parseInt(o.size,10),isNaN(a.size)&&(a.size=12),a.showChunk=r,a.showNextChunk=c,a.showPrevChunk=l,a.addPaginationMenu=s}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.networkName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){var o=new NodesCollection(e,t);return o}]),NodesCollection.prototype=Object.create(BaseCollection.prototype),NodesCollection.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},NodesCollection.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,l={volume:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,l).then(function(e){i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvbW9kZWxzL2NvbGxlY3Rpb24uanMiLCJjb21wb25lbnRzL21vZGVscy9ub2Rlc21vZGVsLmpzIiwiZGlyZWN0aXZlcy9tb2R1bGUuanMiLCJtb2RlbHMvbW9kdWxlLmpzIiwidXRpbHMvbW9kdWxlLmpzIiwiYXBwbGljYXRpb25ncm91cHMvbW9kdWxlLmpzIiwiZGFzaGJvYXJkL21vZHVsZS5qcyIsImxvZ2luL21vZHVsZS5qcyIsIm1lbnUvbW9kdWxlLmpzIiwibmV0d29ya19wb2xpY2llcy9tb2R1bGUuanMiLCJuZXR3b3Jrcy9tb2R1bGUuanMiLCJub2Rlcy9tb2R1bGUuanMiLCJzZXJ2aWNlX2xicy9tb2R1bGUuanMiLCJzdG9yYWdlX3BvbGljaWVzL21vZHVsZS5qcyIsInZvbHVtZXMvbW9kdWxlLmpzIiwiYXBwLmpzIiwiYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGNyZWF0ZWN0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwZGV0YWlsc2N0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3VwbGlzdGN0cmwuanMiLCJhcHBsaWNhdGlvbmdyb3Vwcy9hcHBsaWNhdGlvbmdyb3Vwc2VydmljZS5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmRjdHJsLmpzIiwibG9naW4vbG9naW5jdHJsLmpzIiwibWVudS9tZW51Q3RybC5qcyIsIm5ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5Y3JlYXRlY3RybC5qcyIsIm5ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5ZGV0YWlsc2N0cmwuanMiLCJuZXR3b3JrX3BvbGljaWVzL2lzb2xhdGlvbnBvbGljeWxpc3RjdHJsLmpzIiwibmV0d29ya19wb2xpY2llcy9uZXR3b3JrcG9saWNpZXN0YWJzY3RybC5qcyIsIm5ldHdvcmtzL25ldHdvcmtjcmVhdGVjdHJsLmpzIiwibmV0d29ya3MvbmV0d29ya2RldGFpbHNjdHJsLmpzIiwibmV0d29ya3MvbmV0d29ya2xpc3RjdHJsLmpzIiwibm9kZXMvbm9kZWNvbW1pc3Npb25jdHJsLmpzIiwibm9kZXMvbm9kZWRldGFpbHNjdHJsLmpzIiwibm9kZXMvbm9kZWxpc3RjdHJsLmpzIiwic2VydmljZV9sYnMvc2VydmljZWxiY3JlYXRlY3RybC5qcyIsInNlcnZpY2VfbGJzL3NlcnZpY2VsYmRldGFpbHNjdHJsLmpzIiwic2VydmljZV9sYnMvc2VydmljZWxibGlzdGN0cmwuanMiLCJzZXJ2aWNlX2xicy9zZXJ2aWNlbGJwb3J0c2RpcmVjdGl2ZS5qcyIsInN0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWNyZWF0ZWN0cmwuanMiLCJzdG9yYWdlX3BvbGljaWVzL3N0b3JhZ2Vwb2xpY3lkZXRhaWxzY3RybC5qcyIsInN0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWRpcmVjdGl2ZS5qcyIsInN0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWxpc3RjdHJsLmpzIiwidm9sdW1lcy92b2x1bWVjcmVhdGVjdHJsLmpzIiwidm9sdW1lcy92b2x1bWVkZXRhaWxzY3RybC5qcyIsInZvbHVtZXMvdm9sdW1lbGlzdGN0cmwuanMiLCJ2b2x1bWVzL3ZvbHVtZXNlcnZpY2UuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvY29sbGFwc2libGVkaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2RpcmVjdGl2ZXMvZXJyb3JtZXNzYWdlZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL25hbWV2YWx1ZWRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvZGlyZWN0aXZlcy90YWJsZWRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvbW9kZWxzL2FwcGxpY2F0aW9uZ3JvdXBzbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9uZXR3b3Jrc21vZGVsLmpzIiwiY29tcG9uZW50cy9tb2RlbHMvcG9saWNpZXNtb2RlbC5qcyIsImNvbXBvbmVudHMvbW9kZWxzL3J1bGVzbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9zZXJ2aWNlbGJzbW9kZWwuanMiLCJjb21wb25lbnRzL21vZGVscy9zdG9yYWdlcG9saWNpZXNtb2RlbC5qcyIsImNvbXBvbmVudHMvbW9kZWxzL3ZvbHVtZXNtb2RlbC5qcyIsImNvbXBvbmVudHMvdXRpbHMvY3J1ZGhlbHBlcnNlcnZpY2UuanMiXSwibmFtZXMiOlsiQmFzZUNvbGxlY3Rpb24iLCIkaHR0cCIsIiRxIiwidXJsIiwidGhpcyIsIm1vZGVscyIsIkNvbGxlY3Rpb24iLCJjYWxsIiwiTm9kZXNDb2xsZWN0aW9uIiwiQ29udGl2R2xvYmFscyIsIk5PREVTX0xJU1RfRU5EUE9JTlQiLCJhbmd1bGFyIiwibW9kdWxlIiwiTkVUV09SS1NfRU5EUE9JTlQiLCJQT0xJQ0lFU19FTkRQT0lOVCIsIlJVTEVTX0VORFBPSU5UIiwiQVBQTElDQVRJT05HUk9VUFNfRU5EUE9JTlQiLCJTRVJWSUNFTEJTX0VORFBPSU5UIiwiVk9MVU1FU19FTkRQT0lOVCIsIlZPTFVNRVNfQ1JFQVRFX0VORFBPSU5UIiwiVk9MVU1FU19ERUxFVEVfRU5EUE9JTlQiLCJWT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQiLCJWT0xVTUVTX1VTRVNfRU5EUE9JTlQiLCJWT0xVTUVTX1NOQVBTSE9UU19FTkRQT0lOVCIsIlNUT1JBR0VQT0xJQ0lFU19FTkRQT0lOVCIsIk5PREVTX0RJU0NPVkVSX0VORFBPSU5UIiwiTk9ERVNfQ09NTUlTU0lPTl9FTkRQT0lOVCIsIk5PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVCIsIk5PREVTX01BSU5URU5BTkNFX0VORFBPSU5UIiwiUkVGUkVTSF9JTlRFUlZBTCIsIkNJRFJfUkVHRVgiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsInN0YXRlIiwiYWJzdHJhY3QiLCJ0ZW1wbGF0ZSIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZVVybCIsIiRzdGF0ZSIsIkFwcGxpY2F0aW9uR3JvdXBzTW9kZWwiLCJOZXR3b3Jrc01vZGVsIiwiUG9saWNpZXNNb2RlbCIsIlJ1bGVzTW9kZWwiLCJBcHBsaWNhdGlvbkdyb3VwU2VydmljZSIsIkNSVURIZWxwZXJTZXJ2aWNlIiwicmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwIiwiZ28iLCJjYW5jZWxDcmVhdGluZyIsImdldE5ldHdvcmtzIiwiZ2V0IiwidGhlbiIsInJlc3VsdCIsImFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsIiwibmV0d29ya3MiLCJfIiwiZmlsdGVyIiwidGVuYW50TmFtZSIsImdldElzb2xhdGlvblBvbGljaWVzIiwiaXNvbGF0aW9uUG9saWNpZXMiLCJhZGRJc29sYXRpb25Qb2xpY3kiLCJyZW1vdmVJc29sYXRpb25Qb2xpY3kiLCJwb2xpY3lOYW1lIiwiY3JlYXRlQXBwbGljYXRpb25Hcm91cCIsImZvcm0iLCIkdmFsaWQiLCJoaWRlU2VydmVyRXJyb3IiLCJzdGFydExvYWRlciIsImFwcGxpY2F0aW9uR3JvdXAiLCJuZXR3b3JrTmFtZSIsInNlbGVjdGVkTmV0d29yayIsImtleSIsImdlbmVyYXRlS2V5IiwiY3JlYXRlIiwic3RvcExvYWRlciIsInNob3dTZXJ2ZXJFcnJvciIsInJlc2V0Rm9ybSIsImdyb3VwTmFtZSIsInBvbGljaWVzIiwic2VsZWN0ZWRQb2xpY3kiLCJzZWxlY3RlZFBvbGljaWVzIiwiaW5jb21pbmdSdWxlcyIsIm91dGdvaW5nUnVsZXMiLCJpc29sYXRpb25Qb2xpY2llc1Zpc2libGUiLCIkc3RhdGVQYXJhbXMiLCJzZXRNb2RlIiwiaXMiLCJhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwiLCJtb2RlIiwicmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwRGV0YWlscyIsImNhbmNlbEVkaXRpbmciLCJnZXRSdWxlcyIsImZvckVhY2giLCJwb2xpY3kiLCJnZXRJbmNvbWluZ1J1bGVzIiwicnVsZXMiLCJBcnJheSIsInByb3RvdHlwZSIsInB1c2giLCJhcHBseSIsImdldE91dGdvaW5nUnVsZXMiLCJkZWxldGVBcHBsaWNhdGlvbkdyb3VwIiwic2F2ZUFwcGxpY2F0aW9uR3JvdXAiLCJzYXZlIiwiZ2V0TW9kZWxCeUtleSIsImdyb3VwIiwidW5kZWZpbmVkIiwiJHNjb3BlIiwiJGludGVydmFsIiwiJGZpbHRlciIsImdldEFwcGxpY2F0aW9uR3JvdXBzIiwicmVsb2FkIiwiYXBwbGljYXRpb25Hcm91cExpc3RDdHJsIiwiZ3JvdXBzIiwicHJvbWlzZSIsImlzRGVmaW5lZCIsIiRvbiIsImNhbmNlbCIsImZhY3RvcnkiLCJhcHBsaWNhdGlvbkdyb3VwQ3RybCIsImZpbmQiLCJyZW1vdmUiLCJydWxlIiwiTm9kZXNNb2RlbCIsIlZvbHVtZXNNb2RlbCIsIlN0b3JhZ2VQb2xpY2llc01vZGVsIiwiZ2V0RGFzaGJvYXJkSW5mbyIsImRhc2hib2FyZEN0cmwiLCJub2RlcyIsImxlbmd0aCIsInZvbHVtZXMiLCJuZXR3b3JrcG9saWNpZXMiLCJzdG9yYWdlcG9saWNpZXMiLCJyZXR1cm5Ub0Rhc2hib2FyZCIsInVzZXJuYW1lIiwibG9naW5DdHJsIiwibG9naW4iLCJwYXJhbXMiLCJsb2dvdXQiLCJtZW51Q3RybCIsInJldHVyblRvUG9saWNpZXMiLCJjcmVhdGVQb2xpY3kiLCJpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsIiwibmV3UG9saWN5IiwicmV0dXJuVG9Qb2xpY3lEZXRhaWxzIiwiaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwiLCJkb25lRWRpdGluZyIsImRlbGV0ZVBvbGljeSIsInJlc2V0TmV3SW5jb21pbmdSdWxlIiwibmV3SW5jb21pbmdSdWxlIiwicnVsZUlkIiwicHJpb3JpdHkiLCJhY3Rpb24iLCJmcm9tRW5kcG9pbnRHcm91cCIsImZyb21OZXR3b3JrIiwiZnJvbUlQQWRkcmVzcyIsInByb3RvY29sIiwicG9ydCIsImRpcmVjdGlvbiIsInJlc2V0TmV3T3V0Z29pbmdSdWxlIiwibmV3T3V0Z29pbmdSdWxlIiwidG9FbmRwb2ludEdyb3VwIiwidG9OZXR3b3JrIiwidG9JUEFkZHJlc3MiLCJhcHBsaWNhdGlvbkdyb3VwcyIsIm9uQ2hhbmdlT3V0Z29pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uIiwibmV3T3V0Z29pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAiLCJkaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uIiwib25DaGFuZ2VJbmNvbWluZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24iLCJuZXdJbmNvbWluZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cCIsImRpc2FibGVJbmNvbWluZ05ldHdvcmtTZWxlY3Rpb24iLCJnZW5lcmF0ZVJ1bGVJZCIsInRvU3RyaW5nIiwiRGF0ZSIsIm5vdyIsImFkZEluY29taW5nUnVsZSIsImFkZE91dGdvaW5nUnVsZSIsImRlbGV0ZUluY29taW5nUnVsZSIsImRlbGV0ZVVzaW5nS2V5IiwibiIsImRlbGV0ZU91dGdvaW5nUnVsZSIsImdldFBvbGljaWVzIiwicG9saWNpZXNMaXN0Q3RybCIsInJldHVyblRvTmV0d29ya3MiLCJjcmVhdGVOZXR3b3JrIiwibmV0d29ya0NyZWF0ZUN0cmwiLCJuZXdOZXR3b3JrIiwiZW5jYXAiLCJzdWJuZXQiLCJnYXRld2F5IiwiY2lkclBhdHRlcm4iLCJkZWxldGVOZXR3b3JrIiwibmV0d29ya0RldGFpbHNDdHJsIiwibmV0d29yayIsIm5ldHdvcmtzTGlzdEN0cmwiLCJub2RlQ29tbWlzc2lvbkN0cmwiLCJyZXR1cm5Ub05vZGVEZXRhaWxzIiwicmV0dXJuVG9Ob2RlcyIsImNhbmNlbENvbW1pc3Npb25pbmdOb2RlIiwiY2FuY2VsRGlzY292ZXJpbmdOb2RlIiwiY3JlYXRlRXh0cmFWYXJzIiwiYW5zaWJsZVZhcmlhYmxlcyIsIml0ZW0iLCJleHRyYV92YXJzIiwibmFtZSIsInZhbHVlIiwiZW52VmFycyIsImVudlZhcmlhYmxlcyIsIm5vZGVPcHNPYmoiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tbWlzc2lvbiIsImNsZWFudXBFeHRyYVZhcnMiLCJkaXNjb3ZlciIsImNyZWF0ZUlQQWRkckFycmF5IiwiYWRkcnMiLCJ3b3JkcyIsIm5vZGVJUEFkZHIiLCJkZWNvbW1pc3Npb24iLCJub2RlRGV0YWlsc0N0cmwiLCJzaG93Q29tbWlzc2lvbkJ1dHRvbiIsImNvbW1pc3Npb25CdXR0b25FbmFibGVkIiwidXBncmFkZUJ1dHRvbkVuYWJsZWQiLCJ1cGdyYWRlIiwic2V0QnV0dG9uRGlzcGxheSIsIm5vZGUiLCJzdGF0dXMiLCJnZXROb2RlSW5mbyIsImdldE5vZGVzIiwibm9kZUxpc3RDdHJsIiwiU2VydmljZWxic01vZGVsIiwicmV0dXJuVG9TZXJ2aWNlbGJzIiwic2VydmljZWxiQ3JlYXRlQ3RybCIsImNyZWF0ZUxhYmVsU2VsZWN0b3JTdHJpbmdzIiwibGFiZWxTZWxlY3RvcnMiLCJsYWJlbFNlbGVjdG9yIiwic2VsZWN0b3JTdHJpbmciLCJzZXJ2aWNlbGIiLCJzZWxlY3RvcnMiLCJjcmVhdGVTZXJ2aWNlbGIiLCJzZXJ2aWNlTmFtZSIsImlwQWRkcmVzcyIsInBvcnRzIiwic2VydmljZWxiRGV0YWlsc0N0cmwiLCJyZXR1cm5Ub1NlcnZpY2VsYkRldGFpbHMiLCJkZWxldGVTZXJ2aWNlbGIiLCJzYXZlU2VydmljZWxiIiwiY3JlYXRlTGFiZWxTZWxlY3RvcnMiLCJzZWxlY3RvclN0ciIsInNlbGVjdG9yIiwic3BsaXQiLCJnZXRTZXJ2aWNlbGJzIiwic2VydmljZWxiTGlzdEN0cmwiLCJzZXJ2aWNlbGJzIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJzY29wZSIsIml0ZW1zIiwibGluayIsImNvbXBhcmUiLCJ2YWwxIiwidmFsMiIsInJlc2V0TmV3SXRlbSIsIm5ld0l0ZW0iLCJzZXJ2aWNlUG9ydCIsInByb3ZpZGVyUG9ydCIsImlzRW1wdHlJdGVtIiwiYWRkIiwibmV3SXRlbVN0ciIsInB1bGxBbGxXaXRoIiwicGFzc2VkSXRlbSIsInJldHVyblRvU3RvcmFnZVBvbGljaWVzIiwiY3JlYXRlRmlsZXN5c3RlbUNtZHMiLCJzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCIsImZpbGVzeXN0ZW1jbWRzIiwibmV3U3RvcmFnZVBvbGljeSIsImZpbGVzeXN0ZW1zIiwiYmFja2VuZHMiLCJjcnVkIiwibW91bnQiLCJzbmFwc2hvdCIsInVubG9ja2VkIiwiZHJpdmVyIiwicG9vbCIsInNpemUiLCJmaWxlc3lzdGVtIiwicnVudGltZSIsInNuYXBzaG90cyIsImZyZXF1ZW5jeSIsImtlZXAiLCJyYXRlLWxpbWl0Iiwid3JpdGUtaW9wcyIsInJlYWQtaW9wcyIsIndyaXRlLWJwcyIsInJlYWQtYnBzIiwic3RvcmFnZVBvbGljeURldGFpbHNDdHJsIiwiaW5pdGlhbGl6ZUZpbGVzeXN0ZW1DbWRzQXJyYXkiLCJzYXZlUG9saWN5Iiwic3RvcmFnZVBvbGljeUxpc3RDdHJsIiwicmV0dXJuVG9Wb2x1bWVzTW9kZWwiLCJnZXRTdG9yYWdlUG9saWNpZXMiLCJ2b2x1bWVDcmVhdGVDdHJsIiwiYXBwbHlQb2xpY3lTZXR0aW5ncyIsIm5ld1ZvbHVtZSIsImNyZWF0ZVZvbHVtZSIsIlZvbHVtZVNlcnZpY2UiLCJyZXR1cm5Ub1ZvbHVtZXMiLCJkZWxldGVWb2x1bWUiLCJ2b2x1bWVEZXRhaWxzQ3RybCIsInZvbHVtZSIsImdldFZvbHVtZUluZm8iLCJ0b2tlbnMiLCJtb2RlbCIsImdldE1vZGVsIiwiZ2V0Vm9sdW1lVXNlSW5mbyIsImdldFZvbHVtZVNuYXBzaG90cyIsInZvbHVtZVVzZSIsImNvcHlTbmFwc2hvdCIsImNvcHkiLCJnZXRWb2x1bWVzIiwidm9sdW1lTGlzdEN0cmwiLCJkZWZlcnJlZCIsImRlZmVyIiwicmVzb2x2ZSIsImRhdGEiLCJyZWplY3QiLCJ0aXRsZSIsImNvbGxhcHNlZCIsInRyYW5zY2x1ZGUiLCJoZWFkZXIiLCJlcnJvciIsImVsZW1lbnQiLCJhdHRyIiwib24iLCJhZGRDbGFzcyIsIm5hbWVoZWFkZXIiLCJ2YWx1ZWhlYWRlciIsInR5cGUiLCJvcHRpb25zIiwiZmlsdGVyRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImZpbHRlcmVkaXRlbXMiLCIkZWxlbWVudCIsIiRhdHRycyIsInNob3dDaHVuayIsInBhZ2VObyIsInNlYXJjaFRleHQiLCJ0YWJsZUN0cmwiLCJzZWFyY2hUZXh0RmlsdGVyZWRJdGVtcyIsIm5vT2ZDaHVua3MiLCJNYXRoIiwiY2VpbCIsImNodW5rcyIsImkiLCJzZWxlY3RlZCIsInNsaWNlU3RhcnQiLCJzbGljZUVuZCIsInBhZ2luYXRpb25NZW51Iiwic2xpY2UiLCJmaWx0ZXJlZEl0ZW1zIiwic2hvd1ByZXZDaHVuayIsInByZXZDaHVuayIsInNob3dOZXh0Q2h1bmsiLCJuZXh0Q2h1bmsiLCJhZGRQYWdpbmF0aW9uTWVudSIsIm1lbnUiLCJwYXJzZUludCIsImlzTmFOIiwiYXR0cnMiLCIkcGFyZW50IiwiJHdhdGNoIiwicmVwbGFjZSIsImNsYXNzIiwicmVxdWlyZSIsInBsYWNlaG9sZGVyIiwiZ3JvdXBzbW9kZWwiLCJleHRyYWN0IiwiY29sbGVjdGlvbiIsIndoZW4iLCJrZXluYW1lIiwiZmluZE1vZGVsIiwiYyIsIk9iamVjdCIsInBvc3QiLCJyZXNwb25zZSIsInJlc3BvbnNlRGF0YSIsInB1dCIsIm5vZGVzbW9kZWwiLCJtYXAiLCJub2Rlc2NvbGxlY3Rpb24iLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwicG9saWNpZXNtb2RlbCIsInJ1bGVzbW9kZWwiLCJTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uIiwiVm9sdW1lc0NvbGxlY3Rpb24iLCJ2b2x1bWVzY29sbGVjdGlvbiIsInZvbGNvcHltb2RlbCIsIk9wdGlvbnMiLCJ0YXJnZXQiLCJ2b2x1bWVzbW9kZWwiLCJzaG93TG9hZGVyIiwibWVzc2FnZSIsInNlcnZlckVycm9yTWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBT0EsUUFBQUEsZ0JBQUFDLEVBQUFDLEVBQUFDLEdBQ0FDLEtBQUFDLFVBQ0FELEtBQUFILE1BQUFBLEVBQ0FHLEtBQUFGLEdBQUFBLEVBQ0FFLEtBQUFELElBQUFBLEVBMkZBLFFBQUFHLFlBQUFMLEVBQUFDLEVBQUFDLEdBQ0FILGVBQUFPLEtBQUFILEtBQUFILEVBQUFDLEVBQUFDLEdDdkZB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QkFBQSxXQUNBLFFBQUFuRCxHQUFBOUIsR0FDQUEsRUFBQTRXLFlBQUEsRUFHQSxRQUFBdlUsR0FBQXJDLEdBQ0FBLEVBQUE0VyxZQUFBLEVBR0EsUUFBQXRVLEdBQUF0QyxFQUFBNlcsR0FDQTdXLEVBQUFzQyxpQkFBQSxFQUNBdEMsRUFBQThXLG1CQUFBRCxFQUdBLFFBQUFoVixHQUFBN0IsR0FDQUEsRUFBQXNDLGlCQUFBLEVBR0EsT0FDQVIsWUFBQUEsRUFDQU8sV0FBQUEsRUFDQUMsZ0JBQUFBLEVBQ0FULGdCQUFBQSIsImZpbGUiOiJhcHAvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlQ29sbGVjdGlvbiBjbGFzcyB0aGF0IGRvZXMganVzdCBmZXRjaCBvZiB0aGUgb2JqZWN0cy5cbiAqIEBwYXJhbSAkaHR0cFxuICogQHBhcmFtICRxXG4gKiBAcGFyYW0gdXJsIFVzZWQgZm9yIGRvaW5nIEhUVFAgR0VUIGFuZCBmZXRjaCBvYmplY3RzIGZyb20gc2VydmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQmFzZUNvbGxlY3Rpb24oJGh0dHAsICRxLCB1cmwpIHtcbiAgICB0aGlzLm1vZGVscyA9IFtdO1xuICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICB0aGlzLiRxID0gJHE7XG4gICAgdGhpcy51cmwgPSB1cmw7XG59XG5cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQuZGF0YTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZWxvYWQgT3B0aW9uYWwuIERlZmF1bHQgaXMgZmFsc2VcbiAqIEByZXR1cm5zIHsqfVxuICovXG5CYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJlbG9hZCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAocmVsb2FkID09PSB1bmRlZmluZWQpIHJlbG9hZCA9IGZhbHNlO1xuICAgIHJldHVybiAoIXJlbG9hZCAmJiBjb2xsZWN0aW9uLm1vZGVscy5sZW5ndGggPiAwKSA/XG4gICAgICAgIGNvbGxlY3Rpb24uJHEud2hlbihjb2xsZWN0aW9uLm1vZGVscykgOiBjb2xsZWN0aW9uLiRodHRwLmdldChjb2xsZWN0aW9uLnVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMgPSBjb2xsZWN0aW9uLmV4dHJhY3QocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm1vZGVscztcbiAgICAgICAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gcmVsb2FkIE9wdGlvbmFsLiBEZWZhdWx0IGlzIGZhbHNlXG4gKiBAcGFyYW0ga2V5bmFtZVxuICogQHJldHVybnMgeyp9XG4gKi9cbkJhc2VDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRNb2RlbEJ5S2V5ID0gZnVuY3Rpb24gKGtleSwgcmVsb2FkLCBrZXluYW1lKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIGlmIChyZWxvYWQgPT09IHVuZGVmaW5lZCkgcmVsb2FkID0gZmFsc2U7XG4gICAgaWYgKGtleW5hbWUgPT09IHVuZGVmaW5lZCkga2V5bmFtZSA9ICdrZXknO1xuXG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuXG4gICAgZnVuY3Rpb24gZmluZE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gXy5maW5kKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGNba2V5bmFtZV0gPT0ga2V5O1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGlmICghcmVsb2FkICYmIGNvbGxlY3Rpb24ubW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmaW5kTW9kZWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29sbGVjdGlvbi5nZXQocmVsb2FkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmluZE1vZGVsKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbW9kZWxcbiAqIEBwYXJhbSByZWxvYWQgT3B0aW9uYWwuIERlZmF1bHQgaXMgZmFsc2VcbiAqIEByZXR1cm5zIHsqfVxuICovXG5CYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TW9kZWwgPSBmdW5jdGlvbiAobW9kZWwsIHJlbG9hZCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAocmVsb2FkID09PSB1bmRlZmluZWQpIHJlbG9hZCA9IGZhbHNlO1xuXG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuXG4gICAgZnVuY3Rpb24gZmluZE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gXy5maW5kKGNvbGxlY3Rpb24ubW9kZWxzLCBtb2RlbClcbiAgICB9XG5cbiAgICBpZiAoIXJlbG9hZCAmJiBjb2xsZWN0aW9uLm1vZGVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmluZE1vZGVsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbGxlY3Rpb24uZ2V0KHJlbG9hZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZpbmRNb2RlbCgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuXG4vKipcbiAqIEV4dGVuZHMgQmFzZUNvbGxlY3Rpb24gY2xhc3MgdG8gZG8gY3JlYXRlLCB1cGRhdGUgYW5kIGRlbGV0ZSB1c2luZyBQT1NULCBQVVQgYW5kIERFTEVURSB2ZXJicy5cbiAqIEBwYXJhbSAkaHR0cFxuICogQHBhcmFtICRxXG4gKiBAcGFyYW0gdXJsIFVzZWQgZm9yIGRvaW5nIEhUVFAgR0VUIGFuZCBmZXRjaCBvYmplY3RzIGZyb20gc2VydmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29sbGVjdGlvbigkaHR0cCwgJHEsIHVybCkge1xuICAgIEJhc2VDb2xsZWN0aW9uLmNhbGwodGhpcywgJGh0dHAsICRxLCB1cmwpO1xufVxuXG5Db2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQmFzZUNvbGxlY3Rpb24ucHJvdG90eXBlKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIG1vZGVsXG4gKiBAcGFyYW0gdXJsIE9wdGlvbmFsIGlmIG5vdCBwYXNzZWQgaXQgaXMgY29uc3RydWN0ZWQgdXNpbmcga2V5IGFuZCB1cmwgcGFzc2VkIGluIGNvbnN0cnVjdG9yXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQ29sbGVjdGlvbi5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG1vZGVsLCB1cmwpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkgdXJsID0gY29sbGVjdGlvbi51cmwgKyBtb2RlbC5rZXkgKyAnLyc7XG4gICAgY29sbGVjdGlvbi4kaHR0cC5wb3N0KHVybCwgbW9kZWwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9IGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAvL0ZvciByZXN0IGVuZHBvaW50cyB0aGF0IGRvIG5vdCByZXR1cm4gY3JlYXRlZCBqc29uIG9iamVjdCBpbiByZXNwb25zZVxuICAgICAgICAgICAgaWYgKChyZXNwb25zZURhdGEgPT09IHVuZGVmaW5lZCkgfHwgKHJlc3BvbnNlRGF0YSA9PT0gJycpKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbGxlY3Rpb24ubW9kZWxzLnB1c2goY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLm1vZGVscy5wdXNoKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBUaGlzIGlzIGZvciBuZXRtYXN0ZXIgc3BlY2lmaWMgZW5kcG9pbnRzIGFuZCB1c2VkIGJ5IG5ldG1hc3RlciBvYmplY3RzIG9ubHkuXG4gKiBUT0RPOiBHZW5lcmFsaXplXG4gKiBAcGFyYW0gbW9kZWxcbiAqIEBwYXJhbSB1cmwgT3B0aW9uYWxcbiAqIEByZXR1cm5zIHsqfVxuICovXG5Db2xsZWN0aW9uLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICB2YXIgdXJsID0gY29sbGVjdGlvbi51cmwgKyBtb2RlbC5rZXkgKyAnLyc7XG4gICAgY29sbGVjdGlvbi4kaHR0cC5wdXQodXJsLCBtb2RlbClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBfLnJlbW92ZShjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5rZXkgPT0gbW9kZWwua2V5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLm1vZGVscy5wdXNoKGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGNvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogVGhpcyBpcyBmb3IgbmV0bWFzdGVyIHNwZWNpZmljIGVuZHBvaW50cyBhbmQgdXNlZCBieSBuZXRtYXN0ZXIgb2JqZWN0cyBvbmx5LlxuICogVE9ETzogR2VuZXJhbGl6ZVxuICogQHBhcmFtIG1vZGVsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICB2YXIgdXJsID0gY29sbGVjdGlvbi51cmwgKyBtb2RlbC5rZXkgKyAnLyc7XG4gICAgY29sbGVjdGlvbi4kaHR0cC5kZWxldGUodXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF8ucmVtb3ZlKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuLmtleSA9PSBtb2RlbC5rZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0ga2V5bmFtZVxuICogQHBhcmFtIHVybCBPcHRpb25hbCBpZiBub3QgcGFzc2VkIGl0IGlzIGNvbnN0cnVjdGVkIHVzaW5nIGtleSBhbmQgdXJsIHBhc3NlZCBpbiBjb25zdHJ1Y3RvclxuICogQHJldHVybnMgeyp9XG4gKi9cbkNvbGxlY3Rpb24ucHJvdG90eXBlLmRlbGV0ZVVzaW5nS2V5ID0gZnVuY3Rpb24gKGtleSwga2V5bmFtZSwgdXJsKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgIGlmIChrZXluYW1lID09PSB1bmRlZmluZWQpIGtleW5hbWUgPSAna2V5JztcblxuICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHVybCA9IGNvbGxlY3Rpb24udXJsICsga2V5ICsgJy8nO1xuICAgIGNvbGxlY3Rpb24uJGh0dHAuZGVsZXRlKHVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBfLnJlbW92ZShjb2xsZWN0aW9uLm1vZGVscywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbltrZXluYW1lXSA9PSBrZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59OyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yMi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdOb2Rlc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIG5vZGVzbW9kZWwgPSBuZXcgTm9kZXNDb2xsZWN0aW9uKCRodHRwLCAkcSk7XG4gICAgICAgIHJldHVybiBub2Rlc21vZGVsO1xuICAgIH1dKTtcblxuLyoqXG4gKiBOb2Rlc0NvbGxlY3Rpb24gZXh0ZW5kcyBmcm9tIEJhc2VDb2xsZWN0aW9uLiBJdCBvdmVycmlkZXMgZXh0cmFjdCgpIGFuZCBhZGRzIGNvbW1pc3Npb24sIGRlY29tbWlzc2lvbiwgdXBncmFkZSBhbmRcbiAqIGRpc2NvdmVyIG1ldGhvZHNcbiAqIEBwYXJhbSAkaHR0cFxuICogQHBhcmFtICRxXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTm9kZXNDb2xsZWN0aW9uKCRodHRwLCAkcSkge1xuICAgIEJhc2VDb2xsZWN0aW9uLmNhbGwodGhpcywgJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLk5PREVTX0xJU1RfRU5EUE9JTlQpO1xufVxuXG5Ob2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCYXNlQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xuXG5Ob2Rlc0NvbGxlY3Rpb24ucHJvdG90eXBlLmV4dHJhY3QgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgLy9Db252ZXJ0IHRvIGFycmF5IGlmIHRoZSByZXR1cm5lZCBjb2xsZWN0aW9uIGlzIG5vdCBhbiBhcnJheVxuICAgIHJldHVybiBfLm1hcChyZXN1bHQuZGF0YSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFsdWUua2V5ID0ga2V5O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBleHRyYVZhcnMgSlNPTiBvYmplY3Qgb2YgZXh0cmEgYW5zaWJsZSBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIGJlIHBhc3NlZCB3aGlsZSBjb21taXNzaW9uaW5nIGEgbm9kZVxuICoge1xuICAgICAqIFwiZW52XCI6e1wiaHR0cF9wcm94eVwiOlwiaHR0cDovL3Byb3h5LmVzbC5jaXNjby5jb206ODA4MFwiLCBcImh0dHBzX3Byb3h5XCI6XCJodHRwOi8vcHJveHkuZXNsLmNpc2NvLmNvbTo4MDgwXCJ9LFxuICAgICAqIFwiY29udHJvbF9pbnRlcmZhY2VcIjogXCJldGgxXCIsIFwic2VydmljZV92aXBcIjogXCIxOTIuMTY4LjIuMjUyXCIsIFwidmFsaWRhdGVfY2VydHNcIjogXCJmYWxzZVwiLCBcIm5ldHBsdWdpbl9pZlwiIDogXCJldGgyXCJcbiAgICAgKiB9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5jb21taXNzaW9uID0gZnVuY3Rpb24gKG5vZGVPcHNPYmopIHtcbiAgICB2YXIgbm9kZXNjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5OT0RFU19DT01NSVNTSU9OX0VORFBPSU5UO1xuICAgIG5vZGVzY29sbGVjdGlvbi4kaHR0cC5wb3N0KHVybCwgbm9kZU9wc09iaiwge1xuICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vU2VydmVyIGRvZXNuJ3QgcmV0dXJuIGFueSBqc29uIGluIHJlc3BvbnNlXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWNvbW1pc3Npb24gPSBmdW5jdGlvbiAobm9kZU9wc09iaikge1xuICAgIHZhciBub2Rlc2NvbGxlY3Rpb24gPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IG5vZGVzY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLk5PREVTX0RFQ09NTUlTU0lPTl9FTkRQT0lOVDtcbiAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS51cGdyYWRlID0gZnVuY3Rpb24gKG5vZGVPcHNPYmopIHtcbiAgICB2YXIgbm9kZXNjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSBub2Rlc2NvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5OT0RFU19NQUlOVEVOQU5DRV9FTkRQT0lOVDtcbiAgICBub2Rlc2NvbGxlY3Rpb24uJGh0dHAucG9zdCh1cmwsIG5vZGVPcHNPYmosIHtcbiAgICAgICAgICAgICdoZWFkZXJzJzoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGlwXG4gKiBAcGFyYW0gZXh0cmFWYXJzIEpTT04gb2JqZWN0IG9mIGV4dHJhIGFuc2libGUgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBiZSBwYXNzZWQgd2hpbGUgZGlzY292ZXJpbmcgYSBub2RlXG4gKiB7XG4gICAgICogXCJlbnZcIjp7XCJodHRwX3Byb3h5XCI6XCJodHRwOi8vcHJveHkuZXNsLmNpc2NvLmNvbTo4MDgwXCIsIFwiaHR0cHNfcHJveHlcIjpcImh0dHA6Ly9wcm94eS5lc2wuY2lzY28uY29tOjgwODBcIn0sXG4gICAgICogXCJjb250cm9sX2ludGVyZmFjZVwiOiBcImV0aDFcIiwgXCJzZXJ2aWNlX3ZpcFwiOiBcIjE5Mi4xNjguMi4yNTJcIiwgXCJjbHVzdGVyLW5hbWVcIjogXCJjb250aXZcIiwgXCJub2RlLWxhYmVsXCIgOiBcIm5vZGUxXCJcbiAgICAgKiB9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuTm9kZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kaXNjb3ZlciA9IGZ1bmN0aW9uIChub2RlT3BzT2JqKSB7XG4gICAgdmFyIG5vZGVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gbm9kZXNjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuTk9ERVNfRElTQ09WRVJfRU5EUE9JTlQ7XG4gICAgbm9kZXNjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCBub2RlT3BzT2JqLCB7XG4gICAgICAgICAgICAnaGVhZGVycyc6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07IiwiYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiLCBbXSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzE0LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycsIFtdKTtcbnZhciBDb250aXZHbG9iYWxzID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC8vUkVTVCBlbmRwb2ludHMgZm9yIFxuICAgICAgICAnTkVUV09SS1NfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvbmV0d29ya3MvJyxcbiAgICAgICAgJ1BPTElDSUVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3BvbGljeXMvJyxcbiAgICAgICAgJ1JVTEVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3J1bGVzLycsXG4gICAgICAgICdBUFBMSUNBVElPTkdST1VQU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS9lbmRwb2ludEdyb3Vwcy8nLFxuICAgICAgICAnU0VSVklDRUxCU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS9zZXJ2aWNlTEJzLycsXG5cbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgVk9MTUFTVEVSXG4gICAgICAgICdWT0xVTUVTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdm9sdW1lcy8nLFxuICAgICAgICAnVk9MVU1FU19DUkVBVEVfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL2NyZWF0ZS8nLFxuICAgICAgICAnVk9MVU1FU19ERUxFVEVfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL3JlbW92ZS8nLFxuICAgICAgICAnVk9MVU1FU19DT1BZU05BUFNIT1RTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdm9sdW1lcy9jb3B5LycsXG4gICAgICAgICdWT0xVTUVTX1VTRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci91c2VzL21vdW50cy8nLFxuICAgICAgICAnVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9zbmFwc2hvdHMvJyxcblxuICAgICAgICAnU1RPUkFHRVBPTElDSUVTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvcG9saWNpZXMvJyxcblxuXG4gICAgICAgIC8vUkVTVCBlbmRwb2ludHMgZm9yIENMVVNURVJcbiAgICAgICAgJ05PREVTX0xJU1RfRU5EUE9JTlQnOiAnL2luZm8vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfRElTQ09WRVJfRU5EUE9JTlQnOiAnL2Rpc2NvdmVyL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0NPTU1JU1NJT05fRU5EUE9JTlQnOiAnL2NvbW1pc3Npb24vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfREVDT01NSVNTSU9OX0VORFBPSU5UJzogJy9kZWNvbW1pc3Npb24vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfTUFJTlRFTkFOQ0VfRU5EUE9JTlQnOiAnL21haW50ZW5hbmNlL25vZGVzJyxcblxuICAgICAgICAvL1JlZnJlc2ggaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICdSRUZSRVNIX0lOVEVSVkFMJzogNTAwMCxcblxuICAgICAgICAvL1JlZ0V4IGZvciB2YWxpZGF0aW9uXG4gICAgICAgICdDSURSX1JFR0VYJyA6ICdeKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkoXFwvKFswLTldfFsxLTJdWzAtOV18M1swLTJdKSkkJ1xuICAgIH1cbn0pKCk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudXRpbHMnLCBbXSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3VwcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvYXBwbGljYXRpb25ncm91cHMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmRhc2hib2FyZCcsIFsnY29udGl2Lm1vZGVscyddKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5sb2dpbicsIFsnY29udGl2LnV0aWxzJ10pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tZW51JywgW10pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtwb2xpY2llcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbmV0d29ya3MnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5vZGVzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5ub2RlcycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbm9kZXMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NlcnZpY2VsYnMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc3RvcmFnZXBvbGljaWVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zdG9yYWdlcG9saWNpZXMnLFxuICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgICAgIH0pXG4gICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS52b2x1bWVzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy92b2x1bWVzJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgICAgICB9KVxuICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG4vLyBEZWNsYXJlIGFwcCBsZXZlbCBtb2R1bGUgd2hpY2ggZGVwZW5kcyBvbiB2aWV3cywgYW5kIGNvbXBvbmVudHNcbmFuZ3VsYXIubW9kdWxlKCdjb250aXZBcHAnLCBbXG4gICAgICAgICd1aS5yb3V0ZXInLFxuICAgICAgICAnY29udGl2LmxvZ2luJyxcbiAgICAgICAgJ2NvbnRpdi5tZW51JyxcbiAgICAgICAgJ2NvbnRpdi5kYXNoYm9hcmQnLFxuICAgICAgICAnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJyxcbiAgICAgICAgJ2NvbnRpdi5uZXR3b3JrcycsXG4gICAgICAgICdjb250aXYubmV0d29ya3BvbGljaWVzJyxcbiAgICAgICAgJ2NvbnRpdi5zdG9yYWdlcG9saWNpZXMnLFxuICAgICAgICAnY29udGl2LnNlcnZpY2VsYnMnLFxuICAgICAgICAnY29udGl2LnZvbHVtZXMnLFxuICAgICAgICAnY29udGl2Lm5vZGVzJ1xuICAgIF0pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgIC8vYWJzdHJhY3Qgc3RhdGUgc2VydmVzIGFzIGEgUExBQ0VIT0xERVIgb3IgTkFNRVNQQUNFIGZvciBhcHBsaWNhdGlvbiBzdGF0ZXNcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Jywge1xuICAgICAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBmbHVpZCBjb250YWluZXJcIi8+J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbiAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTEvMTYuXG4gKi9cbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmFwcGxpY2F0aW9uZ3JvdXBzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwgYXMgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGNyZWF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCcsIFtcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgJ05ldHdvcmtzTW9kZWwnLFxuICAgICAgICAnUG9saWNpZXNNb2RlbCcsXG4gICAgICAgICdSdWxlc01vZGVsJyxcbiAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBTZXJ2aWNlJyxcbiAgICAgICAgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSxcbiAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsXG4gICAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLFxuICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwsXG4gICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3VwU2VydmljZSxcbiAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwubmV0d29ya3MgPSBbXTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmlzb2xhdGlvblBvbGljaWVzID0gW107XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwID0ge307XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5zZWxlY3RlZE5ldHdvcmsgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLnNlbGVjdGVkUG9saWN5ID0ge307XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5zZWxlY3RlZFBvbGljaWVzID0gW107XG5cbiAgICAgICAgICAgIC8vVG8gZGlzcGxheSBpbmNvbWluZyBhbmQgb3V0Z29pbmcgcnVsZXMgZm9yIHNlbGVjdGVkIHBvbGljaWVzXG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5pbmNvbWluZ1J1bGVzID0gW107XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5vdXRnb2luZ1J1bGVzID0gW107XG5cbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmlzb2xhdGlvblBvbGljaWVzVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvQXBwbGljYXRpb25Hcm91cCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBuZXR3b3JrcyBmb3IgdGhlIGdpdmVuIHRlbmFudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV0d29ya3MoKSB7XG4gICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwubmV0d29ya3MgPSBfLmZpbHRlcihyZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0ZW5hbnROYW1lJzogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHBvbGljaWVzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJc29sYXRpb25Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5pc29sYXRpb25Qb2xpY2llcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGQgcG9saWN5IHRvIG5ldyBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRJc29sYXRpb25Qb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cFNlcnZpY2UuYWRkSXNvbGF0aW9uUG9saWN5KGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmUgcG9saWN5IGZyb20gbmV3IGFwcGxpY2F0aW9uIGdyb3VwXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZUlzb2xhdGlvblBvbGljeShwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cFNlcnZpY2UucmVtb3ZlSXNvbGF0aW9uUG9saWN5KGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLCBwb2xpY3lOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQXBwbGljYXRpb25Hcm91cCgpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYXBwbGljYXRpb25Hcm91cC5uZXR3b3JrTmFtZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5zZWxlY3RlZE5ldHdvcmsubmV0d29ya05hbWU7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLmFwcGxpY2F0aW9uR3JvdXAua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2VuZXJhdGVLZXkoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYXBwbGljYXRpb25Hcm91cCk7XG5cbiAgICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbC5jcmVhdGUoYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYXBwbGljYXRpb25Hcm91cCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5hcHBsaWNhdGlvbkdyb3VwID0ge1xuICAgICAgICAgICAgICAgICAgICBncm91cE5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrTmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHBvbGljaWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLy9UT0RPOiBSZW1vdmUgaGFyZGNvZGVkIHRlbmFudC5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXROZXR3b3JrcygpO1xuICAgICAgICAgICAgZ2V0SXNvbGF0aW9uUG9saWNpZXMoKTtcblxuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuY3JlYXRlQXBwbGljYXRpb25Hcm91cCA9IGNyZWF0ZUFwcGxpY2F0aW9uR3JvdXA7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwuYWRkSXNvbGF0aW9uUG9saWN5ID0gYWRkSXNvbGF0aW9uUG9saWN5O1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cENyZWF0ZUN0cmwucmVtb3ZlSXNvbGF0aW9uUG9saWN5ID0gcmVtb3ZlSXNvbGF0aW9uUG9saWN5O1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmFwcGxpY2F0aW9uZ3JvdXBzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCBhcyBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmFwcGxpY2F0aW9uZ3JvdXBzLmVkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2VkaXQvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCBhcyBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgICAgICdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJyxcbiAgICAgICAgJ1BvbGljaWVzTW9kZWwnLFxuICAgICAgICAnUnVsZXNNb2RlbCcsXG4gICAgICAgICdBcHBsaWNhdGlvbkdyb3VwU2VydmljZScsXG4gICAgICAgICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLFxuICAgICAgICAgICAgICAgICAgUG9saWNpZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwsXG4gICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3VwU2VydmljZSxcbiAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsID0gdGhpcztcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5pc29sYXRpb25Qb2xpY2llcyA9IFtdO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXAgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5zZWxlY3RlZE5ldHdvcmsgPSB7fTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5zZWxlY3RlZFBvbGljeSA9IHt9O1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLnNlbGVjdGVkUG9saWNpZXMgPSBbXTtcblxuICAgICAgICAgICAgLy9UbyBkaXNwbGF5IGluY29taW5nIGFuZCBvdXRnb2luZyBydWxlcyBmb3Igc2VsZWN0ZWQgcG9saWNpZXNcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzID0gW107XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwub3V0Z29pbmdSdWxlcyA9IFtdO1xuXG5cbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5pc29sYXRpb25Qb2xpY2llc1Zpc2libGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyBzaG93IGVkaXQgb3IgZGV0YWlscyBzY3JlZW4gYmFzZWQgb24gdGhlIHJvdXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0FwcGxpY2F0aW9uR3JvdXBEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZGV0YWlscycsIHsna2V5JzogYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXAua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwRGV0YWlscygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cC5wb2xpY2llcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9UbyBkaXNwbGF5IHJ1bGVzIG9mIHNlbGVjdGVkIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZ2V0SW5jb21pbmdSdWxlcyhwb2xpY3ksICdkZWZhdWx0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzLCBydWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRPdXRnb2luZ1J1bGVzKHBvbGljeSwgJ2RlZmF1bHQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLm91dGdvaW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUFwcGxpY2F0aW9uR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmRlbGV0ZShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgcG9saWNpZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldElzb2xhdGlvblBvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2V0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5pc29sYXRpb25Qb2xpY2llcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZCBwb2xpY3kgdG8gYXBwbGljYXRpb24gZ3JvdXBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gYWRkSXNvbGF0aW9uUG9saWN5KCkge1xuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBTZXJ2aWNlLmFkZElzb2xhdGlvblBvbGljeShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZSBwb2xpY3kgZnJvbSBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVJc29sYXRpb25Qb2xpY3kocG9saWN5TmFtZSkge1xuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBTZXJ2aWNlLnJlbW92ZUlzb2xhdGlvblBvbGljeShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwsIHBvbGljeU5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzYXZlQXBwbGljYXRpb25Hcm91cCgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuc2F2ZShhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9BcHBsaWNhdGlvbkdyb3VwRGV0YWlscygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0TW9kZWxCeUtleSgkc3RhdGVQYXJhbXMua2V5KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgICAgICAvL0FwcGxpY2F0aW9uIEdyb3VwcyBtaWdodCBub3QgaGF2ZSBhbnkgcG9saWNpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZW0gc28gZGVmaW5lIGFuIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cC5wb2xpY2llcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuYXBwbGljYXRpb25Hcm91cC5wb2xpY2llcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGdldFJ1bGVzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdldElzb2xhdGlvblBvbGljaWVzKCk7XG5cbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5zYXZlQXBwbGljYXRpb25Hcm91cCA9IHNhdmVBcHBsaWNhdGlvbkdyb3VwO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cERldGFpbHNDdHJsLmFkZElzb2xhdGlvblBvbGljeSA9IGFkZElzb2xhdGlvblBvbGljeTtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uR3JvdXBEZXRhaWxzQ3RybC5yZW1vdmVJc29sYXRpb25Qb2xpY3kgPSByZW1vdmVJc29sYXRpb25Qb2xpY3k7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwRGV0YWlsc0N0cmwuZGVsZXRlQXBwbGljYXRpb25Hcm91cCA9IGRlbGV0ZUFwcGxpY2F0aW9uR3JvdXA7XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCBhcyBhcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwbGljYXRpb25ncm91cHMvYXBwbGljYXRpb25ncm91cGxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25Hcm91cExpc3RDdHJsJyxcbiAgICAgICAgWyckc2NvcGUnLCAnJGludGVydmFsJywgJyRmaWx0ZXInLCAnQXBwbGljYXRpb25Hcm91cHNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRBcHBsaWNhdGlvbkdyb3VwcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoYXBwbGljYXRpb25Hcm91cExpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbkdyb3VwTGlzdEN0cmwuZ3JvdXBzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ2dyb3VwTmFtZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGFwcGxpY2F0aW9uR3JvdXBMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgICAgICBnZXRBcHBsaWNhdGlvbkdyb3VwcyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgICAgICAvL0Rvbid0IHN0YXJ0IGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRBcHBsaWNhdGlvbkdyb3Vwcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xNi8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5hcHBsaWNhdGlvbmdyb3VwcycpXG4gICAgLmZhY3RvcnkoJ0FwcGxpY2F0aW9uR3JvdXBTZXJ2aWNlJywgWydSdWxlc01vZGVsJywgZnVuY3Rpb24gKFJ1bGVzTW9kZWwpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIHBvbGljeSB0byBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25Hcm91cEN0cmwgQ29udHJvbGxlciBmb3IgYXBwbGljYXRpb24gZ3JvdXAgZWRpdCBvciBjcmVhdGUgb3BlcmF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBhZGRJc29sYXRpb25Qb2xpY3koYXBwbGljYXRpb25Hcm91cEN0cmwpIHtcbiAgICAgICAgICAgIGlmIChfLmZpbmQoYXBwbGljYXRpb25Hcm91cEN0cmwuc2VsZWN0ZWRQb2xpY2llcywgYXBwbGljYXRpb25Hcm91cEN0cmwuc2VsZWN0ZWRQb2xpY3kpID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgLy9UbyBkaXNwbGF5IHNlbGVjdGVkIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cEN0cmwuc2VsZWN0ZWRQb2xpY2llcy5wdXNoKGFwcGxpY2F0aW9uR3JvdXBDdHJsLnNlbGVjdGVkUG9saWN5KTtcblxuICAgICAgICAgICAgICAgIC8vVG8gZGlzcGxheSBydWxlcyBvZiBzZWxlY3RlZCBwb2xpY2llc1xuICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZ2V0SW5jb21pbmdSdWxlcyhhcHBsaWNhdGlvbkdyb3VwQ3RybC5zZWxlY3RlZFBvbGljeS5wb2xpY3lOYW1lLCAnZGVmYXVsdCcpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXBwbGljYXRpb25Hcm91cEN0cmwuaW5jb21pbmdSdWxlcywgcnVsZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldE91dGdvaW5nUnVsZXMoYXBwbGljYXRpb25Hcm91cEN0cmwuc2VsZWN0ZWRQb2xpY3kucG9saWN5TmFtZSwgJ2RlZmF1bHQnKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFwcGxpY2F0aW9uR3JvdXBDdHJsLm91dGdvaW5nUnVsZXMsIHJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL1RvIGJlIGFkZGVkIHRvIGFwcGxpY2F0aW9uIGdyb3VwIGFuZCBzYXZlZCB0byB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb25Hcm91cEN0cmwuYXBwbGljYXRpb25Hcm91cC5wb2xpY2llc1xuICAgICAgICAgICAgICAgICAgICAucHVzaChhcHBsaWNhdGlvbkdyb3VwQ3RybC5zZWxlY3RlZFBvbGljeS5wb2xpY3lOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgcG9saWN5IGZyb20gYXBwbGljYXRpb24gZ3JvdXBcbiAgICAgICAgICogQHBhcmFtIGFwcGxpY2F0aW9uR3JvdXBDdHJsIENvbnRyb2xsZXIgZm9yIGFwcGxpY2F0aW9uIGdyb3VwIGVkaXQgb3IgY3JlYXRlIG9wZXJhdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlSXNvbGF0aW9uUG9saWN5KGFwcGxpY2F0aW9uR3JvdXBDdHJsLCBwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICBfLnJlbW92ZShhcHBsaWNhdGlvbkdyb3VwQ3RybC5hcHBsaWNhdGlvbkdyb3VwLnBvbGljaWVzLCBmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvbGljeSA9PSBwb2xpY3lOYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLnJlbW92ZShhcHBsaWNhdGlvbkdyb3VwQ3RybC5pbmNvbWluZ1J1bGVzLCBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlLnBvbGljeU5hbWUgPT0gcG9saWN5TmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXy5yZW1vdmUoYXBwbGljYXRpb25Hcm91cEN0cmwub3V0Z29pbmdSdWxlcywgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5wb2xpY3lOYW1lID09IHBvbGljeU5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRJc29sYXRpb25Qb2xpY3k6IGFkZElzb2xhdGlvblBvbGljeSxcbiAgICAgICAgICAgIHJlbW92ZUlzb2xhdGlvblBvbGljeTogcmVtb3ZlSXNvbGF0aW9uUG9saWN5XG4gICAgICAgIH1cblxuICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZGFzaGJvYXJkJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuZGFzaGJvYXJkJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kYXNoYm9hcmQnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXNoYm9hcmRDdHJsIGFzIGRhc2hib2FyZEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnZGFzaGJvYXJkL2Rhc2hib2FyZC5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0Rhc2hib2FyZEN0cmwnLFxuICAgICAgICBbXG4gICAgICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgICAgICckaW50ZXJ2YWwnLFxuICAgICAgICAgICAgJ05vZGVzTW9kZWwnLFxuICAgICAgICAgICAgJ05ldHdvcmtzTW9kZWwnLFxuICAgICAgICAgICAgJ1ZvbHVtZXNNb2RlbCcsXG4gICAgICAgICAgICAnQXBwbGljYXRpb25Hcm91cHNNb2RlbCcsXG4gICAgICAgICAgICAnUG9saWNpZXNNb2RlbCcsXG4gICAgICAgICAgICAnU3RvcmFnZVBvbGljaWVzTW9kZWwnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICAgICAgICAgTm9kZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFzaGJvYXJkQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXREYXNoYm9hcmRJbmZvKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5ub2RlcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwubmV0d29ya3MgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwudm9sdW1lcyA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25Hcm91cHNNb2RlbC5nZXQocmVsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwuZ3JvdXBzID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5uZXR3b3JrcG9saWNpZXMgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFN0b3JhZ2VQb2xpY2llc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5zdG9yYWdlcG9saWNpZXMgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9XaWxsIGRpc3BsYXkgMCBpZiB0aGVyZSBpcyBlcnJvciBmZXRjaGluZyBkYXRhXG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5ub2RlcyA9IDA7XG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5uZXR3b3JrcyA9IDA7XG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC52b2x1bWVzID0gMDtcbiAgICAgICAgICAgICAgICBkYXNoYm9hcmRDdHJsLmdyb3VwcyA9IDA7XG4gICAgICAgICAgICAgICAgZGFzaGJvYXJkQ3RybC5uZXR3b3JrcG9saWNpZXMgPSAwO1xuICAgICAgICAgICAgICAgIGRhc2hib2FyZEN0cmwuc3RvcmFnZXBvbGljaWVzID0gMDtcblxuICAgICAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgICAgIGdldERhc2hib2FyZEluZm8oZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXREYXNoYm9hcmRJbmZvKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIDUwMDApO1xuXG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmxvZ2luJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2LmxvZ2luJywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbG9naW4vbG9naW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCBhcyBsb2dpbkN0cmwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIFsnJHN0YXRlJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBsb2dpbkN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub0Rhc2hib2FyZCgpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LmRhc2hib2FyZCcsIHt1c2VybmFtZTogbG9naW5DdHJsLnVzZXJuYW1lfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvZ2luKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvRGFzaGJvYXJkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobG9naW5DdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihsb2dpbkN0cmwpO1xuICAgICAgICAgICAgbG9naW5DdHJsLmxvZ2luID0gbG9naW47XG5cbiAgICAgICAgfV0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tZW51JylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL20nLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbWVudS9tZW51Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNZW51Q3RybCBhcyBtZW51Q3RybCcsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7dXNlcm5hbWU6IG51bGx9XG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ01lbnVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgIHZhciBtZW51Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubG9naW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lbnVDdHJsLnVzZXJuYW1lID0gJHN0YXRlUGFyYW1zLnVzZXJuYW1lO1xuICAgICAgICBtZW51Q3RybC5sb2dvdXQgPSBsb2dvdXQ7XG5cbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzEwLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsIGFzIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3ljcmVhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignSXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCcsIFsnJHN0YXRlJywgJ1BvbGljaWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCBQb2xpY2llc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICB2YXIgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5saXN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYW5jZWxDcmVhdGluZygpIHtcbiAgICAgICAgICAgIHJldHVyblRvUG9saWNpZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgIGlmIChpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5LmtleSA9XG4gICAgICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuZ2VuZXJhdGVLZXkoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5uZXdQb2xpY3kpO1xuICAgICAgICAgICAgICAgIFBvbGljaWVzTW9kZWwuY3JlYXRlKGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwubmV3UG9saWN5ID0ge1xuICAgICAgICAgICAgICAgIHBvbGljeU5hbWU6ICcnLFxuICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaXNvbGF0aW9uUG9saWN5Q3JlYXRlQ3RybC5jcmVhdGVQb2xpY3kgPSBjcmVhdGVQb2xpY3k7XG4gICAgICAgIGlzb2xhdGlvblBvbGljeUNyZWF0ZUN0cmwuY2FuY2VsQ3JlYXRpbmcgPSBjYW5jZWxDcmVhdGluZztcblxuICAgICAgICByZXNldEZvcm0oKTtcbiAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0lzb2xhdGlvblBvbGljeURldGFpbHNDdHJsIGFzIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvaXNvbGF0aW9ucG9saWN5ZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRpdC86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnSXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwgYXMgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9pc29sYXRpb25wb2xpY3lkZXRhaWxzLmh0bWwnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignSXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwnLCBbXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnJHN0YXRlUGFyYW1zJyxcbiAgICAgICAgJ1BvbGljaWVzTW9kZWwnLFxuICAgICAgICAnUnVsZXNNb2RlbCcsXG4gICAgICAgICdOZXR3b3Jrc01vZGVsJyxcbiAgICAgICAgJ0FwcGxpY2F0aW9uR3JvdXBzTW9kZWwnLFxuICAgICAgICAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFBvbGljaWVzTW9kZWwsIFJ1bGVzTW9kZWwsIE5ldHdvcmtzTW9kZWwsIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV0d29ya3MgPSBbXTtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXBzID0gW107XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlT3V0Z29pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5kaXNhYmxlSW5jb21pbmdOZXR3b3JrU2VsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cCA9ICcnO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAgPSAnJztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY2llcygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24ubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljeURldGFpbHMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmRldGFpbHMnLCB7a2V5OiBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kua2V5fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR28gYmFjayB0byBwb2xpY3kgZGV0YWlscyBhZnRlciBkb25lIGVkaXRpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZG9uZUVkaXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVBvbGljeSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmRlbGV0ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG8gc2hvdyBlZGl0IG9yIGRldGFpbHMgc2NyZWVuIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRNb2RlKCkge1xuICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubW9kZSA9ICdkZXRhaWxzJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV3SW5jb21pbmdSdWxlKCkge1xuICAgICAgICAgICAgICAgIC8vUnVsZSBvYmplY3QgdG8gYmUgY3JlYXRlZCBvbiBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhbGxvdycsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbmRwb2ludEdyb3VwOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZnJvbU5ldHdvcms6ICcnLFxuICAgICAgICAgICAgICAgICAgICBmcm9tSVBBZGRyZXNzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICd0Y3AnLC8vdG8gbWFrZSBpdCBkZWZhdWx0IHNlbGVjdGVkIG9wdGlvbiBpbiBVSVxuICAgICAgICAgICAgICAgICAgICBwb3J0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgICB0ZW5hbnROYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgIHBvbGljeU5hbWU6IGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeS5wb2xpY3lOYW1lXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV3T3V0Z29pbmdSdWxlKCkge1xuICAgICAgICAgICAgICAgIC8vUnVsZSBvYmplY3QgdG8gYmUgY3JlYXRlZCBvbiBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhbGxvdycsLy90byBtYWtlIGl0IGRlZmF1bHQgc2VsZWN0ZWQgb3B0aW9uIGluIFVJXG4gICAgICAgICAgICAgICAgICAgIHRvRW5kcG9pbnRHcm91cDogJycsXG4gICAgICAgICAgICAgICAgICAgIHRvTmV0d29yazogJycsXG4gICAgICAgICAgICAgICAgICAgIHRvSVBBZGRyZXNzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICd0Y3AnLC8vdG8gbWFrZSBpdCBkZWZhdWx0IHNlbGVjdGVkIG9wdGlvbiBpbiBVSVxuICAgICAgICAgICAgICAgICAgICBwb3J0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgdGVuYW50TmFtZTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICBwb2xpY3lOYW1lOiBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kucG9saWN5TmFtZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBuZXR3b3JrIG5hbWVzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvL18uZmlsdGVyKCkgcmV0dXJucyBhIG5ldyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXR3b3JrcyA9IF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgYXBwbGljYXRpb24gZ3JvdXAgbmFtZXMgZm9yIHRoZSBnaXZlbiB0ZW5hbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFwcGxpY2F0aW9uR3JvdXBzKCkge1xuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uR3JvdXBzTW9kZWwuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9fLmZpbHRlcigpIHJldHVybnMgYSBuZXcgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXBzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbmFudE5hbWUnOiAnZGVmYXVsdCcvL1RPRE86IFJlbW92ZSBoYXJkY29kZWQgdGVuYW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV2ZW50IGhhbmRsZXIgdG8gZGlzYWJsZSBuZXR3b3JrIHNlbGVjdGlvbiBib3ggb25jZSBhcHBsaWNhdGlvbiBncm91cCBpcyBzZWxlY3RlZCB3aGlsZSBjcmVhdGluZyBhIG5ld1xuICAgICAgICAgICAgICogcnVsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gb25DaGFuZ2VPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9JZiBhcHBsaWNhdGlvbiBncm91cCBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9FbmRwb2ludEdyb3VwID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nU2VsZWN0ZWRBcHBsaWNhdGlvbkdyb3VwLmdyb3VwTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlLnRvTmV0d29yayA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cC5uZXR3b3JrTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZU91dGdvaW5nTmV0d29ya1NlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9XaGVuICdub25lJyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUudG9FbmRwb2ludEdyb3VwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmRpc2FibGVPdXRnb2luZ05ldHdvcmtTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXZlbnQgaGFuZGxlciB0byBkaXNhYmxlIG5ldHdvcmsgc2VsZWN0aW9uIGJveCBvbmNlIGFwcGxpY2F0aW9uIGdyb3VwIGlzIHNlbGVjdGVkIHdoaWxlIGNyZWF0aW5nIGEgbmV3XG4gICAgICAgICAgICAgKiBydWxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBvbkNoYW5nZUluY29taW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdTZWxlY3RlZEFwcGxpY2F0aW9uR3JvdXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIGFwcGxpY2F0aW9uIGdyb3VwIGhhcyBiZWVuIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5mcm9tRW5kcG9pbnRHcm91cCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cC5ncm91cE5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZS5mcm9tTmV0d29yayA9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1NlbGVjdGVkQXBwbGljYXRpb25Hcm91cC5uZXR3b3JrTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9XaGVuICdub25lJyBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUuZnJvbUVuZHBvaW50R3JvdXAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGlzYWJsZUluY29taW5nTmV0d29ya1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdlbmVyYXRlcyBydWxlIGlkXG4gICAgICAgICAgICAgKiBUT0RPIE1ha2UgaXQgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nZXIgb25jZSB3ZSBoYXZlIG11bHRpcGxlIHVzZXJzIHVwZGF0aW5nIHNhbWUgcG9saWN5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUnVsZUlkKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICBydWxlLnJ1bGVJZCA9XG4gICAgICAgICAgICAgICAgICAgIChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzLmxlbmd0aCArIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm91dGdvaW5nUnVsZXMubGVuZ3RoICsgMSkudG9TdHJpbmcoKSArICctJyArXG4gICAgICAgICAgICAgICAgICAgIERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSdWxlIGlzIHNhdmVkIHRvIHNlcnZlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRJbmNvbWluZ1J1bGUoKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVSdWxlSWQoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3SW5jb21pbmdSdWxlKTtcbiAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUua2V5ID0gUnVsZXNNb2RlbC5nZW5lcmF0ZUtleShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdJbmNvbWluZ1J1bGUpO1xuICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuY3JlYXRlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld0luY29taW5nUnVsZSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5pbmNvbWluZ1J1bGVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXROZXdJbmNvbWluZ1J1bGUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bGUgaXMgc2F2ZWQgdG8gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZE91dGdvaW5nUnVsZSgpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVJ1bGVJZChpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5uZXdPdXRnb2luZ1J1bGUpO1xuICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZS5rZXkgPSBSdWxlc01vZGVsLmdlbmVyYXRlS2V5KGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm5ld091dGdvaW5nUnVsZSk7XG4gICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5jcmVhdGUoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwubmV3T3V0Z29pbmdSdWxlKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm91dGdvaW5nUnVsZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXNldE5ld091dGdvaW5nUnVsZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVsZXRlIGluY29taW5nIHJ1bGUgZnJvbSBzZXJ2ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlSW5jb21pbmdSdWxlKGtleSkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIFJ1bGVzTW9kZWwuZGVsZXRlVXNpbmdLZXkoa2V5KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmluY29taW5nUnVsZXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5rZXkgPT0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlbGV0ZSBvdXRnb2luZyBydWxlIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU91dGdvaW5nUnVsZShrZXkpIHtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmRlbGV0ZVVzaW5nS2V5KGtleSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vdXRnb2luZ1J1bGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ua2V5ID09IGtleTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3IoaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLnBvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgUnVsZXNNb2RlbC5nZXRJbmNvbWluZ1J1bGVzKHBvbGljeS5wb2xpY3lOYW1lLCAnZGVmYXVsdCcpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuaW5jb21pbmdSdWxlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TmV3SW5jb21pbmdSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBSdWxlc01vZGVsLmdldE91dGdvaW5nUnVsZXMocG9saWN5LnBvbGljeU5hbWUsICdkZWZhdWx0JykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRpb25Qb2xpY3lEZXRhaWxzQ3RybC5vdXRnb2luZ1J1bGVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXROZXdPdXRnb2luZ1J1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdldE5ldHdvcmtzKCk7XG4gICAgICAgICAgICBnZXRBcHBsaWNhdGlvbkdyb3VwcygpO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlUG9saWN5ID0gZGVsZXRlUG9saWN5O1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlSW5jb21pbmdSdWxlID0gZGVsZXRlSW5jb21pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZGVsZXRlT3V0Z29pbmdSdWxlID0gZGVsZXRlT3V0Z29pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuYWRkSW5jb21pbmdSdWxlID0gYWRkSW5jb21pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuYWRkT3V0Z29pbmdSdWxlID0gYWRkT3V0Z29pbmdSdWxlO1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwuZG9uZUVkaXRpbmcgPSBkb25lRWRpdGluZztcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuICAgICAgICAgICAgLy9FdmVudCBIYW5kbGVyc1xuICAgICAgICAgICAgaXNvbGF0aW9uUG9saWN5RGV0YWlsc0N0cmwub25DaGFuZ2VPdXRnb2luZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb24gPSBvbkNoYW5nZU91dGdvaW5nQXBwbGljYXRpb25Hcm91cFNlbGVjdGlvbjtcbiAgICAgICAgICAgIGlzb2xhdGlvblBvbGljeURldGFpbHNDdHJsLm9uQ2hhbmdlSW5jb21pbmdBcHBsaWNhdGlvbkdyb3VwU2VsZWN0aW9uID0gb25DaGFuZ2VJbmNvbWluZ0FwcGxpY2F0aW9uR3JvdXBTZWxlY3Rpb247XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcblxuICAgICAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJc29sYXRpb25Qb2xpY3lMaXN0Q3RybCBhcyBpc29sYXRpb25Qb2xpY3lMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZXR3b3JrX3BvbGljaWVzL2lzb2xhdGlvbnBvbGljeWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignSXNvbGF0aW9uUG9saWN5TGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdQb2xpY2llc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBQb2xpY2llc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHBvbGljaWVzTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQb2xpY2llcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBQb2xpY2llc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIocG9saWNpZXNMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY2llc0xpc3RDdHJsLnBvbGljaWVzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ3BvbGljeU5hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIocG9saWNpZXNMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFBvbGljaWVzKGZhbHNlKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAvL0Rvbid0IHN0YXJ0IGF1dG8tcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQb2xpY2llcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL25ldHdvcmtwb2xpY2llcycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsIGFzIG5ldHdvcmtQb2xpY2llc1RhYnNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvbmV0d29ya3BvbGljaWVzdGFicy5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaXNvbGF0aW9uJyxcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMucHJpb3JpdGl6YXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3ByaW9yaXRpemF0aW9uJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya1BvbGljaWVzVGFic0N0cmwgYXMgbmV0d29ya1BvbGljaWVzVGFic0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya19wb2xpY2llcy9wcmlvcml0aXphdGlvbnBvbGljeWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGgnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2JhbmR3aWR0aCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsIGFzIG5ldHdvcmtQb2xpY2llc1RhYnNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvYmFuZHdpZHRocG9saWN5bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLnJlZGlyZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9yZWRpcmVjdGlvbicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsIGFzIG5ldHdvcmtQb2xpY2llc1RhYnNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtfcG9saWNpZXMvcmVkaXJlY3Rpb25wb2xpY3lsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtQb2xpY2llc1RhYnNDdHJsJywgWyckc3RhdGUnLCBmdW5jdGlvbiAoJHN0YXRlKSB7XG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAyLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MuY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2NyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya0NyZWF0ZUN0cmwgYXMgbmV0d29ya0NyZWF0ZUN0cmwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ05ldHdvcmtzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIE5ldHdvcmtzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgbmV0d29ya0NyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwuY2lkclBhdHRlcm4gPSBDb250aXZHbG9iYWxzLkNJRFJfUkVHRVg7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvTmV0d29ya3MoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3Jrcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbENyZWF0aW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVyblRvTmV0d29ya3MoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTmV0d29yaygpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKG5ldHdvcmtDcmVhdGVDdHJsLmZvcm0uJHZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay5rZXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay50ZW5hbnROYW1lICsgJzonICsgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yay5uZXR3b3JrTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgTmV0d29ya3NNb2RlbC5jcmVhdGUobmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yaykudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvTmV0d29ya3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKG5ldHdvcmtDcmVhdGVDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRGb3JtKCkge1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0NyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihuZXR3b3JrQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwubmV3TmV0d29yayA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBlbmNhcDogJ3Z4bGFuJyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheTogJycsXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV0d29ya0NyZWF0ZUN0cmwuY3JlYXRlTmV0d29yayA9IGNyZWF0ZU5ldHdvcms7XG4gICAgICAgICAgICBuZXR3b3JrQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05ldHdvcmtEZXRhaWxzQ3RybCBhcyBuZXR3b3JrRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmV0d29ya3MvbmV0d29ya2RldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOZXR3b3JrRGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ05ldHdvcmtzTW9kZWwnLCAnQXBwbGljYXRpb25Hcm91cHNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBOZXR3b3Jrc01vZGVsLCBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXR3b3JrRGV0YWlsc0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9OZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5uZXR3b3Jrcy5saXN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVsZXRlTmV0d29yaygpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5ldHdvcmtEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5ldHdvcmtEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIE5ldHdvcmtzTW9kZWwuZGVsZXRlKG5ldHdvcmtEZXRhaWxzQ3RybC5uZXR3b3JrKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvTmV0d29ya3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya0RldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihuZXR3b3JrRGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEdldCBhcHBsaWNhdGlvbiBncm91cHMgYmVsb25naW5nIHRvIGEgbmV0d29ya1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFwcGxpY2F0aW9uR3JvdXBzKHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbkdyb3Vwc01vZGVsLmdldChyZWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0RldGFpbHNDdHJsLmFwcGxpY2F0aW9uR3JvdXBzID0gJGZpbHRlcignb3JkZXJCeScpKF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZXR3b3JrTmFtZSc6IG5ldHdvcmtEZXRhaWxzQ3RybC5uZXR3b3JrLm5ldHdvcmtOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgJ2dyb3VwTmFtZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5ldHdvcmtEZXRhaWxzQ3RybCk7XG5cbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtEZXRhaWxzQ3RybC5uZXR3b3JrID0gbmV0d29yaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBuZXR3b3JrRGV0YWlsc0N0cmwuZGVsZXRlTmV0d29yayA9IGRlbGV0ZU5ldHdvcms7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgICAgICAvL0Rvbid0IGRvIGF1dG9yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFwcGxpY2F0aW9uR3JvdXBzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3MnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3Jrcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya3NMaXN0Q3RybCBhcyBuZXR3b3Jrc0xpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25ldHdvcmtzL25ldHdvcmtsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ05ldHdvcmtzTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdOZXR3b3Jrc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBOZXR3b3Jrc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5ldHdvcmtzTGlzdEN0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrcyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5ldHdvcmtzTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtzTGlzdEN0cmwubmV0d29ya3MgPSAkZmlsdGVyKCdvcmRlckJ5JykocmVzdWx0LCAnbmV0d29ya05hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobmV0d29ya3NMaXN0Q3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Mb2FkIGZyb20gY2FjaGUgZm9yIHF1aWNrIGRpc3BsYXkgaW5pdGlhbGx5XG4gICAgICAgICAgICBnZXROZXR3b3JrcyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChwcm9taXNlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnZXROZXR3b3Jrcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmNvbW1pc3Npb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbW1pc3Npb24vOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVDb21taXNzaW9uQ3RybCBhcyBub2RlQ29tbWlzc2lvbkN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWNvbW1pc3Npb24uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRpc2NvdmVyJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kaXNjb3ZlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVDb21taXNzaW9uQ3RybCBhcyBub2RlQ29tbWlzc2lvbkN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWNvbW1pc3Npb24uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZUNvbW1pc3Npb25DdHJsJywgW1xuICAgICAgICAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdOb2Rlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBOb2Rlc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVDb21taXNzaW9uQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG8gc2hvdyBjb21taXNzaW9uIG9yIGRpc2NvdmVyIHNjcmVlbiBiYXNlZCBvbiB0aGUgcm91dGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0TW9kZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHN0YXRlLmlzKCdjb250aXYubWVudS5ub2Rlcy5jb21taXNzaW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLm1vZGUgPSAnY29tbWlzc2lvbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLm1vZGUgPSAnZGlzY292ZXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Ob2RlRGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuaW5mbycsIHsna2V5JzogJHN0YXRlUGFyYW1zLmtleX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub05vZGVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUubm9kZXMubGlzdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxDb21taXNzaW9uaW5nTm9kZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub05vZGVEZXRhaWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbERpc2NvdmVyaW5nTm9kZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5Ub05vZGVzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUV4dHJhVmFycygpIHtcbiAgICAgICAgICAgICAgICAvL0FkZCBhbnNpYmxlIHZhcmlhYmxlcyB0byBleHRyYV92YXJzXG4gICAgICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmFuc2libGVWYXJpYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1tpdGVtLm5hbWVdID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vQWRkIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBleHRyYV92YXJzXG4gICAgICAgICAgICAgICAgdmFyIGVudlZhcnMgPSB7fTtcbiAgICAgICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZW52VmFyaWFibGVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZW52VmFyc1tpdGVtLm5hbWVdID0gaXRlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1snZW52J10gPSBlbnZWYXJzO1xuICAgICAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5ub2RlT3BzT2JqLmV4dHJhX3ZhcnMgPSBKU09OLnN0cmluZ2lmeShub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbW1pc3Npb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVDb21taXNzaW9uQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLm5vZGVPcHNPYmoubm9kZXMgPSBbJHN0YXRlUGFyYW1zLmtleV07XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXBFeHRyYVZhcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXh0cmFWYXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIE5vZGVzTW9kZWwuY29tbWlzc2lvbihub2RlQ29tbWlzc2lvbkN0cmwubm9kZU9wc09iaikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub05vZGVEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Iobm9kZUNvbW1pc3Npb25DdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRpc2NvdmVyKCkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlQ29tbWlzc2lvbkN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKG5vZGVDb21taXNzaW9uQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUlQQWRkckFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUV4dHJhVmFycygpO1xuICAgICAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmRpc2NvdmVyKG5vZGVDb21taXNzaW9uQ3RybC5ub2RlT3BzT2JqKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvTm9kZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihub2RlQ29tbWlzc2lvbkN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDbGVhbnVwIGFuc2libGUgdmFyaWFibGVzIGZvciBuZXR3b3JrIG1vZGUgYW5kIHNjaGVkdWxlci4gbmctaWYgcmVtb3ZlcyBpdCBmcm9tIHRoZSB2aWV3IChET00pIGJ1dCBub3QgZnJvbVxuICAgICAgICAgICAgICogdGhlIG1vZGVsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGVhbnVwRXh0cmFWYXJzKCkge1xuICAgICAgICAgICAgICAgIC8vQ2xlYW51cCBmb3IgbmV0d29yayBtb2RlXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVDb21taXNzaW9uQ3RybC5leHRyYV92YXJzWydjb250aXZfbmV0d29ya19tb2RlJ10gPT0gJ2FjaScpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGVDb21taXNzaW9uQ3RybC5leHRyYV92YXJzWydmd2RfbW9kZSddO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1snYXBpY191cmwnXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGVDb21taXNzaW9uQ3RybC5leHRyYV92YXJzWydhcGljX3VzZXJuYW1lJ107XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1snYXBpY19wYXNzd29yZCddO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbm9kZUNvbW1pc3Npb25DdHJsLmV4dHJhX3ZhcnNbJ2FwaWNfbGVhZl9ub2RlcyddO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbm9kZUNvbW1pc3Npb25DdHJsLmV4dHJhX3ZhcnNbJ2FwaWNfcGh5c19kb21haW4nXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGVDb21taXNzaW9uQ3RybC5leHRyYV92YXJzWydhcGljX2VwZ19icmlkZ2VfZG9tYWluJ107XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1snYXBpY19jb250cmFjdHNfdW5yZXN0cmljdGVkX21vZGUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9DbGVhbnVwIGZvciBzY2hlZHVsZXJcbiAgICAgICAgICAgICAgICBpZiAobm9kZUNvbW1pc3Npb25DdHJsLmV4dHJhX3ZhcnNbJ3NjaGVkdWxlcl9wcm92aWRlciddID09ICduYXRpdmUtc3dhcm0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlQ29tbWlzc2lvbkN0cmwuZXh0cmFfdmFyc1sndWNwX2Jvb3RzdHJhcF9ub2RlX25hbWUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUlQQWRkckFycmF5KCkge1xuICAgICAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5ub2RlT3BzT2JqLmFkZHJzID0gXy53b3Jkcyhub2RlQ29tbWlzc2lvbkN0cmwubm9kZUlQQWRkciwgL1teLCBdKy9nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLm5vZGVPcHNPYmogPSB7fTtcbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5leHRyYV92YXJzID0ge307IC8vVE9ETyBJbnRpYWxpemUgZnJvbSBnbG9iYWwgc2V0dGluZ3NcbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5hbnNpYmxlVmFyaWFibGVzID0gW107XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZW52VmFyaWFibGVzID0gW107XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwubm9kZUlQQWRkciA9ICcnOyAvL0lQIGFkZHJlc3Mgb2Ygbm9kZXMgdG8gZGlzY292ZXJcblxuICAgICAgICAgICAgbm9kZUNvbW1pc3Npb25DdHJsLmNhbmNlbENvbW1pc3Npb25pbmdOb2RlID0gY2FuY2VsQ29tbWlzc2lvbmluZ05vZGU7XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuY29tbWlzc2lvbiA9IGNvbW1pc3Npb247XG4gICAgICAgICAgICBub2RlQ29tbWlzc2lvbkN0cmwuZGlzY292ZXIgPSBkaXNjb3ZlcjtcbiAgICAgICAgICAgIG5vZGVDb21taXNzaW9uQ3RybC5jYW5jZWxEaXNjb3ZlcmluZ05vZGUgPSBjYW5jZWxEaXNjb3ZlcmluZ05vZGU7XG5cbiAgICAgICAgICAgIHNldE1vZGUoKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUNvbW1pc3Npb25DdHJsKTtcbiAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihub2RlQ29tbWlzc2lvbkN0cmwpO1xuXG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8yNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ub2RlcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuaW5mbycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWluZm8uaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMuc3RhdHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3N0YXRzJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZURldGFpbHNDdHJsIGFzIG5vZGVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2Rlc3RhdHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5vZGVzLmRldGFpbHMubG9ncycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9ncycsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ05vZGVEZXRhaWxzQ3RybCBhcyBub2RlRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbm9kZXMvbm9kZWxvZ3MuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignTm9kZURldGFpbHNDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRzY29wZScsICckaW50ZXJ2YWwnLCAnTm9kZXNNb2RlbCcsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHNjb3BlLCAkaW50ZXJ2YWwsIE5vZGVzTW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBub2RlRGV0YWlsc0N0cmwgPSB0aGlzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWNvbW1pc3Npb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVPcHNPYmogPSB7XG4gICAgICAgICAgICAgICAgICBub2RlczogWyRzdGF0ZVBhcmFtcy5rZXldXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBOb2Rlc01vZGVsLmRlY29tbWlzc2lvbihub2RlT3BzT2JqKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9EaXNhYmxlIGFsbCBidXR0b25zIGluaXRpYWxseS4gUG9sbCB3aWxsIGFzc2lnbiB2YWx1ZXMgYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBncmFkZSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU9wc09iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IFskc3RhdGVQYXJhbXMua2V5XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTm9kZXNNb2RlbC51cGdyYWRlKG5vZGVPcHNPYmopLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAvL0Rpc2FibGUgYWxsIGJ1dHRvbnMgaW5pdGlhbGx5LiBQb2xsIHdpbGwgYXNzaWduIHZhbHVlcyBhcHByb3ByaWF0ZWx5LlxuICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERpc3BsYXkgYnV0dG9ucyBiYXNlZCBvbiBzdGF0dXMgb2Ygbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRCdXR0b25EaXNwbGF5KCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZURldGFpbHNDdHJsLm5vZGVbJ2ludmVudG9yeV9zdGF0ZSddLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdVbmFsbG9jYXRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RlY29tbWlzc2lvbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUHJvdmlzaW9uaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5zaG93Q29tbWlzc2lvbkJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuY29tbWlzc2lvbkJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC51cGdyYWRlQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FsbG9jYXRlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NhbmNlbGxlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTWFpbnRlbmFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnNob3dDb21taXNzaW9uQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5jb21taXNzaW9uQnV0dG9uRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLnVwZ3JhZGVCdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDovL0NsdXN0ZXIgc2hvdWxkIG5vdCBiZSBpbiB0aGlzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwuc2hvd0NvbW1pc3Npb25CdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZURldGFpbHNDdHJsLmNvbW1pc3Npb25CdXR0b25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZUJ1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZUluZm8ocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgTm9kZXNNb2RlbC5nZXRNb2RlbEJ5S2V5KCRzdGF0ZVBhcmFtcy5rZXksIHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1dHRvbkRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVEZXRhaWxzQ3RybC5kZWNvbW1pc3Npb24gPSBkZWNvbW1pc3Npb247XG4gICAgICAgICAgICBub2RlRGV0YWlsc0N0cmwudXBncmFkZSA9IHVwZ3JhZGU7XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0Tm9kZUluZm8oZmFsc2UpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldE5vZGVJbmZvKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIDUwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDMvMjIvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubm9kZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5ub2Rlcy5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTm9kZUxpc3RDdHJsIGFzIG5vZGVMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdub2Rlcy9ub2RlbGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdOb2RlTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdOb2Rlc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBOb2Rlc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICB2YXIgbm9kZUxpc3RDdHJsID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiBnZXROb2RlcyhyZWxvYWQpIHtcbiAgICAgICAgICAgIE5vZGVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUxpc3RDdHJsLm5vZGVzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ2tleScpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIobm9kZUxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICBnZXROb2RlcyhmYWxzZSk7XG5cbiAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdldE5vZGVzKHRydWUpO1xuICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgfVxuICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzEyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmNyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2VydmljZWxiQ3JlYXRlQ3RybCBhcyBzZXJ2aWNlbGJDcmVhdGVDdHJsJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTZXJ2aWNlbGJDcmVhdGVDdHJsJywgW1xuICAgICAgICAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdTZXJ2aWNlbGJzTW9kZWwnLCAnTmV0d29ya3NNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgU2VydmljZWxic01vZGVsLCBOZXR3b3Jrc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VsYkNyZWF0ZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5sYWJlbFNlbGVjdG9ycyA9IFtdO1xuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5uZXR3b3JrcyA9IFtdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1NlcnZpY2VsYnMoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ3JlYXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9TZXJ2aWNlbGJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IG5ldHdvcmtzIGZvciB0aGUgZ2l2ZW4gdGVuYW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICBOZXR3b3Jrc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLm5ldHdvcmtzID0gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVMYWJlbFNlbGVjdG9yU3RyaW5ncygpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VydmljZWxiQ3JlYXRlQ3RybC5sYWJlbFNlbGVjdG9ycywgZnVuY3Rpb24obGFiZWxTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JTdHJpbmcgPSBsYWJlbFNlbGVjdG9yLm5hbWUgKyAnPScgKyBsYWJlbFNlbGVjdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5zZWxlY3RvcnMucHVzaChzZWxlY3RvclN0cmluZyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNlcnZpY2VsYigpIHtcbiAgICAgICAgICAgICAgICAvL2Zvcm0gY29udHJvbGxlciBpcyBpbmplY3RlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VsYkNyZWF0ZUN0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzZXJ2aWNlbGJDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIua2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkNyZWF0ZUN0cmwuc2VydmljZWxiLnRlbmFudE5hbWUgKyAnOicgKyBzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYi5zZXJ2aWNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGFiZWxTZWxlY3RvclN0cmluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmNyZWF0ZShzZXJ2aWNlbGJDcmVhdGVDdHJsLnNlcnZpY2VsYikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9TZXJ2aWNlbGJzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHNlcnZpY2VsYkNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5zZXJ2aWNlbGIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpcEFkZHJlc3M6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBwb3J0czogW10sXG4gICAgICAgICAgICAgICAgICAgIHRlbmFudE5hbWU6ICdkZWZhdWx0Jy8vVE9ETzogUmVtb3ZlIGhhcmRjb2RlZCB0ZW5hbnQuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VydmljZWxiQ3JlYXRlQ3RybC5jcmVhdGVTZXJ2aWNlbGIgPSBjcmVhdGVTZXJ2aWNlbGI7XG4gICAgICAgICAgICBzZXJ2aWNlbGJDcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG5cbiAgICAgICAgICAgIGdldE5ldHdvcmtzKCk7XG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzExLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkRldGFpbHNDdHJsIGFzIHNlcnZpY2VsYkRldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZWRpdC86a2V5JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2VydmljZWxiRGV0YWlsc0N0cmwgYXMgc2VydmljZWxiRGV0YWlsc0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2VydmljZV9sYnMvc2VydmljZWxiZGV0YWlscy5odG1sJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1NlcnZpY2VsYkRldGFpbHNDdHJsJyxcbiAgICAgICAgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ1NlcnZpY2VsYnNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFNlcnZpY2VsYnNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VydmljZWxiRGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLmxhYmVsU2VsZWN0b3JzID0gW107XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUbyBzaG93IGVkaXQgb3IgZGV0YWlscyBzY3JlZW4gYmFzZWQgb24gdGhlIHJvdXRlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TW9kZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZS5pcygnY29udGl2Lm1lbnUuc2VydmljZWxicy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VsYkRldGFpbHNDdHJsLm1vZGUgPSAnZWRpdCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5tb2RlID0gJ2RldGFpbHMnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9TZXJ2aWNlbGJzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMubGlzdCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvU2VydmljZWxiRGV0YWlscygpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS5zZXJ2aWNlbGJzLmRldGFpbHMnLCB7J2tleSc6IHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYi5rZXl9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxFZGl0aW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1NlcnZpY2VsYkRldGFpbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTZXJ2aWNlbGIoKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmRlbGV0ZShzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1NlcnZpY2VsYnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHNlcnZpY2VsYkRldGFpbHNDdHJsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzYXZlU2VydmljZWxiKCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxhYmVsU2VsZWN0b3JTdHJpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2VsYnNNb2RlbC5zYXZlKHNlcnZpY2VsYkRldGFpbHNDdHJsLnNlcnZpY2VsYikudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvU2VydmljZWxiRGV0YWlscygpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzZXJ2aWNlbGJEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zaG93U2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxhYmVsU2VsZWN0b3JzKCkge1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycywgZnVuY3Rpb24oc2VsZWN0b3JTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzZWxlY3RvclN0ci5zcGxpdCgnPScpWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxlY3RvclN0ci5zcGxpdCgnPScpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwubGFiZWxTZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxhYmVsU2VsZWN0b3JTdHJpbmdzKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zZXJ2aWNlbGIuc2VsZWN0b3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlcnZpY2VsYkRldGFpbHNDdHJsLmxhYmVsU2VsZWN0b3JzLCBmdW5jdGlvbihsYWJlbFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JTdHJpbmcgPSBsYWJlbFNlbGVjdG9yLm5hbWUgKyAnPScgKyBsYWJlbFNlbGVjdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiLnNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkRldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc2VydmljZWxiRGV0YWlsc0N0cmwpO1xuXG4gICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHNlcnZpY2VsYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZWxiRGV0YWlsc0N0cmwuc2VydmljZWxiID0gc2VydmljZWxiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGFiZWxTZWxlY3RvcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5zYXZlU2VydmljZWxiID0gc2F2ZVNlcnZpY2VsYjtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5jYW5jZWxFZGl0aW5nID0gY2FuY2VsRWRpdGluZztcbiAgICAgICAgICAgICAgICBzZXJ2aWNlbGJEZXRhaWxzQ3RybC5kZWxldGVTZXJ2aWNlbGIgPSBkZWxldGVTZXJ2aWNlbGI7XG4gICAgICAgICAgICAgICAgc2V0TW9kZSgpO1xuXG4gICAgICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc2VydmljZWxicycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1NlcnZpY2VsYkxpc3RDdHJsIGFzIHNlcnZpY2VsYkxpc3RDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYmxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignU2VydmljZWxiTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdTZXJ2aWNlbGJzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFNlcnZpY2VsYnNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlbGJMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNlcnZpY2VsYnMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgU2VydmljZWxic01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlbGJMaXN0Q3RybC5zZXJ2aWNlbGJzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ3NlcnZpY2VOYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHNlcnZpY2VsYkxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFNlcnZpY2VsYnMoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0b3JlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2VydmljZWxicyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xMy8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuc2VydmljZWxic1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTZXJ2aWNlbGJwb3J0c1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICByZXR1cm4ge1xuICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgIGl0ZW1zOiAnPSdcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogQ29tcGFyZSBpZiB0d28gaXRlbXMgaGF2ZSBzYW1lIHBvcnRzIGFuZCBwcm90b2NvbHNcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWwxXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsMlxuICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmUodmFsMSwgdmFsMikge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsMSA9PT0gdmFsMik7XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV3SXRlbSgpIHtcbiAgICAgICAgICAgICAgICAgICBzY29wZS5uZXdJdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyUG9ydDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiAnJ1xuICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRW1wdHlJdGVtKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gKGl0ZW0uc2VydmljZVBvcnQgPT09ICcnICYmIGl0ZW0ucHJvdmlkZXJQb3J0ID09PSAnJyAmJiBpdGVtLnByb3RvY29sID09PSAnJyk7XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIHNjb3BlLmFkZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5SXRlbShzY29wZS5uZXdJdGVtKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtU3RyID0gc2NvcGUubmV3SXRlbS5zZXJ2aWNlUG9ydCArICc6J1xuICAgICAgICAgICAgICAgICAgICAgICArIHNjb3BlLm5ld0l0ZW0ucHJvdmlkZXJQb3J0ICsgJzonXG4gICAgICAgICAgICAgICAgICAgICAgICsgc2NvcGUubmV3SXRlbS5wcm90b2NvbDtcbiAgICAgICAgICAgICAgICAgICAvL1JlbW92ZXMgZXhpc3RpbmcgaXRlbSB3aXRoIHRoZSBzYW1lIHZhbHVlIGZpcnN0IGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICBfLnB1bGxBbGxXaXRoKHNjb3BlLml0ZW1zLCBbbmV3SXRlbVN0cl0sIGNvbXBhcmUpO1xuICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW1zLnB1c2gobmV3SXRlbVN0cik7XG4gICAgICAgICAgICAgICAgICAgcmVzZXROZXdJdGVtKCk7XG4gICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICBzY29wZS5yZW1vdmUgPSBmdW5jdGlvbihwYXNzZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoc2NvcGUuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJlKGl0ZW0sIHBhc3NlZEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIHJlc2V0TmV3SXRlbSgpO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NlcnZpY2VfbGJzL3NlcnZpY2VsYnBvcnRzLmh0bWwnXG4gICAgICAgfVxuICAgIH0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuc3RvcmFnZXBvbGljaWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc3RvcmFnZXBvbGljaWVzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWNyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwgYXMgc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1N0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgJ0NSVURIZWxwZXJTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldHVyblRvU3RvcmFnZVBvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUuc3RvcmFnZXBvbGljaWVzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ3JlYXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9TdG9yYWdlUG9saWNpZXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRmlsZXN5c3RlbUNtZHMoKSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwuZmlsZXN5c3RlbWNtZHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5uZXdTdG9yYWdlUG9saWN5LmZpbGVzeXN0ZW1zW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgLy9mb3JtIGNvbnRyb2xsZXIgaXMgaW5qZWN0ZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIGFsbCB2YWxpZGF0aW9ucyBoYXZlIHBhc3NlZFxuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZpbGVzeXN0ZW1DbWRzKCk7XG4gICAgICAgICAgICAgICAgICAgIFN0b3JhZ2VQb2xpY2llc01vZGVsLmNyZWF0ZShzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5uZXdTdG9yYWdlUG9saWN5KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvU3RvcmFnZVBvbGljaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2UuaGlkZVNlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5uZXdTdG9yYWdlUG9saWN5ID0ge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJiYWNrZW5kc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNydWRcIjogXCJjZXBoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1vdW50XCI6IFwiY2VwaFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzbmFwc2hvdFwiOiBcImNlcGhcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInVubG9ja2VkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImRyaXZlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInBvb2xcIjogXCJyYmRcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogXCIxME1CXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZpbGVzeXN0ZW1cIjogXCJleHQ0XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJydW50aW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic25hcHNob3RzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNuYXBzaG90XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZyZXF1ZW5jeVwiOiBcIjMwbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2VlcFwiOiAyMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmF0ZS1saW1pdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3cml0ZS1pb3BzXCI6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWFkLWlvcHNcIjogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndyaXRlLWJwc1wiOiAxMDAwMDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWFkLWJwc1wiOiAxMDAwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlc3lzdGVtc1wiOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLmNyZWF0ZVBvbGljeSA9IGNyZWF0ZVBvbGljeTtcbiAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lDcmVhdGVDdHJsLmNhbmNlbENyZWF0aW5nID0gY2FuY2VsQ3JlYXRpbmc7XG4gICAgICAgICAgICBzdG9yYWdlUG9saWN5Q3JlYXRlQ3RybC5maWxlc3lzdGVtY21kcyA9IFtdO1xuXG4gICAgICAgICAgICByZXNldEZvcm0oKTtcbiAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzI3LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnN0b3JhZ2Vwb2xpY2llcycpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgYXMgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgYXMgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwnLFxuICAgICAgICBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckZmlsdGVyJywgJ1N0b3JhZ2VQb2xpY2llc01vZGVsJywgJ1ZvbHVtZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRzY29wZSwgJGludGVydmFsLCAkZmlsdGVyLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgVm9sdW1lc01vZGVsLCBDUlVESGVscGVyU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5maWxlc3lzdGVtY21kcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVG8gc2hvdyBlZGl0IG9yIGRldGFpbHMgc2NyZWVuIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGUuaXMoJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5lZGl0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLm1vZGUgPSAnZGV0YWlscyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXR1cm5Ub1BvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5saXN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Qb2xpY3lEZXRhaWxzKCkge1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnN0b3JhZ2Vwb2xpY2llcy5kZXRhaWxzJywgeydrZXknOiBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWV9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxFZGl0aW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdGFydExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5kZWxldGVVc2luZ0tleShzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWUsICduYW1lJykudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVG9Qb2xpY2llcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEdldCB2b2x1bWVzIGJlbG9uZ2luZyB0byBhIHBvbGljeVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZXMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5nZXQocmVsb2FkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC52b2x1bWVzID0gJGZpbHRlcignb3JkZXJCeScpKF8uZmlsdGVyKHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb2xpY3knOiBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwucG9saWN5Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAnbmFtZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0aWFsaXplRmlsZXN5c3RlbUNtZHNBcnJheSgpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuZmlsZXN5c3RlbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaCh7bmFtZToga2V5LCB2YWx1ZTogdmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmZpbGVzeXN0ZW1jbWRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGaWxlc3lzdGVtQ21kcygpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmZpbGVzeXN0ZW1jbWRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kuZmlsZXN5c3RlbXNbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmVQb2xpY3koKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgYWxsIHZhbGlkYXRpb25zIGhhdmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwuZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLmhpZGVTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RhcnRMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZpbGVzeXN0ZW1DbWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBTdG9yYWdlUG9saWNpZXNNb2RlbC5zYXZlKHN0b3JhZ2VQb2xpY3lEZXRhaWxzQ3RybC5wb2xpY3kpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1BvbGljeURldGFpbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnNob3dTZXJ2ZXJFcnJvcihzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Ioc3RvcmFnZVBvbGljeURldGFpbHNDdHJsKTtcblxuICAgICAgICAgICAgICAgIFN0b3JhZ2VQb2xpY2llc01vZGVsLmdldE1vZGVsQnlLZXkoJHN0YXRlUGFyYW1zLmtleSwgZmFsc2UsICduYW1lJylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLnBvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVGaWxlc3lzdGVtQ21kc0FycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldFZvbHVtZXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmRlbGV0ZVBvbGljeSA9IGRlbGV0ZVBvbGljeTtcbiAgICAgICAgICAgICAgICBzdG9yYWdlUG9saWN5RGV0YWlsc0N0cmwuc2F2ZVBvbGljeSA9IHNhdmVQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeURldGFpbHNDdHJsLmNhbmNlbEVkaXRpbmcgPSBjYW5jZWxFZGl0aW5nO1xuXG4gICAgICAgICAgICAgICAgc2V0TW9kZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2U7XG4gICAgICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvcmVmcmVzaCBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldFZvbHVtZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzIvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LnN0b3JhZ2Vwb2xpY2llc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5YmFzaWNzZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2U3RvcmFnZXBvbGljeWZpbGVzeXN0ZW1zZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nLFxuICAgICAgICAgICAgICAgIGZpbGVzeXN0ZW1jbWRzOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmZpbGVzeXN0ZW1zID0gWydleHQ0JywgJ2J0cmZzJ107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL2ZpbGVzeXN0ZW1zZXR0aW5ncy5odG1sJ1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2U3RvcmFnZXBvbGljeXNuYXBzaG90c2V0dGluZ3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBwb2xpY3k6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RvcmFnZV9wb2xpY2llcy9zbmFwc2hvdHNldHRpbmdzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZTdG9yYWdlcG9saWN5cndvcHNzZXR0aW5nc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL3J3b3Bzc2V0dGluZ3MuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlN0b3JhZ2Vwb2xpY3liYWNrZW5kZHJpdmVyc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBvbGljeTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdG9yYWdlX3BvbGljaWVzL2JhY2tlbmRkcml2ZXJzLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNC8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zdG9yYWdlcG9saWNpZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zdG9yYWdlcG9saWNpZXMubGlzdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1N0b3JhZ2VQb2xpY3lMaXN0Q3RybCBhcyBzdG9yYWdlUG9saWN5TGlzdEN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RvcmFnZV9wb2xpY2llcy9zdG9yYWdlcG9saWN5bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdTdG9yYWdlUG9saWN5TGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdTdG9yYWdlUG9saWNpZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRpbnRlcnZhbCwgJGZpbHRlciwgU3RvcmFnZVBvbGljaWVzTW9kZWwsIENSVURIZWxwZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICB2YXIgc3RvcmFnZVBvbGljeUxpc3RDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UG9saWNpZXMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgU3RvcmFnZVBvbGljaWVzTW9kZWwuZ2V0KHJlbG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcihzdG9yYWdlUG9saWN5TGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVBvbGljeUxpc3RDdHJsLnBvbGljaWVzID0gJGZpbHRlcignb3JkZXJCeScpKHJlc3VsdCwgJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIoc3RvcmFnZVBvbGljeUxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0UG9saWNpZXMoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBvbGljaWVzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIENvbnRpdkdsb2JhbHMuUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3N0b3AgcG9sbGluZyB3aGVuIHVzZXIgbW92ZXMgYXdheSBmcm9tIHRoZSBwYWdlXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvMy8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudm9sdW1lcy5jcmVhdGUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZWNyZWF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVm9sdW1lQ3JlYXRlQ3RybCBhcyB2b2x1bWVDcmVhdGVDdHJsJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWb2x1bWVDcmVhdGVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJ1ZvbHVtZXNNb2RlbCcsICdTdG9yYWdlUG9saWNpZXNNb2RlbCcsICdDUlVESGVscGVyU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcywgVm9sdW1lc01vZGVsLCBTdG9yYWdlUG9saWNpZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVDcmVhdGVDdHJsID0gdGhpcztcbiAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwuZmlsZXN5c3RlbXMgPSBbJ2V4dDQnLCAnYnRyZnMnXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Wb2x1bWVzTW9kZWwoKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjb250aXYubWVudS52b2x1bWVzLmxpc3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsQ3JlYXRpbmcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVG9Wb2x1bWVzTW9kZWwoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgc3RvcmFnZSBwb2xpY2llcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U3RvcmFnZVBvbGljaWVzKCkge1xuICAgICAgICAgICAgICAgIFN0b3JhZ2VQb2xpY2llc01vZGVsLmdldCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLnBvbGljaWVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBseVBvbGljeVNldHRpbmdzKCkge1xuICAgICAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwubmV3Vm9sdW1lLnBvbGljeSA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kubmFtZTtcbiAgICAgICAgICAgICAgICB2b2x1bWVDcmVhdGVDdHJsLm5ld1ZvbHVtZS5iYWNrZW5kcyA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kuYmFja2VuZHM7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUuZHJpdmVyID0gdm9sdW1lQ3JlYXRlQ3RybC5zZWxlY3RlZFBvbGljeS5kcml2ZXI7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUuY3JlYXRlID0gdm9sdW1lQ3JlYXRlQ3RybC5zZWxlY3RlZFBvbGljeS5jcmVhdGU7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUucnVudGltZSA9IHZvbHVtZUNyZWF0ZUN0cmwuc2VsZWN0ZWRQb2xpY3kucnVudGltZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVm9sdW1lKCkge1xuICAgICAgICAgICAgICAgIC8vZm9ybSBjb250cm9sbGVyIGlzIGluamVjdGVkIGJ5IHRoZSBodG1sIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgLy9jaGVja2luZyBpZiBhbGwgdmFsaWRhdGlvbnMgaGF2ZSBwYXNzZWRcbiAgICAgICAgICAgICAgICBpZiAodm9sdW1lQ3JlYXRlQ3RybC5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0YXJ0TG9hZGVyKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICBhcHBseVBvbGljeVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIFZvbHVtZXNNb2RlbC5jcmVhdGUodm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblRvVm9sdW1lc01vZGVsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZUNyZWF0ZUN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc2hvd1NlcnZlckVycm9yKHZvbHVtZUNyZWF0ZUN0cmwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldEZvcm0oKSB7XG4gICAgICAgICAgICAgICAgQ1JVREhlbHBlclNlcnZpY2Uuc3RvcExvYWRlcih2b2x1bWVDcmVhdGVDdHJsKTtcbiAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5oaWRlU2VydmVyRXJyb3Iodm9sdW1lQ3JlYXRlQ3RybCk7XG4gICAgICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5uZXdWb2x1bWUgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tlbmRzXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImRyaXZlclwiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwicnVudGltZVwiOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZvbHVtZUNyZWF0ZUN0cmwuY3JlYXRlVm9sdW1lID0gY3JlYXRlVm9sdW1lO1xuICAgICAgICAgICAgdm9sdW1lQ3JlYXRlQ3RybC5jYW5jZWxDcmVhdGluZyA9IGNhbmNlbENyZWF0aW5nO1xuXG4gICAgICAgICAgICBnZXRTdG9yYWdlUG9saWNpZXMoKTtcblxuICAgICAgICAgICAgcmVzZXRGb3JtKCk7XG4gICAgICAgIH1dKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNC8xNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudm9sdW1lcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWb2x1bWVEZXRhaWxzQ3RybCBhcyB2b2x1bWVEZXRhaWxzQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZWRldGFpbHMuaHRtbCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWb2x1bWVEZXRhaWxzQ3RybCcsXG4gICAgICAgIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckc2NvcGUnLCAnJGludGVydmFsJywgJyRodHRwJywgJ1ZvbHVtZXNNb2RlbCcsICdWb2x1bWVTZXJ2aWNlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkc2NvcGUsICRpbnRlcnZhbCwgJGh0dHAsIFZvbHVtZXNNb2RlbCwgVm9sdW1lU2VydmljZSkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZURldGFpbHNDdHJsID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmV0dXJuVG9Wb2x1bWVzKCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudm9sdW1lcy5saXN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVWb2x1bWUoKSB7XG4gICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmRlbGV0ZSh2b2x1bWVEZXRhaWxzQ3RybC52b2x1bWUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5Ub1ZvbHVtZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Vm9sdW1lSW5mbyhyZWxvYWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW5zID0gJHN0YXRlUGFyYW1zLmtleS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9e307XG4gICAgICAgICAgICAgICAgbW9kZWwucG9saWN5ID0gdG9rZW5zWzBdO1xuICAgICAgICAgICAgICAgIG1vZGVsLm5hbWUgPSB0b2tlbnNbMV07XG4gICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldE1vZGVsKG1vZGVsLCByZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2b2x1bWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZURldGFpbHNDdHJsLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZVVzZUluZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZVNuYXBzaG90cygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Vm9sdW1lVXNlSW5mbygpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVTZXJ2aWNlLmdldFZvbHVtZVVzZUluZm8odm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lVXNlID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vUmV0dXJucyBlcnJvciBpZiB2b2x1bWUgaXMgbm90IG1vdW50ZWQgYnkgYW55IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWb2x1bWVTbmFwc2hvdHMoKSB7XG4gICAgICAgICAgICAgICAgVm9sdW1lU2VydmljZS5nZXRWb2x1bWVTbmFwc2hvdHModm9sdW1lRGV0YWlsc0N0cmwudm9sdW1lKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuc25hcHNob3RzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29weVNuYXBzaG90KHNuYXBzaG90LCBuZXdWb2x1bWUpIHtcbiAgICAgICAgICAgICAgICBWb2x1bWVzTW9kZWwuY29weShtb2RlbCwgc25hcHNob3QsIG5ld1ZvbHVtZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuZGVsZXRlVm9sdW1lID0gZGVsZXRlVm9sdW1lO1xuICAgICAgICAgICAgdm9sdW1lRGV0YWlsc0N0cmwuY29weVNuYXBzaG90ID0gY29weVNuYXBzaG90O1xuXG4gICAgICAgICAgICAvL0xvYWQgZnJvbSBjYWNoZSBmb3IgcXVpY2sgZGlzcGxheSBpbml0aWFsbHlcbiAgICAgICAgICAgIGdldFZvbHVtZUluZm8oZmFsc2UpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgICAgIC8vRG9uJ3QgZG8gYXV0by1yZWZyZXNoIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFZvbHVtZUluZm8odHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgQ29udGl2R2xvYmFscy5SRUZSRVNIX0lOVEVSVkFMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc3RvcCBwb2xsaW5nIHdoZW4gdXNlciBtb3ZlcyBhd2F5IGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzIyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZvbHVtZXMnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS52b2x1bWVzLmxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWb2x1bWVMaXN0Q3RybCBhcyB2b2x1bWVMaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2b2x1bWVzL3ZvbHVtZWxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVm9sdW1lTGlzdEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJGZpbHRlcicsICdWb2x1bWVzTW9kZWwnLCAnQ1JVREhlbHBlclNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaW50ZXJ2YWwsICRmaWx0ZXIsIFZvbHVtZXNNb2RlbCwgQ1JVREhlbHBlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVMaXN0Q3RybCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZXMocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgVm9sdW1lc01vZGVsLmdldChyZWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENSVURIZWxwZXJTZXJ2aWNlLnN0b3BMb2FkZXIodm9sdW1lTGlzdEN0cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lTGlzdEN0cmwudm9sdW1lcyA9ICRmaWx0ZXIoJ29yZGVyQnknKShyZXN1bHQsICduYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDUlVESGVscGVyU2VydmljZS5zdG9wTG9hZGVyKHZvbHVtZUxpc3RDdHJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vTG9hZCBmcm9tIGNhY2hlIGZvciBxdWljayBkaXNwbGF5IGluaXRpYWxseVxuICAgICAgICAgICAgZ2V0Vm9sdW1lcyhmYWxzZSk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlO1xuICAgICAgICAgICAgLy9Eb24ndCBkbyBhdXRvLXJlZnJlc2ggaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0Vm9sdW1lcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBDb250aXZHbG9iYWxzLlJFRlJFU0hfSU5URVJWQUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zdG9wIHBvbGxpbmcgd2hlbiB1c2VyIG1vdmVzIGF3YXkgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChwcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDYvNS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52b2x1bWVzJylcbiAgICAuZmFjdG9yeSgnVm9sdW1lU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZVVzZUluZm8odm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19VU0VTX0VORFBPSU5UXG4gICAgICAgICAgICAgICAgKyB2b2x1bWUucG9saWN5XG4gICAgICAgICAgICAgICAgKyAnLycgKyB2b2x1bWUubmFtZTtcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvL1JldHVybnMgZXJyb3IgaWYgdm9sdW1lIGlzIG5vdCBtb3VudGVkIGJ5IGFueSBjb250YWluZXJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFZvbHVtZVNuYXBzaG90cyh2b2x1bWUpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WT0xVTUVTX1NOQVBTSE9UU19FTkRQT0lOVFxuICAgICAgICAgICAgICAgICsgdm9sdW1lLnBvbGljeVxuICAgICAgICAgICAgICAgICsgJy8nICsgdm9sdW1lLm5hbWU7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0Vm9sdW1lVXNlSW5mbzogZ2V0Vm9sdW1lVXNlSW5mbyxcbiAgICAgICAgICAgIGdldFZvbHVtZVNuYXBzaG90czogZ2V0Vm9sdW1lU25hcHNob3RzXG4gICAgICAgIH1cbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA2LzIvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKFwiY29udGl2LmRpcmVjdGl2ZXNcIilcbiAgICAuZGlyZWN0aXZlKFwiY3R2Q29sbGFwc2libGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdAJyxcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6ICdAJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuY29sbGFwc2VkID09PSB1bmRlZmluZWQpIHNjb3BlLmNvbGxhcHNlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvY29sbGFwc2libGUuaHRtbCdcbiAgICAgICAgfVxuICAgIH0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzI4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dkVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0AnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZpbmQoJ2knKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbmctaGlkZScpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2RpcmVjdGl2ZXMvZXJyb3JtZXNzYWdlLmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiKVxuICAgIC5kaXJlY3RpdmUoXCJjdHZOYW1ldmFsdWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgIGl0ZW1zOiAnPScsXG4gICAgICAgICAgICAgICBuYW1laGVhZGVyOiAnQCcsLy9GaWVsZCBuYW1lIHRvIGRpc3BsYXkgZm9yIGtleVxuICAgICAgICAgICAgICAgdmFsdWVoZWFkZXI6ICdAJywvL0ZpZWxkIG5hbWUgdG8gZGlzcGxheSBmb3IgdmFsdWVcbiAgICAgICAgICAgICAgIHR5cGU6ICdAJywvLyd0ZXh0JyBvciAnc2VsZWN0JyB0byBjaG9vc2UgaW5wdXQgb3Igc2VsZWN0IGh0bWwgdGFnIGZvciBrZXlcbiAgICAgICAgICAgICAgIG9wdGlvbnM6ICc9Jy8vVG8gYmUgdXNlZCB3aGVuIHR5cGUgaXMgJ3NlbGVjdCdcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogQ29tcGFyZSBpZiB0d28gaXRlbXMgaGF2ZSBzYW1lIG5hbWVcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB2YWwxXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdmFsMlxuICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmUodmFsMSwgdmFsMikge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwxLm5hbWUgPT0gdmFsMi5uYW1lO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldE5ld0l0ZW0oKSB7XG4gICAgICAgICAgICAgICAgICAgc2NvcGUubmV3SXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJ1xuICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRW1wdHlJdGVtKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gKGl0ZW0ubmFtZSA9PT0gJycgJiYgaXRlbS52YWx1ZSA9PT0gJycpO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBzY29wZS5hZGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eUl0ZW0oc2NvcGUubmV3SXRlbSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgLy9SZW1vdmVzIGV4aXN0aW5nIGl0ZW0gd2l0aCB0aGUgc2FtZSBuYW1lIGZpcnN0IGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICBfLnB1bGxBbGxXaXRoKHNjb3BlLml0ZW1zLCBbc2NvcGUubmV3SXRlbV0sIGNvbXBhcmUpO1xuICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW1zLnB1c2goc2NvcGUubmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICAgcmVzZXROZXdJdGVtKCk7XG4gICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICBzY29wZS5yZW1vdmUgPSBmdW5jdGlvbihwYXNzZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgXy5yZW1vdmUoc2NvcGUuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT0gcGFzc2VkSXRlbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgIHJlc2V0TmV3SXRlbSgpO1xuXG4gICAgICAgICAgICAgICBpZiAoc2NvcGUubmFtZWhlYWRlciA9PT0gdW5kZWZpbmVkKSBzY29wZS5uYW1laGVhZGVyID0gJ05hbWUnO1xuICAgICAgICAgICAgICAgaWYgKHNjb3BlLnZhbHVlaGVhZGVyID09PSB1bmRlZmluZWQpIHNjb3BlLnZhbHVlaGVhZGVyID0gJ1ZhbHVlJztcbiAgICAgICAgICAgICAgIGlmIChzY29wZS50eXBlID09PSB1bmRlZmluZWQpIHNjb3BlLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL25hbWV2YWx1ZS5odG1sJ1xuICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS80LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIpXG4gICAgLmRpcmVjdGl2ZShcImN0dlRhYmxlXCIsIFsnZmlsdGVyRmlsdGVyJywgJ2xpbWl0VG9GaWx0ZXInLCBmdW5jdGlvbiAoZmlsdGVyRmlsdGVyLCBsaW1pdFRvRmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6ICc9JyxcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZGl0ZW1zOiAnPScsXG4gICAgICAgICAgICAgICAgc2l6ZTogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5jaHVua3MgPSBbXTtcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwucGFnZU5vID0gMDtcblxuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaXplID0gcGFyc2VJbnQoJHNjb3BlLnNpemUsIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4odGFibGVDdHJsLnNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaXplID0gMTI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQWx3YXlzIGNhbGwgc2hvd0NodW5rIHdpdGggYm90aCBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBwYWdlTm9cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gc2VhcmNoVGV4dFxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dDaHVuayhwYWdlTm8sIHNlYXJjaFRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnNlYXJjaFRleHQgPSBzZWFyY2hUZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdlTm8gPT09IHVuZGVmaW5lZCB8fCBwYWdlTm8gPCAwKSBwYWdlTm8gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwucGFnZU5vID0gcGFnZU5vO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaXRlbXMgIT09IHVuZGVmaW5lZCkgey8vVE9ETzogQ2hlY2sgd2h5IGl0ZW1zIGFyZSB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoVGV4dEZpbHRlcmVkSXRlbXMgPSBmaWx0ZXJGaWx0ZXIoJHNjb3BlLml0ZW1zLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub09mQ2h1bmtzID0gTWF0aC5jZWlsKHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zLmxlbmd0aCAvIHRhYmxlQ3RybC5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub09mQ2h1bmtzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub09mQ2h1bmtzID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5jaHVua3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9PZkNodW5rczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLmNodW5rcy5wdXNoKHtzZWxlY3RlZDogZmFsc2UsIHBhZ2VObzogaX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0FmdGVyIGZpbHRlcmluZyBudW1iZXIgb2YgY2h1bmtzIGNvdWxkIGNoYW5nZSBzbyByZXNldCBwYWdlIG5vIGlmIGl0IGlzIGdyZWF0ZXIgdGhhbiBubyBvZiBjaHVua3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlTm8gPj0gdGFibGVDdHJsLmNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwucGFnZU5vID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLmNodW5rc1t0YWJsZUN0cmwucGFnZU5vXS5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVXBkYXRlIG51bWJlciBvZiBjaHVua3MgZm9yIHBhZ2luYXRpb24gbWVudVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbGljZVN0YXJ0LCBzbGljZUVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZVN0YXJ0ID0gdGFibGVDdHJsLnBhZ2VObyAtIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VFbmQgPSB0YWJsZUN0cmwucGFnZU5vICsgMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpY2VTdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VFbmQgPSBzbGljZUVuZCAtIHNsaWNlU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlU3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpY2VFbmQgPiB0YWJsZUN0cmwuY2h1bmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljZVN0YXJ0ID0gc2xpY2VTdGFydCAtIChzbGljZUVuZCAtIHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VFbmQgPSB0YWJsZUN0cmwuY2h1bmtzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb25NZW51LmNodW5rcyA9IHRhYmxlQ3RybC5jaHVua3Muc2xpY2Uoc2xpY2VTdGFydCwgc2xpY2VFbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbk1lbnUuY2h1bmtzID0gdGFibGVDdHJsLmNodW5rcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLmZpbHRlcmVkSXRlbXMgPSBsaW1pdFRvRmlsdGVyKHNlYXJjaFRleHRGaWx0ZXJlZEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5wYWdlTm8gKiB0YWJsZUN0cmwuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWRpdGVtcyA9IHRhYmxlQ3RybC5maWx0ZXJlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2hvd1ByZXZDaHVuaygpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZDaHVuaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlQ3RybC5wYWdlTm8gPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkNodW5rID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZDaHVuayA9IHRhYmxlQ3RybC5wYWdlTm8gLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93Q2h1bmsocHJldkNodW5rKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93TmV4dENodW5rKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dENodW5rO1xuICAgICAgICAgICAgICAgICAgICBuZXh0Q2h1bmsgPSB0YWJsZUN0cmwucGFnZU5vICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDaHVuayA+IHRhYmxlQ3RybC5jaHVua3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENodW5rID0gdGFibGVDdHJsLmNodW5rcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93Q2h1bmsobmV4dENodW5rKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBTYXZlIHBhZ2luYXRpb24gc2NvcGUgdG8gcHJvdmlkZSBjaHVuayBpbmZvcm1hdGlvbiB0byBwYWdpbmF0aW9uIG1lbnUuXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIG1lbnVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRQYWdpbmF0aW9uTWVudShtZW51KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdpbmF0aW9uTWVudSA9IG1lbnU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLnNob3dDaHVuayA9IHNob3dDaHVuaztcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd05leHRDaHVuayA9IHNob3dOZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgdGFibGVDdHJsLnNob3dQcmV2Q2h1bmsgPSBzaG93UHJldkNodW5rO1xuICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5hZGRQYWdpbmF0aW9uTWVudSA9IGFkZFBhZ2luYXRpb25NZW51O1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICAvL1dhdGNoIGZvciBpdGVtcyBhcyB0aGV5IHdpbGwgYmUgYXV0byByZWZyZXNoZWRcbiAgICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChhdHRycy5pdGVtcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3RhYmxlLmh0bWwnXG4gICAgICAgIH1cbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGhlYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dGhlYWQgbmctdHJhbnNjbHVkZT48L3RoZWFkPidcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdAJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRoIG5nLWNsYXNzPVwiY2xhc3NcIiBuZy10cmFuc2NsdWRlPjwvdGg+J1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwiY3R2VGJvZHlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dGJvZHkgbmctdHJhbnNjbHVkZT48L3Rib2R5PidcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcImN0dlRmb290XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRmb290IG5nLXRyYW5zY2x1ZGU+PC90Zm9vdD4nXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUc2VhcmNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICByZXF1aXJlOiAnXl5jdHZUYWJsZScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgICAgICAgICAgICAgc2l6ZTogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93Q2h1bmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93Q2h1bmsodGFibGVDdHJsLnBhZ2VObywgc2NvcGUuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3NlYXJjaGlucHV0Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogJ3RydWUnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRyIG5nLXRyYW5zY2x1ZGU+PC90cj4nXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzY29wZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHRkIG5nLXRyYW5zY2x1ZGU+PC90ZD4nXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5kaXJlY3RpdmUoXCJjdHZUcGFnaW5hdGlvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15eY3R2VGFibGUnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0YWJsZUN0cmwpIHtcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuYWRkUGFnaW5hdGlvbk1lbnUoc2NvcGUpO1xuICAgICAgICAgICAgICAgIC8vc2hvd0NodW5rKCkgd2lsbCBjYWxjdWxhdGUgYW5kIHNldCBjaHVua3MgaW4gc2NvcGVcbiAgICAgICAgICAgICAgICB0YWJsZUN0cmwuc2hvd0NodW5rKHRhYmxlQ3RybC5wYWdlTm8sIHRhYmxlQ3RybC5zZWFyY2hUZXh0KTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93Q2h1bmsgPSBmdW5jdGlvbiAocGFnZU5vKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5zaG93Q2h1bmsocGFnZU5vLCB0YWJsZUN0cmwuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY29wZS5zaG93UHJldkNodW5rID0gdGFibGVDdHJsLnNob3dQcmV2Q2h1bms7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd05leHRDaHVuayA9IHRhYmxlQ3RybC5zaG93TmV4dENodW5rO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9kaXJlY3RpdmVzL3BhZ2luYXRpb25tZW51Lmh0bWwnXG4gICAgICAgIH1cbiAgICB9KTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xMS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdBcHBsaWNhdGlvbkdyb3Vwc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIGdyb3Vwc21vZGVsID0gbmV3IENvbGxlY3Rpb24oJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLkFQUExJQ0FUSU9OR1JPVVBTX0VORFBPSU5UKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGUga2V5IGZvciBhcHBsaWNhdGlvbiBncm91cFxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBcbiAgICAgICAgICovXG4gICAgICAgIGdyb3Vwc21vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAudGVuYW50TmFtZSArICc6JyArIGdyb3VwLm5ldHdvcmtOYW1lICsgJzonICsgZ3JvdXAuZ3JvdXBOYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBncm91cHNtb2RlbDtcbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdOZXR3b3Jrc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5ORVRXT1JLU19FTkRQT0lOVCk7XG4gICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnKVxuICAgIC5mYWN0b3J5KCdQb2xpY2llc01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgdmFyIHBvbGljaWVzbW9kZWwgPSBuZXcgQ29sbGVjdGlvbigkaHR0cCwgJHEsIENvbnRpdkdsb2JhbHMuUE9MSUNJRVNfRU5EUE9JTlQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBwb2xpY3kga2V5IHRvIHNhdmUgcG9saWN5IG9uIHNlcnZlclxuICAgICAgICAgKiBAcGFyYW0gcG9saWN5XG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBwb2xpY2llc21vZGVsLmdlbmVyYXRlS2V5ID0gZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgcmV0dXJuIHBvbGljeS50ZW5hbnROYW1lICsgJzonICsgcG9saWN5LnBvbGljeU5hbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHBvbGljaWVzbW9kZWw7XG4gICAgfV0pO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnUnVsZXNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIHZhciBydWxlc21vZGVsID0gbmV3IENvbGxlY3Rpb24oJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLlJVTEVTX0VORFBPSU5UKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGluY29taW5nIHJ1bGVzIGZvciBhIGdpdmVuIHBvbGljeSBhbmQgYSB0ZW5hbnRcbiAgICAgICAgICogQHBhcmFtIHBvbGljeU5hbWVcbiAgICAgICAgICogQHBhcmFtIHRlbmFudE5hbWVcbiAgICAgICAgICogQHJldHVybnMgeyp8d2ViZHJpdmVyLnByb21pc2UuUHJvbWlzZX1cbiAgICAgICAgICovXG4gICAgICAgIHJ1bGVzbW9kZWwuZ2V0SW5jb21pbmdSdWxlcyA9IGZ1bmN0aW9uIChwb2xpY3lOYW1lLCB0ZW5hbnROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVsZXNtb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICdwb2xpY3lOYW1lJzogcG9saWN5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RpcmVjdGlvbic6ICdpbicsXG4gICAgICAgICAgICAgICAgICAgICd0ZW5hbnROYW1lJzogdGVuYW50TmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IG91dGdvaW5nIHJ1bGVzIGZvciBhIGdpdmVuIHBvbGljeSBhbmQgYSB0ZW5hbnRcbiAgICAgICAgICogQHBhcmFtIHBvbGljeU5hbWVcbiAgICAgICAgICogQHBhcmFtIHRlbmFudE5hbWVcbiAgICAgICAgICogQHJldHVybnMgeyp8d2ViZHJpdmVyLnByb21pc2UuUHJvbWlzZX1cbiAgICAgICAgICovXG4gICAgICAgIHJ1bGVzbW9kZWwuZ2V0T3V0Z29pbmdSdWxlcyA9IGZ1bmN0aW9uIChwb2xpY3lOYW1lLCB0ZW5hbnROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVsZXNtb2RlbC5nZXQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maWx0ZXIocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICdwb2xpY3lOYW1lJzogcG9saWN5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RpcmVjdGlvbic6ICdvdXQnLFxuICAgICAgICAgICAgICAgICAgICAndGVuYW50TmFtZSc6IHRlbmFudE5hbWVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlIHJ1bGUga2V5IHRvIHNhdmUgcnVsZSBvbiBzZXJ2ZXJcbiAgICAgICAgICogQHBhcmFtIHJ1bGVcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHJ1bGVzbW9kZWwuZ2VuZXJhdGVLZXkgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGUudGVuYW50TmFtZSArICc6JyArIHJ1bGUucG9saWN5TmFtZSArICc6JyArIHJ1bGUucnVsZUlkO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBydWxlc21vZGVsO1xuICAgIH1dKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTEvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnU2VydmljZWxic01vZGVsJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5TRVJWSUNFTEJTX0VORFBPSU5UKTtcbiAgICB9XSk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDQvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubW9kZWxzJylcbiAgICAuZmFjdG9yeSgnU3RvcmFnZVBvbGljaWVzTW9kZWwnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbiBleHRlbmRzIGZyb20gQmFzZUNvbGxlY3Rpb25cbiAgICAgICAgICogQHBhcmFtICRodHRwXG4gICAgICAgICAqIEBwYXJhbSAkcVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgICAgICAgICBDb2xsZWN0aW9uLmNhbGwodGhpcywgJGh0dHAsICRxLCBDb250aXZHbG9iYWxzLlNUT1JBR0VQT0xJQ0lFU19FTkRQT0lOVCk7XG4gICAgICAgIH1cblxuICAgICAgICBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xuXG4gICAgICAgIFN0b3JhZ2VQb2xpY2llc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHVybCA9IGNvbGxlY3Rpb24udXJsICsgbW9kZWwubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBDb2xsZWN0aW9uLnByb3RvdHlwZS5jcmVhdGUuY2FsbChjb2xsZWN0aW9uLCBtb2RlbCwgdXJsKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTdG9yYWdlUG9saWNpZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBjb2xsZWN0aW9uLiRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gY29sbGVjdGlvbi51cmwgKyBtb2RlbC5uYW1lO1xuICAgICAgICAgICAgY29sbGVjdGlvbi4kaHR0cC5wb3N0KHVybCwgbW9kZWwpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKGNvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubmFtZSA9PSBtb2RlbC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5tb2RlbHMucHVzaChtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvbGljaWVzbW9kZWwgPSBuZXcgU3RvcmFnZVBvbGljaWVzQ29sbGVjdGlvbigkaHR0cCwgJHEpO1xuICAgICAgICByZXR1cm4gcG9saWNpZXNtb2RlbDtcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzIyLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycpXG4gICAgLmZhY3RvcnkoJ1ZvbHVtZXNNb2RlbCcsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWb2x1bWVzQ29sbGVjdGlvbiBleHRlbmRzIGZyb20gQmFzZUNvbGxlY3Rpb25cbiAgICAgICAgICogQHBhcmFtICRodHRwXG4gICAgICAgICAqIEBwYXJhbSAkcVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFZvbHVtZXNDb2xsZWN0aW9uKCRodHRwLCAkcSkge1xuICAgICAgICAgICAgQ29sbGVjdGlvbi5jYWxsKHRoaXMsICRodHRwLCAkcSwgQ29udGl2R2xvYmFscy5WT0xVTUVTX0VORFBPSU5UKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xuXG4gICAgICAgIFZvbHVtZXNDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWVzY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSB2b2x1bWVzY29sbGVjdGlvbi4kcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19ERUxFVEVfRU5EUE9JTlQ7XG4gICAgICAgICAgICAvL2RlbGV0ZSBlbmRwb2ludCBleHBlY3RzIHZvbHVtZSBwcm9wZXJ0eSBpbiBhZGRpdGlvbiB0byBwb2xpY3kuIFRPRE8gYXNrIHRvIGJlIGZpeGVkXG4gICAgICAgICAgICBtb2RlbC52b2x1bWUgPSBtb2RlbC5uYW1lO1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBkYXRhOiBtb2RlbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZvbHVtZXNjb2xsZWN0aW9uLiRodHRwLmRlbGV0ZSh1cmwsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5yZW1vdmUodm9sdW1lc2NvbGxlY3Rpb24ubW9kZWxzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuLm5hbWUgPT0gbW9kZWwubmFtZSAmJiBuLnBvbGljeSA9PSBtb2RlbC5wb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2b2x1bWVzY29sbGVjdGlvbi5leHRyYWN0KHJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qodm9sdW1lc2NvbGxlY3Rpb24uZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgVm9sdW1lc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVk9MVU1FU19DUkVBVEVfRU5EUE9JTlQ7XG4gICAgICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5wcm90b3R5cGUuY3JlYXRlLmNhbGwoY29sbGVjdGlvbiwgbW9kZWwsIHVybCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgVm9sdW1lc0NvbGxlY3Rpb24ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAobW9kZWwsIHNuYXBzaG90LCBuZXdWb2x1bWUpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IGNvbGxlY3Rpb24uJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZPTFVNRVNfQ09QWVNOQVBTSE9UU19FTkRQT0lOVDtcbiAgICAgICAgICAgIHZhciB2b2xjb3B5bW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lOiBtb2RlbC5uYW1lLFxuICAgICAgICAgICAgICAgIHBvbGljeTogbW9kZWwucG9saWN5LFxuICAgICAgICAgICAgICAgIE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBuZXdWb2x1bWUsXG4gICAgICAgICAgICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb2xsZWN0aW9uLiRodHRwLnBvc3QodXJsLCB2b2xjb3B5bW9kZWwpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vVE9ETzogQWRkIHRoZSBuZXcgdm9sdW1lIHRvIHRoZSBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vY29sbGVjdGlvbi5tb2RlbHMucHVzaChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjb2xsZWN0aW9uLmV4dHJhY3QocmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB2b2x1bWVzbW9kZWwgPSBuZXcgVm9sdW1lc0NvbGxlY3Rpb24oJGh0dHAsICRxKTtcbiAgICAgICAgcmV0dXJuIHZvbHVtZXNtb2RlbDtcbiAgICB9XSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA0LzI5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJylcbiAgICAuZmFjdG9yeSgnQ1JVREhlbHBlclNlcnZpY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzdGFydExvYWRlcihjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93TG9hZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RvcExvYWRlcihjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93TG9hZGVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dTZXJ2ZXJFcnJvcihjb250cm9sbGVyLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zaG93U2VydmVyRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc2VydmVyRXJyb3JNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVNlcnZlckVycm9yKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNob3dTZXJ2ZXJFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGVyOiBzdGFydExvYWRlcixcbiAgICAgICAgICAgICAgICBzdG9wTG9hZGVyOiBzdG9wTG9hZGVyLFxuICAgICAgICAgICAgICAgIHNob3dTZXJ2ZXJFcnJvcjogc2hvd1NlcnZlckVycm9yLFxuICAgICAgICAgICAgICAgIGhpZGVTZXJ2ZXJFcnJvcjogaGlkZVNlcnZlckVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
>>>>>>> Fixed bug: Reverse proxy URI for fetching volume templates and volmaster volumes rest endpoint were the same; Updated deployment instructions
