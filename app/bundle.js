"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}(),_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(t,e){var n=function(){function n(t,e){_classCallCheck(this,n),this.nodes=t,this.links=e}return _createClass(n,[{key:"updateNodes",value:function(t){this.nodes=t}},{key:"updateLinks",value:function(t){this.links=t}},{key:"nodeIdToName",value:function(t){for(var e=this.nodes,n=0;n<e.length;n++)if(e[n].id==t)return e[n].name}},{key:"processNodeData",value:function(e){var n=[];return _.forEach(e,function(e){var i=new t.Node(null,null,e.id,e.text,null);n.push(i)}),n}},{key:"processLinkData",value:function(t,n){function i(t,e){for(var n=0;n<e.length;n++)if(t==e[n].id)return e[n]}for(var o=[],a=0;a<t.length;a++)if(t[a].source!=t[a].target){var r=i(t[a].source,n),s=i(t[a].target,n);if(null==r||null==s)continue;var l=new e.Link(r,s);o.push(l)}return o}}]),n}();return{DataSource:n}}]),angular.module("contiv.utils",[]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(t,e,n){var i=function(t){function i(t,e,n,o,a,r){_classCallCheck(this,i);var s=_possibleConstructorReturn(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,t,e));return s.children_struct=n,s.ancestors_struct=o,s.labels=a,s.selectors=r,s}return _inherits(i,t),_createClass(i,[{key:"hasChild",value:function(t){return null!=this.children_struct[t]}},{key:"setAncestors",value:function(){var t=this,e=!1;_.forEach(t.nodes,function(n){n.ancestors=t.ancestors_struct[n.id]||[],_.isEmpty(n.ancestors)===!1?n.parent=n.ancestors[0]:0==_.includes(t.children_struct.topLevel,n.id)&&(n.ancestors.push("client"),t.ancestors_struct[n.id]=["client"],e===!1&&(e=!0,t.children_struct.topLevel.push("client"),t.children_struct.client=[]),t.children_struct.client.push(n.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(t){for(var e=this.nodes,n={},i=0;i<e.length;i++){var o=e[i];if(null===o.ancestors)n[o.id]=o.name;else for(var a=0;a<t.length;a++)if(o.ancestors.indexOf(t[a])>-1){n[o.id]=t[a];break}}for(var r=this.links,s=[],i=0;i<r.length;i++){var l=[];l.source=n[r[i].source]||r[i].source,l.target=n[r[i].target]||r[i].target,l.weight=r[i].weight,s.push(l)}for(var c=[],i=0;i<t.length;i++){var u=[];u.id=t[i],u.text=this.nodeIdToName(t[i])||t[i],u.ancestors=this.ancestors_struct[t[i]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:s}}},{key:"processNodeData",value:function(t){var n=[];return _.forEach(t,function(t){var i=new e.Node(null,null,t.id,t.text,null,t.parent,t.ancestors,null,null);n.push(i)}),n}},{key:"processLinkData",value:function(t,e){function i(t,e){for(var n=0;n<e.length;n++)if(t==e[n].id)return e[n]}for(var o=[],a={},r=0;r<t.length;r++)if(t[r].source!=t[r].target){var s=i(t[r].source,e),l=i(t[r].target,e),c=t[r].weight;if(null==s||null==l)continue;if(void 0===a[s.id+"-"+l.id]){var u=new n.Link(s,l,c);a[s.id+"-"+l.id]=u,o.push(u)}else{var d=a[s.id+"-"+l.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return o}}]),i}(t.DataSource);return{DataSource:i}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.applicationgroups.create",{url:"/create",component:"applicationgroupcreate"}).state("contiv.menu.applicationgroups.details",{url:"/details/:key",component:"applicationgroupdetails"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",component:"applicationgroupdetails"}).state("contiv.menu.applicationgroups.list",{url:"/list",component:"applicationGrouplist"})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(t){var e=function(){function e(n,i,o){_classCallCheck(this,e);var a=this;a.nodes=i||[],a.links=o||[],a.defaultNodePolicies=[],a.defaultPathPolicies=[],a.svgPolicy=new t.Policy,a.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},a.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},n.on("mouseover",function(t){a.svgPolicy.mouseover.call(this,t)}).on("dblclick",function(t){a.svgPolicy.dblclick.call(this,t)}).on("contextmenu",function(t){a.svgPolicy.contextmenu.call(this,t)}).on("mouseout",function(t){a.svgPolicy.mouseout.call(this,t)}).on("mousedown",function(t){a.svgPolicy.mousedown.call(this,t)}).on("mouseup",function(t){a.svgPolicy.mouseup.call(this,t)});var r=n.append("svg:defs");r.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),r.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),a.svg=n,a.svgG=n.append("g").classed(a.consts.graphClass,!0);var s=a.svgG;a.paths=s.append("g").selectAll("g"),a.circles=s.append("g").selectAll("g"),a.initNodes(),a.initLinks(),a.setPositions();var l=function(){a.onWindowResize(n)};a.bindings={resize:l},$(window).resize(l)}return _createClass(e,[{key:"destroy",value:function(){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy()}),_(t.defaultPathPolicies).forEach(function(t){t.destroy()}),t.svgPolicy.destroy();for(var e in t.bindings)$(window).off(e,t.bindings[e])}},{key:"initNodes",value:function(){var t=this;_.forEach(t.nodes,function(e){e.initialize(t)})}},{key:"initLinks",value:function(){var t=this;_.forEach(t.links,function(e){e.initialize(t)})}},{key:"findNodeById",value:function(t){for(var e=this,n=0;n<e.nodes.length;n++)if(t===e.nodes[n].id)return e.nodes[n]}},{key:"findD3Node",value:function(t){var e,n=this;return n.circles.each(function(n){n.id===t&&(e=d3.select(this))}),e}},{key:"installDragPolicy",value:function(t){this.drag=t}},{key:"installSvgPolicy",value:function(t){this.svgPolicy=t}},{key:"installDefaultNodePolicy",value:function(t){var e=this;e.defaultNodePolicies.push(t),t.initialize(e)}},{key:"uninstallDefaultNodePolicy",value:function(t){var e;e="string"==typeof t?t:t.policyName,_(thisGraph.defaultNodePolicies).forEach(function(t,n){t.policyName===e&&(t.destroy(),thisGraph.defaultNodePolicies.splice(n,1))})}},{key:"getNodePolicy",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e,n){if(e.policyName===t)return e})}},{key:"installDefaultPathPolicy",value:function(t){var e=this;e.defaultPathPolicies.push(t),t.initialize(e)}},{key:"uninstallDefaultPathPolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.defaultPathPolicies).forEach(function(t,i){t.policyName===e&&(t.destroy(),n.defaultPathPolicies.splice(i,1))})}},{key:"pathPolicyEvent",value:function(t,e,n){var i=this;_(i.defaultPathPolicies).forEach(function(i){i[t](e,n)})}},{key:"nodePolicyEvent",value:function(t,e,n){var i=this;_.forEach(i.defaultNodePolicies,function(i){i[t](e,n)})}},{key:"installZoomPolicy",value:function(t){this.dragSvg=t,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(t){}},{key:"insertTitleLinebreaks",value:function(t,e){for(var n=this,i=e.split(/\s+/g),o=i.length,a=t.append("text").attr("class",n.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(o-1)),r=0;r<i.length;r++){var s=a.append("tspan").text(i[r]);r>0&&s.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(t){var e=this,n=e.links.filter(function(e){return e.source===t||e.target===t});n.map(function(t){e.links.splice(e.links.indexOf(t),1)})}},{key:"addNode",value:function(t){var e=this;e.nodes.push(t),t.initialize(e),e.updateGraph()}},{key:"removeNode",value:function(t){var e=this;e.nodes.splice(e.nodes.indexOf(t),1),e.spliceLinksForNode(t),e.updateGraph()}},{key:"addLink",value:function(t){var e=this;e.links.push(t),t.initialize(e),e.updateGraph()}},{key:"removeLink",value:function(t){var e=this;e.links.splice(e.links.indexOf(t),1),t.initialize(e),e.updateGraph()}},{key:"updateExistingPaths",value:function(t){t.each(function(t){t.updateAttr(d3.select(this),t)})}},{key:"updateNewPaths",value:function(t){var e=this;e.initLinks(),t.each(function(t){t.newPathAttr(d3.select(this),t)}),t.on("mouseover",function(t){t.hasPolicy?t.pathPolicyEvent("mouseover",d3.select(this),t):e.pathPolicyEvent("mouseover",d3.select(this),t)}).on("dblclick",function(t){t.hasPolicy?t.pathPolicyEvent("dblclick",d3.select(this),t):e.pathPolicyEvent("dblclick",d3.select(this),t)}).on("contextmenu",function(t){t.hasPolicy?t.pathPolicyEvent("contextmenu",d3.select(this),t):e.pathPolicyEvent("contextmenu",d3.select(this),t)}).on("mouseout",function(t){t.hasPolicy?t.pathPolicyEvent("mouseout",d3.select(this),t):e.pathPolicyEvent("mouseout",d3.select(this),t)}).on("mousedown",function(t){t.hasPolicy?t.pathPolicyEvent("mousedown",d3.select(this),t):e.pathPolicyEvent("mousedown",d3.select(this),t)}).on("mouseup",function(t){t.hasPolicy?t.pathPolicyEvent("mouseup",d3.select(this),t):e.pathPolicyEvent("mouseup",d3.select(this),t)}).call(e.drag)}},{key:"updateExistingNodes",value:function(){var t=this;t.circles=this.circles.data(t.nodes,function(t){return t.id}).each(function(t){t.updateAttr(d3.select(this),t)})}},{key:"updateNewNodes",value:function(t){var e=this;t.each(function(t){null==t.graph&&t.initialize(e),t.newNodeAttr(d3.select(this),t)}),t.on("mouseover",function(t){t.hasPolicy?t.nodePolicyEvent("mouseover",d3.select(this),t):e.nodePolicyEvent("mouseover",d3.select(this),t)}).on("dblclick",function(t){t.hasPolicy?t.nodePolicyEvent("dblclick",d3.select(this),t):e.nodePolicyEvent("dblclick",d3.select(this),t)}).on("contextmenu",function(t){t.hasPolicy?t.nodePolicyEvent("contextmenu",d3.select(this),t):e.nodePolicyEvent("contextmenu",d3.select(this),t)}).on("mouseout",function(t){t.hasPolicy?t.nodePolicyEvent("mouseout",d3.select(this),t):e.nodePolicyEvent("mouseout",d3.select(this),t)}).on("mousedown",function(t){t.hasPolicy?t.nodePolicyEvent("mousedown",d3.select(this),t):e.nodePolicyEvent("mousedown",d3.select(this),t)}).on("mouseup",function(t){t.hasPolicy?t.nodePolicyEvent("mouseup",d3.select(this),t):e.nodePolicyEvent("mouseup",d3.select(this),t)}).call(e.drag),t.append("circle").attr("r",function(t){return String(t.radius)}),t.each(function(t){e.insertTitleLinebreaks(d3.select(this),t.text)})}},{key:"d3ForceCollide",value:function(t){var e=this,n=e.consts,i=e.nodes,o=d3.geom.quadtree(i);return function(e){var i=e.radius+n.maxRadius+n.padding,a=e.x-i,r=e.x+i,s=e.y-i,l=e.y+i;o.visit(function(i,o,c,u,d){if(i.point&&i.point!==e){var p=e.x-i.point.x,f=e.y-i.point.y,h=Math.sqrt(p*p+f*f),v=e.radius+i.point.radius+n.padding;h<v&&(h=(h-v)/h*t,e.x-=p*=h,e.y-=f*=h,i.point.x+=p,i.point.y+=f)}return o>r||u<a||c>l||d<s})}}},{key:"d3ForceTick",value:function(t,e,n){for(var i=this,o=i.consts,a=o.displayOffset,r=i.nodes,s=d3.geom.quadtree(i.nodes),l=0,c=r.length;++l<c;)s.visit(this.d3ForceCollide(r[l]));i.circles.each(this.d3ForceCollide(.5)).attr("cx",function(t){return t.x=Math.max(t.radius+a,Math.min(e-a-t.radius,t.x))}).attr("cy",function(t){return t.y=Math.max(t.radius+a,Math.min(n-a-t.radius,t.y))}),i.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceStart",value:function(){var t=this;t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceEnd",value:function(){var t=this;t.circles.attr("cx",function(t){return t.x}).attr("cy",function(t){return t.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceBounds",value:function(){var t=$("#visualization-graph").width(),e=$("#visualization-graph").height(),n=t,i=e;return{width:n,height:i}}},{key:"setForce",value:function(t){var e=this,n=e.nodes,i=e.links;if(!_.isEmpty(n)){var o=e.d3ForceBounds(),a=d3.layout.force().size([o.width,o.height]).nodes(n).charge(function(t){return-6e3}).links(i);a.linkDistance(o.width/3),a.linkStrength(.2),a.gravity(.2),a.on("tick",function(t){e.d3ForceTick.call(e,t,o.width,o.height)}),a.on("start",function(){e.d3ForceStart.call(e)}),a.on("end",function(){e.d3ForceEnd.call(e)}),a.start();for(var r=0;a.alpha()>.01&&r<150;)a.tick(),r+=1;a.stop(),null!=t&&t()}}},{key:"setPositions",value:function(){for(var t=this,e=t.consts.displayOffset,n=$("#visualization-graph").width(),i=$("#visualization-graph").height(),o=n-2*e,a=i-2*e,r=t.nodes,s=0;s<r.length;s++)r[s].radius=r[s].radius||t.consts.startRadius,null!=r[s].x&&null!=r[s].y||(r[s].x=o/2+r[s].radius+e,r[s].y=a/2+r[s].radius+e)}},{key:"updateGraph",value:function(t){var e=this,n=e.consts,i=e.state;if(!e.state.disableUpdate){this.updateExistingNodes();var o=e.circles.enter().append("g");o.classed(n.circleGClass,!0),e.circles.exit().remove(),0==i.initForce?(e.setForce(function(){e.updateNewNodes.call(e,o)}),i.initForce=!0):this.updateNewNodes(o),e.paths=e.paths.data(e.links,function(t){return String(t.source.id)+"+"+String(t.target.id)});var a=e.paths;this.updateExistingPaths(a);var r=a.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(r),a.exit().remove(),null!=t&&t()}}}]),e}();return{Graph:e}}]),angular.module("contiv.dashboard",["contiv.models"]).config(["$stateProvider",function(t){t.state("contiv.menu.dashboard",{url:"/dashboard",component:"dashboard"})}]),angular.module("contiv.login",["contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.login",{url:"/",component:"login"})}]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.isolation.create",{url:"/create",component:"isolationpolicycreate"}).state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",component:"bandwidthpolicycreate"}).state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.list",{url:"/list",params:{policyTab:null},component:"networkpoliciestabs"})}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networks.list",{url:"/list",component:"networkList"}).state("contiv.menu.networks.details",{url:"/details/:key",component:"networkdetails"}).state("contiv.menu.networks.create",{url:"/create",component:"networkcreate"})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.organizations.list",{url:"/list",component:"organizationlist"}).state("contiv.menu.organizations.create",{url:"/create",component:"organizationcreate"}).state("contiv.menu.organizations.details",{url:"/details/:key",component:"organizationdetails"})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(t){var e=function(t){function e(t,n,i,o){_classCallCheck(this,e);var a=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i)),r=a;r.state.transition=[],r.consts.edge_buffer=200,r.consts.radiusDecay=1,r.consts.containerClass="container",r.dataSource=o;var s=d3.behavior.drag().origin(function(t){return{x:t.x,y:t.y}}).on("dragstart",function(){}).on("drag",function(t){d3.select(this).attr("transform",function(t,e){return t.x+=d3.event.dx,t.y+=d3.event.dy,"translate("+[t.x,t.y]+")"}),r.updateGraph()}).on("dragend",function(){});r.drag=s;var l=d3.behavior.zoom().on("zoom",function(){return(null==d3.event.sourceEvent||!d3.event.sourceEvent.ctrlKey)&&(r.zoomed.call(r),!0)}).on("zoomstart",function(t,e){});return r.dragSvg=l,r.svg.call(l).on("dblclick.zoom",null),a}return _inherits(e,t),_createClass(e,[{key:"zoomed",value:function(t,e){var n=this;if(1!=n.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=t&&null!=e){var i=n.dragSvg;i.scale(e),i.translate(t);var o=function(){i.scale(e),i.translate(t)},a="zoom"+t;return void d3.select("."+this.consts.graphClass).transition(a).delay(100).duration(750).attr("transform","translate("+i.translate()+") scale("+i.scale()+")").each("end",o)}n.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+n.dragSvg.translate()+") scale("+n.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(t){var e=document.getElementsByTagName("body")[0],n=$("#visualization-graph").offset(),i=$("#visualization-graph").width(),o=e.clientHeight;t.attr("width",i).attr("height",o-n.top-20)}},{key:"updateLinkData",value:function(){for(var t=this,e=[],n=0;n<t.nodes.length;n++)e.push(t.nodes[n].id);var i=t.dataSource.getFlowBetweenSet(e),o=i.linkData;t.links=t.dataSource.processLinkData(o,t.nodes),this.initNodes(),this.initLinks(),t.updateGraph()}}]),e}(t.Graph);return{Graph:e}}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.servicelbs.list",{url:"/list",component:"servicelbList"}).state("contiv.menu.servicelbs.create",{url:"/create",component:"servicelbCreate"}).state("contiv.menu.servicelbs.details",{url:"/details/:key",component:"servicelbDetails"})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("Link",[function(){var t=function(){function t(e,n){_classCallCheck(this,t),this.source=e,this.target=n,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){0==this.initialized&&(this.initialized=!0,this.graph=t)}},{key:"updateAttr",value:function(t,e){t.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(t,e){t.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var t=this,e=t.target.x-t.source.x,n=t.target.y-t.source.y,i=Math.sqrt(e*e+n*n);return"M"+t.source.x+","+t.source.y+"A"+i+","+i+" 0 0,1 "+t.target.x+","+t.target.y}},{key:"installPathPolicy",value:function(t){this.hasPolicy=!0,this.pathPolicies.push(t),t.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.pathPolicies).forEach(function(t,i){t.policyName===e&&(t.destroy(),n.pathPolicies.splice(i,1))}),0===n.pathPolicies.length&&(n.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(t,e,n){_(n.pathPolicies).forEach(function(i){i[t](e,n)})}}]),t}();return{Link:t}}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""}).state("contiv.menu.settings.details.networks",{url:"/networks",component:"networksetting"}).state("contiv.menu.settings.details.volumes",{url:"/volumes",component:"volumesetting"}).state("contiv.menu.settings.details.cluster",{url:"/cluster",component:"clustersettings"})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_get=function t(e,n,i){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,i)}if("value"in o)return o.value;var r=o.get;if(void 0!==r)return r.call(i)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(t){var e=function(t){function e(t,n,i){_classCallCheck(this,e);var o=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return o.weight=i,o.count=1,o}return _inherits(e,t),_createClass(e,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var t,e=this,n=(e.target.x-e.source.x)/2,i=(e.target.y-e.source.y)/2;return t=e.source.x<e.target.x?{my:"top center",at:"center center",target:[n,i],
adjust:{y:10}}:{my:"bottom center",at:"center center",target:[n,i],adjust:{y:-10}}}},{key:"initialize",value:function(t){if(0==this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=t.state.VisualizerLink;null==n&&(n=t.state.VisualizerLink={},n.maxWeight=null,n.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(t){this.graph.state.VisualizerLink.useAvgWeight=!!t}},{key:"setWeight",value:function(t){this.weight=t}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var t=this.graph,e=t.state.VisualizerLink;if(e.useAvgWeight){var n=this.weight/this.count;return n}return this.weight}},{key:"updateMaxWeight",value:function(){var t=this.graph,e=t.state.VisualizerLink,n=_.maxBy(t.links,function(t){return null!=t.graph?t.getWeight():0});e.maxWeight=n.getWeight()}},{key:"updateAttr",value:function(t,e){var n=this.graph,i=n.state.VisualizerLink;this.updateMaxWeight();var o=d3.scale.linear().domain([0,i.maxWeight]).range(["#ffb366","#F92606"]);i.colorScale=o,t.style("marker-end","url(#end-arrow)").classed(n.consts.selectedClass,function(t){return t===i.selectedEdge}).attr("d",this.arrowPath.call(e)).transition("existingPathTransition").duration(750).attr("stroke",function(t){var e=o(t.getWeight());return e})}},{key:"newPathAttr",value:function(t,e){var n=this.graph,i=n.state.VisualizerLink;this.updateMaxWeight();var o=d3.scale.linear().domain([0,i.maxWeight]).range(["#ffb366","#F92606"]);t.transition("newPathTransition").duration(750).attrTween("opacity",function(t){return d3.interpolateString(0,1)}).attr("stroke",function(t){var e=o(t.getWeight());return e}).attr("d",this.arrowPath.call(e))}}]),e}(t.Link);return{Link:e}}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(t){t.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("Node",[function(){var t=function(){function t(e,n,i,o,a){_classCallCheck(this,t),this.x=e,this.y=n,this.radius=a,this.id=i,this.text=o,this.radius=a,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){0==this.initialized&&(this.initialized=!0,this.graph=t)}},{key:"updateAttr",value:function(t,e){t.attr("transform",function(t){return"translate("+t.x+","+t.y+")"})}},{key:"newNodeAttr",value:function(t,e){}},{key:"setRadius",value:function(t){this.radius=t}},{key:"installNodePolicy",value:function(t){this.hasPolicy=!0,this.nodePolicies.push(t),t.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.nodePolicies).forEach(function(t,i){t.policyName===e&&(t.destroy(),n.nodePolicies.splice(i,1))}),0===n.nodePolicies.length&&(n.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(t,e,n){_.forEach(this.nodePolicies,function(i){i[t](e,n)})}}]),t}();return{Node:t}}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.servicelbs","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),e.otherwise("/")}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(t){var e=function(t){function e(t,n,i,o,a,r,s,l,c){_classCallCheck(this,e);var u=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,o,a));return u.parent=r,u.ancestors=s,null==l?u.xStart=t:u.xStart=l,null==c?u.yStart=n:u.yStart=c,u}return _inherits(e,t),_createClass(e,[{key:"newNodeAttr",value:function(t,e){var n=this.graph;null!=n.consts.containerClass&&null==n.dataSource.children_struct[e.id]&&t.classed(n.consts.containerClass,!0),t.transition("nodePositionTransition").duration(750).attrTween("transform",function(t){if(null!=t.xStart&&null!=t.yStart){var e=t.xStart,n=t.yStart;return t.xStart=t.x,t.yStart=t.y,d3.interpolateString("translate("+e+","+n+")","translate("+t.x+","+t.y+")")}return d3.interpolateString("translate("+t.x+","+t.y+")","translate("+t.x+","+t.y+")")})}}]),e}(t.Node);return{Node:e}}]),angular.module("contiv.menu").config(["$stateProvider",function(t){t.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(t,e){function n(){t.go("contiv.login")}var i=this;i.username=e.username,i.logout=n}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_get=function e(t,n,i){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,i)}if("value"in o)return o.value;var r=o.get;if(void 0!==r)return r.call(i)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(t){var e=function(t){function e(){return _classCallCheck(this,e),_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"NodeSelectionPolicy"))}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){if(!this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=t.state.NodeSelectionPolicy={};n.selectedNodes=[];var i=t.consts.NodeSelectionPolicy={};i.selectedClass="selected";var o=t.drag;o.on("drag",function(e){var n=t;if(null!=n.consts.NodeSelectionPolicy){var i=n.consts.NodeSelectionPolicy.selectedClass,o=d3.selectAll("."+i);o[0].indexOf(this)==-1&&(o.classed(i,!1),o=d3.select(this),o.classed(i,!0)),o.attr("transform",function(t,e){return t.x+=d3.event.dx,t.y+=d3.event.dy,"translate("+[t.x,t.y]+")"}),n.updateGraph()}})}}},{key:"addSelectNode",value:function(t,e){var n=this.graph,i=n.state.NodeSelectionPolicy,o=n.consts.NodeSelectionPolicy;t.classed(o.selectedClass,!0),i.selectedNodes.push(e)}},{key:"removeSelectFromNode",value:function(t,e){var n=this.graph,i=n.state.NodeSelectionPolicy,o=n.consts.NodeSelectionPolicy;n.circles.filter(function(t){return t.id===e.id}).classed(o.selectedClass,!1);var a=i.selectedNodes.indexOf(e);i.selectedNodes.splice(a,1)}},{key:"removeAllSelectedNodes",value:function(){var t=this.graph,e=t.state.NodeSelectionPolicy,n=t.consts.NodeSelectionPolicy;t.circles.classed(n.selectedClass,!1),e.selectedNodes=[]}},{key:"mousedown",value:function(t,e){var n=this.graph,i=n.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?i.selectedNodes.indexOf(e)>-1?this.removeSelectFromNode(t,e):this.addSelectNode(t,e):i.selectedNodes.indexOf(e)==-1&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(t,e){var n=this.graph,i=n.state.NodeSelectionPolicy;d3.event.ctrlKey||i.selectedNodes.length<=1&&this.removeSelectFromNode(t,e)}}]),e}(t.Policy);return{Policy:e}}]);var __decorate=this&&this.__decorate||function(t,e,n,i){var o,a=arguments.length,r=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(a<3?o(r):a>3?o(e,n,r):o(e,n))||r);return a>3&&r&&Object.defineProperty(e,n,r),r},__metadata=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},core_1=require("@angular/core"),forms_1=require("@angular/forms"),common_1=require("@angular/common"),directives_module_1=require("../components/directives/directives.module"),storagepolicylistctrl_1=require("./storagepolicylistctrl"),StoragepolicyModule=function(){function t(){}return t=__decorate([core_1.NgModule({imports:[forms_1.FormsModule,common_1.CommonModule,directives_module_1.DirectivesModule],declarations:[storagepolicylistctrl_1.StoragepolicyListComponent],exports:[storagepolicylistctrl_1.StoragepolicyListComponent]}),__metadata("design:paramtypes",[])],t)}();exports.StoragepolicyModule=StoragepolicyModule;var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(t){var e=function(t){function e(t){_classCallCheck(this,e);var n=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"PathChangeViewPolicy"));return n.$state=t,n}return _inherits(e,t),_createClass(e,[{key:"generateList",value:function(t){var e=this,n=[],i=function o(t,n){for(var i=e.graph.dataSource.children_struct[t],a=0;a<i.length;a++){var r=i[a];if(e.graph.dataSource.hasChild(r)===!0){var s=o(r,n);n.concat(s)}else n.push(r)}};return i(t,n),n}},{key:"viewEdge",value:function(t){var e=[],n=[],i=t.source.id,o=t.target.id;e=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],n=this.graph.dataSource.hasChild(o)===!0?this.generateList(o):[o],this.$state.go("contiv.menu.visualization.edge",{sourceName:i,targetName:o,sourceList:e,targetList:n})}},{key:"mousedown",value:function(t,e){this.viewEdge(e)}}]),e}(t.Policy);return{Policy:e}}]),angular.module("contiv.visualization").config(["$stateProvider",function(t){t.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(t,e,n,i,o,a){var r=i.sourceName,s=i.targetName,l=i.sourceList,c=i.targetList;if(null==l||null==c)return void n.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();t.edgeDataInterval=a(function(){o.getEdgeData(l,c,d.toString()).then(function(e){var n=e.results,i=0;_.forEach(n,function(t){_.isEmpty(t)===!1&&(i+=t.series[0].values[0][1])}),t.sourceName=r,t.targetName=s,t.edgeData=i,t.edgeDataTime=d},function(t){})},3e3),t.$on("$destroy",function(){a.cancel(t.edgeDataInterval)}),o.getOldEdgeData(l,c).then(function(e){var n=e.results,i=[];_.forEach(n,function(t){if(_.isEmpty(t)===!1){var e=t.series[0].values;_.isEmpty(i)?_.forEach(e,function(t){i.push(t[1])}):_.forEach(e,function(t,e){i[e]+=t[1]})}}),t.sourceName=r,t.targetName=s,t.sourceList=l,t.targetList=c,t.oldEdgeData=i},function(t){})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("Policy",[function(){var t=function(){function t(e){_classCallCheck(this,t),this.policyName=e,this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){this.initialized||(this.initialized=!0,this.graph=t)}},{key:"mouseover",value:function(t,e){}},{key:"dblclick",value:function(t,e){}},{key:"contextmenu",value:function(t,e){}},{key:"mouseout",value:function(t,e){}},{key:"mousedown",value:function(t,e){}},{key:"mouseup",value:function(t,e){}},{key:"destroy",value:function(){}}]),t}();return{Policy:t}}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(t){function e(t,e){function n(){l=new Date;for(var e in c){var i=c[e];i.data.push(t.edgeData||0),i.path.attr("d",p)}u.domain([l-(r-2)*s,l-s]),y.transition().duration(s).ease("linear").call(u.axis),h.transition().duration(s).ease("linear").call(d.axis),g.attr("transform",null).transition().duration(s).ease("linear").attr("transform","translate("+u(l-(r-1)*s)+")").each("end",function(){n()});for(var e in c){var i=c[e];i.data.shift()}}var i=document.getElementsByTagName("body")[0],o=i.clientWidth-400,a=i.clientHeight-400,r=59,s=750,l=new Date(Date.now()-s),c={current:{value:0,color:"orange",data:e.range(r).map(function(e){return t.oldEdgeData[Math.floor(e/10)]||0})}},u=e.time.scale().domain([l-(r-2),l-s]).range([0,o]),d=e.scale.linear().domain([0,e.max(c.current.data,function(t){return t+10})]).range([a,0]),p=e.svg.line().interpolate("basis").x(function(t,e){return u(l-(r-1-e)*s)}).y(function(t){return d(t)}),f=e.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),h=f.append("g").attr("class","y axis").call(d.axis=e.svg.axis().scale(d).orient("left")),v=e.select(".graph").append("svg").attr("class","chart").attr("width",o-50).attr("height",a+50),y=v.append("g").attr("class","x axis").attr("transform","translate(0,"+a+")").call(u.axis=e.svg.axis().scale(u).orient("bottom")),g=v.append("g");for(var m in c){var _=c[m];_.path=g.append("path").data([_.data]).attr("class",m+" group").style("stroke",_.color)}n()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(n){n.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=n.edgeData&&null!=n.oldEdgeData&&!n.initialize){n.initialize=!0;var i=t.d3;e(n,i)}})}}}]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(t,e,n,i,o,a,r){return{Policy:t.Policy,QTipPolicy:e.Policy,PathChangeViewPolicy:n.Policy,NodeSelectionPolicy:i.Policy,SplitJoinNodePolicy:o.Policy,SplitJoinViewPolicy:a.Policy,SaveStatePolicy:r.Policy}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(t,e,n,i,o,a){function r(t,n,i,o,a,r){if(void 0!==t.nodes&&void 0!==t.links&&void 0!==t.children_struct&&void 0!==t.ancestors_struct){var s=new a.DataSource(t.nodes,t.links,t.children_struct,t.ancestors_struct,t.labels,t.serviceSelectors);s.setAncestors();var l,c,u=s.getTopLevelFlow();l=s.processNodeData(u.nodeData),c=s.processLinkData(u.linkData,l);var d=document.getElementsByTagName("body")[0],p=(d.clientWidth,d.clientHeight),f=n.find("svg"),h=$(f.parent()).offset(),v=$(f.parent()).width(),y=d3.select(f[0]).attr("width",v).attr("height",p-h.top-20);t.visualizationGraph=new i.Graph(y,l,c,s,t.children_struct,t.ancestors_struct),t.visualizationGraph.installDefaultPathPolicy(new o.SaveStatePolicy(r.savedStates)),t.visualizationGraph.installDefaultPathPolicy(new o.PathChangeViewPolicy(e));var g=new o.QTipPolicy;t.visualizationGraph.installDefaultNodePolicy(g),t.visualizationGraph.installDefaultPathPolicy(g);var m=new o.SplitJoinViewPolicy;if(t.visualizationGraph.installDefaultNodePolicy(m),m.installBackButton($("#backButton")),m.installTitle($("#graph-title")),0==_.isEmpty(r.savedStates)){var P=t.visualizationGraph;P.load(r.savedStates)}else t.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(t,e){t.$on("$destroy",function(){$("#visualization-graph").unbind(),t.visualizationGraph.destroy()}),t.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=t.nodes&&null!=t.links&&null!=t.children_struct&&null!=t.ancestors_struct&&(t.initialized?(t.visualizationGraph.dataSource.links=t.links,t.visualizationGraph.updateLinkData()):(t.initialized=!0,r(t,e,n,i,o,a)))})}}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_get=function n(t,e,i){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,e);if(void 0===o){var a=Object.getPrototypeOf(t);return null===a?void 0:n(a,e,i)}if("value"in o)return o.value;var r=o.get;if(void 0!==r)return r.call(i)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(t){var e=function(t){function e(){return _classCallCheck(this,e),_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"QTipPolicy"))}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){if(!this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=this,i=t.state.QTipPolicy={};i.mousedown=!1,t.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(t){i.mouseup=!1});var o=t.updateNewNodes;t.updateNewNodes=function(e){o.call(t,e),n.updateNewNodes(e)};var a=t.updateNewPaths;t.updateNewPaths=function(e){a.call(t,e),n.updateNewPaths(e)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(t,e){var n=this.graph,i=n.state.QTipPolicy;i.mousedown=!0}},{key:"mouseup",value:function(t,e){var n=this.graph,i=n.state.QTipPolicy;i.mousedown=!1}},{key:"whenQTipAvailable",value:function(t){var e=this,n=500;window.setTimeout(function(){null!=$(document).qtip?t():window.setTimeout(e.whenQTipAvailable(t),n)},n)}},{key:"updateNewNodes",value:function(t){function e(){t.each(function(t){var e,o=this;if(null!=n.dataSource.children_struct[t.id]){e="<b><u>Selectors:</b></u> ";var a=n.dataSource.selectors[t.id],r=!1;for(var s in a)r=!0,e+=s+" : <i>"+a[s]+"</i>,\n ";r===!1&&(e="No Selectors, ")}else{e="<b><u>Labels:</b></u> ";var l=n.dataSource.labels[t.id],r=!1;for(var s in l)r=!0,e+=s+" : <i>"+l[s]+"</i>,\n ";r===!1&&(e="No labels, ")}e=e.slice(0,-2),$(o).qtip({content:{title:t.id,text:e},events:{show:function(){var e=$(o).qtip("api"),a=$("#graphContainer").offset(),r=[a.left+(t.x*n.dragSvg.scale()+n.dragSvg.translate()[0]),a.top+(t.y+t.radius)*n.dragSvg.scale()+n.dragSvg.translate()[1]];return e.set("position.target",r),!i.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var n=this.graph,i=n.state.QTipPolicy;void 0!=$(document).qtip?e():this.whenQTipAvailable(e)}},{key:"updateNewPaths",value:function(t){var e=this.graph,n=e.state.QTipPolicy;void 0!=$(document).qtip&&t.each(function(t){var e=this,i=d3.select(this).node(),o=(i.getPointAtLength(i.getTotalLength()/2),t.qtipHelper()),a="Bytes: "+t.getWeight();$(e).qtip({content:{text:a},events:{show:function(){return!n.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:o.my,at:"center center",target:"mouse",adjust:o.adjust},hide:{event:"mousedown mouseleave"}})})}}]),e}(t.Policy);return{Policy:e}}]),angular.module("contiv.visualization").config(["$stateProvider",function(t){t.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(t,e,n,i){var o=function(e){var n=[],i=[],o=[];_.forEach(e.results[0].series,function(t){var e,a=t.tags.EndpointIP,r=t.tags.ProviderIP;0==_.includes(o,a)&&(e={name:a,id:a,parent:null,ancestors:null},n.push(e),o.push(a)),0==_.includes(o,r)&&(e={name:r,id:r,parent:null,ancestors:null},n.push(e),o.push(r));var s={source:a,target:r,weight:t.values[0][2]};i.push(s);var l={source:r,target:a,weight:t.values[0][1]};i.push(l)}),t.nodes=n,t.links=i};n.getGraphData().then(o,function(t){}),t.$on("$destroy",function(){i.cancel(t.graphDataInterval)}),n.getStructureData().then(function(e){t.ancestors_struct=e.ancestors_struct,t.children_struct=e.children_struct,t.labels=e.labels,t.serviceSelectors=e.serviceSelectors},function(t){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(t,e){function n(n,i){var o=e.defer();return t.get(n,i).then(function(t){o.resolve(t.data)},function(t){o.reject(t.data)}),o.promise}function i(n,i){var o=function(t){var e,n,i,a,r,s,l,c="";for(e in t)if(n=t[e],n instanceof Array)for(l=0;l<n.length;++l)r=n[l],i=e+"["+l+"]",s={},s[i]=r,c+=o(s)+"&";else if(n instanceof Object)for(a in n)r=n[a],i=e+"["+a+"]",s={},s[i]=r,c+=o(s)+"&";else void 0!==n&&null!==n&&(c+=encodeURIComponent(e)+"="+encodeURIComponent(n)+"&");return c.length?c.substr(0,c.length-1):c},a=e.defer();return t({url:n,method:"POST",data:i,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(t){return angular.isObject(t)&&"[object File]"!==String(t)?o(t):t}]}).then(function(t){a.resolve(t.data)},function(t){a.reject(t.data)}),a.promise}function o(){var t=ContivGlobals.VISUALIZATION_ENDPOINT;t+="influx/query";var e={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return n(t,e)}function a(){var t=ContivGlobals.VISUALIZATION_ENDPOINT;return t+="services",n(t)}function r(t,e){var n="(";n+=e+"=",n+="'"+t[0]+"' ";for(var i=1;i<t.length;i++)n+="OR ",n+=e+"=",n+="'"+t[i]+"' ";return n+=")"}function s(t,e,n){var o=ContivGlobals.VISUALIZATION_ENDPOINT;o+="influx/query";var a={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+r(t,"EndpointIP")+" AND "+r(e,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+r(t,"ProviderIP")+" AND "+r(e,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return i(o,a)}function l(t,e){var n=ContivGlobals.VISUALIZATION_ENDPOINT;n+="influx/query";var o={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+r(t,"EndpointIP")+" AND "+r(e,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+r(t,"ProviderIP")+" AND "+r(e,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return i(n,o)}return{getGraphData:o,getStructureData:a,getEdgeData:s,getOldEdgeData:l}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(t){var e=function(t){function e(t){_classCallCheck(this,e);var n=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"SaveStatePolicy"));return n.savedState=t,n}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){this.graph=t;var e=this;t.destroy=function(){e.graphDestroy.call(t,e.savedState)},t.load=function(n){e.graphLoad.call(t,n)}}},{key:"graphDestroy",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy(t)}),_(e.defaultPathPolicies).forEach(function(e){e.destroy(t)});for(var n in e.bindings)$(window).off(n,e.bindings[n])}},{key:"graphLoad",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e){null!=e.load&&e.load(t)}),_(e.defaultPathPolicies).forEach(function(e){null!=e.load&&e.load(t)})}}]),e}(t.Policy);return{Policy:e}}]);var __decorate=this&&this.__decorate||function(t,e,n,i){var o,a=arguments.length,r=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(a<3?o(r):a>3?o(e,n,r):o(e,n))||r);return a>3&&r&&Object.defineProperty(e,n,r),r},__metadata=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},core_1=require("@angular/core"),forms_1=require("@angular/forms"),common_1=require("@angular/common"),directives_module_1=require("../components/directives/directives.module"),volumelistctrl_1=require("./volumelistctrl"),volumeservice_1=require("./volumeservice"),volumedetailsctrl_1=require("./volumedetailsctrl"),VolumeModule=function(){function t(){}return t=__decorate([core_1.NgModule({imports:[forms_1.FormsModule,common_1.CommonModule,directives_module_1.DirectivesModule],declarations:[volumelistctrl_1.VolumeListComponent,volumedetailsctrl_1.VolumeDetailsComponent],exports:[volumelistctrl_1.VolumeListComponent,volumedetailsctrl_1.VolumeDetailsComponent],providers:[volumeservice_1.VolumeService]}),__metadata("design:paramtypes",[])],t)}();exports.VolumeModule=VolumeModule;var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_get=function i(t,e,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,e);if(void 0===o){var a=Object.getPrototypeOf(t);return null===a?void 0:i(a,e,n)}if("value"in o)return o.value;var r=o.get;if(void 0!==r)return r.call(n)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(t,e){var n=function(t){function n(){_classCallCheck(this,n);var t=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return t.policyName="SplitJoinNodePolicy",t}return _inherits(n,t),_createClass(n,[{key:"initialize",value:function(t){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var e=t.state.SplitJoinNodePolicy={};e.splitNodes=[]}}},{key:"dblclick",value:function(t,e){var n=this.graph,i=n.state.SplitJoinNodePolicy;d3.event.ctrlKey||(i.selectedNodes.indexOf(e)>-1?this.splitMultipleNodes(i.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(e)))}},{key:"contextmenu",value:function(t,e){var n=this.graph,i=n.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var o=i.selectedNodes;if(o.indexOf(e)>-1)for(var a=0;a<o.length;a++)this.joinNode(o[a]);else this.removeAllSelectedNodes(),this.joinNode(e)}}},{key:"__splitNode",value:function(t){var n=this.graph,i=n.state.SplitJoinNodePolicy,o=t.id,a=n.dataSource.children_struct;if(void 0!==a[o]&&!_.isEmpty(a[o])){n.nodes=_.filter(n.nodes,function(e){return e!=t}),n.spliceLinksForNode(t);for(var r=[],s=0;s<n.nodes.length;s++)r.push(n.nodes[s].id);for(var l=[],s=0;s<a[o].length;s++)r.push(a[o][s]),l.push(a[o][s]);var c=n.dataSource.getFlowBetweenSet(r),u=t.x,d=t.y,p=t.ancestors.slice();p.splice(0,0,t.id);for(var f=t.id,h=[],v=t.radius*n.consts.radiusDecay,y=c.nodeData,s=0;s<y.length;s++)if(l.indexOf(y[s].id)>-1){var g=y[s].id,m=y[s].text,P=new e.Node(null,null,g,m,v,f,p,u,d);P.initialize(n),n.nodes.push(P),h.push(P)}return n.links=n.dataSource.processLinkData(c.linkData,n.nodes),n.initNodes(),n.initLinks(),i.splitNodes.push(t.id),h}}},{key:"splitNode",value:function(t){var e=this.__splitNode(t);null!=e&&this.splitNodeEvent(e)}},{key:"splitMultipleNodes",value:function(t){for(var e=(this.graph,[]),n=0;n<t.length;n++){var i=this.__splitNode(t[n]);e=e.concat(i)}this.splitMultipleNodesEvent(i)}},{key:"splitNodeEvent",value:function(t){var e=this.graph;e.setPositions(),e.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(t){var e=this.graph;e.setPositions(),e.updateGraph()}},{key:"__joinNode",value:function(t){var n=this.graph,i=n.state.SplitJoinNodePolicy;if(n.nodes.indexOf(t)!=-1){var o=n.dataSource.children_struct,a=t.id;if(!(o.topLevel.indexOf(a)>-1)){for(var r=[],s=[],l=0;l<n.nodes.length;l++)n.nodes[l].ancestors.indexOf(t.parent)==-1?s.push(n.nodes[l].id):r.push(n.nodes[l]);var c=t.parent;s.push(t.parent);var u=t.radius/n.consts.radiusDecay,d=t.x,p=t.y,f=t.ancestors[1],h=t.ancestors.slice(1),v=new e.Node(d,p,c,c,u,f,h);n.nodes.push(v);for(var y=n.dataSource.getFlowBetweenSet(s),l=0;l<r.length;l++){var g=r[l];n.nodes.splice(n.nodes.indexOf(g),1),n.spliceLinksForNode(g)}return n.links=n.dataSource.processLinkData(y.linkData,n.nodes),n.initNodes(),n.initLinks(),i.splitNodes.splice(i.splitNodes.indexOf(v.id),1),v}}}},{key:"joinNode",value:function(t){var e=this.__joinNode(t);null!=e&&this.joinNodeEvent(e)}},{key:"joinMultipleNode",value:function(t){for(var e=[],n=0;n<t.length;n++){var i=this.__joinNode(t[n]);e.push(i)}this.joinMultipleNodesEvent(e)}},{key:"joinNodeEvent",value:function(t){var e=this.graph;e.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(t){var e=this.graph;e.updateGraph()}}]),n}(t.Policy);return{Policy:n}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),_get=function o(t,e,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:o(a,e,n)}if("value"in i)return i.value;var r=i.get;if(void 0!==r)return r.call(n)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(t,e){var n=function(t){function n(){_classCallCheck(this,n);var t=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return t.policyName="SplitJoinViewPolicy",t}return _inherits(n,t),_createClass(n,[{key:"initialize",value:function(t){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var e=t.state.SplitJoinViewPolicy={};e.savedStates=[],e.eventHistory=[],e.focusGroups=[],e.foci=[],e.zooms={},e.layout={},e.layoutDefault=null,e.zoomDefault=null,e.nodeIdsToReshow=null,e.backButtonElem=null,e.titleElem=null;var i=t.consts.SplitJoinViewPolicy={};i.boundary=.8,t.d3ForceBounds=this.d3ForceBounds,t.d3ForceTick=this.d3ForceTick,t.d3ForceStart=this.d3ForceStart,t.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(t){var e=this.graph,n=this,i=e.state.SplitJoinViewPolicy;i.backButtonElem=t,i.backButton=function(){i.eventHistory.length>0&&n.undoLastEvent.call(n)}}},{key:"installTitle",value:function(t){var e=this.graph,n=e.state.SplitJoinViewPolicy;n.titleElem=t}},{key:"destroy",value:function(t){null!=t&&this.save(t)}},{key:"save",value:function(t){var e=this.graph,n=e.state.SplitJoinViewPolicy,i=e.nodes,o=e.links,a=null;null!=n.titleElem&&(a=n.titleElem.text());var r=n.focusGroups,s=n.eventHistory,l=n.zooms,c=n.layout,u=n.layoutDefault,d=n.zoomDefault,p={nodes:i,links:o,states:n.savedStates,currTitle:a,focusGroups:r,eventHistory:s,zooms:l,layout:c,layoutDefault:u,zoomDefault:d};t.SplitJoinViewPolicy=p}},{key:"load",value:function(t){var e=this,n=this.graph,i=n.state.SplitJoinViewPolicy;t=t.SplitJoinViewPolicy,i.savedStates=t.states,n.links=t.links,n.nodes=t.nodes;var o=t.currTitle;null!=i.titleElem&&i.titleElem.text(o),i.eventHistory=t.eventHistory,i.focusGroups=t.focusGroups,i.zooms=t.zooms,i.layout=t.layout,i.layoutDefault=t.layoutDefault,i.zoomDefault=t.zoomDefault,
null!=i.backButtonElem&&i.eventHistory.length>0&&i.backButtonElem.fadeTo("slow",1);var a=n.dataSource.children_struct;_.forEach(n.nodes,function(t){t.SplitJoinViewPolicy={},_.includes(a[i.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"});var r;if(0===i.focusGroups.length){r=i.layoutDefault;var s=i.zoomDefault;n.zoomed(s[0],s[1])}else{var s=i.zooms[i.focusGroups];null!=s&&n.zoomed(s[0],s[1]),r=i.layout[i.focusGroups]}_.forEach(n.nodes,function(t){var e=r[t.id];null==e&&console.log(r,t),t.x=e.x,t.y=e.y}),n.state.initForce=!0,n.updateGraph.call(n,function(){e.updateGraphCallback.call(e)})}},{key:"dblclick",value:function(t,e){var i=this.graph,o=i.state.SplitJoinViewPolicy,a=e.id,r=i.dataSource.children_struct;if(void 0!==r[a]&&!_.isEmpty(r[a])){if(o.focusGroups.slice(),0===o.focusGroups.length?o.focusGroups.push(e.id):_.includes(r[o.focusGroups[0]],e.id)?o.focusGroups[0]=e.id:1===o.focusGroups.length?o.focusGroups.push(e.id):_.includes(r[o.focusGroups[1]],e.id)&&(o.focusGroups[1]=e.id),2===o.focusGroups.length&&o.focusGroups[1]===e.id){var s=[e],l=[],c=r[o.focusGroups[0]];_.forEach(i.nodes,function(t){_.includes(c,t.id)&&(l.push(t.id),s.push(t))})}else{var s=[e],l=[];_.forEach(i.links,function(t){t.source===e&&l.indexOf(t.target.id)==-1?(t.target.SplitJoinViewPolicy={},t.target.SplitJoinViewPolicy.type="connected",l.push(t.target.id),s.push(t.target)):t.target===e&&l.indexOf(t.source.id)==-1&&(t.source.SplitJoinViewPolicy={},t.source.SplitJoinViewPolicy.type="connected",l.push(t.source.id),s.push(t.source))})}i.circles.each(function(t){t.id!==e.id&&i.spliceLinksForNode(t)}),i.updateGraph(),i.state.disableUpdate=!0,i.circles.each(function(t){t.id!==e.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=i.dragSvg.translate(),d=i.dragSvg.scale(),p=parseFloat(i.svg.style("width"))/d/2+u[0],f=parseFloat(i.svg.style("height"))/d/2+u[1];e.xStart=e.x,e.yStart=e.y,e.x=p,e.y=f,t.transition("nodePositionTransition").duration(750).attrTween("transform",function(t){var e=t.xStart,n=t.yStart;return t.xStart=t.x,t.yStart=t.y,d3.interpolateString("translate("+e+","+n+")","translate("+t.x+","+t.y+")")});var h=_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"splitNode",this);o.nodeIdsToReshow=l;var v=this;setTimeout(function(){i.nodes=s,h.call(v,e)},750)}}},{key:"updateGraphCallback",value:function(){var t=this.graph,e=t.state.SplitJoinViewPolicy;t.circles.each(function(t){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=t.SplitJoinViewPolicy&&("focus"===t.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===t.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),e.nodeIdsToReshow=null,t.updateGraph()}},{key:"setPositions",value:function(){function t(t,e){return Math.floor(Math.random()*(e-t+1))+t}var e=this.graph,n=this,i=e.consts,o=i.displayOffset,a=e.nodes,r=n.d3ForceBounds.call(e);_.forEach(a,function(e){if(null==e.x||null==e.y){var n=t(e.radius+o,r.width-e.radius-o),i=t(e.radius+o,r.height-e.radius-o);e.x=n,e.y=i}})}},{key:"d3ForceStart",value:function(){var t=this;t.circles.attr("cx",function(e){return null!=e.xStart&&(e.xStart=e.xStart*t.dragSvg.scale()+t.dragSvg.translate()[0]),e.x}).attr("cy",function(e){return null!=e.yStart&&(e.yStart=e.yStart*t.dragSvg.scale()+t.dragSvg.translate()[1]),e.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceEnd",value:function(){var t=this,e=t.state,n=e.SplitJoinViewPolicy;if(null==n.layoutDefault){var i={};_.forEach(t.nodes,function(t){i[t.id]={x:t.x,y:t.y}}),n.layoutDefault=i;var o=t.dragSvg.scale(),a=t.dragSvg.translate();n.zoomDefault=[a,o]}t.circles.attr("cx",function(t){return t.x}).attr("cy",function(t){return t.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceTick",value:function(t,e,n){function i(t){return function(i){2===u.length?("focus"===i.SplitJoinViewPolicy.type?i.y+=(u[0]-i.y)*t:i.y+=(u[1]-i.y)*t,i.x+=(e/2-i.x)*t):(i.y+=(n/2-i.y)*t,i.x+=(e/2-i.x)*t)}}var o=this,a=o.state,r=o.consts,s=a.SplitJoinViewPolicy,l=r.displayOffset,c=o.dragSvg.scale(),u=s.foci;o.circles.each(this.d3ForceCollide(.5)).each(i(.2*t.alpha)).attr("cx",function(t){return t.x=Math.max((t.radius+l)/c,Math.min(e+(-l-t.radius)/c,t.x))}).attr("cy",function(t){return null==t.SplitJoinViewPolicy||null==t.SplitJoinViewPolicy?(t.y=Math.max((t.radius+l)/c,Math.min(n+(-l-t.radius)/c,t.y)),t.y):"focus"===t.SplitJoinViewPolicy.type?(t.y=Math.max(t.radius+l,Math.min((n+(-l-t.radius)/c)*r.SplitJoinViewPolicy.boundary,t.y)),t.y):"connected"===t.SplitJoinViewPolicy.type?(t.y=Math.max((n+(l-t.radius)/c)*r.SplitJoinViewPolicy.boundary,Math.min(n+(-l-t.radius)/c,t.y)),t.y):void 0}),o.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceBounds",value:function(){function t(t,n){var i=t*n,o=e.consts.startRadius,a=3.5*o,r=i/(a*a);return r}var e=this,n=e.state,i=e.consts,o=i.SplitJoinViewPolicy,a=n.SplitJoinViewPolicy,r=e.nodes,s=i.displayOffset,l=parseFloat(e.svg.style("width")),c=parseFloat(e.svg.style("height")),u=l,d=c,p=t(u-2*s,d-2*s),f=1;r.length>p?(f=p/r.length,e.zoomed(e.dragSvg.translate(),f),u/=f,d/=f):e.zoomed(e.dragSvg.translate(),f);var h,v=a.focusGroups;if(0===v.length)h=[d/2];else{var y=e.dataSource.children_struct[v[0]];o.boundary=y.length/r.length;var g=d*o.boundary,m=d-g;g<2*e.consts.maxRadius&&(o.boundary=2.5*e.consts.maxRadius/d,g=d*o.boundary,m=d-g),m<2*e.consts.maxRadius&&(o.boundary=1-2.5*e.consts.maxRadius/d,g=d*o.boundary,m=d-g),h=[g/2,g+m/2]}return a.foci=h,{width:u,height:d}}},{key:"splitNodeEvent",value:function(t){var e=this,n=this.graph,i=n.state.SplitJoinViewPolicy,o=n.dataSource.children_struct;_.forEach(t,function(t){t.SplitJoinViewPolicy={},_.includes(o[i.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"});var a=t[0].parent;if(0!==i.eventHistory.length&&i.eventHistory[i.eventHistory.length-1].id===a?i.eventHistory.pop():i.eventHistory.push({id:a,event:"split"}),null!=i.backButtonElem&&0!==i.eventHistory.length&&i.backButtonElem.fadeTo("slow",1),null!=i.titleElem){var r="";i.focusGroups.length>0&&(r+=i.focusGroups[0]),2===i.focusGroups.length&&(r+=" & "+i.focusGroups[1]),i.titleElem.text(r)}n.state.disableUpdate=!1,e.setLayout()}},{key:"setLayout",value:function(){var t,e=this,n=this.graph,i=n.state.SplitJoinViewPolicy;if(0===i.focusGroups.length){t=i.layoutDefault;var o=i.zoomDefault;n.zoomed(o[0],o[1])}else{var o=i.zooms[i.focusGroups];null!=o&&n.zoomed(o[0],o[1]),t=i.layout[i.focusGroups]}if(null!=t)_.forEach(n.nodes,function(e){var n=t[e.id];null==n&&console.log(t,e),e.x=n.x,e.y=n.y}),n.updateGraph.call(n,function(){e.updateGraphCallback.call(e)});else{n.state.initForce=!1,n.updateGraph(function(){e.updateGraphCallback.call(e)}),i.zooms[i.focusGroups]=[n.dragSvg.translate(),n.dragSvg.scale()];var t={};_.forEach(n.nodes,function(e){t[e.id]={x:e.x,y:e.y}}),i.layout[i.focusGroups]=t}}},{key:"__joinNode",value:function(t){var n=this.graph,i=n.state.SplitJoinNodePolicy,o=n.state.SplitJoinViewPolicy;if(n.nodes.indexOf(t)!=-1){var a=n.dataSource.children_struct,r=t.id;if(!(a.topLevel.indexOf(r)>-1)){for(var s=t.parent,l=[],c=[],u=0;u<n.nodes.length;u++)n.nodes[u].ancestors.indexOf(t.parent)==-1?c.push(n.nodes[u].id):l.push(n.nodes[u]);var d=t.parent;c.push(t.parent);var p=n.dataSource.ancestors_struct,a=n.dataSource.children_struct,f=o.focusGroups.indexOf(s);null!=p[s]?o.focusGroups[f]=p[s]:o.focusGroups.splice(f,1);var h=[];if(1===o.focusGroups.length){var v=p[t.id];v.push(o.focusGroups[0]),v=v.concat(p[o.focusGroups[0]]||[]),_.forEach(a.topLevel,function(t){v.indexOf(t)===-1&&c.indexOf(t)==-1&&h.push(t)}),c=c.concat(h)}else 0===o.focusGroups.length&&(_.forEach(a.topLevel,function(t){c.indexOf(t)==-1&&h.push(t)}),c=c.concat(h));var y=t.radius/n.consts.radiusDecay,g=t.x,m=t.y,s=t.ancestors[1],v=t.ancestors.slice(1),P=new e.Node(g,m,d,d,y,s,v);n.nodes.push(P);for(var u=0;u<l.length;u++){var b=l[u];n.nodes.splice(n.nodes.indexOf(b),1),n.spliceLinksForNode(b)}for(var w=n.dataSource.getFlowBetweenSet(c),k=[],S=w.nodeData,u=0;u<S.length;u++)h.indexOf(S[u].id)!==-1&&k.push(S[u]);var N=n.dataSource.processNodeData(k);_.forEach(N,function(t){t.radius=t.radius||n.consts.startRadius}),n.nodes=n.nodes.concat(N),n.links=n.dataSource.processLinkData(w.linkData,n.nodes),1===o.focusGroups.length?_.forEach(n.links,function(t){h.indexOf(t.source.id)!==-1?o.focusGroups[0]===t.target.parent&&h.splice(h.indexOf(t.source.id),1):h.indexOf(t.target.id)!==-1&&o.focusGroups[0]===t.source.parent&&h.splice(h.indexOf(t.target.id),1)}):h=[];var E=[];if(0!==h.length)for(var u=0;u<n.nodes.length&&(h.indexOf(n.nodes[u].id)===-1||(h.splice(h.indexOf(n.nodes[u].id),1),n.spliceLinksForNode(n.nodes[u]),E.push(n.nodes[u]),0!==h.length));u++);return _.forEach(E,function(t){n.nodes.splice(n.nodes.indexOf(t),1)}),n.initNodes(),n.initLinks(),i.splitNodes.splice(i.splitNodes.indexOf(P.id),1),P}}}},{key:"joinNodeEvent",value:function(t){var e=this.graph,n=this,i=e.state.SplitJoinViewPolicy;0!==i.eventHistory.length&&i.eventHistory[i.eventHistory.length-1].id===t.id?i.eventHistory.pop():i.eventHistory.push({id:t.id,event:"join"});var o=e.dataSource.children_struct;if(_.forEach(e.nodes,function(t){t.SplitJoinViewPolicy={},_.includes(o[i.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"}),null!=i.backButtonElem&&0===i.eventHistory.length&&i.backButtonElem.fadeTo("slow",0),null!=i.titleElem){var a="";i.focusGroups.length>0&&(a+=i.focusGroups[0]),2===i.focusGroups.length&&(a+=" & "+i.focusGroups[1]),i.titleElem.text(a)}n.setLayout()}},{key:"undoLastEvent",value:function(){var t,e=this.graph,i=this,o=e.state.SplitJoinViewPolicy,a=o.eventHistory[o.eventHistory.length-1],r=a.id;if("join"===a.event){t=e.findNodeById(r);var s=e.findD3Node(r);i.dblclick(s,t)}else{var l=e.dataSource.children_struct[r][0];t=e.findNodeById(l),_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"joinNode",this).call(i,t)}}}]),n}(t.Policy);return{Policy:n}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9idW5kbGUuanMiLCJtb2R1bGUuanMiLCJkaXJlY3RpdmVzL21vZHVsZS5qcyIsIm1vZGVscy9tb2R1bGUuanMiLCJkYXRhc291cmNlL2RhdGFzb3VyY2UuanMiLCJ1dGlscy9tb2R1bGUuanMiLCJkYXRhc291cmNlL3Zpc3VhbGl6ZXJkYXRhc291cmNlLmpzIiwiYXBwbGljYXRpb25ncm91cHMvbW9kdWxlLmpzIiwiZ3JhcGgvZ3JhcGguanMiLCJkYXNoYm9hcmQvbW9kdWxlLmpzIiwibG9naW4vbW9kdWxlLmpzIiwibWVudS9tb2R1bGUuanMiLCJuZXR3b3JrX3BvbGljaWVzL21vZHVsZS5qcyIsIm5ldHdvcmtzL21vZHVsZS5qcyIsIm9yZ2FuaXphdGlvbnMvbW9kdWxlLmpzIiwiZ3JhcGgvdmlzdWFsaXplcmdyYXBoLmpzIiwic2VydmljZV9sYnMvbW9kdWxlLmpzIiwibGluay9saW5rLmpzIiwic2V0dGluZ3MvbW9kdWxlLmpzIiwibGluay92aXN1YWxpemVybGluay5qcyIsInZpc3VhbGl6YXRpb24vbW9kdWxlLmpzIiwibm9kZS9ub2RlLmpzIiwiYXBwLmpzIiwibm9kZS92aXN1YWxpemVybm9kZS5qcyIsIm1lbnUvbWVudUN0cmwuanMiLCJwb2xpY3kvbm9kZXNlbGVjdGlvbnBvbGljeS5qcyIsInN0b3JhZ2VfcG9saWNpZXMvc3RvcmFnZXBvbGljeS5tb2R1bGUuanMiLCJwb2xpY3kvcGF0aGNoYW5nZXZpZXdwb2xpY3kuanMiLCJ2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25lZGdlY3RybC5qcyIsInBvbGljeS9wb2xpY3kuanMiLCJ2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25lZGdlZGlyZWN0aXZlLmpzIiwicG9saWN5L3BvbGljeXNlcnZpY2UuanMiLCJ2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25ncmFwaGRpcmVjdGl2ZS5qcyIsInBvbGljeS9xdGlwcG9saWN5LmpzIiwidmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9ubGlzdGN0cmwuanMiLCJ2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25zZXJ2aWNlLmpzIiwicG9saWN5L3NhdmVzdGF0ZXBvbGljeS5qcyIsInZvbHVtZXMvdm9sdW1lLm1vZHVsZS5qcyIsInBvbGljeS9zcGxpdGpvaW5ub2RlcG9saWN5LmpzIiwicG9saWN5L3NwbGl0am9pbnZpZXdwb2xpY3kuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJDb250aXZHbG9iYWxzIiwiTkVUV09SS1NfRU5EUE9JTlQiLCJORVRXT1JLU19JTlNQRUNUX0VORFBPSU5UIiwiU0VSVklDRUxCU19JTlNQRUNUX0VORFBPSU5UIiwiUE9MSUNJRVNfRU5EUE9JTlQiLCJSVUxFU19FTkRQT0lOVCIsIkFQUExJQ0FUSU9OR1JPVVBTX0VORFBPSU5UIiwiU0VSVklDRUxCU19FTkRQT0lOVCIsIk9SR0FOSVpBVElPTlNfRU5EUE9JTlQiLCJORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UIiwiTkVUUFJPRklMRVNfRU5EUE9JTlQiLCJCR1BTX0VORFBPSU5UIiwiQkdQU19JTlNQRUNUX0VORFBPSU5UIiwiVklTVUFMSVpBVElPTl9FTkRQT0lOVCIsIlZPTFVNRVNfRU5EUE9JTlQiLCJWT0xVTUVTX0NSRUFURV9FTkRQT0lOVCIsIlZPTFVNRVNfREVMRVRFX0VORFBPSU5UIiwiVk9MVU1FU19DT1BZU05BUFNIT1RTX0VORFBPSU5UIiwiVk9MVU1FU19VU0VTX0VORFBPSU5UIiwiVk9MVU1FU19TTkFQU0hPVFNfRU5EUE9JTlQiLCJTVE9SQUdFUE9MSUNJRVNfRU5EUE9JTlQiLCJWT0xVTUVTX0dMT0JBTF9FTkRQT0lOVCIsIk5PREVTX0xJU1RfRU5EUE9JTlQiLCJOT0RFU19ESVNDT1ZFUl9FTkRQT0lOVCIsIk5PREVTX0NPTU1JU1NJT05fRU5EUE9JTlQiLCJOT0RFU19ERUNPTU1JU1NJT05fRU5EUE9JTlQiLCJOT0RFU19NQUlOVEVOQU5DRV9FTkRQT0lOVCIsIk5PREVTX0xBU1RfSk9CX0VORFBPSU5UIiwiTk9ERVNfQUNUSVZFX0pPQl9FTkRQT0lOVCIsIk5PREVTX1NFVFRJTkdTX1NFVF9FTkRQT0lOVCIsIk5PREVTX1NFVFRJTkdTX0dFVF9FTkRQT0lOVCIsIlJFRlJFU0hfSU5URVJWQUwiLCJDSURSX1JFR0VYIiwiVkxBTl9SRUdFWCIsIlZYTEFOX1JFR0VYIiwiTlVNQkVSX1JFR0VYIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImZhY3RvcnkiLCJOb2RlIiwiTGluayIsIkRhdGFTb3VyY2UiLCJub2RlcyIsImxpbmtzIiwidGhpcyIsImlkIiwibmFtZSIsIm5vZGVEYXRhIiwiXyIsImZvckVhY2giLCJkYXRhIiwibmV3Tm9kZSIsInRleHQiLCJwdXNoIiwibGlua0RhdGEiLCJmaW5kTm9kZUJ5SWQiLCJzb3VyY2UiLCJsaW5rIiwiVmlzdWFsaXplck5vZGUiLCJWaXN1YWxpemVyTGluayIsIlZpc3VhbGl6ZXJEYXRhU291cmNlIiwiX0RhdGFTb3VyY2UkRGF0YVNvdXJjIiwiY2hpbGRyZW5fc3RydWN0IiwiYW5jZXN0b3JzX3N0cnVjdCIsImxhYmVscyIsInNlbGVjdG9ycyIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJ0aGlzRGF0YVNvdXJjZSIsImFkZGVkQ2xpZW50Iiwibm9kZSIsImFuY2VzdG9ycyIsImlzRW1wdHkiLCJwYXJlbnQiLCJpbmNsdWRlcyIsInRvcExldmVsIiwiZ2V0Rmxvd0JldHdlZW5TZXQiLCJub2RlX25hbWVzIiwibG9jYWxfbm9kZXMiLCJpZE1hcHBpbmciLCJqIiwiaW5kZXhPZiIsIndlaWdodCIsIm5vZGVfdG9fYWRkIiwibm9kZUlkVG9OYW1lIiwiYWRkZWRfbGlua3MiLCJ1bmRlZmluZWQiLCJleGlzdGluZ19saW5rIiwic2V0V2VpZ2h0IiwiZ2V0UmF3V2VpZ2h0IiwiaW5jcmVhc2VDb3VudCIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJhYnN0cmFjdCIsInRlbXBsYXRlIiwiY29tcG9uZW50IiwiUG9saWN5U2VydmljZSIsIkdyYXBoIiwic3ZnIiwidGhpc0dyYXBoIiwiZGVmYXVsdE5vZGVQb2xpY2llcyIsImRlZmF1bHRQYXRoUG9saWNpZXMiLCJzdmdQb2xpY3kiLCJQb2xpY3kiLCJjYW5ab29tIiwiY2FuUGFuIiwiaW5pdEZvcmNlIiwiZGlzYWJsZVVwZGF0ZSIsImNvbnN0cyIsImNpcmNsZUdDbGFzcyIsImdyYXBoQ2xhc3MiLCJwYXRoQ2xhc3MiLCJub2RlQ2xhc3MiLCJub2RlVGV4dCIsInN0YXJ0UmFkaXVzIiwibWF4UmFkaXVzIiwicGFkZGluZyIsImRpc3BsYXlPZmZzZXQiLCJvbiIsImQiLCJkZWZzIiwiYXBwZW5kIiwiYXR0ciIsInN2Z0ciLCJjbGFzc2VkIiwicGF0aHMiLCJzZWxlY3RBbGwiLCJjaXJjbGVzIiwiaW5pdE5vZGVzIiwiaW5pdExpbmtzIiwic2V0UG9zaXRpb25zIiwicmVzaXplRnVuYyIsIm9uV2luZG93UmVzaXplIiwiYmluZGluZ3MiLCJyZXNpemUiLCIkIiwid2luZG93IiwicG9saWN5IiwiZGVzdHJveSIsIm9mZiIsImluaXRpYWxpemUiLCJkM05vZGUiLCJlYWNoIiwiZDMiLCJzZWxlY3QiLCJkM2RyYWciLCJkcmFnIiwicG9saWN5UmVtb3ZlIiwicG9saWN5UmVtb3ZlTmFtZSIsInBvbGljeU5hbWUiLCJpbmRleCIsInNwbGljZSIsImV2ZW50IiwiZDNwYXRoIiwiZDNub2RlIiwiZDN6b29tIiwiZHJhZ1N2ZyIsImdFbCIsInRpdGxlIiwid29yZHMiLCJzcGxpdCIsIm53b3JkcyIsImVsIiwidHNwYW4iLCJ0b1NwbGljZSIsImZpbHRlciIsImwiLCJtYXAiLCJ1cGRhdGVHcmFwaCIsInNwbGljZUxpbmtzRm9yTm9kZSIsInVwZGF0ZUF0dHIiLCJuZXdQYXRocyIsIm5ld1BhdGhBdHRyIiwiaGFzUG9saWN5IiwicGF0aFBvbGljeUV2ZW50IiwibmV3Tm9kZXMiLCJncmFwaCIsIm5ld05vZGVBdHRyIiwibm9kZVBvbGljeUV2ZW50IiwiU3RyaW5nIiwicmFkaXVzIiwiaW5zZXJ0VGl0bGVMaW5lYnJlYWtzIiwiYWxwaGEiLCJxdWFkdHJlZSIsImdlb20iLCJyIiwibngxIiwieCIsIm54MiIsIm55MSIsInkiLCJueTIiLCJ2aXNpdCIsInF1YWQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvaW50IiwiTWF0aCIsInNxcnQiLCJlIiwid2lkdGgiLCJoZWlnaHQiLCJvZmZzZXQiLCJxIiwibiIsImQzRm9yY2VDb2xsaWRlIiwibWF4IiwibWluIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJjYWxsYmFjayIsImJvdW5kcyIsImQzRm9yY2VCb3VuZHMiLCJmb3JjZSIsImxheW91dCIsInNpemUiLCJjaGFyZ2UiLCJsaW5rRGlzdGFuY2UiLCJsaW5rU3RyZW5ndGgiLCJncmF2aXR5IiwiZDNGb3JjZVRpY2siLCJkM0ZvcmNlU3RhcnQiLCJkM0ZvcmNlRW5kIiwic3RhcnQiLCJrIiwidGljayIsInN0b3AiLCJ1cGRhdGVFeGlzdGluZ05vZGVzIiwibmV3R3MiLCJlbnRlciIsImV4aXQiLCJyZW1vdmUiLCJzZXRGb3JjZSIsInVwZGF0ZU5ld05vZGVzIiwidXBkYXRlRXhpc3RpbmdQYXRocyIsIm5ld3BhdGhzIiwic3R5bGUiLCJ1cGRhdGVOZXdQYXRocyIsInBhcmFtcyIsInBvbGljeVRhYiIsIlZpc3VhbGl6ZXJHcmFwaCIsIl9HcmFwaCRHcmFwaCIsImRhdGFTb3VyY2UiLCJ0cmFuc2l0aW9uIiwiZWRnZV9idWZmZXIiLCJyYWRpdXNEZWNheSIsImNvbnRhaW5lckNsYXNzIiwiYmVoYXZpb3IiLCJvcmlnaW4iLCJhcmdzIiwiZHgiLCJkeSIsInpvb20iLCJzb3VyY2VFdmVudCIsImN0cmxLZXkiLCJ6b29tZWQiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInJpZ2h0Q2xpY2siLCJqdXN0U2NhbGVUcmFuc0dyYXBoIiwiem9vbVNldENhbGxiYWNrIiwidHJhbnNsYXRlX25hbWUiLCJkZWxheSIsImR1cmF0aW9uIiwiYm9keUVsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRpdldpZHRoIiwiY2xpZW50SGVpZ2h0IiwidG9wIiwibm9kZV9uYW1lc19zZXQiLCJyZXREYXRhIiwicHJvY2Vzc0xpbmtEYXRhIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJwYXRoUG9saWNpZXMiLCJpbml0aWFsaXplZCIsImFycm93UGF0aCIsImRyIiwidGhpc1BhdGgiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0Iiwib2JqZWN0IiwicHJvcGVydHkiLCJyZWNlaXZlciIsIkZ1bmN0aW9uIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldHRlciIsIl9MaW5rJExpbmsiLCJjb3VudCIsInJldCIsIm15IiwiYXQiLCJhZGp1c3QiLCJtYXhXZWlnaHQiLCJ1c2VBdmdXZWlnaHQiLCJ1cGRhdGVNYXhXZWlnaHQiLCJ2YWwiLCJtYXhMaW5rIiwibWF4QnkiLCJnZXRXZWlnaHQiLCJjb2xvclNjYWxlIiwibGluZWFyIiwiZG9tYWluIiwicmFuZ2UiLCJzZWxlY3RlZENsYXNzIiwic2VsZWN0ZWRFZGdlIiwiYyIsImF0dHJUd2VlbiIsImludGVycG9sYXRlU3RyaW5nIiwibm9kZVBvbGljaWVzIiwidGhpc05vZGUiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJfTm9kZSROb2RlIiwieFN0YXJ0IiwieVN0YXJ0IiwidXNlcm5hbWUiLCIkc3RhdGUiLCIkc3RhdGVQYXJhbXMiLCJsb2dvdXQiLCJnbyIsIm1lbnVDdHJsIiwiTm9kZVNlbGVjdGlvblBvbGljeSIsIl9Qb2xpY3kkUG9saWN5Iiwic2VsZWN0ZWROb2RlcyIsInNlbGVjdGlvbiIsImNkIiwic3RvcFByb3BhZ2F0aW9uIiwicmVtb3ZlU2VsZWN0RnJvbU5vZGUiLCJhZGRTZWxlY3ROb2RlIiwicmVtb3ZlQWxsU2VsZWN0ZWROb2RlcyIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiYXJndW1lbnRzIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiX19tZXRhZGF0YSIsInYiLCJtZXRhZGF0YSIsImNvcmVfMSIsInJlcXVpcmUiLCJmb3Jtc18xIiwiY29tbW9uXzEiLCJkaXJlY3RpdmVzX21vZHVsZV8xIiwic3RvcmFnZXBvbGljeWxpc3RjdHJsXzEiLCJTdG9yYWdlcG9saWN5TW9kdWxlIiwiTmdNb2R1bGUiLCJpbXBvcnRzIiwiRm9ybXNNb2R1bGUiLCJDb21tb25Nb2R1bGUiLCJEaXJlY3RpdmVzTW9kdWxlIiwiZGVjbGFyYXRpb25zIiwiU3RvcmFnZXBvbGljeUxpc3RDb21wb25lbnQiLCJleHBvcnRzIiwiUGF0aENoYW5nZVZpZXdQb2xpY3kiLCJ0aGlzUG9saWN5IiwicmV0TGlzdCIsImdlbmVyYXRlTGlzdEhlbHBlciIsIm5vZGVJZHMiLCJjaGlsZElkIiwiaGFzQ2hpbGQiLCJzdWJSZXRMaXN0IiwiY29uY2F0IiwiZWRnZSIsInNvdXJjZUxpc3QiLCJ0YXJnZXRMaXN0Iiwic291cmNlSWQiLCJ0YXJnZXRJZCIsImdlbmVyYXRlTGlzdCIsInNvdXJjZU5hbWUiLCJ0YXJnZXROYW1lIiwidmlld0VkZ2UiLCIkc2NvcGUiLCIkaHR0cCIsIlZpc3VhbGl6YXRpb25TZXJ2aWNlIiwiJGludGVydmFsIiwiRGF0ZSIsInQiLCJnZXRTZWNvbmRzIiwiZWRnZURhdGFJbnRlcnZhbCIsImdldEVkZ2VEYXRhIiwidG9TdHJpbmciLCJ0aGVuIiwicmVzdWx0IiwicmVzdWx0cyIsInNlcmllcyIsInZhbHVlcyIsImVkZ2VEYXRhIiwiZWRnZURhdGFUaW1lIiwiJG9uIiwiY2FuY2VsIiwiZ2V0T2xkRWRnZURhdGEiLCJvbGRFZGdlRGF0YSIsImQzb2JqIiwiZGlyZWN0aXZlIiwiJHdpbmRvdyIsInZpc3VhbGl6YXRpb25FZGdlRDMiLCJzY29wZSIsIm5vdyIsImdyb3VwcyIsImdyb3VwIiwicGF0aCIsImxpbmUiLCJsaW1pdCIsImF4aXMiLCJlYXNlIiwieUF4aXMiLCJzaGlmdCIsImNsaWVudFdpZHRoIiwiY3VycmVudCIsImNvbG9yIiwiZmxvb3IiLCJ0aW1lIiwiaW50ZXJwb2xhdGUiLCJ4U3ZnIiwib3JpZW50IiwicmVzdHJpY3QiLCJyZXBsYWNlIiwiJHdhdGNoR3JvdXAiLCJRVGlwUG9saWN5IiwiU3BsaXRKb2luTm9kZVBvbGljeSIsIlNwbGl0Sm9pblZpZXdQb2xpY3kiLCJTYXZlU3RhdGVQb2xpY3kiLCJzZXJ2aWNlIiwic2F2ZWRTdGF0ZXMiLCJTdGF0ZVNhdmUiLCJ2aXN1YWxpemF0aW9ubGlzdGQzIiwiZWxlbSIsInNlcnZpY2VTZWxlY3RvcnMiLCJzZXRBbmNlc3RvcnMiLCJ0b3BEYXRhIiwiZ2V0VG9wTGV2ZWxGbG93IiwicHJvY2Vzc05vZGVEYXRhIiwicmF3U3ZnIiwiZmluZCIsInZpc3VhbGl6YXRpb25HcmFwaCIsImluc3RhbGxEZWZhdWx0UGF0aFBvbGljeSIsInFUaXBQb2xpY3kiLCJpbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3kiLCJzcGxpdEpvaW5WaWV3UG9saWN5IiwiaW5zdGFsbEJhY2tCdXR0b24iLCJpbnN0YWxsVGl0bGUiLCJsb2FkIiwidW5iaW5kIiwidXBkYXRlTGlua0RhdGEiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwiZ3JhcGhVcGRhdGVOZXdOb2RlcyIsImdyYXBoVXBkYXRlTmV3UGF0aHMiLCJpbnRlcnZhbCIsInNldFRpbWVvdXQiLCJxdGlwIiwid2hlblFUaXBBdmFpbGFibGUiLCJhdHRhY2hRVGlwIiwic2VsZWN0b3JNYXAiLCJoYXNLZXlzIiwibGFiZWxzTWFwIiwic2xpY2UiLCJjb250ZW50IiwiZXZlbnRzIiwic2hvdyIsImFwaSIsInBvc2l0aW9uIiwibGVmdCIsInNldCIsInNvbG8iLCJjbGFzc2VzIiwiaGlkZSIsInBhdGhFbCIsInRhcmdldFJldCIsImdldFBvaW50QXRMZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInF0aXBIZWxwZXIiLCJzdWNjZXNzR3JhcGhEYXRhQ2FsbGJhY2siLCJlbmRwb2ludCIsInRhZ3MiLCJFbmRwb2ludElQIiwicHJvdmlkZXIiLCJQcm92aWRlcklQIiwibGlua091dCIsImxpbmtJbiIsImdldEdyYXBoRGF0YSIsImdyYXBoRGF0YUludGVydmFsIiwiZ2V0U3RydWN0dXJlRGF0YSIsIiRxIiwibWFrZUdldCIsImRlZmVycmVkIiwiZGVmZXIiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsIm1ha2VQb3N0IiwicGFyYW0iLCJvYmoiLCJmdWxsU3ViTmFtZSIsInN1Yk5hbWUiLCJzdWJWYWx1ZSIsImlubmVyT2JqIiwicXVlcnkiLCJBcnJheSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN1YnN0ciIsIm1ldGhvZCIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaXNPYmplY3QiLCJkYiIsImJ1aWxkV2hlcmVRdWVyeSIsInBvaW50cyIsInR5cGUiLCJzYXZlZFN0YXRlIiwiZ3JhcGhEZXN0cm95IiwiZ3JhcGhMb2FkIiwidm9sdW1lbGlzdGN0cmxfMSIsInZvbHVtZXNlcnZpY2VfMSIsInZvbHVtZWRldGFpbHNjdHJsXzEiLCJWb2x1bWVNb2R1bGUiLCJWb2x1bWVMaXN0Q29tcG9uZW50IiwiVm9sdW1lRGV0YWlsc0NvbXBvbmVudCIsInByb3ZpZGVycyIsIlZvbHVtZVNlcnZpY2UiLCJfTm9kZVNlbGVjdGlvblBvbGljeSQiLCJzcGxpdE5vZGVzIiwic3VwZXJTdGF0ZSIsInNwbGl0TXVsdGlwbGVOb2RlcyIsInNwbGl0Tm9kZSIsInByZXZlbnREZWZhdWx0Iiwiam9pbk5vZGUiLCJncmFwaE5vZGVzIiwibmV3X25vZGVzIiwieExvYyIsInlMb2MiLCJuZXdfbm9kZV9vYmpzIiwibmV3X25vZGUiLCJyZXMiLCJfX3NwbGl0Tm9kZSIsInNwbGl0Tm9kZUV2ZW50IiwicmVzTm9kZXMiLCJzcGxpdE11bHRpcGxlTm9kZXNFdmVudCIsInRvX2JlX2RlbGV0ZWQiLCJuZXdfbm9kZV9pZCIsIm5vZGVfdG9fZGVsZXRlIiwiX19qb2luTm9kZSIsImpvaW5Ob2RlRXZlbnQiLCJqb2luTXVsdGlwbGVOb2Rlc0V2ZW50IiwiX1NwbGl0Sm9pbk5vZGVQb2xpY3kkIiwiZXZlbnRIaXN0b3J5IiwiZm9jdXNHcm91cHMiLCJmb2NpIiwiem9vbXMiLCJsYXlvdXREZWZhdWx0Iiwiem9vbURlZmF1bHQiLCJub2RlSWRzVG9SZXNob3ciLCJiYWNrQnV0dG9uRWxlbSIsInRpdGxlRWxlbSIsImJvdW5kYXJ5IiwiYmFja0J1dHRvbiIsInVuZG9MYXN0RXZlbnQiLCJzYXZlIiwiY3VyclRpdGxlIiwic3RhdGVzIiwibG9hZFN0YXRlIiwiZmFkZVRvIiwicG9zIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZUdyYXBoQ2FsbGJhY2siLCJub2Rlc1RvS2VlcCIsImdyb3VwT25lTm9kZXMiLCJwYXJzZUZsb2F0Iiwic3BsaXROb2RlRnVuYyIsImdldFJhbmRvbUludCIsInJhbmRvbSIsImdyYXBoQ29uc3RzIiwic3RhdGVQb2xpY3kiLCJkZWZhdWx0TGF5b3V0IiwiY2FsY01heE5vZGVzIiwiYXJlYSIsImFtb3VudCIsImNvbnN0c1BvbGljeSIsImZvY3VzTm9kZXMiLCJib3QiLCJwb3AiLCJzZXRMYXlvdXQiLCJzdGF0ZVN1cGVyIiwibm9kZU5hbWVTZXQiLCJuYW1lVG9BZGQiLCJub2Rlc1RvUHJvY2VzcyIsIm5vZGVUb1JlbW92ZSIsImxhc3QiLCJmaW5k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QUFBMFcsRUFBQWxjLFdBQUEsV0FBQWlFLE1BQWV0RSxLQUFLcVksRUFBWXJTLFFBajdCeUV1VyxHQUNuRkQsRUFBb0JuVSxPQXE3QnRELFFBQ0lBLE9BQVFvVSIsImZpbGUiOiJhcHAvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlZmluaW5nIHRoZSBHcmFwaCBNb2R1bGUuXG4gKiBTZWUgREVTSUdOLm1kIGZvciBpbmZvIG9uIEdyYXBoIE9iamVjdHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnLCBbXSk7XG5hbmd1bGFyLm1vZHVsZShcImNvbnRpdi5kaXJlY3RpdmVzXCIsIFtdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gMy8xNC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5tb2RlbHMnLCBbXSk7XG52YXIgQ29udGl2R2xvYmFscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgTkVUTUFTVEVSXG4gICAgICAgICdORVRXT1JLU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9uZXR3b3Jrcy8nLFxuICAgICAgICAnTkVUV09SS1NfSU5TUEVDVF9FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9pbnNwZWN0L25ldHdvcmtzLycsXG4gICAgICAgICdTRVJWSUNFTEJTX0lOU1BFQ1RfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvaW5zcGVjdC9zZXJ2aWNlTEJzLycsXG4gICAgICAgICdQT0xJQ0lFU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9wb2xpY3lzLycsXG4gICAgICAgICdSVUxFU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9ydWxlcy8nLFxuICAgICAgICAnQVBQTElDQVRJT05HUk9VUFNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvZW5kcG9pbnRHcm91cHMvJyxcbiAgICAgICAgJ1NFUlZJQ0VMQlNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvc2VydmljZUxCcy8nLFxuICAgICAgICAnT1JHQU5JWkFUSU9OU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS90ZW5hbnRzLycsXG4gICAgICAgICdORVRXT1JLX1NFVFRJTkdTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2dsb2JhbHMvJyxcbiAgICAgICAgJ05FVFBST0ZJTEVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL25ldHByb2ZpbGVzLycsXG4gICAgICAgICdCR1BTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL0JncHMvJyxcbiAgICAgICAgJ0JHUFNfSU5TUEVDVF9FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9pbnNwZWN0L0JncHMvJyxcbiAgICAgICAgJ1ZJU1VBTElaQVRJT05fRU5EUE9JTlQnOiAnL3Zpc3VhbGl6YXRpb24vJyxcbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgVk9MTUFTVEVSXG4gICAgICAgICdWT0xVTUVTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdm9sdW1lcy8nLFxuICAgICAgICAnVk9MVU1FU19DUkVBVEVfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL2NyZWF0ZS8nLFxuICAgICAgICAnVk9MVU1FU19ERUxFVEVfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL3JlbW92ZS8nLFxuICAgICAgICAnVk9MVU1FU19DT1BZU05BUFNIT1RTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdm9sdW1lcy9jb3B5JyxcbiAgICAgICAgJ1ZPTFVNRVNfVVNFU19FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3VzZXMvbW91bnRzLycsXG4gICAgICAgICdWT0xVTUVTX1NOQVBTSE9UU19FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3NuYXBzaG90cy8nLFxuICAgICAgICAnU1RPUkFHRVBPTElDSUVTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvcG9saWNpZXMvJyxcbiAgICAgICAgJ1ZPTFVNRVNfR0xPQkFMX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvZ2xvYmFsLycsXG4gICAgICAgIC8vUkVTVCBlbmRwb2ludHMgZm9yIENMVVNURVJcbiAgICAgICAgJ05PREVTX0xJU1RfRU5EUE9JTlQnOiAnL2luZm8vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfRElTQ09WRVJfRU5EUE9JTlQnOiAnL2Rpc2NvdmVyL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0NPTU1JU1NJT05fRU5EUE9JTlQnOiAnL2NvbW1pc3Npb24vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfREVDT01NSVNTSU9OX0VORFBPSU5UJzogJy9kZWNvbW1pc3Npb24vbm9kZXMnLFxuICAgICAgICAnTk9ERVNfTUFJTlRFTkFOQ0VfRU5EUE9JTlQnOiAnL21haW50ZW5hbmNlL25vZGVzJyxcbiAgICAgICAgJ05PREVTX0xBU1RfSk9CX0VORFBPSU5UJzogJy9pbmZvL2pvYi9sYXN0JyxcbiAgICAgICAgJ05PREVTX0FDVElWRV9KT0JfRU5EUE9JTlQnOiAnL2luZm8vam9iL2FjdGl2ZScsXG4gICAgICAgICdOT0RFU19TRVRUSU5HU19TRVRfRU5EUE9JTlQnOiAnL2dsb2JhbHMnLFxuICAgICAgICAnTk9ERVNfU0VUVElOR1NfR0VUX0VORFBPSU5UJzogJy9pbmZvL2dsb2JhbHMnLFxuICAgICAgICAvL1JlZnJlc2ggaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICdSRUZSRVNIX0lOVEVSVkFMJzogNTAwMCxcbiAgICAgICAgLy9SZWdFeCBmb3IgdmFsaWRhdGlvblxuICAgICAgICAnQ0lEUl9SRUdFWCc6ICdeKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkoXFwvKFswLTldfFsxLTJdWzAtOV18M1swLTJdKSkkJyxcbiAgICAgICAgJ1ZMQU5fUkVHRVgnOiAnXihbMC05XXsxLDR9Py1bMC05XXsxLDR9PykkJyxcbiAgICAgICAgJ1ZYTEFOX1JFR0VYJzogJ14oWzAtOV17MSw4fT8tWzAtOV17MSw4fT8pJCcsXG4gICAgICAgICdOVU1CRVJfUkVHRVgnOiAnXlswLTldKiQnXG4gICAgfTtcbn0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgdGhlIERhdGFTb3VyY2Ugb2JqZWN0LlxuICogXG4gKiBUaGUgRGF0YVNvdXJjZSBvYmplY3QgdGFrZXMgaW4gbm9kZSBhbmQgbGluayBkYXRhIGZyb20gdGhlIHNlcnZlciwgXG4gKiBhbmQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgY29udmVydGluZyBhbmQgbWFuaXB1bGF0aW5nIHRoZSBkYXRhIGZvclxuICogdGhlIGdyYXBoIG9iamVjdC5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gRGF0YVNvdXJjZSBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgXG4gKiBEYXRhU291cmNlIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIFxuICogaXRzIERhdGFTb3VyY2UgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBEYXRhU291cmNlIGFzIGtleS5cbiAqIFxuICogTm9kZSBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOm5vZGVfaWQsIHRleHQ6bm9kZV90ZXh0fVxuICogXG4gKiBMaW5rIGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gKiB7c291cmNlOiBzb3VyY2VOb2RlSWQsIHRhcmdldDogdGFyZ2V0Tm9kZUlkfVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdEYXRhU291cmNlJywgWydOb2RlJywgJ0xpbmsnLCBmdW5jdGlvbiAoTm9kZSwgTGluaykge1xuXHR2YXIgRGF0YVNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvKipcbiAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgKi9cblx0XHRmdW5jdGlvbiBEYXRhU291cmNlKG5vZGVzLCBsaW5rcykge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFTb3VyY2UpO1xuXG5cdFx0XHR0aGlzLm5vZGVzID0gbm9kZXM7XG5cdFx0XHR0aGlzLmxpbmtzID0gbGlua3M7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJlcGxhY2VzIHRoZSBub2RlIGRhdGFcbiAgICpcbiAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlcyAgIFRoZSBub2Rlc1xuICAgKi9cblxuXG5cdFx0X2NyZWF0ZUNsYXNzKERhdGFTb3VyY2UsIFt7XG5cdFx0XHRrZXk6ICd1cGRhdGVOb2RlcycsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlTm9kZXMobm9kZXMpIHtcblx0XHRcdFx0dGhpcy5ub2RlcyA9IG5vZGVzO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFJlcGxhY2VzIHRoZSBsaW5rIGRhdGFcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7TGlua30gIGxpbmtzICAgVGhlIGxpbmtzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZUxpbmtzJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVMaW5rcyhsaW5rcykge1xuXHRcdFx0XHR0aGlzLmxpbmtzID0gbGlua3M7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogUmV0dXJucyB0aGUgTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIE5vZGUgd2l0aCB0aGUgXG4gICAgKiBtYXRjaGluZyBpZFxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAgKiBAcmV0dXJuICAgICB7c3RyaW5nfSAgbmFtZSBvZiB0aGUgbWF0Y2hpbmcgbm9kZVxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdub2RlSWRUb05hbWUnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5vZGVJZFRvTmFtZShpZCkge1xuXHRcdFx0XHR2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKG5vZGVzW2ldLmlkID09IGlkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbm9kZXNbaV0ubmFtZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBwcm9jZXNzIHRoZSBub2RlRGF0YSB0byBjcmVhdGUgTm9kZSBvYmplY3RzXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZURhdGEgIE5vZGVEYXRhIHRvIGNvbnZlcnQgXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gbm9kZSBvYmplY3RzXG4gICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBOb2RlIG9iamVjdHNcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAncHJvY2Vzc05vZGVEYXRhJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzTm9kZURhdGEobm9kZURhdGEpIHtcblx0XHRcdFx0dmFyIG5vZGVzID0gW107XG5cdFx0XHRcdF8uZm9yRWFjaChub2RlRGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHR2YXIgbmV3Tm9kZSA9IG5ldyBOb2RlLk5vZGUobnVsbCwgbnVsbCwgZGF0YS5pZCwgZGF0YS50ZXh0LCBudWxsKTtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKG5ld05vZGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIG5vZGVzO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIHByb2Nlc3MgdGhlIGxpbmtEYXRhXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbGlua0RhdGEgIFRoZSBsaW5rIGRhdGFcbiAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICBUaGUgbm9kZXMgZnJvbSBwcm9jZXNzTm9kZURhdGFcbiAgICAqIEByZXR1cm4gICAgIHtBcnJheX0gIExpbmsgb2JqZWN0c1xuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdwcm9jZXNzTGlua0RhdGEnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NMaW5rRGF0YShsaW5rRGF0YSwgbm9kZXMpIHtcblx0XHRcdFx0LyoqXG4gICAgICogUmV0dXJucyB0aGUgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGlkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAgICogQHJldHVybiAgICAge05vZGV9ICAgVGhlIG5vZGUgd2l0aCB0aGUgbWF0Y2hpbmcgaWRcbiAgICAgKi9cblx0XHRcdFx0ZnVuY3Rpb24gZmluZE5vZGVCeUlkKGlkLCBub2Rlcykge1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmIChpZCA9PSBub2Rlc1tpXS5pZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbm9kZXNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGxpbmtzID0gW107XG5cdFx0XHRcdC8vdHJhbnNmb3JtaW5nIGxpbmsgZGF0YVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtEYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGxpbmtEYXRhW2ldLnNvdXJjZSAhPSBsaW5rRGF0YVtpXS50YXJnZXQpIHtcblx0XHRcdFx0XHRcdHZhciBzb3VyY2UgPSBmaW5kTm9kZUJ5SWQobGlua0RhdGFbaV0uc291cmNlLCBub2Rlcyk7XG5cdFx0XHRcdFx0XHR2YXIgdGFyZ2V0ID0gZmluZE5vZGVCeUlkKGxpbmtEYXRhW2ldLnRhcmdldCwgbm9kZXMpO1xuXHRcdFx0XHRcdFx0aWYgKHNvdXJjZSA9PSBudWxsIHx8IHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dmFyIGxpbmsgPSBuZXcgTGluay5MaW5rKHNvdXJjZSwgdGFyZ2V0KTtcblx0XHRcdFx0XHRcdGxpbmtzLnB1c2gobGluayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBsaW5rcztcblx0XHRcdH1cblx0XHR9XSk7XG5cblx0XHRyZXR1cm4gRGF0YVNvdXJjZTtcblx0fSgpO1xuXG5cdHJldHVybiB7XG5cdFx0RGF0YVNvdXJjZTogRGF0YVNvdXJjZVxuXHR9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJywgW10pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGhlIERhdGFTb3VyY2UgdXNlZCBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICogXG4gKiBOb2RlIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOiBub2RlX2lkLCB0ZXh0OiBub2RlX3RleHR9XG4gKiBQYXJlbnQgYW5kIEFuY2VzdG9yIGF0dHJpYnV0ZXMgY2FuIGJlIHNldCBieSBjYWxsaW5nIHNldEFuY2VzdG9yc1xuICogXG4gKiBMaW5rIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge3NvdXJjZTogc291cmNlTm9kZUlkLCB0YXJnZXQ6IHRhcmdldE5vZGVJZCwgd2VpZ2h0OiBsaW5rV2VpZ2h0fVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdWaXN1YWxpemVyRGF0YVNvdXJjZScsIFsnRGF0YVNvdXJjZScsICdWaXN1YWxpemVyTm9kZScsICdWaXN1YWxpemVyTGluaycsIGZ1bmN0aW9uIChEYXRhU291cmNlLCBWaXN1YWxpemVyTm9kZSwgVmlzdWFsaXplckxpbmspIHtcblx0dmFyIFZpc3VhbGl6ZXJEYXRhU291cmNlID0gZnVuY3Rpb24gKF9EYXRhU291cmNlJERhdGFTb3VyYykge1xuXHRcdF9pbmhlcml0cyhWaXN1YWxpemVyRGF0YVNvdXJjZSwgX0RhdGFTb3VyY2UkRGF0YVNvdXJjKTtcblxuXHRcdC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAqIFxuICAgKiBDaGlsZHJlbiBTdHJ1Y3QgYW5kIGFuY2VzdG9yc19zdHJ1Y3QgYXJlIEpTT04gb2JqZWN0cyxcbiAgICogbWFwcGluZyBhIG5vZGUgSWQgdG8gYSBsaXN0IG9mIGl0J3MgY2hpbGRyZW4gb3IgYW5jZXN0b3JzLlxuICAgKiBDaGlsZHJlbiBTdHJ1Y3QgaXMgYWxzbyBleHBlY3RlZCB0byBoYXZlIGEgZmllbGQgY2FsbGVkXG4gICAqIHRvcExldmVsLCB0aGF0IG1hcHMgdG8gYSBsaXN0IG9mIGFsbCB0aGUgbm9kZXMgdGhhdCBkb24ndFxuICAgKiBoYXZlIGFueSBwYXJlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgY2hpbGRyZW5fc3RydWN0ICAgIFRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmVcbiAgICogQHBhcmFtICAgICAge09iamVjdH0gIGFuY2VzdG9yc19zdHJ1Y3QgICBUaGUgYW5jZXN0b3JzIHN0cnVjdHVyZVxuICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbGFiZWxzICAgICAgICAgICAgIFRoZSBsYWJlbHNcbiAgICogQHBhcmFtICAgICAge0FycmF5fSAgIHNlbGVjdG9ycyAgICAgICAgICBUaGUgc2VsZWN0b3JzXG4gICAqL1xuXHRcdGZ1bmN0aW9uIFZpc3VhbGl6ZXJEYXRhU291cmNlKG5vZGVzLCBsaW5rcywgY2hpbGRyZW5fc3RydWN0LCBhbmNlc3RvcnNfc3RydWN0LCBsYWJlbHMsIHNlbGVjdG9ycykge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc3VhbGl6ZXJEYXRhU291cmNlKTtcblxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZpc3VhbGl6ZXJEYXRhU291cmNlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlzdWFsaXplckRhdGFTb3VyY2UpKS5jYWxsKHRoaXMsIG5vZGVzLCBsaW5rcykpO1xuXG5cdFx0XHRfdGhpcy5jaGlsZHJlbl9zdHJ1Y3QgPSBjaGlsZHJlbl9zdHJ1Y3Q7XG5cdFx0XHRfdGhpcy5hbmNlc3RvcnNfc3RydWN0ID0gYW5jZXN0b3JzX3N0cnVjdDtcblx0XHRcdF90aGlzLmxhYmVscyA9IGxhYmVscztcblx0XHRcdF90aGlzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcblx0XHRcdHJldHVybiBfdGhpcztcblx0XHR9XG5cblx0XHQvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBpdCBoYXMgY2hpbGQuXG4gICAqXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIFRydWUgaWYgaGFzIGNoaWxkLCBGYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuXG5cblx0XHRfY3JlYXRlQ2xhc3MoVmlzdWFsaXplckRhdGFTb3VyY2UsIFt7XG5cdFx0XHRrZXk6ICdoYXNDaGlsZCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaGFzQ2hpbGQoaWQpIHtcblx0XHRcdFx0aWYgKHRoaXMuY2hpbGRyZW5fc3RydWN0W2lkXSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFNldHMgdGhlIHBhcmVudCBhbmQgYW5jZXN0b3JzIGF0dHJpYnV0ZSB1c2luZyBcbiAgICAqIGFuY2VzdG9yc19zdHJ1Y3QgZm9yIGFsbCB0aGUgbm9kZXNcbiAgICAqIEFsc28gYWRkcyBhbnkgbm9kZXMgd2l0aG91dCBhbmNlc3RvcnMsIHRoYXQgYXJlbid0IFxuICAgICogdG9wbGV2ZWwgdG8gdGhlIGNsaWVudCBzZXJ2aWNlLlxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdzZXRBbmNlc3RvcnMnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEFuY2VzdG9ycygpIHtcblx0XHRcdFx0dmFyIHRoaXNEYXRhU291cmNlID0gdGhpcztcblx0XHRcdFx0dmFyIGFkZGVkQ2xpZW50ID0gZmFsc2U7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzRGF0YVNvdXJjZS5ub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcblx0XHRcdFx0XHRub2RlLmFuY2VzdG9ycyA9IHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gfHwgW107XG5cdFx0XHRcdFx0aWYgKF8uaXNFbXB0eShub2RlLmFuY2VzdG9ycykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRub2RlLnBhcmVudCA9IG5vZGUuYW5jZXN0b3JzWzBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoXy5pbmNsdWRlcyh0aGlzRGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwsIG5vZGUuaWQpID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRcdC8vY29udGFpbmVyIGhhcyBubyBwYXJlbnRcblx0XHRcdFx0XHRcdFx0Ly9hZGRpbmcgdG8gY2xpZW50XG5cdFx0XHRcdFx0XHRcdG5vZGUuYW5jZXN0b3JzLnB1c2goXCJjbGllbnRcIik7XG5cdFx0XHRcdFx0XHRcdHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gPSBbXCJjbGllbnRcIl07XG5cdFx0XHRcdFx0XHRcdGlmIChhZGRlZENsaWVudCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRhZGRlZENsaWVudCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0LnRvcExldmVsLnB1c2goXCJjbGllbnRcIik7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0WydjbGllbnQnXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFsnY2xpZW50J10ucHVzaChub2RlLmlkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFJldHVybnMgdGhlIGZsb3cgYmV0d2VlbiB0aGUgaGlnaGVzdCBsZXZlbCBncm91cGluZ1xuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICBUaGUgdG9wIGxldmVsIGZsb3cuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldFRvcExldmVsRmxvdycsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0VG9wTGV2ZWxGbG93KCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRGbG93QmV0d2VlblNldCh0aGlzLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogR2V0cyB0aGUgZmxvdyBiZXR3ZWVuIGFueSBzZXQgb2Ygbm9kZSBsZXZlbHNcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlX25hbWVzICBUaGUgbm9kZSBuYW1lcyBpbiB0aGUgc2V0XG4gICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgVGhlIGZsb3cgYmV0d2VlbiBzZXQuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldEZsb3dCZXR3ZWVuU2V0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzKSB7XG5cdFx0XHRcdHZhciBsb2NhbF9ub2RlcyA9IHRoaXMubm9kZXM7XG5cdFx0XHRcdHZhciBpZE1hcHBpbmcgPSB7fTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhbF9ub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBub2RlID0gbG9jYWxfbm9kZXNbaV07XG5cblx0XHRcdFx0XHQvL2lmIG5vZGUgaXMgYWxyZWFkeSBhdCBpdHMgaGlnaGVzdCBsZXZlbFxuXHRcdFx0XHRcdGlmIChub2RlLmFuY2VzdG9ycyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0aWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZS5uYW1lO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvL2NoZWNrIHRvIHNlZSB3aGljaCB0YWdzIGFyZSBwcmVzZW50IGluIHRoZSBhbmNlc3RvciBsaXN0XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG5vZGVfbmFtZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKG5vZGUuYW5jZXN0b3JzLmluZGV4T2Yobm9kZV9uYW1lc1tqXSkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdGlkTWFwcGluZ1tub2RlLmlkXSA9IG5vZGVfbmFtZXNbal07XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9tb2RpZnkgbGlua3Ncblx0XHRcdFx0dmFyIGxpbmtzID0gdGhpcy5saW5rcztcblx0XHRcdFx0dmFyIGxpbmtEYXRhID0gW107XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBsaW5rID0gW107XG5cdFx0XHRcdFx0bGluay5zb3VyY2UgPSBpZE1hcHBpbmdbbGlua3NbaV0uc291cmNlXSB8fCBsaW5rc1tpXS5zb3VyY2U7XG5cdFx0XHRcdFx0bGluay50YXJnZXQgPSBpZE1hcHBpbmdbbGlua3NbaV0udGFyZ2V0XSB8fCBsaW5rc1tpXS50YXJnZXQ7XG5cdFx0XHRcdFx0bGluay53ZWlnaHQgPSBsaW5rc1tpXS53ZWlnaHQ7XG5cdFx0XHRcdFx0bGlua0RhdGEucHVzaChsaW5rKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vY3JlYXRpbmcgdGhlIG5vZGVEYXRhXG5cdFx0XHRcdHZhciBub2RlRGF0YSA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVfbmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgbm9kZV90b19hZGQgPSBbXTtcblx0XHRcdFx0XHRub2RlX3RvX2FkZC5pZCA9IG5vZGVfbmFtZXNbaV07XG5cdFx0XHRcdFx0bm9kZV90b19hZGQudGV4dCA9IHRoaXMubm9kZUlkVG9OYW1lKG5vZGVfbmFtZXNbaV0pIHx8IG5vZGVfbmFtZXNbaV07XG5cblx0XHRcdFx0XHRub2RlX3RvX2FkZC5hbmNlc3RvcnMgPSB0aGlzLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZV9uYW1lc1tpXV0gfHwgdGhpcy5hbmNlc3RvcnNfc3RydWN0W25vZGVfdG9fYWRkLnRleHRdIHx8IFtdO1xuXHRcdFx0XHRcdGlmIChfLmlzRW1wdHkobm9kZV90b19hZGQuYW5jZXN0b3JzKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdG5vZGVfdG9fYWRkLnBhcmVudCA9IG5vZGVfdG9fYWRkLmFuY2VzdG9yc1swXTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bm9kZV90b19hZGQucGFyZW50ID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZURhdGEucHVzaChub2RlX3RvX2FkZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4geyBub2RlRGF0YTogbm9kZURhdGEsIGxpbmtEYXRhOiBsaW5rRGF0YSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIG91dHB1dCBvZiBnZXRGbG93QmV0d2VlblNldFxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVEYXRhICBOb2RlRGF0YSB0byBjb252ZXJ0IFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vZGUgb2JqZWN0c1xuICAgICogQHJldHVybiAgICAge0FycmF5fSAgTm9kZSBvYmplY3RzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3Byb2Nlc3NOb2RlRGF0YScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc05vZGVEYXRhKG5vZGVEYXRhKSB7XG5cdFx0XHRcdHZhciBub2RlcyA9IFtdO1xuXHRcdFx0XHRfLmZvckVhY2gobm9kZURhdGEsIGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0dmFyIG5ld05vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZShudWxsLCBudWxsLCBkYXRhLmlkLCBkYXRhLnRleHQsIG51bGwsIGRhdGEucGFyZW50LCBkYXRhLmFuY2VzdG9ycywgbnVsbCwgbnVsbCk7XG5cdFx0XHRcdFx0bm9kZXMucHVzaChuZXdOb2RlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBub2Rlcztcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBwcm9jZXNzIHRoZSBsaW5rRGF0YSBvdXRwdXQgb2YgZ2V0Rmxvd0JldHdlZW5TZXRcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBsaW5rRGF0YSAgVGhlIGxpbmsgZGF0YVxuICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICAgIFRoZSBub2Rlc1xuICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3Byb2Nlc3NMaW5rRGF0YScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0xpbmtEYXRhKGxpbmtEYXRhLCBub2Rlcykge1xuXHRcdFx0XHQvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9IGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gICBUaGUgbm9kZSB3aXRoIHRoZSBtYXRjaGluZyBpZFxuICAgICAqL1xuXHRcdFx0XHRmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGlkID09IG5vZGVzW2ldLmlkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBub2Rlc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgbGlua3MgPSBbXTtcblx0XHRcdFx0Ly9hIG1hcHBpbmcgZnJvbSBzb3VyY2UuaWQtdGFyZ2V0LmlkIHRvIHRoZSBsaW5rIGFkZGVkXG5cdFx0XHRcdHZhciBhZGRlZF9saW5rcyA9IHt9O1xuXHRcdFx0XHQvL3RyYW5zZm9ybWluZyBsaW5rIGRhdGFcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaW5rRGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChsaW5rRGF0YVtpXS5zb3VyY2UgIT0gbGlua0RhdGFbaV0udGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHR2YXIgc291cmNlID0gZmluZE5vZGVCeUlkKGxpbmtEYXRhW2ldLnNvdXJjZSwgbm9kZXMpO1xuXHRcdFx0XHRcdFx0dmFyIHRhcmdldCA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS50YXJnZXQsIG5vZGVzKTtcblx0XHRcdFx0XHRcdHZhciB3ZWlnaHQgPSBsaW5rRGF0YVtpXS53ZWlnaHQ7XG5cdFx0XHRcdFx0XHQvL2luIG9yZGVyIHRvIHN1bSBhbGwgdGhlIHdlaWdodHMgb2YgdGhlIGxpbmtzIG9mIHRoZSBzdWItbm9kZXMsXG5cdFx0XHRcdFx0XHQvL3dlIHVzZSBhZGRlZF9saW5rcyB0byBrZWVwIHRyYWNrIGlmIGFuIGxpbmsgd2FzIGFkZGVkXG5cdFx0XHRcdFx0XHQvL2lmIGl0IGlzLCB3ZSBtb2RpZnkgaXRzIHdlaWdodFxuXHRcdFx0XHRcdFx0aWYgKHNvdXJjZSA9PSBudWxsIHx8IHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGFkZGVkX2xpbmtzW3NvdXJjZS5pZCArICctJyArIHRhcmdldC5pZF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgbGluayA9IG5ldyBWaXN1YWxpemVyTGluay5MaW5rKHNvdXJjZSwgdGFyZ2V0LCB3ZWlnaHQpO1xuXHRcdFx0XHRcdFx0XHRhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID0gbGluaztcblx0XHRcdFx0XHRcdFx0bGlua3MucHVzaChsaW5rKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBleGlzdGluZ19saW5rID0gYWRkZWRfbGlua3Nbc291cmNlLmlkICsgJy0nICsgdGFyZ2V0LmlkXTtcblx0XHRcdFx0XHRcdFx0ZXhpc3RpbmdfbGluay5zZXRXZWlnaHQoZXhpc3RpbmdfbGluay5nZXRSYXdXZWlnaHQoKSArIHdlaWdodCk7XG5cdFx0XHRcdFx0XHRcdGV4aXN0aW5nX2xpbmsuaW5jcmVhc2VDb3VudCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbGlua3M7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIFZpc3VhbGl6ZXJEYXRhU291cmNlO1xuXHR9KERhdGFTb3VyY2UuRGF0YVNvdXJjZSk7XG5cblx0cmV0dXJuIHtcblx0XHREYXRhU291cmNlOiBWaXN1YWxpemVyRGF0YVNvdXJjZVxuXHR9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3VwcycsIHtcbiAgICAgICAgICAgIHVybDogJy9hcHBsaWNhdGlvbmdyb3VwcycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuY3JlYXRlJywge1xuICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbmdyb3VwY3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbmdyb3VwZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZWRpdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnYXBwbGljYXRpb25ncm91cGRldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmFwcGxpY2F0aW9uZ3JvdXBzLmxpc3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbkdyb3VwbGlzdCdcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIHRoZSBncmFwaCBvYmplY3QuIEFueSBub2RlcyBvciBsaW5rcyB0aGF0IGFyZSBjb250YWluZWQgaW5cbiAqIGl0cyBub2RlcyBvciBsaW5rcyBwcm9wZXJ0eSB3aWxsIGJlIGRyYXduIG9uIHVwZGF0ZUdyYXBoLlxuICogU3VwcG9ydHMgcG9saWNpZXMuXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIGdyYXBoIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBncmFwaFxuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIGdyYXBoIGNsYXNzLiBcbiAqIFJldHVybiB0aGUgY2xhc3Mgb2JqZWN0IHdpdGggR3JhcGggYXMga2V5LlxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdHcmFwaCcsIFsnUG9saWN5U2VydmljZScsIGZ1bmN0aW9uIChQb2xpY3lTZXJ2aWNlKSB7XG4gICAgdmFyIEdyYXBoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY29uc3RydWN0b3IgZm9yIHRoZSBncmFwaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7SFRNTCBTVkd9ICBzdmcgICAgIFRoZSBzdmcgdGhhdCB3aWxsIFxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGQgdGhlIGdyYXBoXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICAgTGlzdCBvZiBub2RlcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIGxpbmtzICAgICAgTGlzdCBvZiBsaW5rcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHcmFwaChzdmcsIG5vZGVzLCBsaW5rcykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoKTtcblxuICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlcyA9IG5vZGVzIHx8IFtdO1xuICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gbGlua3MgfHwgW107XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzID0gW107XG4gICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcyA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuUG9saWN5KCk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBjYW5ab29tOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNhblBhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0Rm9yY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcGRhdGU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzID0ge1xuICAgICAgICAgICAgICAgIGNpcmNsZUdDbGFzczogXCJjb25jZXB0R1wiLFxuICAgICAgICAgICAgICAgIGdyYXBoQ2xhc3M6IFwiZ3JhcGhcIixcbiAgICAgICAgICAgICAgICBwYXRoQ2xhc3M6IFwicGF0aFwiLFxuICAgICAgICAgICAgICAgIG5vZGVDbGFzczogXCJjaXJjbGVcIixcbiAgICAgICAgICAgICAgICBub2RlVGV4dDogXCJub2RlVGV4dFwiLFxuICAgICAgICAgICAgICAgIHN0YXJ0UmFkaXVzOiA1MCxcbiAgICAgICAgICAgICAgICBtYXhSYWRpdXM6IDYwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgICAgICAgICAgZGlzcGxheU9mZnNldDogNjBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHN2Zy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW92ZXJcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wiZGJsY2xpY2tcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wiY29udGV4dG1lbnVcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5W1wibW91c2VvdXRcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNlZG93blwiXS5jYWxsKHRoaXMsIGQpO1xuICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNldXBcIl0uY2FsbCh0aGlzLCBkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgYXJyb3cgbWFya2VycyBmb3IgZ3JhcGggbGlua3NcbiAgICAgICAgICAgIHZhciBkZWZzID0gc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKTtcbiAgICAgICAgICAgIGRlZnMuYXBwZW5kKCdzdmc6bWFya2VyJykuYXR0cignaWQnLCAnZW5kLWFycm93JykuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpLmF0dHIoXCJyZWZYXCIsIDIwKS5hdHRyKFwicmVmWVwiLCAtMSkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDYpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgYXJyb3cgbWFya2VycyBmb3IgbGVhZGluZyBhcnJvd1xuICAgICAgICAgICAgZGVmcy5hcHBlbmQoJ3N2ZzptYXJrZXInKS5hdHRyKCdpZCcsICdtYXJrLWVuZC1hcnJvdycpLmF0dHIoJ3ZpZXdCb3gnLCAnMCAtNSAxMCAxMCcpLmF0dHIoJ3JlZlgnLCA3KS5hdHRyKCdtYXJrZXJXaWR0aCcsIDMuNSkuYXR0cignbWFya2VySGVpZ2h0JywgMy41KS5hdHRyKCdvcmllbnQnLCAnYXV0bycpLmFwcGVuZCgnc3ZnOnBhdGgnKS5hdHRyKCdkJywgJ00wLC01TDEwLDBMMCw1Jyk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zdmcgPSBzdmc7XG4gICAgICAgICAgICB0aGlzR3JhcGguc3ZnRyA9IHN2Zy5hcHBlbmQoXCJnXCIpLmNsYXNzZWQodGhpc0dyYXBoLmNvbnN0cy5ncmFwaENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBzdmdHID0gdGhpc0dyYXBoLnN2Z0c7XG5cbiAgICAgICAgICAgIC8vIHN2ZyBub2RlcyBhbmQgbGlua3MgXG4gICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSBzdmdHLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwiZ1wiKTtcbiAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gc3ZnRy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcImdcIik7XG4gICAgICAgICAgICB0aGlzR3JhcGguaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgIHZhciByZXNpemVGdW5jID0gZnVuY3Rpb24gcmVzaXplRnVuYygpIHtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgub25XaW5kb3dSZXNpemUoc3ZnKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5iaW5kaW5ncyA9IHtcbiAgICAgICAgICAgICAgICByZXNpemU6IHJlc2l6ZUZ1bmNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkKHdpbmRvdykucmVzaXplKHJlc2l6ZUZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxzIHRoZSBkZXN0cm95IG1ldGhvZCBmb3IgYWxsIHBvbGljaWVzXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKEdyYXBoLCBbe1xuICAgICAgICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpc0dyYXBoLmJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICQod2luZG93KS5vZmYoa2V5LCB0aGlzR3JhcGguYmluZGluZ3Nba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luaXROb2RlcycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdE5vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbGlua3NcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luaXRMaW5rcycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdExpbmtzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHJldHVybnMgdGhlIG5vZGUgbWF0Y2hpbmcgdGhlIGlkLCBcbiAgICAgICAgICAgICAqIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBub25lXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtOb2RlfSAgeyBtYXRjaGluZyBub2RlIH1cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2ZpbmROb2RlQnlJZCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluZE5vZGVCeUlkKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzR3JhcGgubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSB0aGlzR3JhcGgubm9kZXNbaV0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzR3JhcGgubm9kZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2ZpbmREM05vZGUnLFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgZDNOb2RlIG9iamVjdCB0aGF0IG1hdGNoZXMgdGhlIGlkLFxuICAgICAgICAgICAgICogb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vbmVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgICAgICAgICAgICogQHJldHVybiAgICAge0QzTm9kZX0gVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmREM05vZGUoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgZDNOb2RlO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkM05vZGUgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDNOb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIGRyYWcgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgICAgICAqIHdoZW4gbm9kZXMgYXJlIGRyYWdnZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDMuYmVoYXZpb3IuZHJhZ30gIGQzZHJhZyAgRDMgZHJhZyBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luc3RhbGxEcmFnUG9saWN5JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsRHJhZ1BvbGljeShkM2RyYWcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWcgPSBkM2RyYWc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCB0byBpbnN0YWxsIGEgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWQgXG4gICAgICAgICAgICAgKiB3aGVuIHRoZXJlIGlzIG1vdXNlIGludGVyYWN0aW9ucyB3aXRoIHRoZSBncmFwaCdzIHN2Z1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbFN2Z1BvbGljeScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbFN2Z1BvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z1BvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXNcbiAgICAgICAgICAgICAqIG1vdXNlIGludGVyYWN0aW9uIHdpdGggYSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdpbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5wdXNoKHBvbGljeSk7XG4gICAgICAgICAgICAgICAgcG9saWN5LmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIHJlbW92ZSBhbiBpbnN0YWxsZWQgcG9saWN5IGZvciBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndW5pbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgbm9kZSBwb2xpY3kgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG5hbWVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgcG9saWN5TmFtZSAgVGhlIHBvbGljeSBuYW1lXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7UG9saWN5fSAgcG9saWN5ICAgICAgVGhlIG1hdGNoaW5nIHBvbGljeVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZ2V0Tm9kZVBvbGljeScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Tm9kZVBvbGljeShwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3ksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kucG9saWN5TmFtZSA9PT0gcG9saWN5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvbGljeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBwb2xpY2llcyB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGVyZSBpcyBhXG4gICAgICAgICAgICAgKiBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgcGF0aFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMucHVzaChwb2xpY3kpO1xuICAgICAgICAgICAgICAgIHBvbGljeS5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCB0byByZW1vdmUgYW4gaW5zdGFsbGVkIHBvbGljeSBmb3IgbGlua3NcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndW5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgcGF0aFxuICAgICAgICAgICAgICogUHJvcG9nYXRlcyB0aGUgZXZlbnQgdG8gYWxsIGluc3RhbGxlZCBwYXRoIHBvbGljaWVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGV2ZW50ICAgVGhlIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM29iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQYXRofSAgZCAgICAgICBUaGUgbWF0Y2hpbmcgTGluayBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3BhdGhQb2xpY3lFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aFBvbGljeUV2ZW50KGV2ZW50LCBkM3BhdGgsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM3BhdGgsIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIG5vZGVcbiAgICAgICAgICAgICAqIFByb3BvZ2F0ZXMgdGhlIGV2ZW50IHRvIGFsbCBpbnN0YWxsZWQgbm9kZSBwb2xpY2llc1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgZXZlbnQgICBUaGUgZXZlbnQgdHlwZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2Qzb2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBkICAgICAgIFRoZSBtYXRjaGluZyBOb2RlIG9iamVjdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnbm9kZVBvbGljeUV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBub2RlUG9saWN5RXZlbnQoZXZlbnQsIGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcywgZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lbZXZlbnRdKGQzbm9kZSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyBwYW4gYW5kIHpvb20gcnVsZXMgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkMy5iZWhhdmlvci56b29tfSAgZDN6b29tICBEMyB6b29tIG9ialxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zdGFsbFpvb21Qb2xpY3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxab29tUG9saWN5KGQzem9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N2ZyA9IGQzem9vbTtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Zy5jYWxsKHRoaXMuZHJhZ1N2Zyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkXG4gICAgICAgICAgICAgKiBIb29rIGZvciBvdmVycmlkaW5nIGluIHN1YmNsYXNzZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7SFRNTCBTVkd9ICBzdmcgICAgIFRoZSBzdmcgdGhhdCB0aGUgaGFuZGxlclxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhdHRhY2hlZCB0b1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnb25XaW5kb3dSZXNpemUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uV2luZG93UmVzaXplKHN2Zykge31cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbnNlcnRzIGxpbmUgYnJlYWtzIGluIG5vZGUgdGV4dFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtIVE1MIEVsZW19ICBnRWwgICAgVGhlIGVsZW0gdG8gYWRkIHRleHQgdG9cbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0aXRsZSAgIFRoZSB0aXRsZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5zZXJ0VGl0bGVMaW5lYnJlYWtzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRUaXRsZUxpbmVicmVha3MoZ0VsLCB0aXRsZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB3b3JkcyA9IHRpdGxlLnNwbGl0KC9cXHMrL2cpLFxuICAgICAgICAgICAgICAgICAgICBud29yZHMgPSB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZ0VsLmFwcGVuZChcInRleHRcIikuYXR0cignY2xhc3MnLCB0aGlzR3JhcGguY29uc3RzLm5vZGVUZXh0KS5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikuYXR0cihcImR5XCIsIFwiLVwiICsgKG53b3JkcyAtIDEpICogNy41KTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRzcGFuID0gZWwuYXBwZW5kKCd0c3BhbicpLnRleHQod29yZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHRzcGFuLmF0dHIoJ3gnLCAwKS5hdHRyKCdkeScsICcxNScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIGFsbCBsaW5rcyBmcm9tIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpY2VMaW5rc0Zvck5vZGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZUxpbmtzRm9yTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRvU3BsaWNlID0gdGhpc0dyYXBoLmxpbmtzLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbC5zb3VyY2UgPT09IG5vZGUgfHwgbC50YXJnZXQgPT09IG5vZGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9TcGxpY2UubWFwKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcy5zcGxpY2UodGhpc0dyYXBoLmxpbmtzLmluZGV4T2YobCksIDEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZHMgdGhlIG5vZGUgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICBub2RlLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAncmVtb3ZlTm9kZScsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIHRoZSBub2RlIHRvIHRoZSBncmFwaCBhbmQgdXBkYXRlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZSAgICBUaGUgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNwbGljZUxpbmtzRm9yTm9kZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGRMaW5rJyxcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZHMgdGhlIGxpbmsgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2xpbmt9ICBsaW5rICAgIFRoZSBsaW5rXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaW5rKGxpbmspIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MucHVzaChsaW5rKTtcbiAgICAgICAgICAgICAgICBsaW5rLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAncmVtb3ZlTGluaycsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIHRoZSBsaW5rIHRvIHRoZSBncmFwaCBhbmQgdXBkYXRlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtsaW5rfSAgbGluayAgICBUaGUgbGlua1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGluayhsaW5rKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnNwbGljZSh0aGlzR3JhcGgubGlua3MuaW5kZXhPZihsaW5rKSwgMSk7XG4gICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIHBhdGhzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBwYXRocyAgIExpc3Qgb2YgcGF0aHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZUV4aXN0aW5nUGF0aHMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpIHtcbiAgICAgICAgICAgICAgICBwYXRocy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudXBkYXRlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBhZGRpbmcgbmV3IHBhdGhzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BhdGh9ICBuZXdQYXRocyAgTGlzdCBvZiBuZXcgcGF0aHNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld1BhdGhzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBkLm5ld1BhdGhBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIG5vZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gcG9saWN5LCB1c2UgZGVmYXVsdCBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVFeGlzdGluZ05vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ05vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gdGhpcy5jaXJjbGVzLmRhdGEodGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5pZDtcbiAgICAgICAgICAgICAgICB9KS5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudXBkYXRlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBhZGRpbmcgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBuZXdOb2RlcyAgTGlzdCBvZiBuZXcgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld05vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgbmV3Tm9kZXMuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5ncmFwaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkLm5ld05vZGVBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIG5vZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gcG9saWN5LCB1c2UgZGVmYXVsdCBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgbmV3Tm9kZXMub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlb3ZlclwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcIm1vdXNlZG93blwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZVBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcInJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhkLnJhZGl1cyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbnNlcnRUaXRsZUxpbmVicmVha3MoZDMuc2VsZWN0KHRoaXMpLCBkLnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByZXZlbnRzIG5vZGVzIGZyb20gY29sbGlkaW5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGFscGhhICAgQWZmZWN0cyBob3cgbXVjaCBjaGFuZ2VcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsaXNpb24gY2F1c2VzXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIHtXaGV0aGVyIG5vZGVzIGFyZSBjb2xsaWRlZH1cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VDb2xsaWRlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlQ29sbGlkZShhbHBoYSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgcXVhZHRyZWUgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBkLnJhZGl1cyArIGNvbnN0cy5tYXhSYWRpdXMgKyBjb25zdHMucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG54MSA9IGQueCAtIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBueDIgPSBkLnggKyByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnkxID0gZC55IC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG55MiA9IGQueSArIHI7XG4gICAgICAgICAgICAgICAgICAgIHF1YWR0cmVlLnZpc2l0KGZ1bmN0aW9uIChxdWFkLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1YWQucG9pbnQgJiYgcXVhZC5wb2ludCAhPT0gZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gZC54IC0gcXVhZC5wb2ludC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gZC55IC0gcXVhZC5wb2ludC55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZC5yYWRpdXMgKyBxdWFkLnBvaW50LnJhZGl1cyArIGNvbnN0cy5wYWRkaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsIDwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gKGwgLSByKSAvIGwgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54IC09IHggKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55IC09IHkgKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZC5wb2ludC54ICs9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YWQucG9pbnQueSArPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4MSA+IG54MiB8fCB4MiA8IG54MSB8fCB5MSA+IG55MiB8fCB5MiA8IG55MTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaWNrIG9mIHRoZSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzdGljayBldmVudH0gIGUgICAgRDN0aWNrIGV2ZW50XG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgd2lkdGggIFRoZSB3aWR0aCBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlVGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVRpY2soZSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgcSA9IGQzLmdlb20ucXVhZHRyZWUodGhpc0dyYXBoLm5vZGVzKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICAgICAgICBxLnZpc2l0KHRoaXMuZDNGb3JjZUNvbGxpZGUobm9kZXNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKHRoaXMuZDNGb3JjZUNvbGxpZGUoLjUpKS5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueCA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbih3aWR0aCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLngpKTtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueSA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbihoZWlnaHQgLSBvZmZzZXQgLSBkLnJhZGl1cywgZC55KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdGFydHMgb24gc3RhcnQgb2YgdGhlIGZvcmNlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VTdGFydCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocy5hdHRyKCd4MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLnk7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneDInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgZW5kIG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlRW5kJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlRW5kKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmF0dHIoJ2N4JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCdjeScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGJvdW5kcyBmb3IgdGhlIFxuICAgICAgICAgICAgICogZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICB3aWR0aCBhbmQgaGVpZ2h0IGFzIHByb3BlcnRpZXMgXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlQm91bmRzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlQm91bmRzKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERvZXMgYSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0Rm9yY2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvcmNlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzR3JhcGgubm9kZXM7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gdGhpc0dyYXBoLmxpbmtzO1xuICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gdGhpc0dyYXBoLmQzRm9yY2VCb3VuZHMoKTtcblxuICAgICAgICAgICAgICAgIHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpLnNpemUoW2JvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodF0pLm5vZGVzKG5vZGVzKS5jaGFyZ2UoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC02MDAwO1xuICAgICAgICAgICAgICAgIH0pLmxpbmtzKGxpbmtzKTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLmxpbmtEaXN0YW5jZShib3VuZHMud2lkdGggLyAzKTtcbiAgICAgICAgICAgICAgICBmb3JjZS5saW5rU3RyZW5ndGgoLjIpO1xuICAgICAgICAgICAgICAgIGZvcmNlLmdyYXZpdHkoLjIpO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uub24oJ3RpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZDNGb3JjZVRpY2suY2FsbCh0aGlzR3JhcGgsIGUsIGJvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5vbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kM0ZvcmNlU3RhcnQuY2FsbCh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmQzRm9yY2VFbmQuY2FsbCh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZm9yY2Uuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGZvcmNlLmFscGhhKCkgPiAxZS0yICYmIGsgPCAxNTApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2UudGljaygpO1xuICAgICAgICAgICAgICAgICAgICBrID0gayArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcmNlLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIHBvc2l0aW9ucyB0byBiZSB0aGUgY2VudGVyIG9mIHRoZSBzY3JlZW4gaWYgXG4gICAgICAgICAgICAgKiBub3QgcHJvdmlkZWRcbiAgICAgICAgICAgICAqIGFsc28gc2V0cyB0aGUgcmFkaXVzIG9mIHRoZSBub2Rlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0UG9zaXRpb25zJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpc0dyYXBoLmNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoIC0gMiAqIG9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gc3ZnSGVpZ2h0IC0gMiAqIG9mZnNldDtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ucmFkaXVzID0gbm9kZXNbaV0ucmFkaXVzIHx8IHRoaXNHcmFwaC5jb25zdHMuc3RhcnRSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS54ID09IG51bGwgfHwgbm9kZXNbaV0ueSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2Rlc1tpXS54U3RhcnQgPSB3aWR0aC8yICArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ueCA9IHdpZHRoIC8gMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzW2ldLnlTdGFydCA9IGhlaWdodC8yICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS55ID0gaGVpZ2h0IC8gMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgdG8gdXBkYXRlIHRoZSB2aWV3IG9mIHRoZSBncmFwaCB3aGVuXG4gICAgICAgICAgICAgKiBkYXRhIGNoYW5nZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RnVuY3Rpb259ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVHcmFwaCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlR3JhcGgoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhpc3RpbmdOb2RlcygpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdHcyA9IHRoaXNHcmFwaC5jaXJjbGVzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKTtcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd1cGRhdGUnLCBuZXdHcyk7XG4gICAgICAgICAgICAgICAgbmV3R3MuY2xhc3NlZChjb25zdHMuY2lyY2xlR0NsYXNzLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoaXMudXBkYXRlTmV3Tm9kZXMobmV3R3MpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBub2Rlc1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5pbml0Rm9yY2UgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnNldEZvcmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVOZXdOb2Rlcy5jYWxsKHRoaXNHcmFwaCwgbmV3R3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaW5pdEZvcmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU5ld05vZGVzKG5ld0dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSB0aGlzR3JhcGgucGF0aHMuZGF0YSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcoZC5zb3VyY2UuaWQpICsgXCIrXCIgKyBTdHJpbmcoZC50YXJnZXQuaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBwYXRocyA9IHRoaXNHcmFwaC5wYXRocztcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld3BhdGhzID0gcGF0aHMuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLnN0eWxlKCdtYXJrZXItZW5kJywgJ3VybCgjZW5kLWFycm93KScpLmNsYXNzZWQoXCJsaW5rXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3UGF0aHMobmV3cGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBsaW5rc1xuICAgICAgICAgICAgICAgIHBhdGhzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIEdyYXBoO1xuICAgIH0oKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIEdyYXBoOiBHcmFwaFxuICAgIH07XG59XSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZGFzaGJvYXJkJywgWydjb250aXYubW9kZWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmRhc2hib2FyZCcsIHtcbiAgICAgICAgICAgIHVybDogJy9kYXNoYm9hcmQnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnZGFzaGJvYXJkJ1xuICAgICAgICB9KTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubG9naW4nLCBbJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubG9naW4nLCB7XG4gICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2xvZ2luJ1xuICAgICAgICB9KTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4vKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubWVudScsIFtdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5uZXR3b3JrcG9saWNpZXMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcycsIHtcbiAgICAgICAgICAgIHVybDogJy9uZXR3b3JrcG9saWNpZXMnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24nLCB7XG4gICAgICAgICAgICB1cmw6ICcvaXNvbGF0aW9uJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWktdmlldy8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnaXNvbGF0aW9ucG9saWN5Y3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2lzb2xhdGlvbnBvbGljeWRldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5pc29sYXRpb24uZWRpdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnaXNvbGF0aW9ucG9saWN5ZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aCcsIHtcbiAgICAgICAgICAgIHVybDogJy9iYW5kd2lkdGgnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguY3JlYXRlJywge1xuICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdiYW5kd2lkdGhwb2xpY3ljcmVhdGUnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguZGV0YWlscycsIHtcbiAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnYmFuZHdpZHRocG9saWN5ZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmJhbmR3aWR0aC5lZGl0Jywge1xuICAgICAgICAgICAgdXJsOiAnL2VkaXQvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdiYW5kd2lkdGhwb2xpY3lkZXRhaWxzJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMucmVkaXJlY3Rpb24nLCB7XG4gICAgICAgICAgICB1cmw6ICcvcmVkaXJlY3Rpb24nLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzx1aS12aWV3Lz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5saXN0Jywge1xuICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgcGFyYW1zOiB7IHBvbGljeVRhYjogbnVsbCB9LFxuICAgICAgICAgICAgY29tcG9uZW50OiAnbmV0d29ya3BvbGljaWVzdGFicydcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm5ldHdvcmtzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbmV0d29ya3MnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmxpc3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICduZXR3b3JrTGlzdCdcbiAgICAgICAgfSkuXG4gICAgICAgICAgICBzdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MuZGV0YWlscycsIHtcbiAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnbmV0d29ya2RldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtzLmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnbmV0d29ya2NyZWF0ZSdcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5vcmdhbml6YXRpb25zJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUub3JnYW5pemF0aW9ucycsIHtcbiAgICAgICAgICAgIHVybDogJy9vcmdhbml6YXRpb25zJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmxpc3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdvcmdhbml6YXRpb25saXN0J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnb3JnYW5pemF0aW9uY3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ29yZ2FuaXphdGlvbmRldGFpbHMnXG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBncmFwaCB0aGF0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgdmlzdWFsaXphdGlvbiB0YWIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdWaXN1YWxpemVyR3JhcGgnLCBbJ0dyYXBoJywgZnVuY3Rpb24gKEdyYXBoKSB7XG4gICAgdmFyIFZpc3VhbGl6ZXJHcmFwaCA9IGZ1bmN0aW9uIChfR3JhcGgkR3JhcGgpIHtcbiAgICAgICAgX2luaGVyaXRzKFZpc3VhbGl6ZXJHcmFwaCwgX0dyYXBoJEdyYXBoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICB7SFRNTCBTVkd9ICBzdmcgICAgICAgICAgICAgVGhlIHN2ZyB0aGF0IHdpbGwgXG4gICAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgKiBAcGFyYW0gICB7QXJyYXl9ICBub2RlcyAgIFx0XHQgICAgTGlzdCBvZiBub2Rlc1xuICAgICAgICAgICAgICAgKiBAcGFyYW0gICB7QXJyYXl9ICBsaW5rcyAgIFx0XHQgICAgTGlzdCBvZiBsaW5rc1xuICAgICAgICAgKiBAcGFyYW0gICB7RGF0YVNvdXJjZX0gIGRhdGFTb3VyY2UgICAgVGhlIGRhdGEgc291cmNlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBWaXN1YWxpemVyR3JhcGgoc3ZnLCBub2RlcywgbGlua3MsIGRhdGFTb3VyY2UpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaXN1YWxpemVyR3JhcGgpO1xuXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmlzdWFsaXplckdyYXBoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlzdWFsaXplckdyYXBoKSkuY2FsbCh0aGlzLCBzdmcsIG5vZGVzLCBsaW5rcykpO1xuXG4gICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gX3RoaXM7XG5cbiAgICAgICAgICAgIC8vaG9sZHMgY3VycmVudCB0cmFuc2l0aW9ucyB0aGF0IGFyZSBvY2N1cmluZ1xuICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLnRyYW5zaXRpb24gPSBbXTtcbiAgICAgICAgICAgIC8vTWluIGRpc3RhbmNlIGJldHdlZW4gbm9kZXMgd2hlbiBzcGF3bmluZyByYW5kb21seVxuICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cy5lZGdlX2J1ZmZlciA9IDIwMDtcbiAgICAgICAgICAgIC8vU2l6ZSByZWR1Y3Rpb24gYXMgeW91IGdvIHRocm91Z2ggbGV2ZWxzIGluIG5vZGVzXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5ID0gMTtcbiAgICAgICAgICAgIC8vQ3NzIGNsYXNzIGZvciBub2RlcyB0aGF0IGFyZSBjb250YWluZXJzXG4gICAgICAgICAgICB0aGlzR3JhcGguY29uc3RzLmNvbnRhaW5lckNsYXNzID0gJ2NvbnRhaW5lcic7XG5cbiAgICAgICAgICAgIC8vZGF0YVNvdXJjZSBob2xkcyB0aGUgc2VydmVyIGRhdGEgYW5kIG1ldGhvZHMgZm9yXG4gICAgICAgICAgICAvL2NvbnZlcnRpbmcgaXQgdG8gZGF0YSBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICB0aGlzR3JhcGguZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG5cbiAgICAgICAgICAgIC8vRHJhZyBiZWhhdmlvciBmb3Igbm9kZXNcbiAgICAgICAgICAgIHZhciBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IGQueCwgeTogZC55IH07XG4gICAgICAgICAgICB9KS5vbihcImRyYWdzdGFydFwiLCBmdW5jdGlvbiAoKSB7fSkub24oXCJkcmFnXCIsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgZC54ICs9IGQzLmV2ZW50LmR4O1xuICAgICAgICAgICAgICAgICAgICBkLnkgKz0gZDMuZXZlbnQuZHk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFtkLngsIGQueV0gKyBcIilcIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH0pLm9uKFwiZHJhZ2VuZFwiLCBmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgICAgIHRoaXNHcmFwaC5kcmFnID0gZHJhZztcblxuICAgICAgICAgICAgLy9QYW4gYW5kIFpvb20gYmVoYXZpb3IgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgdmFyIHpvb20gPSBkMy5iZWhhdmlvci56b29tKCkub24oXCJ6b29tXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuc291cmNlRXZlbnQgIT0gbnVsbCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkLmNhbGwodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KS5vbihcInpvb21zdGFydFwiLCBmdW5jdGlvbiAoZCwgaSkge30pO1xuICAgICAgICAgICAgdGhpc0dyYXBoLmRyYWdTdmcgPSB6b29tO1xuICAgICAgICAgICAgdGhpc0dyYXBoLnN2Zy5jYWxsKHpvb20pLm9uKFwiZGJsY2xpY2suem9vbVwiLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2l0aCBubyBhcmdzIHdoZW4gdGhlIGdyYXBoIGhhcyBhIHpvb20gYWN0aW9uXG4gICAgICAgICAqIENhbiBhbHNvIGJlIGNhbGxlZCB3aXRoIGFyZ3MgdG8gZm9yY2UgYSB6b29tIG9yIHBhbiBcbiAgICAgICAgICogZXZlbnQgZm9yIHRoZSBncmFwaC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgIHRyYW5zbGF0ZSAgVGhlIGFtb3VudCB0byB0cmFuc2xhdGVcbiAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHNjYWxlICAgICAgVGhlIGFtb3VudCB0byBzY2FsZVxuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhWaXN1YWxpemVyR3JhcGgsIFt7XG4gICAgICAgICAgICBrZXk6ICd6b29tZWQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21lZCh0cmFuc2xhdGUsIHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5zdGF0ZS5yaWdodENsaWNrID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmp1c3RTY2FsZVRyYW5zR3JhcGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGUgIT0gbnVsbCAmJiBzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gdGhpc0dyYXBoLmRyYWdTdmc7XG4gICAgICAgICAgICAgICAgICAgIHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB6b29tLnRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIG5hbWVzIHRvIHByZXZlbnQgdHJhbnNpdGlvbiBjb25mbGljdHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb21TZXRDYWxsYmFjayA9IGZ1bmN0aW9uIHpvb21TZXRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb20uc2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgem9vbS50cmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZV9uYW1lID0gXCJ6b29tXCIgKyB0cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChcIi5cIiArIHRoaXMuY29uc3RzLmdyYXBoQ2xhc3MpLnRyYW5zaXRpb24odHJhbnNsYXRlX25hbWUpLmRlbGF5KDEwMCkuZHVyYXRpb24oNzUwKS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB6b29tLnRyYW5zbGF0ZSgpICsgJykgc2NhbGUoJyArIHpvb20uc2NhbGUoKSArICcpJykuZWFjaChcImVuZFwiLCB6b29tU2V0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGguc3RhdGUuY2FuWm9vbSkge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoXCIuXCIgKyB0aGlzLmNvbnN0cy5ncmFwaENsYXNzKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCkgKyBcIikgc2NhbGUoXCIgKyB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnb25XaW5kb3dSZXNpemUnLFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyByZXNpemVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgIFRoZSBzdmcgdG8gcmVzaXplXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZShzdmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgICB2YXIgZGl2V2lkdGggPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGJvZHlFbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCBkaXZXaWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgLSBvZmZzZXQudG9wIC0gMjApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1cGRhdGVMaW5rRGF0YScsXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHVwZGF0ZWQgZGF0YSBmb3IgdGhlIGxpbmtzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVMaW5rRGF0YSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgbm9kZV9uYW1lc19zZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXREYXRhID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lc19zZXQpO1xuICAgICAgICAgICAgICAgIHZhciBsaW5rRGF0YSA9IHJldERhdGEubGlua0RhdGE7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKGxpbmtEYXRhLCB0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TGlua3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBWaXN1YWxpemVyR3JhcGg7XG4gICAgfShHcmFwaC5HcmFwaCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBHcmFwaDogVmlzdWFsaXplckdyYXBoXG4gICAgfTtcbn1dKTtcbi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOC8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXJ2aWNlbGJzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXJ2aWNlbGJzJywge1xuICAgICAgICAgICAgdXJsOiAnL3NlcnZpY2VsYnMnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMubGlzdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ3NlcnZpY2VsYkxpc3QnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuY3JlYXRlJywge1xuICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdzZXJ2aWNlbGJDcmVhdGUnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMuZGV0YWlscycsIHtcbiAgICAgICAgICAgIHVybDogJy9kZXRhaWxzLzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnc2VydmljZWxiRGV0YWlscydcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBsaW5rIG9iamVjdHMgZm9yIHRoZSBncmFwaC5cbiAqIFN1cHBvcnRzIHBvbGljaWVzLlxuICogXG4gKiBUbyB3cml0ZSB5b3VyIG93biBsaW5rIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBsaW5rXG4gKiB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBpdHMgbGluayBjbGFzcy4gXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG9iamVjdCB3aXRoIExpbmsgYXMga2V5XG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ0xpbmsnLCBbZnVuY3Rpb24gKCkge1xuXHR2YXIgTGluayA9IGZ1bmN0aW9uICgpIHtcblx0XHQvKipcbiAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHNvdXJjZU5vZGUgIFRoZSBzb3VyY2Ugbm9kZVxuICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHRhcmdldE5vZGUgIFRoZSB0YXJnZXQgbm9kZVxuICAgKi9cblx0XHRmdW5jdGlvbiBMaW5rKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpIHtcblx0XHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuXHRcdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2VOb2RlO1xuXHRcdFx0dGhpcy50YXJnZXQgPSB0YXJnZXROb2RlO1xuXHRcdFx0dGhpcy5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdHRoaXMucGF0aFBvbGljaWVzID0gW107XG5cdFx0XHR0aGlzLmdyYXBoID0gbnVsbDtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBsaW5rIGlzIGFkZGVkIHRvIHRoZSBncmFwaFxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuICAgKi9cblxuXG5cdFx0X2NyZWF0ZUNsYXNzKExpbmssIFt7XG5cdFx0XHRrZXk6ICdpbml0aWFsaXplJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5ncmFwaCA9IGdyYXBoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsbGVkIGR1cmluZyB0aGUgdXBkYXRlIGdyYXBoIGZvciBleGlzdGluZyBsaW5rc1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0ICAgICAgIFxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICd1cGRhdGVBdHRyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVBdHRyKGQzcGF0aCwgZCkge1xuXHRcdFx0XHRkM3BhdGguc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJykuYXR0cihcImRcIiwgYXJyb3dQYXRoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbGlua1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0ICAgICAgIFxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICduZXdQYXRoQXR0cicsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gbmV3UGF0aEF0dHIoZDNwYXRoLCBkKSB7XG5cdFx0XHRcdGQzcGF0aC5hdHRyKCdkJywgYXJyb3dQYXRoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxjdWxhdGVzIHRoZSBhcnJvdyBwYXRoXG4gICAgKlxuICAgICogQHJldHVybiAgICAge3N0cmluZ30gIFRoZSBwYXRoIHRvIGRyYXdcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnYXJyb3dQYXRoJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBhcnJvd1BhdGgoKSB7XG5cdFx0XHRcdHZhciBkID0gdGhpcztcblx0XHRcdFx0dmFyIGR4ID0gZC50YXJnZXQueCAtIGQuc291cmNlLngsXG5cdFx0XHRcdCAgICBkeSA9IGQudGFyZ2V0LnkgLSBkLnNvdXJjZS55LFxuXHRcdFx0XHQgICAgZHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHRcdFx0XHRyZXR1cm4gXCJNXCIgKyBkLnNvdXJjZS54ICsgXCIsXCIgKyBkLnNvdXJjZS55ICsgXCJBXCIgKyBkciArIFwiLFwiICsgZHIgKyBcIiAwIDAsMSBcIiArIGQudGFyZ2V0LnggKyBcIixcIiArIGQudGFyZ2V0Lnk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byBpbnN0YWxsIHBvbGljaWVzIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoaXNcbiAgICAqIGxpbmsgaGFzIGEgbW91c2UgZXZlbnRcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnaW5zdGFsbFBhdGhQb2xpY3knLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxQYXRoUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMucGF0aFBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIGxpbmtcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5UmVtb3ZlICBUaGUgcG9saWN5IHRvIHJlbW92ZVxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICd1bmluc3RhbGxQYXRoUG9saWN5Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiB1bmluc3RhbGxQYXRoUG9saWN5KHBvbGljeVJlbW92ZSkge1xuXHRcdFx0XHR2YXIgcG9saWN5UmVtb3ZlTmFtZTtcblx0XHRcdFx0dmFyIHRoaXNQYXRoID0gdGhpcztcblx0XHRcdFx0aWYgKHR5cGVvZiBwb2xpY3lSZW1vdmUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlLnBvbGljeU5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Xyh0aGlzUGF0aC5wYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24gKHBvbGljeSwgaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcblx0XHRcdFx0XHRcdHBvbGljeS5kZXN0cm95KCk7XG5cdFx0XHRcdFx0XHR0aGlzUGF0aC5wYXRoUG9saWNpZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAodGhpc1BhdGgucGF0aFBvbGljaWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXNQYXRoLmhhc1BvbGljeSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBldmVudCBmb3IgdGhpcyBwYXRoXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGV2ZW50ICAgICBUaGUgbW91c2UgZXZlbnRcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgICAgVGhlIG1hdGNoaW5nIGxpbmsgb2JqZWN0XG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3BhdGhQb2xpY3lFdmVudCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gcGF0aFBvbGljeUV2ZW50KGV2ZW50LCBkM3BhdGgsIGQpIHtcblx0XHRcdFx0XyhkLnBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5KSB7XG5cdFx0XHRcdFx0cG9saWN5W2V2ZW50XShkM3BhdGgsIGQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XSk7XG5cblx0XHRyZXR1cm4gTGluaztcblx0fSgpO1xuXG5cdHJldHVybiB7XG5cdFx0TGluazogTGlua1xuXHR9O1xufV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5zZXR0aW5ncycsIFsnY29udGl2Lm1vZGVscycsICdjb250aXYuZGlyZWN0aXZlcycsICdjb250aXYudXRpbHMnXSlcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZ2xvYmFsJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL3NldHRpbmdzJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2V0dGluZ3Mvc2V0dGluZ3NtZW51Lmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMubG9ncycsIHtcbiAgICAgICAgICAgIHVybDogJy9sb2dzJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMuYXV0aCcsIHtcbiAgICAgICAgICAgIHVybDogJy9hdXRoJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMubGljZW5zZScsIHtcbiAgICAgICAgICAgIHVybDogJy9saWNlbnNlJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICcnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMucG9saWNpZXMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvcG9saWNpZXMnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5uZXR3b3JrcycsIHtcbiAgICAgICAgICAgIHVybDogJy9uZXR3b3JrcycsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICduZXR3b3Jrc2V0dGluZydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy52b2x1bWVzJywge1xuICAgICAgICAgICAgdXJsOiAnL3ZvbHVtZXMnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAndm9sdW1lc2V0dGluZydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5jbHVzdGVyJywge1xuICAgICAgICAgICAgdXJsOiAnL2NsdXN0ZXInLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnY2x1c3RlcnNldHRpbmdzJ1xuICAgICAgICB9KTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoZSBsaW5rIHRoYXQgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHRoZSB2aXN1YWxpemF0aW9uIHRhYi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1Zpc3VhbGl6ZXJMaW5rJywgWydMaW5rJywgZnVuY3Rpb24gKExpbmspIHtcblx0dmFyIFZpc3VhbGl6ZXJMaW5rID0gZnVuY3Rpb24gKF9MaW5rJExpbmspIHtcblx0XHRfaW5oZXJpdHMoVmlzdWFsaXplckxpbmssIF9MaW5rJExpbmspO1xuXG5cdFx0LyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICAgICAge05vZGV9ICBzb3VyY2VOb2RlICBUaGUgc291cmNlIG5vZGVcbiAgICogQHBhcmFtICAgICAge05vZGV9ICB0YXJnZXROb2RlICBUaGUgdGFyZ2V0IG5vZGVcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdlaWdodCAgICBUaGUgd2VpZ2h0IG9mIHRoZSBsaW5rXG4gICAqL1xuXHRcdGZ1bmN0aW9uIFZpc3VhbGl6ZXJMaW5rKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUsIHdlaWdodCkge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc3VhbGl6ZXJMaW5rKTtcblxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZpc3VhbGl6ZXJMaW5rLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlzdWFsaXplckxpbmspKS5jYWxsKHRoaXMsIHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpKTtcblxuXHRcdFx0X3RoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXHRcdFx0Ly9Db3VudCBpcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgaG93IG1hbnlcblx0XHRcdC8vcGF0aHMgdG8gaXRzIHN1Ym5vZGVzIHRoZXJlIGFyZVxuXHRcdFx0Ly9pbiBvcmRlciB0byBjYWxjdWxhdGUgYXZlcmFnZSB0cmFmZmljXG5cdFx0XHRfdGhpcy5jb3VudCA9IDE7XG5cdFx0XHRyZXR1cm4gX3RoaXM7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIEluY3JlYXNlcyB0aGUgY291bnQgb2YgdGhlIGxpbmtcbiAgICogVVNlZCB0byBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IHBhdGhzIHRvIGl0cyBzdWJub2Rlc1xuICAgKiB0aGVyZSBhcmUgaW4gb3JkZXIgdG8gY2FsY3VsYXRlIGF2ZXJhZ2UgdHJhZmZpY1xuICAgKi9cblxuXG5cdFx0X2NyZWF0ZUNsYXNzKFZpc3VhbGl6ZXJMaW5rLCBbe1xuXHRcdFx0a2V5OiAnaW5jcmVhc2VDb3VudCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaW5jcmVhc2VDb3VudCgpIHtcblx0XHRcdFx0dGhpcy5jb3VudCArPSAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGN1bGF0ZXMgd2hlcmUgdG8gcGxhY2UgcXRpcCBmb3JcbiAgICAqXG4gICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgT2JqZWN0IHdpdGggcVRpcCBzZXR0aW5nc1xuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdxdGlwSGVscGVyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBxdGlwSGVscGVyKCkge1xuXHRcdFx0XHR2YXIgcmV0O1xuXHRcdFx0XHR2YXIgZCA9IHRoaXM7XG5cdFx0XHRcdHZhciBkeCA9IChkLnRhcmdldC54IC0gZC5zb3VyY2UueCkgLyAyLFxuXHRcdFx0XHQgICAgZHkgPSAoZC50YXJnZXQueSAtIGQuc291cmNlLnkpIC8gMjtcblx0XHRcdFx0aWYgKGQuc291cmNlLnggPCBkLnRhcmdldC54KSB7XG5cdFx0XHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRcdFx0bXk6ICd0b3AgY2VudGVyJyxcblx0XHRcdFx0XHRcdGF0OiAnY2VudGVyIGNlbnRlcicsIC8vIGF0IHRoZSBib3R0b20gcmlnaHQgb2YuLi5cblx0XHRcdFx0XHRcdHRhcmdldDogW2R4LCBkeV0sXG5cdFx0XHRcdFx0XHRhZGp1c3Q6IHtcblx0XHRcdFx0XHRcdFx0eTogMTBcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldCA9IHtcblx0XHRcdFx0XHRcdG15OiAnYm90dG9tIGNlbnRlcicsXG5cdFx0XHRcdFx0XHRhdDogJ2NlbnRlciBjZW50ZXInLCAvLyBhdCB0aGUgYm90dG9tIHJpZ2h0IG9mLi4uXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IFtkeCwgZHldLFxuXHRcdFx0XHRcdFx0YWRqdXN0OiB7XG5cdFx0XHRcdFx0XHRcdHk6IC0xMFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAqIENhbGxlZCB3aGVuIGEgbGluayBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICpcbiAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgYWRkZWQgdG9cbiAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdpbml0aWFsaXplJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0X2dldChWaXN1YWxpemVyTGluay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaXN1YWxpemVyTGluay5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuXHRcdFx0XHRcdHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXHRcdFx0XHRcdGlmIChzdGF0ZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRzdGF0ZSA9IGdyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rID0ge307XG5cdFx0XHRcdFx0XHRzdGF0ZS5tYXhXZWlnaHQgPSBudWxsO1xuXHRcdFx0XHRcdFx0c3RhdGUudXNlQXZnV2VpZ2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFNldHMgd2hldGhlciB0aGUgZ3JhcGggc2hvdWxkIHVzZSBhdmcgd2VpZ2h0XG4gICAgKlxuICAgICogQHBhcmFtICAgICAge2Jvb2xlYW59ICB2YWwgICAgIFRoZSB2YWx1ZSB0byBzZXQgdG9cbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnc2V0VXNlQXZnV2VpZ2h0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRVc2VBdmdXZWlnaHQodmFsKSB7XG5cdFx0XHRcdHRoaXMuZ3JhcGguc3RhdGUuVmlzdWFsaXplckxpbmsudXNlQXZnV2VpZ2h0ID0gISF2YWw7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogU2V0cyB0aGUgd2VpZ2h0IG9mIHRoaXMgbGlua1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB3ZWlnaHQgIFRoZSB3ZWlnaHQgdG8gc2V0IHRvXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3NldFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0V2VpZ2h0KHdlaWdodCkge1xuXHRcdFx0XHR0aGlzLndlaWdodCA9IHdlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBHZXRzIHRoZSByYXcgd2VpZ2h0LlxuICAgICpcbiAgICAqIEByZXR1cm4gICAgIHtudW1iZXJ9ICBUaGUgcmF3IHdlaWdodC5cbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnZ2V0UmF3V2VpZ2h0Jyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRSYXdXZWlnaHQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLndlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBHZXRzIHRoZSB3ZWlnaHQgdmFsdWUgb2YgdGhlIGxpbmssIGRlcGVuZGluZyBvbiB0aGVcbiAgICAqIHVzZUF2Z1dlaWd0aCBzZXR0aW5nXG4gICAgKlxuICAgICogQHJldHVybiAgICAge251bWJlcn0gIFRoZSB3ZWlnaHQuXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ2dldFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0V2VpZ2h0KCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHRcdFx0ICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXG5cdFx0XHRcdGlmIChzdGF0ZS51c2VBdmdXZWlnaHQpIHtcblx0XHRcdFx0XHR2YXIgd2VpZ2h0ID0gdGhpcy53ZWlnaHQgLyB0aGlzLmNvdW50O1xuXHRcdFx0XHRcdHJldHVybiB3ZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMud2VpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIFVwZGF0ZXMgdGhlIG1heCB3ZWlnaHQgb2YgdGhlIGdyYXBoXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZU1heFdlaWdodCcsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlTWF4V2VpZ2h0KCkge1xuXHRcdFx0XHR2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHRcdFx0ICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXG5cdFx0XHRcdHZhciBtYXhMaW5rID0gXy5tYXhCeSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRcdFx0aWYgKGwuZ3JhcGggIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGwuZ2V0V2VpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c3RhdGUubWF4V2VpZ2h0ID0gbWF4TGluay5nZXRXZWlnaHQoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxsZWQgZHVyaW5nIHRoZSB1cGRhdGUgZ3JhcGggZm9yIGV4aXN0aW5nIGxpbmtzXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuICAgICogQHBhcmFtICAgICAge0xpbmt9ICBcdCAgIGQgICAgICAgTWF0Y2hpbmcgTGluayBPYmplY3QgICAgICAgXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dHIoZDNwYXRoLCBkKSB7XG5cdFx0XHRcdHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuXHRcdFx0XHQgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cdFx0XHRcdHRoaXMudXBkYXRlTWF4V2VpZ2h0KCk7XG5cdFx0XHRcdHZhciBjb2xvclNjYWxlID0gZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFswLCBzdGF0ZS5tYXhXZWlnaHRdKS5yYW5nZShbXCIjZmZiMzY2XCIsIFwiI0Y5MjYwNlwiXSk7XG5cdFx0XHRcdHN0YXRlLmNvbG9yU2NhbGUgPSBjb2xvclNjYWxlO1xuXHRcdFx0XHRkM3BhdGguc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJykuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLnNlbGVjdGVkQ2xhc3MsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGQgPT09IHN0YXRlLnNlbGVjdGVkRWRnZTtcblx0XHRcdFx0fSkuYXR0cihcImRcIiwgdGhpcy5hcnJvd1BhdGguY2FsbChkKSkudHJhbnNpdGlvbihcImV4aXN0aW5nUGF0aFRyYW5zaXRpb25cIikuZHVyYXRpb24oNzUwKS5hdHRyKFwic3Ryb2tlXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0dmFyIGMgPSBjb2xvclNjYWxlKGQuZ2V0V2VpZ2h0KCkpO1xuXHRcdFx0XHRcdHJldHVybiBjO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIHRoaXMgbGlua1xuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcbiAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0XG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ25ld1BhdGhBdHRyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBuZXdQYXRoQXR0cihkM3BhdGgsIGQpIHtcblx0XHRcdFx0dmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG5cdFx0XHRcdCAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblx0XHRcdFx0dGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0XHRcdFx0dmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzAsIHN0YXRlLm1heFdlaWdodF0pLnJhbmdlKFtcIiNmZmIzNjZcIiwgXCIjRjkyNjA2XCJdKTtcblxuXHRcdFx0XHRkM3BhdGgudHJhbnNpdGlvbihcIm5ld1BhdGhUcmFuc2l0aW9uXCIpLmR1cmF0aW9uKDc1MCkuYXR0clR3ZWVuKFwib3BhY2l0eVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkMy5pbnRlcnBvbGF0ZVN0cmluZygwLCAxKTtcblx0XHRcdFx0fSkuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHZhciBjID0gY29sb3JTY2FsZShkLmdldFdlaWdodCgpKTtcblx0XHRcdFx0XHRyZXR1cm4gYztcblx0XHRcdFx0fSkuYXR0cignZCcsIHRoaXMuYXJyb3dQYXRoLmNhbGwoZCkpO1xuXHRcdFx0fVxuXHRcdH1dKTtcblxuXHRcdHJldHVybiBWaXN1YWxpemVyTGluaztcblx0fShMaW5rLkxpbmspO1xuXG5cdHJldHVybiB7XG5cdFx0TGluazogVmlzdWFsaXplckxpbmtcblx0fTtcbn1dKTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJywgXG5cdCdjb250aXYuZ3JhcGgnXSlcbiAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24nLCB7XG4gICAgICAgICAgICB1cmw6ICcvdmlzdWFsaXphdGlvbicsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICB9XSk7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3Igbm9kZSBvYmplY3RzIGZvciB0aGUgZ3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gTm9kZSBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgbm9kZVxuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIG5vZGUgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBOb2RlIGFzIGtleVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdOb2RlJywgW2Z1bmN0aW9uICgpIHtcblx0dmFyIE5vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0LyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgeCBsb2NhdGlvblxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeSAgICAgICB5IGxvY2F0aW9uXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFRoZSB0ZXh0IHRvIGRpc3BsYXlcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1cyBvZiB0aGUgbm9kZVxuICAgKi9cblx0XHRmdW5jdGlvbiBOb2RlKHgsIHksIGlkLCB0ZXh0LCByYWRpdXMpIHtcblx0XHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlKTtcblxuXHRcdFx0dGhpcy54ID0geDtcblx0XHRcdHRoaXMueSA9IHk7XG5cdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdHRoaXMuaWQgPSBpZDtcblx0XHRcdHRoaXMudGV4dCA9IHRleHQ7XG5cdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdHRoaXMuaGFzUG9saWN5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLnBvbGljeSA9IG51bGw7XG5cdFx0XHR0aGlzLm5vZGVQb2xpY2llcyA9IFtdO1xuXHRcdFx0dGhpcy5ncmFwaCA9IG51bGw7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIENhbGxlZCB3aGVuIGEgbm9kZSBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICpcbiAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgYWRkZWQgdG9cbiAgICovXG5cblxuXHRcdF9jcmVhdGVDbGFzcyhOb2RlLCBbe1xuXHRcdFx0a2V5OiAnaW5pdGlhbGl6ZScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuXHRcdFx0XHRpZiAodGhpcy5pbml0aWFsaXplZCA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZ3JhcGggPSBncmFwaDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCBkdXJpbmcgdGhlIHVwZGF0ZSBncmFwaCBmb3IgZXhpc3RpbmcgbGlua3NcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgKi9cblxuXHRcdH0sIHtcblx0XHRcdGtleTogJ3VwZGF0ZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dHIoZDNub2RlLCBkKSB7XG5cdFx0XHRcdGQzbm9kZS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogQ2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgdXBkYXRlIGdyYXBoIGZvciBhIG5vZGVcbiAgICAqIEhvb2sgZm9yIHN1YiBjbGFzc2VzXG4gICAgKiBcbiAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3RcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnbmV3Tm9kZUF0dHInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5ld05vZGVBdHRyKGQzbm9kZSwgZCkge31cblxuXHRcdFx0LyoqXG4gICAgKiBTZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGUuXG4gICAgKlxuICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1c1xuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdzZXRSYWRpdXMnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHNldFJhZGl1cyhyYWRpdXMpIHtcblx0XHRcdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byBpbnN0YWxsIHBvbGljaWVzIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoaXNcbiAgICAqIG5vZGUgaGFzIGEgbW91c2UgZXZlbnRcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAnaW5zdGFsbE5vZGVQb2xpY3knLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxOb2RlUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMubm9kZVBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIG5vZGVcbiAgICAqXG4gICAgKiBAcGFyYW0gICAgICB7UG9saWN5fHN0cmluZ30gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcbiAgICAqL1xuXG5cdFx0fSwge1xuXHRcdFx0a2V5OiAndW5pbnN0YWxsTm9kZVBvbGljeScsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24gdW5pbnN0YWxsTm9kZVBvbGljeShwb2xpY3lSZW1vdmUpIHtcblx0XHRcdFx0dmFyIHBvbGljeVJlbW92ZU5hbWU7XG5cdFx0XHRcdHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cdFx0XHRcdGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF8odGhpc05vZGUubm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3ksIGluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG5cdFx0XHRcdFx0XHRwb2xpY3kuZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0dGhpc05vZGUubm9kZVBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKHRoaXNOb2RlLm5vZGVQb2xpY2llcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aGlzTm9kZS5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcbiAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgZXZlbnQgZm9yIHRoaXMgbm9kZVxuICAgICpcbiAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgICAgVGhlIG1vdXNlIGV2ZW50XG4gICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgZCAgICAgICAgIFRoZSBtYXRjaGluZyBub2RlIG9iamVjdFxuICAgICovXG5cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdub2RlUG9saWN5RXZlbnQnLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzLm5vZGVQb2xpY2llcywgZnVuY3Rpb24gKHBvbGljeSkge1xuXHRcdFx0XHRcdHBvbGljeVtldmVudF0oZDNub2RlLCBkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIE5vZGU7XG5cdH0oKTtcblxuXHRyZXR1cm4ge1xuXHRcdE5vZGU6IE5vZGVcblx0fTtcbn1dKTtcbid1c2Ugc3RyaWN0Jztcbi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIHZpZXdzLCBhbmQgY29tcG9uZW50c1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdkFwcCcsIFtcbiAgICAndWkucm91dGVyJyxcbiAgICAnY29udGl2LmxvZ2luJyxcbiAgICAnY29udGl2Lm1lbnUnLFxuICAgICdjb250aXYuZGFzaGJvYXJkJyxcbiAgICAnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJyxcbiAgICAnY29udGl2Lm5ldHdvcmtzJyxcbiAgICAnY29udGl2Lm5ldHdvcmtwb2xpY2llcycsXG4gICAgJ2NvbnRpdi5zZXJ2aWNlbGJzJyxcbiAgICAnY29udGl2Lm9yZ2FuaXphdGlvbnMnLFxuICAgICdjb250aXYuc2V0dGluZ3MnLFxuICAgICdjb250aXYudmlzdWFsaXphdGlvbidcbl0pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdicsIHtcbiAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgZmx1aWQgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSk7XG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAuanMubWFwXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgbm9kZSB0aGF0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgdmlzdWFsaXphdGlvbiB0YWIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdWaXN1YWxpemVyTm9kZScsIFsnTm9kZScsIGZ1bmN0aW9uIChOb2RlKSB7XG5cdHZhciBWaXN1YWxpemVyTm9kZSA9IGZ1bmN0aW9uIChfTm9kZSROb2RlKSB7XG5cdFx0X2luaGVyaXRzKFZpc3VhbGl6ZXJOb2RlLCBfTm9kZSROb2RlKTtcblxuXHRcdC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB4ICAgICAgIFx0eCBsb2NhdGlvblxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeSAgICAgICBcdHkgbG9jYXRpb25cbiAgICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgXHRUaGUgaWRlbnRpZmllclxuICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgdGV4dCAgICBcdFRoZSB0ZXh0IHRvIGRpc3BsYXlcbiAgICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgXHRUaGUgcmFkaXVzIG9mIHRoZSBub2RlXG4gICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBwYXJlbnQgICAgIFRoZSBwYXJlbnQgaWRcbiAgICogQHBhcmFtICAgICAge0FycmF5fSAgIGFuY2VzdG9ycyAgQXJyYXkgb2YgYW5jZXN0b3JzIElkXG4gICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB4U3RhcnQgICAgIHggbG9jIHRvIHN0YXJ0IGFuaW1hdGlvblxuICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeVN0YXJ0ICAgICB5IGxvYyB0byBzdGFydCBhbmltYXRpb25cbiAgICovXG5cdFx0ZnVuY3Rpb24gVmlzdWFsaXplck5vZGUoeCwgeSwgaWQsIHRleHQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMsIHhTdGFydCwgeVN0YXJ0KSB7XG5cdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlzdWFsaXplck5vZGUpO1xuXG5cdFx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmlzdWFsaXplck5vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaXN1YWxpemVyTm9kZSkpLmNhbGwodGhpcywgeCwgeSwgaWQsIHRleHQsIHJhZGl1cykpO1xuXG5cdFx0XHRfdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0XHRfdGhpcy5hbmNlc3RvcnMgPSBhbmNlc3RvcnM7XG5cdFx0XHRpZiAoeFN0YXJ0ID09IG51bGwpIHtcblx0XHRcdFx0X3RoaXMueFN0YXJ0ID0geDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF90aGlzLnhTdGFydCA9IHhTdGFydDtcblx0XHRcdH1cblx0XHRcdGlmICh5U3RhcnQgPT0gbnVsbCkge1xuXHRcdFx0XHRfdGhpcy55U3RhcnQgPSB5O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X3RoaXMueVN0YXJ0ID0geVN0YXJ0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIF90aGlzO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICBkICAgICAgICAgVGhlIG1hdGNoaW5nIE5vZGVcbiAgICovXG5cblxuXHRcdF9jcmVhdGVDbGFzcyhWaXN1YWxpemVyTm9kZSwgW3tcblx0XHRcdGtleTogJ25ld05vZGVBdHRyJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBuZXdOb2RlQXR0cihkM25vZGUsIGQpIHtcblx0XHRcdFx0dmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGg7XG5cdFx0XHRcdGlmICh0aGlzR3JhcGguY29uc3RzLmNvbnRhaW5lckNsYXNzICE9IG51bGwgJiYgdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0W2QuaWRdID09IG51bGwpIHtcblx0XHRcdFx0XHRkM25vZGUuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLmNvbnRhaW5lckNsYXNzLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkM25vZGUudHJhbnNpdGlvbihcIm5vZGVQb3NpdGlvblRyYW5zaXRpb25cIikuZHVyYXRpb24oNzUwKS5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoZC54U3RhcnQgIT0gbnVsbCAmJiBkLnlTdGFydCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHR2YXIgeFN0YXJ0ID0gZC54U3RhcnQ7XG5cdFx0XHRcdFx0XHR2YXIgeVN0YXJ0ID0gZC55U3RhcnQ7XG5cdFx0XHRcdFx0XHRkLnhTdGFydCA9IGQueDtcblx0XHRcdFx0XHRcdGQueVN0YXJ0ID0gZC55O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwidHJhbnNsYXRlKFwiICsgeFN0YXJ0ICsgXCIsXCIgKyB5U3RhcnQgKyBcIilcIiwgXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIiwgXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXG5cdFx0cmV0dXJuIFZpc3VhbGl6ZXJOb2RlO1xuXHR9KE5vZGUuTm9kZSk7XG5cblx0cmV0dXJuIHtcblx0XHROb2RlOiBWaXN1YWxpemVyTm9kZVxuXHR9O1xufV0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1lbnUnKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudScsIHtcbiAgICAgICAgICAgIHVybDogJy9tJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbWVudS9tZW51Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ01lbnVDdHJsIGFzIG1lbnVDdHJsJyxcbiAgICAgICAgICAgIHBhcmFtczogeyB1c2VybmFtZTogbnVsbCB9XG4gICAgICAgIH0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdNZW51Q3RybCcsIFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uICgkc3RhdGUsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICB2YXIgbWVudUN0cmwgPSB0aGlzO1xuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5sb2dpbicpO1xuICAgICAgICB9XG4gICAgICAgIG1lbnVDdHJsLnVzZXJuYW1lID0gJHN0YXRlUGFyYW1zLnVzZXJuYW1lO1xuICAgICAgICBtZW51Q3RybC5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVudUN0cmwuanMubWFwXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgdG8gYWRkIGEgc2VsZWN0IG5vZGUgZmVhdHVyZS5cbiAqIFN1cHBvcnRzIHNlbGVjdGluZyBtdWx0aXBsZSBub2RlcyBieSB1c2luZyB0aGUgY3RybCBrZXkuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdOb2RlU2VsZWN0aW9uUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgdmFyIE5vZGVTZWxlY3Rpb25Qb2xpY3kgPSBmdW5jdGlvbiAoX1BvbGljeSRQb2xpY3kpIHtcbiAgICAgICAgX2luaGVyaXRzKE5vZGVTZWxlY3Rpb25Qb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gTm9kZVNlbGVjdGlvblBvbGljeSgpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlU2VsZWN0aW9uUG9saWN5KTtcblxuICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChOb2RlU2VsZWN0aW9uUG9saWN5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTm9kZVNlbGVjdGlvblBvbGljeSkpLmNhbGwodGhpcywgXCJOb2RlU2VsZWN0aW9uUG9saWN5XCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAqIE92ZXJ3cml0ZXMgdGhlIG9uIGRyYWcgZXZlbnQgb2YgdGhlIGdyYXBoXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBcbiAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKE5vZGVTZWxlY3Rpb25Qb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KE5vZGVTZWxlY3Rpb25Qb2xpY3kucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTm9kZVNlbGVjdGlvblBvbGljeS5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cyA9IGdyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgY29uc3RzLnNlbGVjdGVkQ2xhc3MgPSBcInNlbGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgLy9vdmVyd3JpdHRpbmcgZ3JhcGgncyBub2RlIG9uIGRyYWcgZXZlbnQgdG8gc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vbW92aW5nIG11bHRpcGxlIG5vZGVzIGF0IG9uY2VcbiAgICAgICAgICAgICAgICB2YXIgZHJhZyA9IGdyYXBoLmRyYWc7XG4gICAgICAgICAgICAgICAgZHJhZy5vbignZHJhZycsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSBncmFwaDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDbGFzcyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeS5zZWxlY3RlZENsYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGQzLnNlbGVjdEFsbCgnLicgKyBzZWxlY3RlZENsYXNzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblswXS5pbmRleE9mKHRoaXMpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZChzZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gZDMuZXZlbnQuZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IGQzLmV2ZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIFtkLngsIGQueV0gKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGRzIHRoZSBnaXZlbiBub2RlIHRvIHRoZSBhcnJheSBvZiBzZWxlY3RlZCBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzTm9kZSAgICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgbm9kZURhdGEgIE1hdGNoaW5nIE5vZGUgb2JqZWN0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdhZGRTZWxlY3ROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTZWxlY3ROb2RlKGQzTm9kZSwgbm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgZDNOb2RlLmNsYXNzZWQoY29uc3RzLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGVkTm9kZXMucHVzaChub2RlRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBhcnJheSBvZiBzZWxlY3RlZCBub2Rlcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM05vZGUgICAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIG5vZGVEYXRhICBNYXRjaGluZyBub2RlIG9iamVjdCBcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3JlbW92ZVNlbGVjdEZyb21Ob2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTZWxlY3RGcm9tTm9kZShkM05vZGUsIG5vZGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmZpbHRlcihmdW5jdGlvbiAoY2QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNkLmlkID09PSBub2RlRGF0YS5pZDtcbiAgICAgICAgICAgICAgICB9KS5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKG5vZGVEYXRhKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyBhbGwgc2VsZWN0ZWQgbm9kZXMuXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdyZW1vdmVBbGxTZWxlY3RlZE5vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0ZWROb2RlcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9uIE1vdXNlZG93biwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3QgICAgICAgXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNlZG93bihkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKGQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0RnJvbU5vZGUoZDNub2RlLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkU2VsZWN0Tm9kZShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBubyBjb250cm9sIGtleSwgYW5kIGNsaWNrZWQgbm90IHNlbGVjdGVkIG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBvZiBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT24gTW91c2V1cCwgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICAgICAqIHNlbGVjdGVkIHN0YXR1cyBvZiB0aGUgY2xpY2tlZCBub2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIGQgICAgICAgTWF0Y2hpbmcgTm9kZSBPYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ21vdXNldXAnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNldXAoZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG4gICAgICAgICAgICAgICAgaWYgKCFkMy5ldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAxLCB0aGVuIHdlIGFyZSBtb3ZpbmcgbXVsdGlwbGUgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgLy9sZWF2ZSB0aGVtIGFsbCBoaWdobGlnaHRlZFxuICAgICAgICAgICAgICAgICAgICAvL290aGVyd2lzZSB3ZSBhcmUganVzdCBtb3Zpbmcgb25lIG5vZGUsIHNvIHVuaGlnaGxpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNlbGVjdEZyb21Ob2RlKGQzbm9kZSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICB9KFBvbGljeS5Qb2xpY3kpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBOb2RlU2VsZWN0aW9uUG9saWN5XG4gICAgfTtcbn1dKTtcblwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiAxMC8xOC8xNi5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBmb3Jtc18xID0gcmVxdWlyZShcIkBhbmd1bGFyL2Zvcm1zXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvbW1vblwiKTtcbnZhciBkaXJlY3RpdmVzX21vZHVsZV8xID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvZGlyZWN0aXZlcy9kaXJlY3RpdmVzLm1vZHVsZVwiKTtcbnZhciBzdG9yYWdlcG9saWN5bGlzdGN0cmxfMSA9IHJlcXVpcmUoXCIuL3N0b3JhZ2Vwb2xpY3lsaXN0Y3RybFwiKTtcbnZhciBTdG9yYWdlcG9saWN5TW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdG9yYWdlcG9saWN5TW9kdWxlKCkge1xuICAgIH1cbiAgICBTdG9yYWdlcG9saWN5TW9kdWxlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5OZ01vZHVsZSh7XG4gICAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgICAgZm9ybXNfMS5Gb3Jtc01vZHVsZSxcbiAgICAgICAgICAgICAgICBjb21tb25fMS5Db21tb25Nb2R1bGUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlc19tb2R1bGVfMS5EaXJlY3RpdmVzTW9kdWxlXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgc3RvcmFnZXBvbGljeWxpc3RjdHJsXzEuU3RvcmFnZXBvbGljeUxpc3RDb21wb25lbnRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBleHBvcnRzOiBbXG4gICAgICAgICAgICAgICAgc3RvcmFnZXBvbGljeWxpc3RjdHJsXzEuU3RvcmFnZXBvbGljeUxpc3RDb21wb25lbnRcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxuICAgIF0sIFN0b3JhZ2Vwb2xpY3lNb2R1bGUpO1xuICAgIHJldHVybiBTdG9yYWdlcG9saWN5TW9kdWxlO1xufSgpKTtcbmV4cG9ydHMuU3RvcmFnZXBvbGljeU1vZHVsZSA9IFN0b3JhZ2Vwb2xpY3lNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlcG9saWN5Lm1vZHVsZS5qcy5tYXBcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGNoYW5nZXMgdGhlIHZpZXcgdG8gdGhlIHRpbWVncmFwaCBvZiBsaW5rIGRhdGEgb24gY2xpY2suXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdQYXRoQ2hhbmdlVmlld1BvbGljeScsIFsnUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSkge1xuICAgIHZhciBQYXRoQ2hhbmdlVmlld1BvbGljeSA9IGZ1bmN0aW9uIChfUG9saWN5JFBvbGljeSkge1xuICAgICAgICBfaW5oZXJpdHMoUGF0aENoYW5nZVZpZXdQb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIHRvIGJ1aWxkIHBvbGljeVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICB7QW5ndWxhciBTdGF0ZX0gICAgJHN0YXRlICAgIFVzZWQgdG8gY2hhbmdlIHZpZXdcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFBhdGhDaGFuZ2VWaWV3UG9saWN5KCRzdGF0ZSkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdGhDaGFuZ2VWaWV3UG9saWN5KTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBhdGhDaGFuZ2VWaWV3UG9saWN5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGF0aENoYW5nZVZpZXdQb2xpY3kpKS5jYWxsKHRoaXMsICdQYXRoQ2hhbmdlVmlld1BvbGljeScpKTtcblxuICAgICAgICAgICAgX3RoaXMuJHN0YXRlID0gJHN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIGNoaWxkIGNvbnRhaW5lcnMgb2YgdGhlIHNlcnZpY2VcbiAgICAgICAgICogQ2FuIGhhbmRsZSBuZXN0ZWQgc2VydmljZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIE5vZGUgSURcbiAgICAgICAgICovXG5cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoUGF0aENoYW5nZVZpZXdQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdnZW5lcmF0ZUxpc3QnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlTGlzdChpZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgcmV0TGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBnZW5lcmF0ZUxpc3RIZWxwZXIgPSBmdW5jdGlvbiBnZW5lcmF0ZUxpc3RIZWxwZXIoaWQsIHJldExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHMgPSB0aGlzUG9saWN5LmdyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0W2lkXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRJZCA9IG5vZGVJZHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1BvbGljeS5ncmFwaC5kYXRhU291cmNlLmhhc0NoaWxkKGNoaWxkSWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlJldExpc3QgPSBnZW5lcmF0ZUxpc3RIZWxwZXIoY2hpbGRJZCwgcmV0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0TGlzdC5jb25jYXQoc3ViUmV0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QucHVzaChjaGlsZElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVMaXN0SGVscGVyKGlkLCByZXRMaXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0TGlzdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIHJlcm91dGUgYW4gZWRnZSB3aGVuIGNsaWNrZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7TGlua30gIGVkZ2UgICAgVGhlIGNsaWNrZWQgZWRnZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndmlld0VkZ2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZpZXdFZGdlKGVkZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZUlkID0gZWRnZS5zb3VyY2UuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gZWRnZS50YXJnZXQuaWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmFwaC5kYXRhU291cmNlLmhhc0NoaWxkKHNvdXJjZUlkKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvL05vdCBhIGNvbnRhaW5lciBub2RlLCBuZWVkIHRvIGFnZ3JlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0ID0gdGhpcy5nZW5lcmF0ZUxpc3Qoc291cmNlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3QgPSBbc291cmNlSWRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYXBoLmRhdGFTb3VyY2UuaGFzQ2hpbGQodGFyZ2V0SWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vTm90IGEgY29udGFpbmVyIG5vZGUsIG5lZWQgdG8gYWdncmVnYXRlXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExpc3QgPSB0aGlzLmdlbmVyYXRlTGlzdCh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGlzdCA9IFt0YXJnZXRJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuJHN0YXRlLmdvKCdjb250aXYubWVudS52aXN1YWxpemF0aW9uLmVkZ2UnLCB7IHNvdXJjZU5hbWU6IHNvdXJjZUlkLCB0YXJnZXROYW1lOiB0YXJnZXRJZCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGlzdDogc291cmNlTGlzdCwgdGFyZ2V0TGlzdDogdGFyZ2V0TGlzdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZWRvd24oZDNwYXRoLCBkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3RWRnZShkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBQYXRoQ2hhbmdlVmlld1BvbGljeTtcbiAgICB9KFBvbGljeS5Qb2xpY3kpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBQYXRoQ2hhbmdlVmlld1BvbGljeVxuICAgIH07XG59XSk7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5lZGdlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9lZGdlL3tzb3VyY2VOYW1lLCB0YXJnZXROYW1lLCBzb3VyY2VMaXN0LCB0YXJnZXRMaXN0fScsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExpc3Q6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdWaXN1YWxpemF0aW9uRWRnZUN0cmwgYXMgdmlzdWFsaXphdGlvbmVkZ2VDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2UuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignVmlzdWFsaXphdGlvbkVkZ2VDdHJsJywgW1wiJHNjb3BlXCIsIFwiJGh0dHBcIiwgJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnVmlzdWFsaXphdGlvblNlcnZpY2UnLCAnJGludGVydmFsJyxcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsIFZpc3VhbGl6YXRpb25TZXJ2aWNlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VOYW1lID0gJHN0YXRlUGFyYW1zLnNvdXJjZU5hbWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9ICRzdGF0ZVBhcmFtcy50YXJnZXROYW1lO1xuICAgICAgICAgICAgdmFyIHNvdXJjZUxpc3QgPSAkc3RhdGVQYXJhbXMuc291cmNlTGlzdDtcbiAgICAgICAgICAgIHZhciB0YXJnZXRMaXN0ID0gJHN0YXRlUGFyYW1zLnRhcmdldExpc3Q7XG5cbiAgICAgICAgICAgIC8vSWYgdGhlIHBhZ2UgaXMgcmVsb2FkZWQsIHRoZXNlIHN0YXRlIHBhcmFtcyBhcmUgYWxsIG51bGwsXG4gICAgICAgICAgICAvL3NvIGl0IHdpbGwgcm91dGUgdGhlbSBiYWNrIHRvIHRoZSB2aXN1YWxpemF0aW9uIHRhYiB0b3Agdmlld1xuICAgICAgICAgICAgaWYgKHNvdXJjZUxpc3QgPT0gbnVsbCB8fCB0YXJnZXRMaXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24ubGlzdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdmFyIHQgPSBkLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICRzY29wZS5lZGdlRGF0YUludGVydmFsID0gXG4gICAgICAgICAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBWaXN1YWxpemF0aW9uU2VydmljZS5nZXRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0LCB0LnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN1bHQucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHJlc3VsdHMsIGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gci5zZXJpZXNbMF0udmFsdWVzWzBdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRnZURhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGdlRGF0YVRpbWUgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICAgICAgLy9EZXN0cm95aW5nIHRoZSBpbnRlcnZhbCBmdW5jdGlvbiBvbiByb3V0ZSBjaGFuZ2VcbiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgeyAkaW50ZXJ2YWwuY2FuY2VsKCRzY29wZS5lZGdlRGF0YUludGVydmFsKTsgfSk7XG5cblxuICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0T2xkRWRnZURhdGEoc291cmNlTGlzdCwgdGFyZ2V0TGlzdClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdWx0LnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlZGdlRGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL3Jlc3VsdHMsIGlmIG5vdCBlbXB0eSwgYXJlIGV4cGVjdGVkIHRvIGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy82IGRhdGEgZW50cmllc1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0cywgZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHIuc2VyaWVzWzBdLnZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGVkZ2VEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZURhdGEucHVzaChkWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YSwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZURhdGFbaV0gKz0gZFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VOYW1lID0gc291cmNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlTGlzdCA9IHNvdXJjZUxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXRMaXN0ID0gdGFyZ2V0TGlzdDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9sZEVkZ2VEYXRhID0gZWRnZURhdGE7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XSk7XG5cblxuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIEJhc2UgcG9saWN5IGNsYXNzIGZvciB0aGUgZ3JhcGggb2JqZWN0XG4gKiBcbiAqIFBvbGljaWVzIGFyZSB1c2VkIHRvIGlzb2xhdGUgZmVhdHVyZXMgZm9yIGEgZ3JhcGguXG4gKiBQb2xpY2llcyBjYW4gYmUgaW5zdGFsbGVkIG9uIG5vZGVzLCBsaW5rcywgb3IgdGhlIGdyYXBoLlxuICogRWFjaCBwb2xpY3kgaGFzIGludGVyYWN0aW9uIGhhbmRsZXJzIHRoYXQgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIGdyYXBoXG4gKiBpZiBpbnN0YWxsZWQuIFBvbGljaWVzIGNhbiBhbHNvIG1vZGlmeSBncmFwaCBmdW5jdGlvbnMgKHNlZSBRVGlwUG9saWN5KS5cbiAqIE11bHRpcGxlIHBvbGljaWVzIGNhbiBiZSBpbnN0YWxsZWQgZm9yIGEgbm9kZSBvciBsaW5rLiBcbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gcG9saWN5LCBjcmVhdGUgYSBuZXcgZmFjdG9yeSB0aGF0IHVzZXMgdGhlIHBvbGljeVxuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIHBvbGljeS4gXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG9iamVjdCB3aXRoIFBvbGljeSBhcyBrZXksIGFuZCBcbiAqIGFkZCB0aGUgcG9saWN5IHRvIHRoZSBQb2xpY3lTZXJ2aWNlIGZhY3RvcnkuXG4gKiBcbiAqIEZvciBzYXZpbmcgc3RhdGUgb3IgY29uc3RzIGZvciB0aGUgcG9saWN5LCBjcmVhdGUgYSBuYW1lc3BhY2VcbiAqIGluIGdyYXBoLnN0YXRlIGFuZCBncmFwaC5jb25zdHMuXG4gKiBFeC4gXG4gKiAgICAgIGdyYXBoLnN0YXRlLm15UG9saWN5ID0ge307XG4gKiAgICAgIGdyYXBoLmNvbnN0cy5teVBvbGljeSA9IHt9O1xuICogICAgICBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1BvbGljeScsIFtmdW5jdGlvbiAoKSB7XG4gIHZhciBQb2xpY3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHBvbGljeU5hbWUgIFRoZSBwb2xpY3kgbmFtZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFBvbGljeShwb2xpY3lOYW1lKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9saWN5KTtcblxuICAgICAgdGhpcy5wb2xpY3lOYW1lID0gcG9saWN5TmFtZTtcbiAgICAgIHRoaXMuZ3JhcGggPSBudWxsO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBwb2xpY3kgaXMgaW5zdGFsbGVkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge0dyYXBofSAgZ3JhcGggICBUaGUgR3JhcGggdGhhdCB0aGUgcG9saWN5IGlzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGluc3RhbGxlZCBvblxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9saWN5LCBbe1xuICAgICAga2V5OiAnaW5pdGlhbGl6ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZXIsIG1lYW50IHRvIGJlIG92ZXJyaWRkZW4gaW4gc3ViY2xhc3Nlc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge2QzIG9iamVjdH0gICAgZDNvYmogICAgVGhlIGQzb2JqZWN0XG4gICAgICAgKiBAcGFyYW0gIHtOb2RlL0xpbmsvR3JhcGh9ICBkICAgVGhlIG9iamVjdCBpdCB3YXNcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWQgZm9yLiAgICBcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnbW91c2VvdmVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZW92ZXIoZDNvYmosIGQpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiAnZGJsY2xpY2snLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRibGNsaWNrKGQzb2JqLCBkKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbnRleHRtZW51JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb250ZXh0bWVudShkM29iaiwgZCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6ICdtb3VzZW91dCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91c2VvdXQoZDNvYmosIGQpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiAnbW91c2Vkb3duJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZWRvd24oZDNvYmosIGQpIHt9XG4gICAgfSwge1xuICAgICAga2V5OiAnbW91c2V1cCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91c2V1cChkM29iaiwgZCkge31cblxuICAgICAgLyoqXG4gICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgKiBVc2VkIHRvIHJlbW92ZSBhbnkgZWxlbWVudHMgb3IgYmluZGluZ3MgdGhlIHBvbGljeVxuICAgICAgICogaGFzIGFkZGVkLlxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge31cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9saWN5O1xuICB9KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBQb2xpY3k6IFBvbGljeVxuICB9O1xufV0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmRpcmVjdGl2ZShcInZpc3VhbGl6YXRpb25FZGdlXCIsIFsnJHdpbmRvdycsXG4gICAgICAgIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZpc3VhbGl6YXRpb25FZGdlRDMoc2NvcGUsIGQzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGJvZHlFbC5jbGllbnRXaWR0aCAtIDQwMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gIGJvZHlFbC5jbGllbnRIZWlnaHQgLSA0MDA7XG5cblxuICAgICAgICAgICAgICAgIC8vdGFrZW4gZnJvbSBodHRwOi8vYmwub2Nrcy5vcmcvc2ltZW5icmVra2VuLzY2MzQwNzBcbiAgICAgICAgICAgICAgICAvLyAvKiogTUFJTiBTVkcgKiovXG4gICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gNTksXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSA3NTAsXG4gICAgICAgICAgICAgICAgbm93ID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdvcmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZDMucmFuZ2UobGltaXQpLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLm9sZEVkZ2VEYXRhW01hdGguZmxvb3IoZC8xMCldIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGQzLnRpbWUuc2NhbGUoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSwgbm93IC0gZHVyYXRpb25dKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIGQzLm1heChncm91cHMuY3VycmVudC5kYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCArIDEwOyB9KV0pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAgICAgLmludGVycG9sYXRlKCdiYXNpcycpXG4gICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KG5vdyAtIChsaW1pdCAtIDEgLSBpKSAqIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkKVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciB4U3ZnID0gZDMuc2VsZWN0KCcuZ3JhcGgnKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDI1KVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ292ZXJmbG93JywgJ3Zpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHZhciB5QXhpcyA9IHhTdmcuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXG4gICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIHdpZHRoICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh5LmF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHkpLm9yaWVudCgnbGVmdCcpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc3ZnPSBkMy5zZWxlY3QoJy5ncmFwaCcpLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NoYXJ0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGggLSA1MClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCArIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLnN0eWxlKCdvdmVyZmxvdycsIFwidmlzaWJsZVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBheGlzID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4IGF4aXMnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KCdib3R0b20nKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBzdmcuYXBwZW5kKCdnJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLnBhdGggPSBwYXRocy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoW2dyb3VwLmRhdGFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgbmFtZSArICcgZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBncm91cC5jb2xvcilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5kYXRhLnB1c2goc2NvcGUuZWRnZURhdGEgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5wYXRoLmF0dHIoJ2QnLCBsaW5lKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2hpZnQgZG9tYWluXG4gICAgICAgICAgICAgICAgICAgIHguZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSAqIGR1cmF0aW9uLCBub3cgLSBkdXJhdGlvbl0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNsaWRlIHgtYXhpcyBsZWZ0XG4gICAgICAgICAgICAgICAgICAgIGF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgeUF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHkuYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2xpZGUgcGF0aHMgbGVmdFxuICAgICAgICAgICAgICAgICAgICBwYXRocy5hdHRyKCd0cmFuc2Zvcm0nLCBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhc2UoJ2xpbmVhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeChub3cgLSAobGltaXQgLSAxKSAqIGR1cmF0aW9uKSArICcpJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBvbGRlc3QgZGF0YSBwb2ludCBmcm9tIGVhY2ggZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpY2soKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VBJyxcbiAgICAgICAgICAgICAgICByZXBsYWNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2V0ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaEdyb3VwKFsnZWRnZURhdGEnLCAnb2xkRWRnZURhdGEnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5lZGdlRGF0YSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5vbGRFZGdlRGF0YSAhPSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmluaXRpYWxpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmluaXRpYWxpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQzID0gJHdpbmRvdy5kMzsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbkVkZ2VEMyhzY29wZSwgZDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXVxuKTtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbnRhaW5zIGFsbCB0aGUgcG9saWNpZXMuXG4gKiBTZWUgcG9saWN5LmpzIGZvciBpbmZvIG9uIGhvdyBwb2xpY2llcyB3b3JrLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJykuZmFjdG9yeSgnUG9saWN5U2VydmljZScsIFsnUG9saWN5JywgJ1FUaXBQb2xpY3knLCAnUGF0aENoYW5nZVZpZXdQb2xpY3knLCAnTm9kZVNlbGVjdGlvblBvbGljeScsICdTcGxpdEpvaW5Ob2RlUG9saWN5JywgJ1NwbGl0Sm9pblZpZXdQb2xpY3knLCAnU2F2ZVN0YXRlUG9saWN5JywgZnVuY3Rpb24gKFBvbGljeSwgUVRpcFBvbGljeSwgUGF0aENoYW5nZVZpZXdQb2xpY3ksIE5vZGVTZWxlY3Rpb25Qb2xpY3ksIFNwbGl0Sm9pbk5vZGVQb2xpY3ksIFNwbGl0Sm9pblZpZXdQb2xpY3ksIFNhdmVTdGF0ZVBvbGljeSkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBQb2xpY3kuUG9saWN5LFxuICAgICAgICBRVGlwUG9saWN5OiBRVGlwUG9saWN5LlBvbGljeSxcbiAgICAgICAgUGF0aENoYW5nZVZpZXdQb2xpY3k6IFBhdGhDaGFuZ2VWaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgTm9kZVNlbGVjdGlvblBvbGljeTogTm9kZVNlbGVjdGlvblBvbGljeS5Qb2xpY3ksXG4gICAgICAgIFNwbGl0Sm9pbk5vZGVQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3kuUG9saWN5LFxuICAgICAgICBTcGxpdEpvaW5WaWV3UG9saWN5OiBTcGxpdEpvaW5WaWV3UG9saWN5LlBvbGljeSxcbiAgICAgICAgU2F2ZVN0YXRlUG9saWN5OiBTYXZlU3RhdGVQb2xpY3kuUG9saWN5XG4gICAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuc2VydmljZSgnU3RhdGVTYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNhdmVkU3RhdGVzID0ge307XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKFwidmlzdWFsaXphdGlvbkdyYXBoXCIsIFsnJHdpbmRvdycsICckc3RhdGUnLCAnVmlzdWFsaXplckdyYXBoJywgJ1BvbGljeVNlcnZpY2UnLCAnVmlzdWFsaXplckRhdGFTb3VyY2UnLCAnU3RhdGVTYXZlJyxcbiAgICAgICAgZnVuY3Rpb24oJHdpbmRvdywgJHN0YXRlLCBWaXN1YWxpemVyR3JhcGgsIFBvbGljeVNlcnZpY2UsIFZpc3VhbGl6ZXJEYXRhU291cmNlLCBTdGF0ZVNhdmUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZpc3VhbGl6YXRpb25saXN0ZDMoc2NvcGUsIGVsZW0sIFZpc3VhbGl6ZXJHcmFwaCwgUG9saWN5U2VydmljZSwgVmlzdWFsaXplckRhdGFTb3VyY2UsIFN0YXRlU2F2ZSkge1xuICAgICAgICAgICAgICAgIC8vZG9uJ3QgcnVuIHVudGlsIGFsbCBpbml0aWFsaXphdGlvbiBjYWxscyBoYXZlIHJldHVybmVkXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLm5vZGVzID09PSB1bmRlZmluZWQgfHwgc2NvcGUubGlua3MgPT09IHVuZGVmaW5lZCB8fCBzY29wZS5jaGlsZHJlbl9zdHJ1Y3QgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICBzY29wZS5hbmNlc3RvcnNfc3RydWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgRGF0YVNvdXJjZVxuICAgICAgICAgICAgICAgIHZhciBkYXRhU291cmNlID0gbmV3IFZpc3VhbGl6ZXJEYXRhU291cmNlLkRhdGFTb3VyY2Uoc2NvcGUubm9kZXMsIHNjb3BlLmxpbmtzLCBzY29wZS5jaGlsZHJlbl9zdHJ1Y3QsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCwgc2NvcGUubGFiZWxzLCBzY29wZS5zZXJ2aWNlU2VsZWN0b3JzKTtcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlLnNldEFuY2VzdG9ycygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzLCBsaW5rcztcblxuICAgICAgICAgICAgICAgIHZhciB0b3BEYXRhID0gZGF0YVNvdXJjZS5nZXRUb3BMZXZlbEZsb3coKTtcbiAgICAgICAgICAgICAgICBub2RlcyA9IGRhdGFTb3VyY2UucHJvY2Vzc05vZGVEYXRhKHRvcERhdGEubm9kZURhdGEpO1xuICAgICAgICAgICAgICAgIGxpbmtzID0gZGF0YVNvdXJjZS5wcm9jZXNzTGlua0RhdGEodG9wRGF0YS5saW5rRGF0YSwgbm9kZXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGJvZHlFbC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gIGJvZHlFbC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAvKiogTUFJTiBTVkcgKiovXG4gICAgICAgICAgICAgICAgdmFyIHJhd1N2Zz1lbGVtLmZpbmQoJ3N2ZycpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICQocmF3U3ZnLnBhcmVudCgpKS5vZmZzZXQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBkaXZXaWR0aCA9ICQocmF3U3ZnLnBhcmVudCgpKS53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdChyYXdTdmdbMF0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZGl2V2lkdGgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCAtIG9mZnNldC50b3AgLSAyMCk7XG5cbiAgICAgICAgICAgICAgICAvL2luc3RhbGxpbmcgcG9saWNpZXNcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGggPSBuZXcgVmlzdWFsaXplckdyYXBoLkdyYXBoKHN2Zywgbm9kZXMsIGxpbmtzLCBkYXRhU291cmNlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5jaGlsZHJlbl9zdHJ1Y3QsIHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kobmV3IFBvbGljeVNlcnZpY2UuU2F2ZVN0YXRlUG9saWN5KFN0YXRlU2F2ZS5zYXZlZFN0YXRlcykpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kobmV3IFBvbGljeVNlcnZpY2UuUGF0aENoYW5nZVZpZXdQb2xpY3koJHN0YXRlKSk7XG4gICAgICAgICAgICAgICAgLy9RVGlwUG9saWN5IGlzIGZvciBib3RoIE5vZGVzIGFuZCBQYXRocywgaW5zdGFsbCBzYW1lIG9uZSBvbiBib3RoXG4gICAgICAgICAgICAgICAgdmFyIHFUaXBQb2xpY3kgPSBuZXcgUG9saWN5U2VydmljZS5RVGlwUG9saWN5KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShxVGlwUG9saWN5KTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KHFUaXBQb2xpY3kpO1xuICAgICAgICAgICAgICAgIHZhciBzcGxpdEpvaW5WaWV3UG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuU3BsaXRKb2luVmlld1BvbGljeSgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3koc3BsaXRKb2luVmlld1BvbGljeSk7XG4gICAgICAgICAgICAgICAgc3BsaXRKb2luVmlld1BvbGljeS5pbnN0YWxsQmFja0J1dHRvbigkKCcjYmFja0J1dHRvbicpKTtcbiAgICAgICAgICAgICAgICBzcGxpdEpvaW5WaWV3UG9saWN5Lmluc3RhbGxUaXRsZSgkKCcjZ3JhcGgtdGl0bGUnKSk7XG5cbiAgICAgICAgICAgICAgICAvL2xvYWQgb2xkIHZpZXcgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoU3RhdGVTYXZlLnNhdmVkU3RhdGVzKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JhcGggPSBzY29wZS52aXN1YWxpemF0aW9uR3JhcGg7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoLmxvYWQoU3RhdGVTYXZlLnNhdmVkU3RhdGVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICByZXN0cmljdDonRUEnLFxuICAgICAgICAgICAgICAgIHJlcGxhY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9udGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0pe1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykudW5iaW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguZGVzdHJveSgpO30pO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2hHcm91cChbJ25vZGVzJywgJ2xpbmtzJywgJ2NoaWxkcmVuX3N0cnVjdCcsICdhbmNlc3RvcnNfc3RydWN0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUubm9kZXMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5saW5rcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmNoaWxkcmVuX3N0cnVjdCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2NvcGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXN1YWxpemF0aW9ubGlzdGQzKHNjb3BlLCBlbGVtLCBWaXN1YWxpemVyR3JhcGgsIFBvbGljeVNlcnZpY2UsIFZpc3VhbGl6ZXJEYXRhU291cmNlLCBTdGF0ZVNhdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5kYXRhU291cmNlLmxpbmtzID0gc2NvcGUubGlua3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC51cGRhdGVMaW5rRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICBdXG4pO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGFkZHMgdG9vbHRpcCBmdW5jdGlvbmFsaXR5IHRvIG5vZGVzIGFuZCBsaW5rcy5cbiAqIFdoZW4gaW5zdGFsbGluZywgaW5zdGFsbCBvbiBib3RoIGxpbmtzIGFuZCBub2Rlcy5cbiAqIFxuICogVXNlcyB0aGUgcVRpcCBqUXVlcnkgcGx1Z2luXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdRVGlwUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgdmFyIFFUaXBQb2xpY3kgPSBmdW5jdGlvbiAoX1BvbGljeSRQb2xpY3kpIHtcbiAgICAgICAgX2luaGVyaXRzKFFUaXBQb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUVRpcFBvbGljeSgpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRVGlwUG9saWN5KTtcblxuICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChRVGlwUG9saWN5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUVRpcFBvbGljeSkpLmNhbGwodGhpcywgXCJRVGlwUG9saWN5XCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgKiBNb2RpZmllcyB0aGUgdXBkYXRlTmV3Tm9kZXMgYW5kIFxuICAgICAgICAgKiB1cGRhdGVOZXdQYXRocyBtZXRob2Qgb2YgdGhlIGdyYXBoIHRvIGluc3RhbGwgcXRpcFxuICAgICAgICAgKiBvbnRvIGVhY2ggbm9kZSBhbmQgcGF0aC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIG9uXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFFUaXBQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KFFUaXBQb2xpY3kucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUVRpcFBvbGljeS5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlFUaXBQb2xpY3kgPSB7fTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLm1vdXNlZG93biA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZ3JhcGguY29uc3RzLlFUaXBQb2xpY3kgPSB7fTtcblxuICAgICAgICAgICAgICAgIC8vVHJhY2tpbmcgbW91c2UgY2xpY2sgc3RhdGUgdG8gbWFrZSB0b29sdGlwXG4gICAgICAgICAgICAgICAgLy9kaXNhcHBlYXIgaWYgdGhlIG5vZGUgaXMgYmVpbmcgZHJhZ2dlZC5cbiAgICAgICAgICAgICAgICAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLm1vdXNldXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubW91c2V1cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9vdmVycmlkZSB1cGRhdGVOZXdOb2RlcyBhbmQgdXBkYXRlTmV3UGF0aHNcbiAgICAgICAgICAgICAgICAvL3RvIGluc3RhbGwgcXRpcFxuICAgICAgICAgICAgICAgIHZhciBncmFwaFVwZGF0ZU5ld05vZGVzID0gZ3JhcGgudXBkYXRlTmV3Tm9kZXM7XG4gICAgICAgICAgICAgICAgZ3JhcGgudXBkYXRlTmV3Tm9kZXMgPSBmdW5jdGlvbiAobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhVcGRhdGVOZXdOb2Rlcy5jYWxsKGdyYXBoLCBuZXdOb2Rlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlTmV3Tm9kZXMobmV3Tm9kZXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZ3JhcGhVcGRhdGVOZXdQYXRocyA9IGdyYXBoLnVwZGF0ZU5ld1BhdGhzO1xuICAgICAgICAgICAgICAgIGdyYXBoLnVwZGF0ZU5ld1BhdGhzID0gZnVuY3Rpb24gKG5ld1BhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoVXBkYXRlTmV3UGF0aHMuY2FsbChncmFwaCwgbmV3UGF0aHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZU5ld1BhdGhzKG5ld1BhdGhzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgYWxsIHFUaXBzIGZyb20gdGhlIERPTS5cbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBwb2xpY3kgaXMgdW5pbnN0YWxsZWQgb3JcbiAgICAgICAgICAgICAqIHRoZSBncmFwaCBpcyBkZXN0cm95ZWQuXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZpbmcgYWxsIHF0aXAgZnJvbSBET01cbiAgICAgICAgICAgICAgICAkKCdbaWRePVwicXRpcFwiXScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtlZXBpbmcgdHJhY2sgb2YgbW91c2Vkb3duIHN0YXRlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2QzT2JqZWN0fSAgZDNvYmogIFRoZSBkMyBwYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlL0xpbmt9ICBkICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW91c2Vkb3duKGQzb2JqLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RhdGUubW91c2Vkb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBLZWVwaW5nIHRyYWNrIG9mIG1vdXNlZG93biBzdGF0ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM09iamVjdH0gIGQzb2JqICBUaGUgZDMgcGJqZWN0XG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZS9MaW5rfSAgZCAgICAgVGhlIG1hdGNoaW5nIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdtb3VzZXVwJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZXVwKGQzb2JqLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RhdGUubW91c2Vkb3duID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3doZW5RVGlwQXZhaWxhYmxlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3aGVuUVRpcEF2YWlsYWJsZShjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSA1MDA7IC8vIG1zXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChkb2N1bWVudCkucXRpcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpc1BvbGljeS53aGVuUVRpcEF2YWlsYWJsZShjYWxsYmFjayksIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGludGVydmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiBOZXcgTm9kZXMgYXJlIGFkZGVkIGR1cmluZyB0aGVcbiAgICAgICAgICAgICAqIHVwZGF0ZSBncmFwaCBmdW5jdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM05vZGV9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2RlcyB0aGF0IGFyZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld05vZGVzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdOb2RlcyhuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXR0YWNoUVRpcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hdHRhY2hpbmcgcXRpcFxuICAgICAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc05vZGUgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiBub2RlIGhhcyBjaGlsZHJlbiwgdGhlbiBpdCBpcyBhIHNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbZC5pZF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBcIjxiPjx1PlNlbGVjdG9yczo8L2I+PC91PiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JNYXAgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5zZWxlY3RvcnNbZC5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0tleXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VsZWN0b3JNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzS2V5cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0ga2V5ICsgXCIgOiA8aT5cIiArIHNlbGVjdG9yTWFwW2tleV0gKyBcIjwvaT4sXFxuIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzS2V5cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb21tYSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiTm8gU2VsZWN0b3JzLCBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBcIjxiPjx1PkxhYmVsczo8L2I+PC91PiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxzTWFwID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UubGFiZWxzW2QuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNLZXlzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGxhYmVsc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNLZXlzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBrZXkgKyBcIiA6IDxpPlwiICsgbGFiZWxzTWFwW2tleV0gKyBcIjwvaT4sXFxuIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzS2V5cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb21tYSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiTm8gbGFiZWxzLCBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBsYXN0IGNvbW1hXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpc05vZGUpLnF0aXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFwaSA9ICQodGhpc05vZGUpLnF0aXAoJ2FwaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICQoJyNncmFwaENvbnRhaW5lcicpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gW29mZnNldC5sZWZ0ICsgKGQueCAqIHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkgKyB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKVswXSksIG9mZnNldC50b3AgKyAoZC55ICsgZC5yYWRpdXMpICogdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5zZXQoJ3Bvc2l0aW9uLnRhcmdldCcsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhc3RhdGUubW91c2Vkb3duO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2xvOiAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzOiAncXRpcC1ibHVlIHF0aXAtc2hhZG93J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXk6ICd0b3AgY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXQ6ICdib3R0b20gY2VudGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXQ6IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnbW91c2Vkb3duIG1vdXNlbGVhdmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2luY2FzZSBsaWJyYXJ5IGhhc24ndCBsb2FkZWQgeWV0XG4gICAgICAgICAgICAgICAgaWYgKCQoZG9jdW1lbnQpLnF0aXAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaFFUaXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoZW5RVGlwQXZhaWxhYmxlKGF0dGFjaFFUaXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiBuZXcgcGF0aHMgYXJlIGFkZGVkIGR1cmluZyB0aGVcbiAgICAgICAgICAgICAqIHVwZGF0ZSBncmFwaCBmdW5jdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM1BhdGh9ICBuZXdQYXRocyAgVGhlIG5ldyBwYXRocyB0aGF0IGFyZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBhZGRlZCB0byB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3VwZGF0ZU5ld1BhdGhzJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9pbmNhc2UgbGlicmFyeSBoYXNuJ3QgbG9hZGVkIHlldFxuICAgICAgICAgICAgICAgIGlmICgkKGRvY3VtZW50KS5xdGlwICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvL2FkZGluZyBxdGlwXG4gICAgICAgICAgICAgICAgICAgIG5ld1BhdGhzLmVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzUGF0aCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldHRpbmcgbWlkcG9pbnQgb2YgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGhFbCA9IGQzLnNlbGVjdCh0aGlzKS5ub2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlkcG9pbnQgPSBwYXRoRWwuZ2V0UG9pbnRBdExlbmd0aChwYXRoRWwuZ2V0VG90YWxMZW5ndGgoKSAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJldCA9IGQucXRpcEhlbHBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBcIkJ5dGVzOiBcIiArIGQuZ2V0V2VpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXNQYXRoKS5xdGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBtb3VzZSBpcyBkb3duLCBkb24ndCBsZXQgcXRpcCBzaG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXN0YXRlLm1vdXNlZG93bjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29sbzogJCgnI2dyYXBoQ29udGFpbmVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6ICdxdGlwLWJsdWUgcXRpcC1zaGFkb3cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteTogdGFyZ2V0UmV0Lm15LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2NlbnRlciBjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdtb3VzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdDogdGFyZ2V0UmV0LmFkanVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogJ21vdXNlZG93biBtb3VzZWxlYXZlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBRVGlwUG9saWN5O1xuICAgIH0oUG9saWN5LlBvbGljeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQb2xpY3k6IFFUaXBQb2xpY3lcbiAgICB9O1xufV0pO1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVmlzdWFsaXphdGlvbkxpc3RDdHJsIGFzIHZpc3VhbGl6YXRpb25MaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25saXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1Zpc3VhbGl6YXRpb25MaXN0Q3RybCcsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsICdWaXN1YWxpemF0aW9uU2VydmljZScsICckaW50ZXJ2YWwnLCBcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgVmlzdWFsaXphdGlvblNlcnZpY2UsICRpbnRlcnZhbCkge1xuICAgICAgICAgICAgLy90byBzZWUgdGhlIGV4cGVjdGVkIGZvcm1hdCB0byBiZSByZXR1cm5lZCBmcm9tIHRoZXNlIGNhbGxzLFxuICAgICAgICAgICAgLy9sb29rIGF0IGFwcC9jb21wb25lbnRzL2dyYXBob2JqZWN0cy9kYXRhc291cmNlL3Zpc3VhbGl6ZXJkYXRhc291cmNlLmpzXG4gICAgICAgICAgICB2YXIgc3VjY2Vzc0dyYXBoRGF0YUNhbGxiYWNrID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0LnJlc3VsdHNbMF0uc2VyaWVzLCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZHBvaW50ID0gc2VyaWVzLnRhZ3MuRW5kcG9pbnRJUDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gc2VyaWVzLnRhZ3MuUHJvdmlkZXJJUDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMobm9kZUlkcywgZW5kcG9pbnQpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHMucHVzaChlbmRwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMobm9kZUlkcywgcHJvdmlkZXIpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBsaW5rc1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlua091dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBzZXJpZXMudmFsdWVzWzBdWzJdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGlua091dCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rSW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogc2VyaWVzLnZhbHVlc1swXVsxXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBsaW5rcy5wdXNoKGxpbmtJbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVzID0gbm9kZXM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmtzID0gbGlua3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy9pbml0aWFsIGNhbGxcbiAgICAgICAgICAgIFZpc3VhbGl6YXRpb25TZXJ2aWNlLmdldEdyYXBoRGF0YSgpLnRoZW4oc3VjY2Vzc0dyYXBoRGF0YUNhbGxiYWNrLCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vd2lsbCBmYWlsIHNpbGVudGx5LCBncmFwaCB3b24ndCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsgJGludGVydmFsLmNhbmNlbCgkc2NvcGUuZ3JhcGhEYXRhSW50ZXJ2YWwpOyB9KTtcblxuICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0U3RydWN0dXJlRGF0YSgpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vdG8gc2VlIHRoZSBleHBlY3RlZCBmb3JtIG9mIGFuY2VzdG9yX3N0cnVjdCBhbmQgY2hpbGRyZW5fc3RydWN0LCBcbiAgICAgICAgICAgICAgICAvL2xvb2sgYXQgYXBwL2NvbXBvbmVudHMvZ3JhcGhvYmplY3RzL2RhdGFzb3VyY2UvdmlzdWFsaXplcmRhdGFzb3VyY2UuanNcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCA9IHJlc3VsdC5hbmNlc3RvcnNfc3RydWN0O1xuICAgICAgICAgICAgICAgICRzY29wZS5jaGlsZHJlbl9zdHJ1Y3QgPSByZXN1bHQuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgICRzY29wZS5sYWJlbHMgPSByZXN1bHQubGFiZWxzO1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXJ2aWNlU2VsZWN0b3JzID0gcmVzdWx0LnNlcnZpY2VTZWxlY3RvcnM7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vd2lsbCBmYWlsIHNpbGVudGx5LCBncmFwaCB3b24ndCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmZhY3RvcnkoJ1Zpc3VhbGl6YXRpb25TZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2VzIGEgZ2V0IHJlcXVlc3Qgd2l0aCB0aGUgdXJsIGFuZCBjb25maWcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB1cmwgICAgIFRoZSB1cmxcbiAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGNvbmZpZyAgVGhlIGNvbmZpZ3VyYXRpb25zXG4gICAgICAgICAqIEByZXR1cm4gICAgIHskSHR0cCBQcm9taXNlfSAgIFByb21pc2Ugb2YgdGhlIHJlcXVlc3RcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VHZXQodXJsLCBjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsLCBjb25maWcpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlcyBhIHBvc3QgcmVxdWVzdCB3aXRoIHRoZSB1cmwgYW5kIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHVybCAgICAgVGhlIHVybFxuICAgICAgICAgKiBAcGFyYW0gICAgICB7SlNPTn0gICAgZGF0YSAgICBUaGUgZGF0YVxuICAgICAgICAgKiBAcmV0dXJuICAgICB7JEh0dHAgUHJvbWlzZX0gICBQcm9taXNlIG9mIHRoZSByZXF1ZXN0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtYWtlUG9zdCh1cmwsIGRhdGEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogY29udmVydHMgdGhlIGRhdGEgaW50byB4LXd3dy1mcm9tLXVybGVuY29kZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7SlNPTn0gIG9iaiAgICAgSlNPTiBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybiAgICAge3N0cmluZ30gIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBzdHJpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gJycsIG5hbWUsIHZhbHVlLCBmdWxsU3ViTmFtZSwgc3ViTmFtZSwgc3ViVmFsdWUsIGlubmVyT2JqLCBpO1xuICAgICAgICAgICAgICAgIGZvciAobmFtZSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGk9MDsgaTx2YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgJ1snICsgaSArICddJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IHBhcmFtKGlubmVyT2JqKSArICcmJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChzdWJOYW1lIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtzdWJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsU3ViTmFtZSA9IG5hbWUgKyAnWycgKyBzdWJOYW1lICsgJ10nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmpbZnVsbFN1Yk5hbWVdID0gc3ViVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgKz0gcGFyYW0oaW5uZXJPYmopICsgJyYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgKz0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArICcmJztcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Lmxlbmd0aCA/IHF1ZXJ5LnN1YnN0cigwLCBxdWVyeS5sZW5ndGggLSAxKSA6IHF1ZXJ5O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICB1cmw6dXJsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzT2JqZWN0KGRhdGEpICYmIFN0cmluZyhkYXRhKSAhPT0gJ1tvYmplY3QgRmlsZV0nID8gcGFyYW0oZGF0YSkgOiBkYXRhO1xuICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3JhcGhEYXRhKCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnaW5mbHV4L3F1ZXJ5JztcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGRiOlwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTpcIlNFTEVDVCBCeXRlc0luLCBCeXRlc091dCwgRW5kcG9pbnRJUCwgUHJvdmlkZXJJUCBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEdST1VQIEJZICogTElNSVQgMVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlR2V0KHVybCwgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFN0cnVjdHVyZURhdGEoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdzZXJ2aWNlcyc7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUdldCh1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRXaGVyZVF1ZXJ5KHBvaW50cywgdHlwZSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gXCIoXCI7XG4gICAgICAgICAgICBxdWVyeSArPSB0eXBlICsgXCI9XCI7XG4gICAgICAgICAgICBxdWVyeSArPSBcIidcIiArIHBvaW50c1swXSArIFwiJyBcIjtcbiAgICAgICAgICAgIC8vc3RhcnRzIGF0IDEsIHNvIHdpbGwgbm90IHJ1biBpZiBsZW5ndGggaXMgMVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBxdWVyeSArPSAnT1IgJztcbiAgICAgICAgICAgICAgICBxdWVyeSArPSB0eXBlICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gXCInXCIgKyBwb2ludHNbaV0gKyBcIicgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyeSArPSBcIilcIjtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEVkZ2VEYXRhKHNvdXJjZUxpc3QsIHRhcmdldExpc3QsIHRpbWUpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZJU1VBTElaQVRJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICB1cmwgKz0gJ2luZmx1eC9xdWVyeSc7XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkYiA6IFwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTogXCJTRUxFQ1Qgc3VtKFwiICsgJ0J5dGVzT3V0JyArIFwiKSBmcm9tIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDE1cyBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCBcIkVuZHBvaW50SVBcIikgK1wiIEFORCBcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeSh0YXJnZXRMaXN0LCAnUHJvdmlkZXJJUCcpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJHUk9VUCBCWSB0aW1lKDIwcykgTElNSVQgMTsgU0VMRUNUIHN1bShcIiArICdCeXRlc0luJyArIFwiKSBmcm9tIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDE1cyBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCAnUHJvdmlkZXJJUCcpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgJ0VuZHBvaW50SVAnKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiR1JPVVAgQlkgdGltZSgyMHMpIGZpbGwoMCkgTElNSVQgMVwiXG4gICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VQb3N0KHVybCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBcblxuICAgICAgICBmdW5jdGlvbiBnZXRPbGRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0KSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdpbmZsdXgvcXVlcnknO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRiIDogXCJ0ZWxlZ3JhZlwiLFxuICAgICAgICAgICAgICAgICAgICBxOiBcIlNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNPdXQnICsgXCIpIEZST00gaHR0cGpzb25fc3Zjc3RhdHMgV0hFUkUgdGltZSA+IG5vdygpIC0gMW0gQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgXCJFbmRwb2ludElQXCIpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgXCJQcm92aWRlcklQXCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgR1JPVVAgQlkgdGltZSgxMHMpIGZpbGwoMCkgTElNSVQgNjsgU0VMRUNUIHN1bShcIiArICdCeXRlc0luJyArIFwiKSBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEFORCBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHNvdXJjZUxpc3QsIFwiUHJvdmlkZXJJUFwiKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsIFwiRW5kcG9pbnRJUFwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIEdST1VQIEJZIHRpbWUoMTBzKSBmaWxsKDApIExJTUlUIDZcIlxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlUG9zdCh1cmwsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEdyYXBoRGF0YTogZ2V0R3JhcGhEYXRhLFxuICAgICAgICAgICAgZ2V0U3RydWN0dXJlRGF0YTogZ2V0U3RydWN0dXJlRGF0YSxcbiAgICAgICAgICAgIGdldEVkZ2VEYXRhOiBnZXRFZGdlRGF0YSxcbiAgICAgICAgICAgIGdldE9sZEVkZ2VEYXRhOiBnZXRPbGRFZGdlRGF0YVxuICAgICAgICB9XG4gICAgfV0pO1xuXG5cblxuXG5cblxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGlzIHBvbGljeSBwcm92aWRlcyBhIHdheSBmb3IgcHJvcGVydGllcyB0byBiZSBzYXZlZCBcbiAqIGJldHdlZW4gdmlldyBjaGFuZ2VzXG4gKiBcbiAqIEl0IG1vZGlmaWVzIHRoZSBkZXN0cm95IGZ1bmN0aW9uIHRvIGFsc28gcGFzcyBpbiBhbiBvYmplY3QgdGhhdFxuICogd2lsbCBoYXZlIGFsbCBpdHMgcHJvcGVydGllcyBzYXZlZCBhbmQgd2lsbCBiZSBhdmFpbGFibGUgXG4gKiBvbiBncmFwaCBsb2FkLiBXaGVuIHNhdmluZyB2YXJpYWJsZXMgdG8gdGhlIG9iamVjdCwgbmFtZXNwYWNlIHdpdGhcbiAqIHRoZSBwb2xpY3kgbmFtZS5cbiAqIFxuICogVGhpcyBwb2xpY3kgbXVzdCBiZSBsb2FkZWQgZmlyc3QgaW4gb3JkZXIgZm9yIGl0IHNhdmVkIHZhcmlhYmxlcyBcbiAqIHRvIGJlIGxvYWRlZCB3aGVuIHRoZSB2aWV3IGNvbWVzIGJhY2sgdG8gdGhlIGdyYXBoXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKS5mYWN0b3J5KCdTYXZlU3RhdGVQb2xpY3knLCBbJ1BvbGljeScsIGZ1bmN0aW9uIChQb2xpY3kpIHtcbiAgICB2YXIgU2F2ZVN0YXRlUG9saWN5ID0gZnVuY3Rpb24gKF9Qb2xpY3kkUG9saWN5KSB7XG4gICAgICAgIF9pbmhlcml0cyhTYXZlU3RhdGVQb2xpY3ksIF9Qb2xpY3kkUG9saWN5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGFrZXMgaW4gdGhlIGFuZ3VsYXIgc2VydmljZSB0byB3aGljaCBpdCB3aWxsXG4gICAgICAgICAqIHNhdmUgaXQncyBwcm9wZXJ0aWVzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgc2F2ZWRTdGF0ZSAgT2JqZWN0IHRvIHNhdmUgXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIHRvXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBTYXZlU3RhdGVQb2xpY3koc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNhdmVTdGF0ZVBvbGljeSk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTYXZlU3RhdGVQb2xpY3kuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTYXZlU3RhdGVQb2xpY3kpKS5jYWxsKHRoaXMsICdTYXZlU3RhdGVQb2xpY3knKSk7XG5cbiAgICAgICAgICAgIF90aGlzLnNhdmVkU3RhdGUgPSBzYXZlZFN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAqIE1vZGlmaWVzIHRoZSBkZXN0cm95IG1ldGhvZCBcbiAgICAgICAgICogYW5kIGFkZHMgYSBsb2FkIG1ldGhvZCB0byB0aGUgZ3JhcGhcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIG9uXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFNhdmVTdGF0ZVBvbGljeSwgW3tcbiAgICAgICAgICAgIGtleTogJ2luaXRpYWxpemUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGdyYXBoLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kuZ3JhcGhEZXN0cm95LmNhbGwoZ3JhcGgsIHRoaXNQb2xpY3kuc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGdyYXBoLmxvYWQgPSBmdW5jdGlvbiAoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LmdyYXBoTG9hZC5jYWxsKGdyYXBoLCBzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgb3ZlcnJpZGUgdGhlIGdyYXBoJ3MgZGVmYXVsdCBkZXN0cm95LCB3aXRoIFxuICAgICAgICAgICAgICogdGhpcyBwb2xpY3kncyBzYXZlZFN0YXRlIHBhc3NlZCBpbi5cbiAgICAgICAgICAgICAqIENhbGxlZCB3aXRoIHRoaXMgYXMgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIHNhdmVkU3RhdGUgIFRoZSBzYXZlZCBzdGF0ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZ3JhcGhEZXN0cm95JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBncmFwaERlc3Ryb3koc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHROb2RlUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24gKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3kuZGVzdHJveShzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXNHcmFwaC5iaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKGtleSwgdGhpc0dyYXBoLmJpbmRpbmdzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBncmFwaCBhcyB0aGlzXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGhhdmUgYWxsIG90aGVyIHBvbGljaWVzIHVzZSB0aGUgbG9hZCBzdGF0ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBUaGUgc2F2ZWQgc3RhdGVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2dyYXBoTG9hZCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JhcGhMb2FkKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbGljeS5sb2FkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeS5sb2FkKHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbiAocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kubG9hZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3kubG9hZChzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFNhdmVTdGF0ZVBvbGljeTtcbiAgICB9KFBvbGljeS5Qb2xpY3kpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUG9saWN5OiBTYXZlU3RhdGVQb2xpY3lcbiAgICB9O1xufV0pO1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuLyoqXG4gKiBDcmVhdGVkIGJ5IGNzaGFtcHVyIG9uIDEwLzE4LzE2LlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIGZvcm1zXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvZm9ybXNcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29tbW9uXCIpO1xudmFyIGRpcmVjdGl2ZXNfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9kaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlXCIpO1xudmFyIHZvbHVtZWxpc3RjdHJsXzEgPSByZXF1aXJlKFwiLi92b2x1bWVsaXN0Y3RybFwiKTtcbnZhciB2b2x1bWVzZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi92b2x1bWVzZXJ2aWNlXCIpO1xudmFyIHZvbHVtZWRldGFpbHNjdHJsXzEgPSByZXF1aXJlKFwiLi92b2x1bWVkZXRhaWxzY3RybFwiKTtcbnZhciBWb2x1bWVNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZvbHVtZU1vZHVsZSgpIHtcbiAgICB9XG4gICAgVm9sdW1lTW9kdWxlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5OZ01vZHVsZSh7XG4gICAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgICAgZm9ybXNfMS5Gb3Jtc01vZHVsZSxcbiAgICAgICAgICAgICAgICBjb21tb25fMS5Db21tb25Nb2R1bGUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlc19tb2R1bGVfMS5EaXJlY3RpdmVzTW9kdWxlXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgdm9sdW1lbGlzdGN0cmxfMS5Wb2x1bWVMaXN0Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHZvbHVtZWRldGFpbHNjdHJsXzEuVm9sdW1lRGV0YWlsc0NvbXBvbmVudCxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBleHBvcnRzOiBbXG4gICAgICAgICAgICAgICAgdm9sdW1lbGlzdGN0cmxfMS5Wb2x1bWVMaXN0Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHZvbHVtZWRldGFpbHNjdHJsXzEuVm9sdW1lRGV0YWlsc0NvbXBvbmVudCxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBwcm92aWRlcnM6IFt2b2x1bWVzZXJ2aWNlXzEuVm9sdW1lU2VydmljZV1cbiAgICAgICAgfSksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxuICAgIF0sIFZvbHVtZU1vZHVsZSk7XG4gICAgcmV0dXJuIFZvbHVtZU1vZHVsZTtcbn0oKSk7XG5leHBvcnRzLlZvbHVtZU1vZHVsZSA9IFZvbHVtZU1vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZvbHVtZS5tb2R1bGUuanMubWFwXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgZm9yIHNwbGl0dGluZyBhIG5vZGUgaW50byBpdHMgY2hpbGRyZW4sXG4gKiBhbmQgam9pbmluZyB0aGVtIGJhY2sgdG8gdGhlaXIgcGFyZW50LlxuICogU3BsaXRzIG9uIGRvdWJsZSBjbGljaywgYW5kIGpvaW5zIG9uIHJpZ2h0IGNsaWNrLlxuICogSWYgbXVsdGlwbGUgbm9kZXMgYXJlIHNlbGVjdGVkIGF0IHRoZSB0aW1lIG9mIGEgc3BsaXQgb3Igam9pbiBldmVudCxcbiAqIGl0IHdpbGwgc3BsaXQgb3Igam9pbiBhbGwgb2YgdGhlbS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpLmZhY3RvcnkoJ1NwbGl0Sm9pbk5vZGVQb2xpY3knLCBbJ05vZGVTZWxlY3Rpb25Qb2xpY3knLCAnVmlzdWFsaXplck5vZGUnLCBmdW5jdGlvbiAoTm9kZVNlbGVjdGlvblBvbGljeSwgVmlzdWFsaXplck5vZGUpIHtcbiAgICB2YXIgU3BsaXRKb2luTm9kZVBvbGljeSA9IGZ1bmN0aW9uIChfTm9kZVNlbGVjdGlvblBvbGljeSQpIHtcbiAgICAgICAgX2luaGVyaXRzKFNwbGl0Sm9pbk5vZGVQb2xpY3ksIF9Ob2RlU2VsZWN0aW9uUG9saWN5JCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFNwbGl0Sm9pbk5vZGVQb2xpY3koKSB7XG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3BsaXRKb2luTm9kZVBvbGljeSk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTcGxpdEpvaW5Ob2RlUG9saWN5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3BsaXRKb2luTm9kZVBvbGljeSkpLmNhbGwodGhpcykpO1xuXG4gICAgICAgICAgICBfdGhpcy5wb2xpY3lOYW1lID0gXCJTcGxpdEpvaW5Ob2RlUG9saWN5XCI7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaFxuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhTcGxpdEpvaW5Ob2RlUG9saWN5LCBbe1xuICAgICAgICAgICAga2V5OiAnaW5pdGlhbGl6ZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShncmFwaCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2dldChTcGxpdEpvaW5Ob2RlUG9saWN5LnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNwbGl0Sm9pbk5vZGVQb2xpY3kucHJvdG90eXBlKSwgJ2luaXRpYWxpemUnLCB0aGlzKS5jYWxsKHRoaXMsIGdyYXBoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBncmFwaC5zdGF0ZS5TcGxpdEpvaW5Ob2RlUG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgc3RhdGUuc3BsaXROb2RlcyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyaWdnZXJpbmcgc3BsaXQgb24gZG91YmxlIGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2RibGNsaWNrJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkYmxjbGljayhkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3VwZXJTdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5Ob2RlUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkMy5ldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXBlclN0YXRlLnNlbGVjdGVkTm9kZXMuaW5kZXhPZihkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGl0TXVsdGlwbGVOb2RlcyhzdXBlclN0YXRlLnNlbGVjdGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGl0Tm9kZShkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmlnZ2VyaW5nIGpvaW4gb24gcmlnaHQgY2xpY2tcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmp9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgZCAgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnY29udGV4dG1lbnUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRleHRtZW51KGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdXBlclN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG4gICAgICAgICAgICAgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWQzLmV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0cnkgdG8gam9pbiBhIGhpZ2hsaWdodGVkIG5vZGUgd2hpbGUgbXVsdGlwbGUgbm9kZXMgYXJlIHNlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAvL3dlIGpvaW4gYWxsIGhpZ2hsaWdodGVkIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE5vZGVzID0gc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWROb2Rlcy5pbmRleE9mKGQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuam9pbk5vZGUoc2VsZWN0ZWROb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHdlIHRyeSB0byBqb2luIGEgbm9kZSB0aGF0IGlzbid0IHBhcnQgb2YgYSBoaWdobGlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3dlIHJlbW92ZSBhbGwgaGlnaGxpZ2h0cyBhbmQgdGhlbiBqb2luIHRoZSBjbGlja2VkIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsU2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qb2luTm9kZShkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcGxpdHMgYSBub2RlLlxuICAgICAgICAgICAgICogdXNlZCB0byBzaGFyZSBjb2RlIGJldHdlZW4gc3BsaXROb2RlIGFuZCBzcGxpdE11bHRpcGxlTm9kZXNcbiAgICAgICAgICAgICAqIHdoaWxlIHByZXZlbnRpbmcgdGhlIGhhbmRsZXJzIGZvciB0aGVtIGJvdGggZmlyaW5nXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZSAgICBUaGUgbm9kZSBiZWluZyBzcGxpdFxuICAgICAgICAgICAgICogQHJldHVybiAgICAge0FycmF5fSAgVGhlIG5ldyBub2RlcyBjcmVhdGVkIGJ5IHRoZSBzcGxpdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnX19zcGxpdE5vZGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9fc3BsaXROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBjaGlsZHJlbiB0byBzcGxpdCBpbnRvXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdFtuYW1lXSA9PT0gdW5kZWZpbmVkIHx8IF8uaXNFbXB0eShjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3JlbW92aW5nIHRoZSBub2RlIGZyb20gdGhlIGxpc3Qgb2Ygbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSBfLmZpbHRlcih0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChncmFwaE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBncmFwaE5vZGVzICE9IG5vZGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpc0dyYXBoLm5vZGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgLy9nZXR0aW5nIGFsbCB0aGUgbm9kZSBpZCdzIGZvciBmaW5kaW5nIGZsb3dcbiAgICAgICAgICAgICAgICB2YXIgbm9kZV9uYW1lc19zZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zZXQgb2Ygbm9kZXMgYWZ0ZXIgdGhlIHNwbGl0XG4gICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5fc3RydWN0W25hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2goY2hpbGRyZW5fc3RydWN0W25hbWVdW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3X25vZGVzLnB1c2goY2hpbGRyZW5fc3RydWN0W25hbWVdW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzX3NldCk7XG5cbiAgICAgICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0YSBmb3IgbmV3IG5vZGVzXG4gICAgICAgICAgICAgICAgdmFyIHhMb2MgPSBub2RlLng7XG4gICAgICAgICAgICAgICAgdmFyIHlMb2MgPSBub2RlLnk7XG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IG5vZGUuYW5jZXN0b3JzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgLy9rZWVwaW5nIG9yZGVyaW5nIHRoYXQgZmlyc3QgaW4gYW5jZXN0b3IgbGlzdCBpcyBjbG9zZXN0IGluIHJlbGF0aW9uc2hpcFxuICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5zcGxpY2UoMCwgMCwgbm9kZS5pZCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlX29ianMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gbm9kZS5yYWRpdXMgKiB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5O1xuICAgICAgICAgICAgICAgIHZhciBub2RlRGF0YSA9IHJldERhdGEubm9kZURhdGE7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvL2NhbGN1bGF0aW5nIHdoaWNoIG9mIHRoZSBub2RlcyBpbiByZXREYXRhWzBdIGFyZSBuZXdcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld19ub2Rlcy5pbmRleE9mKG5vZGVEYXRhW2ldLmlkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBub2RlRGF0YVtpXS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gbm9kZURhdGFbaV0udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKG51bGwsIG51bGwsIGlkLCB0ZXh0LCByYWRpdXMsIHBhcmVudCwgYW5jZXN0b3JzLCB4TG9jLCB5TG9jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19ub2RlLmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5wdXNoKG5ld19ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19ub2RlX29ianMucHVzaChuZXdfbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHJldERhdGEubGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnNwbGl0Tm9kZXMucHVzaChub2RlLmlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3X25vZGVfb2JqcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcGxpdHMgdGhlIGdpdmUgbm9kZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZSAgICBUaGUgbm9kZSBiZWluZyBzcGxpdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc3BsaXROb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpdE5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fc3BsaXROb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3BsaXROb2RlRXZlbnQocmVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcGxpdHMgYWxsIHRoZSBub2RlcyBwYXNzZWQgaW5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlcyAgIEFycmF5IG9mIG5vZGVzIHRvIGJlIHNwbGl0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpdE11bHRpcGxlTm9kZXMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0TXVsdGlwbGVOb2Rlcyhub2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHZhciByZXNOb2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX19zcGxpdE5vZGUobm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICByZXNOb2RlcyA9IHJlc05vZGVzLmNvbmNhdChyZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc3BsaXRNdWx0aXBsZU5vZGVzRXZlbnQocmVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBzcGxpdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzcGxpdE5vZGVFdmVudCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXROb2RlRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc2V0UG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIG11bHRpcGxlIG5vZGVzIGFyZSBzcGxpdCBhdCBvbmNlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbmV3Tm9kZXMgIFRoZSBuZXcgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NwbGl0TXVsdGlwbGVOb2Rlc0V2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpdE11bHRpcGxlTm9kZXNFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB1c2VkIHRvIHNoYXJlIGNvZGUgYmV0d2VlbiBqb2luTm9kZSBhbmQgam9pbk11bHRpcGxlTm9kZVxuICAgICAgICAgICAgICogd2hpbGUgcHJldmVudGluZyBib3RoIGhhbmRsZXJzIGZpcmluZ1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICAgICAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gIFRoZSBuZXcgbm9kZSBhZnRlciB0aGUgam9pblxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnX19qb2luTm9kZScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX19qb2luTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pbk5vZGVQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAvL2NoZWNrIHRoYXQgbm9kZSBzdGlsbCBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLm5vZGVzLmluZGV4T2Yobm9kZSkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBub2RlLmlkO1xuICAgICAgICAgICAgICAgIC8vaWYgaXQgaGFzIG5vIGFuY2VzdG9yLCBub3RoaW5nIHRvIGpvaW5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5fc3RydWN0LnRvcExldmVsLmluZGV4T2YobmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHRvX2JlX2RlbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZV9uYW1lc19zZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG5vZGUgd29uJ3QgYmUgY29sbGFwc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXNbaV0uYW5jZXN0b3JzLmluZGV4T2Yobm9kZS5wYXJlbnQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b19iZV9kZWxldGVkLnB1c2godGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVfaWQgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICBub2RlX25hbWVzX3NldC5wdXNoKG5vZGUucGFyZW50KTtcblxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRhXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG5vZGUucmFkaXVzIC8gdGhpc0dyYXBoLmNvbnN0cy5yYWRpdXNEZWNheTtcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5hbmNlc3RvcnNbMV07XG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IG5vZGUuYW5jZXN0b3JzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKHhMb2MsIHlMb2MsIG5ld19ub2RlX2lkLCBuZXdfbm9kZV9pZCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzX3NldCk7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG5vZGVzIHRoYXQgd2lsbCBiZSBqb2luZWRcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvX2JlX2RlbGV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVfdG9fZGVsZXRlID0gdG9fYmVfZGVsZXRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlX3RvX2RlbGV0ZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGVfdG9fZGVsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHJldERhdGEubGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnNwbGl0Tm9kZXMuc3BsaWNlKHN0YXRlLnNwbGl0Tm9kZXMuaW5kZXhPZihuZXdfbm9kZS5pZCksIDEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld19ub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEpvaW5zIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIHRvIGpvaW5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2pvaW5Ob2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSB0aGlzLl9fam9pbk5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld05vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmpvaW5Ob2RlRXZlbnQobmV3Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEpvaW5zIGFsbCB0aGUgZ2l2ZW4gbm9kZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlcyAgIFRoZSBub2RlcyB0byBqb2luXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdqb2luTXVsdGlwbGVOb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luTXVsdGlwbGVOb2RlKG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX19qb2luTm9kZShub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld19ub2Rlcy5wdXNoKHJlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuam9pbk11bHRpcGxlTm9kZXNFdmVudChuZXdfbm9kZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBhZnRlciBhIHNpbmdsZSBub2RlIGlzIGpvaW5lZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbmV3Tm9kZSAgVGhlIG5ldyBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdqb2luTm9kZUV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luTm9kZUV2ZW50KG5ld05vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgbXVsdGlwbGUgbm9kZXMgYXJlIGpvaW5lZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdqb2luTXVsdGlwbGVOb2Rlc0V2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luTXVsdGlwbGVOb2Rlc0V2ZW50KG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGg7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gU3BsaXRKb2luTm9kZVBvbGljeTtcbiAgICB9KE5vZGVTZWxlY3Rpb25Qb2xpY3kuUG9saWN5KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIFBvbGljeTogU3BsaXRKb2luTm9kZVBvbGljeVxuICAgIH07XG59XSk7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgdG8gY2hhbmdlIHRoZSB2aWV3IHRvIGZvY3VzIG9uIHNwbGl0dGluZyBhbmQgXG4gKiBqb2luaW5nIGV2ZW50cy5cbiAqIE92ZXJyaWRlcyB0aGUgY2VydGFpbiBmb3JjZSBsYXlvdXQgZnVuY3Rpb25zIG9mIHRoZSBncmFwaCB0byBwYXJ0aXRpb24gYSBzcGxpdFxuICogaW50byB0aGUgZm9jdXNlZCBub2RlcyBhbmQgdGhlIGNvbm5lY3RlZCBub2Rlcy5cbiAqIFxuICogSGFzIHNhdmUvbG9hZCBtZXRob2RzIGZvciB0aGUgc2F2ZSBzdGF0ZSBwb2xpY3kuXG4gKiBIYXMgYmFjayBidXR0b24gc3VwcG9ydC5cbiAqIENhbiBhdXRvIGNoYW5nZSB0aGUgdGl0bGUgb2YgdGhlIGdyYXBoLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJykuZmFjdG9yeSgnU3BsaXRKb2luVmlld1BvbGljeScsIFsnU3BsaXRKb2luTm9kZVBvbGljeScsICdWaXN1YWxpemVyTm9kZScsIGZ1bmN0aW9uIChTcGxpdEpvaW5Ob2RlUG9saWN5LCBWaXN1YWxpemVyTm9kZSkge1xuICAgIHZhciBTcGxpdEpvaW5WaWV3UG9saWN5ID0gZnVuY3Rpb24gKF9TcGxpdEpvaW5Ob2RlUG9saWN5JCkge1xuICAgICAgICBfaW5oZXJpdHMoU3BsaXRKb2luVmlld1BvbGljeSwgX1NwbGl0Sm9pbk5vZGVQb2xpY3kkKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gU3BsaXRKb2luVmlld1BvbGljeSgpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGxpdEpvaW5WaWV3UG9saWN5KTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNwbGl0Sm9pblZpZXdQb2xpY3kuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTcGxpdEpvaW5WaWV3UG9saWN5KSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgICAgIF90aGlzLnBvbGljeU5hbWUgPSBcIlNwbGl0Sm9pblZpZXdQb2xpY3lcIjtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBwb2xpY3kgaXMgaW5zdGFsbGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFNwbGl0Sm9pblZpZXdQb2xpY3ksIFt7XG4gICAgICAgICAgICBrZXk6ICdpbml0aWFsaXplJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKGdyYXBoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfZ2V0KFNwbGl0Sm9pblZpZXdQb2xpY3kucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3BsaXRKb2luVmlld1BvbGljeS5wcm90b3R5cGUpLCAnaW5pdGlhbGl6ZScsIHRoaXMpLmNhbGwodGhpcywgZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zYXZlZFN0YXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIHN0YXRlLmZvY3VzR3JvdXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jaSA9IFtdO1xuICAgICAgICAgICAgICAgIHN0YXRlLnpvb21zID0ge307XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0ID0ge307XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0RGVmYXVsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbURlZmF1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVJZHNUb1Jlc2hvdyA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICB2YXIgY29uc3RzID0gZ3JhcGguY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdHMuYm91bmRhcnkgPSAwLjg7XG5cbiAgICAgICAgICAgICAgICAvL292ZXJyaWRpbmcgZDNmb3JjZSBtZXRob2RzIG9mIHRoZSBncmFwaC5cbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlQm91bmRzID0gdGhpcy5kM0ZvcmNlQm91bmRzO1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VUaWNrID0gdGhpcy5kM0ZvcmNlVGljaztcbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlU3RhcnQgPSB0aGlzLmQzRm9yY2VTdGFydDtcbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlRW5kID0gdGhpcy5kM0ZvcmNlRW5kO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExpbmtzIHRoZSBwcm92aWRlZCBlbGVtZW50IGEgYmFjayBidXR0b24gZmVhdHVyZVxuICAgICAgICAgICAgICogRG9lc24ndCB0cmlnZ2VyIHRoZSBvbi1jbGljayBldmVudFxuICAgICAgICAgICAgICogVGhhdCBzaG91bGQgYmUgZG9uZSB0aHJvdWdoIGFuZ3VsYXIgbmctY2xpY2suXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2pRdWVyeX0gIGVsZW0gICAgVGhlIGpxdWVyeSBzZWxlY3RlZCBlbGVtZW50XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdpbnN0YWxsQmFja0J1dHRvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbEJhY2tCdXR0b24oZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtID0gZWxlbTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudW5kb0xhc3RFdmVudC5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGFsbG93IHRoaXMgcG9saWN5IHRvIGNoYW5nZSB0aGUgdGl0bGUgb2YgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBhcyBzcGxpdCBhbmQgam9pbiBldmVudHMgb2NjdXIuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2pRdWVyeX0gIGVsZW0gICAgVGhlIGpxdWVyeSBzZWxlY3RlZCBlbGVtZW50XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdpbnN0YWxsVGl0bGUnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxUaXRsZShlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS50aXRsZUVsZW0gPSBlbGVtO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgc2F2ZWRTdGF0ZSAgQW55IHByb3BlcnR5IG9uIHRoaXNcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2lsbCBiZSBhY2Nlc3NpYmxlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgdmlldyByZWxvYWRzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvL09ubHkgaWYgdGhlIHNhdmUgc3RhdGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICAgIGlmIChzYXZlZFN0YXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIHNhdmUgdGhlIGN1cnJlbnQgc3RhdGUsIGFuZCBhbGwgaGlzdG9yeS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgc2F2ZWRTdGF0ZSAgQW55IHByb3BlcnR5IG9uIHRoaXNcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2lsbCBiZSBhY2Nlc3NpYmxlXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgdmlldyByZWxvYWRzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzYXZlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSB0aGlzR3JhcGgubGlua3M7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJUaXRsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJUaXRsZSA9IHN0YXRlLnRpdGxlRWxlbS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmb2N1c0dyb3VwcyA9IHN0YXRlLmZvY3VzR3JvdXBzO1xuICAgICAgICAgICAgICAgIHZhciBldmVudEhpc3RvcnkgPSBzdGF0ZS5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgICAgICAgdmFyIHpvb21zID0gc3RhdGUuem9vbXM7XG4gICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHN0YXRlLmxheW91dDtcblxuICAgICAgICAgICAgICAgIHZhciBsYXlvdXREZWZhdWx0ID0gc3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICB2YXIgem9vbURlZmF1bHQgPSBzdGF0ZS56b29tRGVmYXVsdDtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0geyBub2Rlczogbm9kZXMsIGxpbmtzOiBsaW5rcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVzOiBzdGF0ZS5zYXZlZFN0YXRlcywgY3VyclRpdGxlOiBjdXJyVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzR3JvdXBzOiBmb2N1c0dyb3VwcyxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIaXN0b3J5OiBldmVudEhpc3RvcnksIHpvb21zOiB6b29tcyxcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQsIGxheW91dERlZmF1bHQ6IGxheW91dERlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgIHpvb21EZWZhdWx0OiB6b29tRGVmYXVsdCB9O1xuICAgICAgICAgICAgICAgIHNhdmVkU3RhdGUuU3BsaXRKb2luVmlld1BvbGljeSA9IHJldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyByZWxvYWRlZCwgYXNzdW1pbmdcbiAgICAgICAgICAgICAqIHNhdmUgc3RhdGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBsb2FkU3RhdGUgIENvbnRhaW5zIGFsbCB0aGUgc2F2ZWRcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnbG9hZCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZChsb2FkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICBsb2FkU3RhdGUgPSBsb2FkU3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zYXZlZFN0YXRlcyA9IGxvYWRTdGF0ZS5zdGF0ZXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gbG9hZFN0YXRlLmxpbmtzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlcyA9IGxvYWRTdGF0ZS5ub2RlcztcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyVGl0bGUgPSBsb2FkU3RhdGUuY3VyclRpdGxlO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS50aXRsZUVsZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50aXRsZUVsZW0udGV4dChjdXJyVGl0bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkgPSBsb2FkU3RhdGUuZXZlbnRIaXN0b3J5O1xuICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzID0gbG9hZFN0YXRlLmZvY3VzR3JvdXBzO1xuICAgICAgICAgICAgICAgIHN0YXRlLnpvb21zID0gbG9hZFN0YXRlLnpvb21zO1xuICAgICAgICAgICAgICAgIHN0YXRlLmxheW91dCA9IGxvYWRTdGF0ZS5sYXlvdXQ7XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0RGVmYXVsdCA9IGxvYWRTdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgIHN0YXRlLnpvb21EZWZhdWx0ID0gbG9hZFN0YXRlLnpvb21EZWZhdWx0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJhY2tCdXR0b25FbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbS5mYWRlVG8oJ3Nsb3cnLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2xvYWRpbmcgYSBwcmV2aW91cyBsYXlvdXRcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0ID0gc3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSBzdGF0ZS56b29tRGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh6b29tWzBdLCB6b29tWzFdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHN0YXRlLnpvb21zW3N0YXRlLmZvY3VzR3JvdXBzXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHpvb20gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh6b29tWzBdLCB6b29tWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQgPSBzdGF0ZS5sYXlvdXRbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vbGF5b3V0IGNhbid0IGJlIG51bGxcbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbGF5b3V0W24uaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxheW91dCwgbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbi54ID0gcG9zLng7XG4gICAgICAgICAgICAgICAgICAgIG4ueSA9IHBvcy55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5pbml0Rm9yY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaC5jYWxsKHRoaXNHcmFwaCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZUdyYXBoQ2FsbGJhY2suY2FsbCh0aGlzUG9saWN5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmlnZ2VyaW5nIHNwbGl0IG9uIGRvdWJsZSBjbGlja1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBGb2N1cyBncm91cCBzdG9yZXMgdGhlIG5vZGUgdGhhdCBpcyBhYm91dCB0byBiZSBzcGxpdC5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogV2hlbiBmb2N1cyBncm91cCBoYXMgbGVuZ3RoIDAsIHRoZSBmaXJzdCBzcGxpdCBcbiAgICAgICAgICAgICAqIHdpbGwganVzdCBiZSBwdXNoZWQgb24uXG4gICAgICAgICAgICAgKiBUaGUgbm9kZSB3aWxsIGJlIHNwbGl0IGFuZCBwdXNoZWQgdG8gdGhlIHRvcCBoYWxmIFxuICAgICAgICAgICAgICogb2YgdGhlIHNjcmVlbiwgYW5kIHRoZSBib3R0b20gaGFsZiB3aWxsIGNvbnRhaW4gYW55XG4gICAgICAgICAgICAgKiBub2RlcyBpdCBoYXMgY29ubmVjdGlvbnMgdG8uXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIFdoZW4gYSBmb2N1cyBncm91cCBsZW5ndGggaXMgPj0gMSwgaWYgdGhlIG5vZGUgdG8gYmVcbiAgICAgICAgICAgICAqIHNwbGl0IGlzIGEgZm9jdXMgbm9kZSwgaXQgd2lsbCByZXBsYWNlIGZvY3VzR3JvdXBzWzBdIGFuZFxuICAgICAgICAgICAgICogdGhlIHRvcCBoYWxmIHdpbGwgYmUgaXRzIGNoaWxkcmVuLCBhbmQgYm90dG9tIGhhbGYgd2lsbFxuICAgICAgICAgICAgICogYmUgdGhlIG5vZGVzIGl0IGhhcyBjb25uZWN0aW9ucyB0by5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogSWYgdGhlIHNwbGl0IGlzIGluIHRoZSBib3R0b20gaGFsZiwgdGhlbiB0aGUgYm90dG9tIGhhbGZcbiAgICAgICAgICAgICAqIHdpbGwgZGlzcGxheSBpdCdzIGNoaWxkcmVuIGFuZCB3aWxsIG9ubHkgc2hvdyBjb25uZWN0aW9ucyBiZXR3ZWVuXG4gICAgICAgICAgICAgKiB0aGUgdHdvIGdyb3VwcywgYW5kIHdpbGwgcmVwbGFjZSBmb2N1c0dyb3Vwc1sxXS5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqfSAgIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGJsY2xpY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRibGNsaWNrKGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBjYW4gc3BsaXRcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5fc3RydWN0W25hbWVdID09PSB1bmRlZmluZWQgfHwgXy5pc0VtcHR5KGNoaWxkcmVuX3N0cnVjdFtuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdG9wbGV2ZWwgc3BsaXRcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMucHVzaChkLmlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zcGxpdHRpbmcgYSBmb2N1cyBub2RlXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzWzBdID0gZC5pZDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL3NwbGl0dGluZyBhXG4gICAgICAgICAgICAgICAgICAgIC8vY29ubmVjdGVkIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMucHVzaChkLmlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzFdXSwgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zcGxpdHRpbmcgYVxuICAgICAgICAgICAgICAgICAgICAvL2Nvbm5lY3RlZCBub2RlXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzWzFdID0gZC5pZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAyICYmIHN0YXRlLmZvY3VzR3JvdXBzWzFdID09PSBkLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vU3BsaXR0aW5nIGEgY29ubmVjdGVkIG5vZGUsIGtlZXAgYWxsIGZvY3VzIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvS2VlcCA9IFtkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHNUb1Jlc2hvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBPbmVOb2RlcyA9IGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV07XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhncm91cE9uZU5vZGVzLCBub2RlLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHNUb1Jlc2hvdy5wdXNoKG5vZGUuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vTWFrZSBzcGxpdCBub2RlcyB0aGUgZm9jdXMgYW5kIGtlZXAgbm9kZXMgdGhhdCBhcmUgY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvS2VlcCA9IFtkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHNUb1Jlc2hvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLmxpbmtzLCBmdW5jdGlvbiAobGluaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmsuc291cmNlID09PSBkICYmIG5vZGVJZHNUb1Jlc2hvdy5pbmRleE9mKGxpbmsudGFyZ2V0LmlkKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsudGFyZ2V0LlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLnRhcmdldC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHNUb1Jlc2hvdy5wdXNoKGxpbmsudGFyZ2V0LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RvS2VlcC5wdXNoKGxpbmsudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluay50YXJnZXQgPT09IGQgJiYgbm9kZUlkc1RvUmVzaG93LmluZGV4T2YobGluay5zb3VyY2UuaWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5zb3VyY2UuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc291cmNlLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobGluay5zb3VyY2UuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobGluay5zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1JlbW92aW5nIGxpbmtzIGZyb20gdGhlIG5vZGUgdG8gYmUgc3BsaXRcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmlkICE9PSBkLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG5cbiAgICAgICAgICAgICAgICAvL2Rpc2FibGluZyB1cGRhdGUgZ3JhcGggdG8gcHJldmVudCBuZXcgZGF0YSBmcm9tXG4gICAgICAgICAgICAgICAgLy9yZWRyYXdpbmcgbGlua3Mgd2hpbGUgdGhlcmUgYXJlIGFuaW1hdGlvbnMgZ29pbmcgb25cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUuZGlzYWJsZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMuZWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5pZCAhPT0gZC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kZWxheSgyMDApLmR1cmF0aW9uKDQwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9kaXNhYmxpbmcgcXRpcCBpZiBpbnN0YWxsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnF0aXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucXRpcCgnZGlzYWJsZScsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IHBhcnNlRmxvYXQodGhpc0dyYXBoLnN2Zy5zdHlsZShcIndpZHRoXCIpKSAvIHNjYWxlIC8gMiArIHRyYW5zbGF0ZVswXTtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IHBhcnNlRmxvYXQodGhpc0dyYXBoLnN2Zy5zdHlsZShcImhlaWdodFwiKSkgLyBzY2FsZSAvIDIgKyB0cmFuc2xhdGVbMV07XG4gICAgICAgICAgICAgICAgZC54U3RhcnQgPSBkLng7XG4gICAgICAgICAgICAgICAgZC55U3RhcnQgPSBkLnk7XG4gICAgICAgICAgICAgICAgZC54ID0geExvYztcbiAgICAgICAgICAgICAgICBkLnkgPSB5TG9jO1xuICAgICAgICAgICAgICAgIGQzbm9kZS50cmFuc2l0aW9uKFwibm9kZVBvc2l0aW9uVHJhbnNpdGlvblwiKS5kdXJhdGlvbig3NTApLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeFN0YXJ0ID0gZC54U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB5U3RhcnQgPSBkLnlTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgZC54U3RhcnQgPSBkLng7XG4gICAgICAgICAgICAgICAgICAgIGQueVN0YXJ0ID0gZC55O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyB4U3RhcnQgKyBcIixcIiArIHlTdGFydCArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0Tm9kZUZ1bmMgPSBfZ2V0KFNwbGl0Sm9pblZpZXdQb2xpY3kucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3BsaXRKb2luVmlld1BvbGljeS5wcm90b3R5cGUpLCAnc3BsaXROb2RlJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbm9kZUlkc1RvUmVzaG93O1xuICAgICAgICAgICAgICAgIC8vd2FpdGluZyBmb3Igbm9kZSB0cmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSBub2Rlc1RvS2VlcDtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXROb2RlRnVuYy5jYWxsKHRoaXNQb2xpY3ksIGQpO1xuICAgICAgICAgICAgICAgIH0sIDc1MCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVG8gYmUgY2FsbGVkIGFmdGVyIHRoZSBncmFwaCBpcyBzcGxpdC5cbiAgICAgICAgICAgICAqIEJyaW5ncyBhbGwgbm9kZXMgYmFjayBpbnRvIHZpZXcgYW5kIHNldHMgdGhlaXIgYXR0cmlidXRlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndXBkYXRlR3JhcGhDYWxsYmFjaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlR3JhcGhDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbig0MDApLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJmb2N1c1wiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY29ubmVjdGVkXCIsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5TcGxpdEpvaW5WaWV3UG9saWN5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9PT0gXCJmb2N1c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJmb2N1c1wiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImNvbm5lY3RlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJhbmRvbWx5IHNldHMgdGhlIHBvc2l0aW9ucyBvZiBhbnkgdW5zZXQgbm9kZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0UG9zaXRpb25zJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBncmFwaENvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHM7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gZ3JhcGhDb25zdHMuZGlzcGxheU9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzR3JhcGgubm9kZXM7XG4gICAgICAgICAgICAgICAgdmFyIHJldCA9IHRoaXNQb2xpY3kuZDNGb3JjZUJvdW5kcy5jYWxsKHRoaXNHcmFwaCk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS54ID09IG51bGwgfHwgbm9kZS55ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gZ2V0UmFuZG9tSW50KG5vZGUucmFkaXVzICsgb2Zmc2V0LCByZXQud2lkdGggLSBub2RlLnJhZGl1cyAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGdldFJhbmRvbUludChub2RlLnJhZGl1cyArIG9mZnNldCwgcmV0LmhlaWdodCAtIG5vZGUucmFkaXVzIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUueCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnkgPSB5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIG9uIHRoZSBzdGFydCBvZiB0aGUgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICogV2lsbCBvdmVycmlkZSB0aGUgbWV0aG9kIG9mIHRoZSBncmFwaFxuICAgICAgICAgICAgICogXCJ0aGlzXCIgcG9pbnRzIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZDNGb3JjZVN0YXJ0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkM0ZvcmNlU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMuYXR0cignY3gnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC54U3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC54U3RhcnQgPSBkLnhTdGFydCAqIHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkgKyB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKVswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ2N5JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQueVN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQueVN0YXJ0ID0gZC55U3RhcnQgKiB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocy5hdHRyKCd4MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLnk7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneDInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC55O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgc3RhcnQgb2YgdGhlIGQzIGZvcmNlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIFdpbGwgb3ZlcnJpZGUgdGhlIG1ldGhvZCBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIFwidGhpc1wiIHBvaW50cyB0byB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2QzRm9yY2VFbmQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGQzRm9yY2VFbmQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeSA9IHN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlUG9saWN5LmxheW91dERlZmF1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdExheW91dCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExheW91dFtuLmlkXSA9IHsgeDogbi54LCB5OiBuLnkgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5LmxheW91dERlZmF1bHQgPSBkZWZhdWx0TGF5b3V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlID0gdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5Lnpvb21EZWZhdWx0ID0gW3RyYW5zbGF0ZSwgc2NhbGVdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmF0dHIoJ2N4JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCdjeScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCBkdXJpbmcgRDMgZm9yY2Ugc2ltdWxhdGlvbnNcbiAgICAgICAgICAgICAqIGJ5IHRoZSBncmFwaCwgc28gXCJ0aGlzXCIgd2lsbCBwb2ludCB0byB0aGUgZ3JhcGggb2JqZWN0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdpZHRoICAgRDMgTGF5b3V0IFdpZHRoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgaGVpZ2h0ICBEMyBMYXlvdXQgSGVpZ2h0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkM0ZvcmNlVGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZVRpY2soZSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kgPSBzdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIG5vZGVzIHRvd2FyZCBjbHVzdGVyIGZvY3VzLlxuICAgICAgICAgICAgICAgIHZhciBmb2NpID0gc3RhdGVQb2xpY3kuZm9jaTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBncmF2aXR5KGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvY2kubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImZvY3VzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IChmb2NpWzBdIC0gZC55KSAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSArPSAoZm9jaVsxXSAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54ICs9ICh3aWR0aCAvIDIgLSBkLngpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSArPSAoaGVpZ2h0IC8gMiAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gKHdpZHRoIC8gMiAtIGQueCkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgbm9kZXMgYXJlIHdpdGhpbiBib3VuZHNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKHRoaXMuZDNGb3JjZUNvbGxpZGUoLjUpKS5lYWNoKGdyYXZpdHkoLjIgKiBlLmFscGhhKSkuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnggPSBNYXRoLm1heCgoZC5yYWRpdXMgKyBvZmZzZXQpIC8gc2NhbGUsIE1hdGgubWluKHdpZHRoICsgKC1vZmZzZXQgLSBkLnJhZGl1cykgLyBzY2FsZSwgZC54KSk7XG4gICAgICAgICAgICAgICAgfSkuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPT0gbnVsbCB8fCBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC55ID0gTWF0aC5tYXgoKGQucmFkaXVzICsgb2Zmc2V0KSAvIHNjYWxlLCBNYXRoLm1pbihoZWlnaHQgKyAoLW9mZnNldCAtIGQucmFkaXVzKSAvIHNjYWxlLCBkLnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiZm9jdXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC55ID0gTWF0aC5tYXgoZC5yYWRpdXMgKyBvZmZzZXQsIE1hdGgubWluKChoZWlnaHQgKyAoLW9mZnNldCAtIGQucmFkaXVzKSAvIHNjYWxlKSAqIGNvbnN0cy5TcGxpdEpvaW5WaWV3UG9saWN5LmJvdW5kYXJ5LCBkLnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQueSA9IE1hdGgubWF4KChoZWlnaHQgKyAob2Zmc2V0IC0gZC5yYWRpdXMpIC8gc2NhbGUpICogY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3kuYm91bmRhcnksIE1hdGgubWluKGhlaWdodCArICgtb2Zmc2V0IC0gZC5yYWRpdXMpIC8gc2NhbGUsIGQueSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzLmF0dHIoJ3gxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLng7XG4gICAgICAgICAgICAgICAgfSkuYXR0cigneTEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueTtcbiAgICAgICAgICAgICAgICB9KS5hdHRyKCd4MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC54O1xuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3kyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYm91bmRhcmllcyBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCBkdXJpbmcgRDMgZm9yY2Ugc2ltdWxhdGlvbnNcbiAgICAgICAgICAgICAqIGJ5IHRoZSBncmFwaCwgc28gXCJ0aGlzXCIgd2lsbCBwb2ludCB0byB0aGUgZ3JhcGggb2JqZWN0XG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICAgICAgICAgIFJldHVybnMgYW4gb2JqZWN0XG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGhhcyB0aGUgd2lkdGhcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBoZWlnaHQgYXMgXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZDNGb3JjZUJvdW5kcycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZDNGb3JjZUJvdW5kcygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeSA9IGNvbnN0cy5TcGxpdEpvaW5WaWV3UG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeSA9IHN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGNNYXhOb2Rlcyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmVhID0gd2lkdGggKiBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSB0aGlzR3JhcGguY29uc3RzLnN0YXJ0UmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAvL3RyZWF0aW5nIHRoZW0gYXMgYSBzcXVhcmUgZm9yIGFwcHJveFxuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmFkaXVzICogMy41O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gYXJlYSAvIChsZW5ndGggKiBsZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1RoZSBvZmZzZXQgaXMgdGhlIGJ1ZmZlciBmcm9tIHRoZSBlZGdlc1xuICAgICAgICAgICAgICAgIC8vT3JpZ2luYWwgV2lkdGggYW5kIEhlaWdodCBhcmUgZ2l2ZW4gdG8gdGhlIGZvcmNlIGxheW91dFxuICAgICAgICAgICAgICAgIC8vc28gdGhhdCBpdCBpcyBjZW50ZXJlZCwgYnV0IG5vZGVzIHdpbGwgYmUgZm9yY2VkIHRvIGJlXG4gICAgICAgICAgICAgICAgLy93aXRoaW4gdGhlIG9mZnNldCBib3VuZHNcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gY29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwid2lkdGhcIikpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSBwYXJzZUZsb2F0KHRoaXNHcmFwaC5zdmcuc3R5bGUoXCJoZWlnaHRcIikpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHN2Z0hlaWdodDtcblxuICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBjYWxjTWF4Tm9kZXMod2lkdGggLSAyICogb2Zmc2V0LCBoZWlnaHQgLSAyICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiBhbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBhbW91bnQgLyBub2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC56b29tZWQodGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKCksIHNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggLz0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAvPSBzY2FsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLCBzY2FsZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jYWxjdWxhdGluZyBmb2NpIGZvciBzaW11bGF0aW9uXG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzR3JvdXBzID0gc3RhdGVQb2xpY3kuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgdmFyIGZvY2k7XG4gICAgICAgICAgICAgICAgaWYgKGZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb2NpID0gW2hlaWdodCAvIDJdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc2V0dGluZyBmb2NpIGhlaWdodCBwb3NpdGlvbiBiYXNlZCBvbiBwZXJjZW50YWdlXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c05vZGVzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0W2ZvY3VzR3JvdXBzWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzUG9saWN5LmJvdW5kYXJ5ID0gZm9jdXNOb2Rlcy5sZW5ndGggLyBub2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBoZWlnaHQgKiBjb25zdHNQb2xpY3kuYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3QgPSBoZWlnaHQgLSB0b3A7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3AgPCAyICogdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9IDIuNSAqIHRoaXNHcmFwaC5jb25zdHMubWF4UmFkaXVzIC8gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gaGVpZ2h0ICogY29uc3RzUG9saWN5LmJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm90ID0gaGVpZ2h0IC0gdG9wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChib3QgPCAyICogdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9IDEgLSAyLjUgKiB0aGlzR3JhcGguY29uc3RzLm1heFJhZGl1cyAvIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGhlaWdodCAqIGNvbnN0c1BvbGljeS5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdCA9IGhlaWdodCAtIHRvcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb2NpID0gW3RvcCAvIDIsIHRvcCArIGJvdCAvIDJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS5mb2NpID0gZm9jaTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIGEgc2luZ2xlIG5vZGUgaXMgc3BsaXRcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbmV3Tm9kZXMgIFRoZSBuZXcgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NwbGl0Tm9kZUV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpdE5vZGVFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5ld05vZGVzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBuZXdOb2Rlc1swXS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgLy8gc3RhdGUuZm9jdXNHcm91cCA9IHRpdGxlO1xuXG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgbGFzdCBldmVudCBoYXMgdGhlIHNhbWUgaWQsIGl0IG11c3QgYmUgdGhlXG4gICAgICAgICAgICAgICAgLy9vcHBwb3NpdGUgb2YgdGhpcyBldmVudCwgc28gd2UgcmVtb3ZlIHRoYXQgZXZlbnQgZnJvbVxuICAgICAgICAgICAgICAgIC8vdGhlIGV2ZW50IHN0YWNrLlxuICAgICAgICAgICAgICAgIC8vT3RoZXJ3aXNlLCB3ZSBhZGQgdGhlIGV2ZW50IG90IHRoZSBzdGFja1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoICE9PSAwICYmIHN0YXRlLmV2ZW50SGlzdG9yeVtzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoIC0gMV0uaWQgPT09IHRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucHVzaCh7IGlkOiB0aXRsZSwgZXZlbnQ6ICdzcGxpdCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJhY2tCdXR0b25FbGVtICE9IG51bGwgJiYgc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbS5mYWRlVG8oJ3Nsb3cnLCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBzdGF0ZS5mb2N1c0dyb3Vwc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9ICcgJiAnICsgc3RhdGUuZm9jdXNHcm91cHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtLnRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9yZS1lbmFibGUgZ3JhcGggdXBkYXRlXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnNldExheW91dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIGxheW91dCBvZiB0aGUgbm9kZXMuIFxuICAgICAgICAgICAgICogSWYgdGhlcmUgaXMgYSBwcmV2aW91cyBsYXlvdXQsIGl0IHdpbGwgYmUgbG9hZGVkLlxuICAgICAgICAgICAgICogRWxzZSwgaXQgd2lsbCBydW4gYSBEMyBGb3JjZSBzaW11bGF0aW9uIGFuZCBjcmVhdGUgb25lLlxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2V0TGF5b3V0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMYXlvdXQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHZhciBsYXlvdXQ7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQgPSBzdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHN0YXRlLnpvb21EZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxheW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbGF5b3V0W24uaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGF5b3V0LCBuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG4ueCA9IHBvcy54O1xuICAgICAgICAgICAgICAgICAgICAgICAgbi55ID0gcG9zLnk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGguY2FsbCh0aGlzR3JhcGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL05lZWQgdG8gcnVuIGEgZm9yY2Ugc2ltdWxhdGlvbiBhcyB0aGlzIGxheW91dFxuICAgICAgICAgICAgICAgICAgICAvL2hhc24ndCBiZWVuIGRvbmUgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5pbml0Rm9yY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpc1BvbGljeS5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdID0gW3RoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLCB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0W24uaWRdID0geyB4OiBuLngsIHk6IG4ueSB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0W3N0YXRlLmZvY3VzR3JvdXBzXSA9IGxheW91dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3ZlcnJpZGluZyBmcm9tIHN1cGVyIGNsYXNzIHNvIHRoYXQgd2UgY2FuIGhhdmVcbiAgICAgICAgICAgICAqIHRvcCBsZXZlbCBub2RlcyByZWFwcGVhciB3aGVuIHRoZXkgYXJlIGhpZGRlblxuICAgICAgICAgICAgICogZHVlIHRvIHRoZXJlIGJlaW5nIHR3byBmb2N1cyBncm91cHMuXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgICAgICBub2RlICAgIFRoZSBub2RlIHRvIGpvaW5cbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtOb2RlfSAgVGhlIG5ldyBub2RlIGFmdGVyIHRoZSBqb2luXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdfX2pvaW5Ob2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfX2pvaW5Ob2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVTdXBlciA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5Ob2RlUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayB0aGF0IG5vZGUgc3RpbGwgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG5vZGUpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBhbmNlc3Rvciwgbm90aGluZyB0byBqb2luXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbC5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICB2YXIgdG9fYmVfZGVsZXRlZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZVNldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbm9kZSB3b24ndCBiZSBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlc1tpXS5hbmNlc3RvcnMuaW5kZXhPZihub2RlLnBhcmVudCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX2JlX2RlbGV0ZWQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZV9pZCA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0LnB1c2gobm9kZS5wYXJlbnQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9yc19zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5hbmNlc3RvcnNfc3RydWN0O1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgLy8gLSBzZXR0aW5nIGZvY3VzR3JvdXBzIC1cbiAgICAgICAgICAgICAgICAvL2VpdGhlciByZXBsYWNpbmcgb25lIG9mIHRoZSBncm91cHMsXG4gICAgICAgICAgICAgICAgLy9vciBqb2luaW5nIGJhY2sgaW50byBhIHRvcCBsZXZlbCwgc28gdGhlcmUgaXMgb25seVxuICAgICAgICAgICAgICAgIC8vb25lIGZvY3VzXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuZm9jdXNHcm91cHMuaW5kZXhPZihwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChhbmNlc3RvcnNfc3RydWN0W3BhcmVudF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwc1tpbmRleF0gPSBhbmNlc3RvcnNfc3RydWN0W3BhcmVudF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL25hbWVUb0FkZCBhcmUgdG9wIGxldmVsIG5vZGVzIHRoYXQgYXJlIHRvIGJlIGFkZGVkXG4gICAgICAgICAgICAgICAgLy90byB0aGUgZ3JhcGguXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVUb0FkZCA9IFtdO1xuICAgICAgICAgICAgICAgIC8vd2lsbCBvbmx5IG5lZWQgdG8gYWRkIGEgdG9wIGxldmVsIG5vZGUgaWYgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAvL29ubHkgb25lIGZvY3VzXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvL0FkZCBvbmx5IHRob3N0IHRoYXQgYXJlbid0IGFuIGFuY2VzdG9yIG9mIHRoZSBub2RlXG4gICAgICAgICAgICAgICAgICAgIC8vdG8gam9pbiwgdGhlIGZvY3VzIGdyb3VwIG9yIGFuIGFuY2VzdG9yIG9mIGl0LFxuICAgICAgICAgICAgICAgICAgICAvL2FuZCBhcmVuJ3QgYWxyZWFkeSBpbiBub2RlTmFtZVNldC5cbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgZmxvdyBiZXR3ZWVuIHRvcCBsZXZlbCBhcyBsb25nIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIHRvcCBsZXZlbCBpc24ndCBhbiBhbmNlc3RvciBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy9mb2N1cyBncm91cCwgYW5kIGlzbid0IGFscmVhZHkgcGFydCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy9ub2RlIHNldDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IGFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF07XG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHN0YXRlLmZvY3VzR3JvdXBzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgb3IgZW1wdHkgYXJyYXkgaXMgdG8gcHJldmVudCBjb25jYXRlbmF0aW5nIGEgbnVsbFxuICAgICAgICAgICAgICAgICAgICAvL29yIHVuZGVmaW5lZCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgPSBhbmNlc3RvcnMuY29uY2F0KGFuY2VzdG9yc19zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dIHx8IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNlc3RvcnMuaW5kZXhPZihuKSA9PT0gLTEgJiYgbm9kZU5hbWVTZXQuaW5kZXhPZihuKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZU5hbWVTZXQgPSBub2RlTmFtZVNldC5jb25jYXQobmFtZVRvQWRkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvL25vIGZvY3VzIGdyb3VwcyBtZWFucyB3ZSBhcmUgYXQgdG9wIGxldmVsXG4gICAgICAgICAgICAgICAgICAgIC8vU2hvdWxkIGFkZCBhbnkgdG9wIGxldmVsIG5vZGVzIHRoYXQgYXJlbid0XG4gICAgICAgICAgICAgICAgICAgIC8vYWxyZWFkeSB0aGVyZVxuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goY2hpbGRyZW5fc3RydWN0LnRvcExldmVsLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lU2V0LmluZGV4T2YobikgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVOYW1lU2V0ID0gbm9kZU5hbWVTZXQuY29uY2F0KG5hbWVUb0FkZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9mb3JtYXR0aW5nIGRhdGFcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gbm9kZS5yYWRpdXMgLyB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5O1xuICAgICAgICAgICAgICAgIHZhciB4TG9jID0gbm9kZS54O1xuICAgICAgICAgICAgICAgIHZhciB5TG9jID0gbm9kZS55O1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLmFuY2VzdG9yc1sxXTtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gbm9kZS5hbmNlc3RvcnMuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZSh4TG9jLCB5TG9jLCBuZXdfbm9kZV9pZCwgbmV3X25vZGVfaWQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5wdXNoKG5ld05vZGUpO1xuXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG5vZGVzIHRoYXQgd2lsbCBiZSBqb2luZWRcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvX2JlX2RlbGV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVfdG9fZGVsZXRlID0gdG9fYmVfZGVsZXRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlX3RvX2RlbGV0ZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGVfdG9fZGVsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmV0RGF0YSA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmdldEZsb3dCZXR3ZWVuU2V0KG5vZGVOYW1lU2V0KTtcbiAgICAgICAgICAgICAgICAvL2hvbGRzIHRoZSBub2RlRGF0YSB3aGljaCB3aWxsIGJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvUHJvY2VzcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vZmluZGluZyB0aGUgbm9kZSBkYXRhIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHRvcCBsZXZlbFxuICAgICAgICAgICAgICAgIC8vbm9kZXMgdG8gYWRkIC0gbmFtZVRvQWRkLlxuICAgICAgICAgICAgICAgIHZhciBub2RlRGF0YSA9IHJldERhdGEubm9kZURhdGE7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmluZGV4T2Yobm9kZURhdGFbaV0uaWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1Byb2Nlc3MucHVzaChub2RlRGF0YVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1RoZSB0b3AgbGV2ZWwgbm9kZXMgdGhhdCBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZXMgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTm9kZURhdGEobm9kZXNUb1Byb2Nlc3MpO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChuZXdOb2RlcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgbi5yYWRpdXMgPSBuLnJhZGl1cyB8fCB0aGlzR3JhcGguY29uc3RzLnN0YXJ0UmFkaXVzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlcyA9IHRoaXNHcmFwaC5ub2Rlcy5jb25jYXQobmV3Tm9kZXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHJldERhdGEubGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgLy9Pbmx5IGtlZXAgdG9wIGxldmVsIG5vZGVzIHRoYXQgaGF2ZSBjb25uZWN0aW9ucyB0b1xuICAgICAgICAgICAgICAgIC8vdGhlIGN1cnJlbnQgZm9jdXMgZ3JvdXBcbiAgICAgICAgICAgICAgICAvL3dlIHJlbW92ZSB0aGUgbm9kZSBuYW1lIGZyb20gbmFtZVRvQWRkIGlmIHdlIGFyZVxuICAgICAgICAgICAgICAgIC8va2VlcGluZyBpdFxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5saW5rcywgZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgdGhlcmUgZXhpc3RzIGEgbGluayB0b3VjaGluZyBlYWNoIG9mIG5hbWVUb0FkZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVUb0FkZC5pbmRleE9mKGwuc291cmNlLmlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHNbMF0gPT09IGwudGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQuc3BsaWNlKG5hbWVUb0FkZC5pbmRleE9mKGwuc291cmNlLmlkKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lVG9BZGQuaW5kZXhPZihsLnRhcmdldC5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzWzBdID09PSBsLnNvdXJjZS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZihsLnRhcmdldC5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9XZSB3YW50IHRvIGtlZXAgdGhlbSBhbGxcbiAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSBhbnkgbGVmdCBpbiBuYW1lVG9BZGQgd2lsbCBiZSByZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAvL3dlIHJlc2V0IG5hbWVUb0FkZCBoZXJlLlxuICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3doYXRldmVyIGlzIHJlbWFpbmluZyBpbiBuYW1lVG9BZGQgaXNuJ3QgY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgLy90byB0aGUgZm9jdXMgZ3JvdXAsIHNvIHdlIHNob3VsZCByZW1vdmUgaXQuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVUb1JlbW92ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmluZGV4T2YodGhpc0dyYXBoLm5vZGVzW2ldLmlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQuc3BsaWNlKG5hbWVUb0FkZC5pbmRleE9mKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUodGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVG9SZW1vdmUucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobm9kZVRvUmVtb3ZlLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMuc3BsaWNlKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG4pLCAxKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0Tm9kZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZVN1cGVyLnNwbGl0Tm9kZXMuc3BsaWNlKHN0YXRlU3VwZXIuc3BsaXROb2Rlcy5pbmRleE9mKG5ld05vZGUuaWQpLCAxKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBhZnRlciBhIHNpbmdsZSBub2RlIGlzIGpvaW5lZFxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBJZiB0aGUgZm9jdXMgZ3JvdXAgaGFzIGJlZW4gc2VlbiBiZWZvcmUsIGl0IHdpbGxcbiAgICAgICAgICAgICAqIGxvYWQgdGhhdCBsYXlvdXQuIE90aGVyd2lzZSwgaXQgd2lsbCBydW4gYSBkMyBmb3JjZVxuICAgICAgICAgICAgICogc2ltdWxhdGlvbiB0byBnZW5lcmF0ZSBvbmUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBuZXdOb2RlICBUaGUgbmV3IG5vZGVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2pvaW5Ob2RlRXZlbnQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW5Ob2RlRXZlbnQobmV3Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGxhc3QgZXZlbnQgaGFzIHRoZSBzYW1lIGlkLCBpdCBtdXN0IGJlIHRoZVxuICAgICAgICAgICAgICAgIC8vb3BwcG9zaXRlIG9mIHRoaXMgZXZlbnQsIHNvIHdlIHJlbW92ZSB0aGF0IGV2ZW50IGZyb21cbiAgICAgICAgICAgICAgICAvL3RoZSBldmVudCBzdGFjay5cbiAgICAgICAgICAgICAgICAvL090aGVyd2lzZSwgd2UgYWRkIHRoZSBldmVudCB0byB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAhPT0gMCAmJiBzdGF0ZS5ldmVudEhpc3Rvcnlbc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAtIDFdLmlkID09PSBuZXdOb2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucHVzaCh7IGlkOiBuZXdOb2RlLmlkLCBldmVudDogJ2pvaW4nIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL3NldHRpbmcgYmFjayBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYmFja0J1dHRvbkVsZW0gIT0gbnVsbCAmJiBzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtLmZhZGVUbygnc2xvdycsIDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vc2V0dGluZyB0aXRsZVxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS50aXRsZUVsZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHN0YXRlLmZvY3VzR3JvdXBzWzBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gJyAmICcgKyBzdGF0ZS5mb2N1c0dyb3Vwc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS50aXRsZUVsZW0udGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc1BvbGljeS5zZXRMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVbmRvZXMgdGhlIGxhc3Qgc3BsaXQgb3Igam9pbiBldmVudC5cbiAgICAgICAgICAgICAqIE1lYW50IHRvIGJlIGNhbGxlZCBieSB0aGUgYmFjayBidXR0b24uXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICd1bmRvTGFzdEV2ZW50JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bmRvTGFzdEV2ZW50KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gc3RhdGUuZXZlbnRIaXN0b3J5W3N0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBsYXN0LmlkO1xuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0LmV2ZW50ID09PSAnam9pbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXNHcmFwaC5maW5kTm9kZUJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZDNub2RlID0gdGhpc0dyYXBoLmZpbmREM05vZGUoaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LmRibGNsaWNrKGQzbm9kZSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtpZF1bMF07XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzR3JhcGguZmluZE5vZGVCeUlkKG5vZGVJZCk7XG4gICAgICAgICAgICAgICAgICAgIF9nZXQoU3BsaXRKb2luVmlld1BvbGljeS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTcGxpdEpvaW5WaWV3UG9saWN5LnByb3RvdHlwZSksICdqb2luTm9kZScsIHRoaXMpLmNhbGwodGhpc1BvbGljeSwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIFNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgfShTcGxpdEpvaW5Ob2RlUG9saWN5LlBvbGljeSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pblZpZXdQb2xpY3lcbiAgICB9O1xufV0pOyIsIi8qKlxuICogRGVmaW5pbmcgdGhlIEdyYXBoIE1vZHVsZS5cbiAqIFNlZSBERVNJR04ubWQgZm9yIGluZm8gb24gR3JhcGggT2JqZWN0cy5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcsIFtdKTtcblxuXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoXCJjb250aXYuZGlyZWN0aXZlc1wiLCBbXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiAzLzE0LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2Lm1vZGVscycsIFtdKTtcbnZhciBDb250aXZHbG9iYWxzID0gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBORVRNQVNURVJcbiAgICAgICAgJ05FVFdPUktTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL25ldHdvcmtzLycsXG4gICAgICAgICdORVRXT1JLU19JTlNQRUNUX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3QvbmV0d29ya3MvJyxcbiAgICAgICAgJ1NFUlZJQ0VMQlNfSU5TUEVDVF9FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9pbnNwZWN0L3NlcnZpY2VMQnMvJyxcbiAgICAgICAgJ1BPTElDSUVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL3BvbGljeXMvJyxcbiAgICAgICAgJ1JVTEVTX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL3J1bGVzLycsXG4gICAgICAgICdBUFBMSUNBVElPTkdST1VQU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9lbmRwb2ludEdyb3Vwcy8nLFxuICAgICAgICAnU0VSVklDRUxCU19FTkRQT0lOVCc6ICcvbmV0bWFzdGVyL2FwaS92MS9zZXJ2aWNlTEJzLycsXG4gICAgICAgICdPUkdBTklaQVRJT05TX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL3RlbmFudHMvJyxcbiAgICAgICAgJ05FVFdPUktfU0VUVElOR1NfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvZ2xvYmFscy8nLFxuICAgICAgICAnTkVUUFJPRklMRVNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvbmV0cHJvZmlsZXMvJyxcbiAgICAgICAgJ0JHUFNfRU5EUE9JTlQnOiAnL25ldG1hc3Rlci9hcGkvdjEvQmdwcy8nLFxuICAgICAgICAnQkdQU19JTlNQRUNUX0VORFBPSU5UJzogJy9uZXRtYXN0ZXIvYXBpL3YxL2luc3BlY3QvQmdwcy8nLFxuICAgICAgICAnVklTVUFMSVpBVElPTl9FTkRQT0lOVCc6ICcvdmlzdWFsaXphdGlvbi8nLFxuICAgICAgICAvL1JFU1QgZW5kcG9pbnRzIGZvciBWT0xNQVNURVJcbiAgICAgICAgJ1ZPTFVNRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzLycsXG4gICAgICAgICdWT0xVTUVTX0NSRUFURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvY3JlYXRlLycsXG4gICAgICAgICdWT0xVTUVTX0RFTEVURV9FTkRQT0lOVCc6ICcvdm9sbWFzdGVyL3ZvbHVtZXMvcmVtb3ZlLycsXG4gICAgICAgICdWT0xVTUVTX0NPUFlTTkFQU0hPVFNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci92b2x1bWVzL2NvcHknLFxuICAgICAgICAnVk9MVU1FU19VU0VTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvdXNlcy9tb3VudHMvJyxcbiAgICAgICAgJ1ZPTFVNRVNfU05BUFNIT1RTX0VORFBPSU5UJzogJy92b2xtYXN0ZXIvc25hcHNob3RzLycsXG4gICAgICAgICdTVE9SQUdFUE9MSUNJRVNfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9wb2xpY2llcy8nLFxuICAgICAgICAnVk9MVU1FU19HTE9CQUxfRU5EUE9JTlQnOiAnL3ZvbG1hc3Rlci9nbG9iYWwvJyxcbiAgICAgICAgLy9SRVNUIGVuZHBvaW50cyBmb3IgQ0xVU1RFUlxuICAgICAgICAnTk9ERVNfTElTVF9FTkRQT0lOVCc6ICcvaW5mby9ub2RlcycsXG4gICAgICAgICdOT0RFU19ESVNDT1ZFUl9FTkRQT0lOVCc6ICcvZGlzY292ZXIvbm9kZXMnLFxuICAgICAgICAnTk9ERVNfQ09NTUlTU0lPTl9FTkRQT0lOVCc6ICcvY29tbWlzc2lvbi9ub2RlcycsXG4gICAgICAgICdOT0RFU19ERUNPTU1JU1NJT05fRU5EUE9JTlQnOiAnL2RlY29tbWlzc2lvbi9ub2RlcycsXG4gICAgICAgICdOT0RFU19NQUlOVEVOQU5DRV9FTkRQT0lOVCc6ICcvbWFpbnRlbmFuY2Uvbm9kZXMnLFxuICAgICAgICAnTk9ERVNfTEFTVF9KT0JfRU5EUE9JTlQnOiAnL2luZm8vam9iL2xhc3QnLFxuICAgICAgICAnTk9ERVNfQUNUSVZFX0pPQl9FTkRQT0lOVCc6ICcvaW5mby9qb2IvYWN0aXZlJyxcbiAgICAgICAgJ05PREVTX1NFVFRJTkdTX1NFVF9FTkRQT0lOVCc6ICcvZ2xvYmFscycsXG4gICAgICAgICdOT0RFU19TRVRUSU5HU19HRVRfRU5EUE9JTlQnOiAnL2luZm8vZ2xvYmFscycsXG4gICAgICAgIC8vUmVmcmVzaCBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgJ1JFRlJFU0hfSU5URVJWQUwnOiA1MDAwLFxuICAgICAgICAvL1JlZ0V4IGZvciB2YWxpZGF0aW9uXG4gICAgICAgICdDSURSX1JFR0VYJzogJ14oKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pXFwuKXszfShbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKShcXC8oWzAtOV18WzEtMl1bMC05XXwzWzAtMl0pKSQnLFxuICAgICAgICAnVkxBTl9SRUdFWCc6ICdeKFswLTldezEsNH0/LVswLTldezEsNH0/KSQnLFxuICAgICAgICAnVlhMQU5fUkVHRVgnOiAnXihbMC05XXsxLDh9Py1bMC05XXsxLDh9PykkJyxcbiAgICAgICAgJ05VTUJFUl9SRUdFWCc6ICdeWzAtOV0qJCdcbiAgICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIFRoZSBiYXNlIGNsYXNzIHRoZSBEYXRhU291cmNlIG9iamVjdC5cbiAqIFxuICogVGhlIERhdGFTb3VyY2Ugb2JqZWN0IHRha2VzIGluIG5vZGUgYW5kIGxpbmsgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIsIFxuICogYW5kIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGNvbnZlcnRpbmcgYW5kIG1hbmlwdWxhdGluZyB0aGUgZGF0YSBmb3JcbiAqIHRoZSBncmFwaCBvYmplY3QuXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIERhdGFTb3VyY2Ugb2JqZWN0LCBjcmVhdGUgYSBuZXcgZmFjdG9yeSB0aGF0IHVzZXMgdGhlIFxuICogRGF0YVNvdXJjZSB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBcbiAqIGl0cyBEYXRhU291cmNlIGNsYXNzLiBcbiAqIFJldHVybiB0aGUgY2xhc3Mgb2JqZWN0IHdpdGggRGF0YVNvdXJjZSBhcyBrZXkuXG4gKiBcbiAqIE5vZGUgZGF0YSBpcyBleHBlY3RlZCB0byBiZSBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAqIHtpZDpub2RlX2lkLCB0ZXh0Om5vZGVfdGV4dH1cbiAqIFxuICogTGluayBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge3NvdXJjZTogc291cmNlTm9kZUlkLCB0YXJnZXQ6IHRhcmdldE5vZGVJZH1cbiAqIFxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnRGF0YVNvdXJjZScsIFsnTm9kZScsICdMaW5rJywgXG4gICAgXHRmdW5jdGlvbiAoTm9kZSwgTGluaykge1xuXG4gICAgXHRjbGFzcyBEYXRhU291cmNlIHtcbiAgICBcdFx0LyoqXG4gICAgXHRcdCAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cbiAgICBcdFx0ICpcbiAgICBcdFx0ICogQHBhcmFtICAgICAge0FycmF5fSAgIG5vZGVzICAgICAgICAgICAgICBUaGUgbm9kZSBkYXRhIFxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbGlua3MgICAgICAgICAgICAgIFRoZSBsaW5rIGRhdGFcbiAgICBcdFx0ICovXG5cdFx0XHRjb25zdHJ1Y3Rvcihub2RlcywgbGlua3MpIHtcblx0XHRcdFx0dGhpcy5ub2RlcyA9IG5vZGVzO1xuXHRcdFx0XHR0aGlzLmxpbmtzID0gbGlua3M7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUmVwbGFjZXMgdGhlIG5vZGUgZGF0YVxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbm9kZXMgICBUaGUgbm9kZXNcblx0XHRcdCAqL1xuXHRcdFx0dXBkYXRlTm9kZXMobm9kZXMpIHtcblx0XHRcdFx0dGhpcy5ub2RlcyA9IG5vZGVzO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFJlcGxhY2VzIHRoZSBsaW5rIGRhdGFcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7TGlua30gIGxpbmtzICAgVGhlIGxpbmtzXG5cdFx0XHQgKi9cblx0XHRcdHVwZGF0ZUxpbmtzKGxpbmtzKSB7XG5cdFx0XHRcdHRoaXMubGlua3MgPSBsaW5rcztcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXR1cm5zIHRoZSBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgTm9kZSB3aXRoIHRoZSBcblx0XHRcdCAqIG1hdGNoaW5nIGlkXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcblx0XHRcdCAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICBuYW1lIG9mIHRoZSBtYXRjaGluZyBub2RlXG5cdFx0XHQgKi9cblx0XHRcdG5vZGVJZFRvTmFtZShpZCkge1xuXHRcdCAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2Rlcztcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICBpZiAobm9kZXNbaV0uaWQgPT0gaWQpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVzW2ldLm5hbWU7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIHRvIGNyZWF0ZSBOb2RlIG9iamVjdHNcblx0XHQgICAgICpcblx0XHQgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZURhdGEgIE5vZGVEYXRhIHRvIGNvbnZlcnQgXG5cdFx0ICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBub2RlIG9iamVjdHNcblx0XHQgICAgICogQHJldHVybiAgICAge0FycmF5fSAgTm9kZSBvYmplY3RzXG5cdFx0ICAgICAqL1xuXHRcdCAgICBwcm9jZXNzTm9kZURhdGEobm9kZURhdGEpIHtcblx0XHQgICAgICAgIHZhciBub2RlcyA9IFtdO1xuXHRcdCAgICAgICAgXy5mb3JFYWNoKG5vZGVEYXRhLCBmdW5jdGlvbihkYXRhKSB7XG5cdFx0ICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgTm9kZS5Ob2RlKG51bGwsIG51bGwsIGRhdGEuaWQsIGRhdGEudGV4dCwgbnVsbCk7XG5cdFx0ICAgICAgICAgICAgbm9kZXMucHVzaChuZXdOb2RlKTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICAgICAgcmV0dXJuIG5vZGVzO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIHByb2Nlc3MgdGhlIGxpbmtEYXRhXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIGxpbmtEYXRhICBUaGUgbGluayBkYXRhXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICBUaGUgbm9kZXMgZnJvbSBwcm9jZXNzTm9kZURhdGFcblx0XHQgICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG5cdFx0ICAgICAqL1xuXHRcdCAgICBwcm9jZXNzTGlua0RhdGEobGlua0RhdGEsIG5vZGVzKSB7XG5cdFx0ICAgIFx0LyoqXG5cdFx0XHQgICAgICogUmV0dXJucyB0aGUgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGlkXG5cdFx0XHQgICAgICpcblx0XHRcdCAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG5cdFx0XHQgICAgICogQHJldHVybiAgICAge05vZGV9ICAgVGhlIG5vZGUgd2l0aCB0aGUgbWF0Y2hpbmcgaWRcblx0XHRcdCAgICAgKi9cblx0XHRcdCAgICBmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdCAgICAgICAgICAgIGlmIChpZCA9PSBub2Rlc1tpXS5pZCkge1xuXHRcdFx0ICAgICAgICAgICAgICAgIHJldHVybiBub2Rlc1tpXTtcblx0XHRcdCAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgIH1cblxuXHRcdCAgICAgICAgdmFyIGxpbmtzID0gW107XG5cdFx0ICAgICAgICAvL3RyYW5zZm9ybWluZyBsaW5rIGRhdGFcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua0RhdGEubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICBpZiAobGlua0RhdGFbaV0uc291cmNlICE9IGxpbmtEYXRhW2ldLnRhcmdldCkge1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gZmluZE5vZGVCeUlkKGxpbmtEYXRhW2ldLnNvdXJjZSwgbm9kZXMpO1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZmluZE5vZGVCeUlkKGxpbmtEYXRhW2ldLnRhcmdldCwgbm9kZXMpO1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoc291cmNlID09IG51bGwgfHwgdGFyZ2V0ID09IG51bGwpIHtcblx0XHQgICAgICAgICAgICAgICAgXHRjb250aW51ZTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gbmV3IExpbmsuTGluayhzb3VyY2UsIHRhcmdldCk7XG5cdCAgICAgICAgICAgICAgICAgICAgbGlua3MucHVzaChsaW5rKTtcblx0XHQgICAgICAgICAgICB9ICBcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiBsaW5rcztcblx0XHQgICAgfVxuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0RGF0YVNvdXJjZTpEYXRhU291cmNlXG5cdFx0fVxufV0pO1xuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnV0aWxzJywgW10pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCIsIi8qKlxuICogVGhlIERhdGFTb3VyY2UgdXNlZCBmb3IgdGhlIHZpc3VhbGl6YXRpb24gdGFiLlxuICogXG4gKiBOb2RlIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge2lkOiBub2RlX2lkLCB0ZXh0OiBub2RlX3RleHR9XG4gKiBQYXJlbnQgYW5kIEFuY2VzdG9yIGF0dHJpYnV0ZXMgY2FuIGJlIHNldCBieSBjYWxsaW5nIHNldEFuY2VzdG9yc1xuICogXG4gKiBMaW5rIERhdGEgZnJvbSB0aGUgc2VydmVyIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICoge3NvdXJjZTogc291cmNlTm9kZUlkLCB0YXJnZXQ6IHRhcmdldE5vZGVJZCwgd2VpZ2h0OiBsaW5rV2VpZ2h0fVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemVyRGF0YVNvdXJjZScsIFsnRGF0YVNvdXJjZScsICdWaXN1YWxpemVyTm9kZScsICdWaXN1YWxpemVyTGluaycsIFxuICAgIFx0ZnVuY3Rpb24gKERhdGFTb3VyY2UsIFZpc3VhbGl6ZXJOb2RlLCBWaXN1YWxpemVyTGluaykge1xuXG4gICAgXHRjbGFzcyBWaXN1YWxpemVyRGF0YVNvdXJjZSBleHRlbmRzIERhdGFTb3VyY2UuRGF0YVNvdXJjZSB7XG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgXHRcdCAqIFxuICAgIFx0XHQgKiBDaGlsZHJlbiBTdHJ1Y3QgYW5kIGFuY2VzdG9yc19zdHJ1Y3QgYXJlIEpTT04gb2JqZWN0cyxcbiAgICBcdFx0ICogbWFwcGluZyBhIG5vZGUgSWQgdG8gYSBsaXN0IG9mIGl0J3MgY2hpbGRyZW4gb3IgYW5jZXN0b3JzLlxuICAgIFx0XHQgKiBDaGlsZHJlbiBTdHJ1Y3QgaXMgYWxzbyBleHBlY3RlZCB0byBoYXZlIGEgZmllbGQgY2FsbGVkXG4gICAgXHRcdCAqIHRvcExldmVsLCB0aGF0IG1hcHMgdG8gYSBsaXN0IG9mIGFsbCB0aGUgbm9kZXMgdGhhdCBkb24ndFxuICAgIFx0XHQgKiBoYXZlIGFueSBwYXJlbnRzLlxuICAgIFx0XHQgKlxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbm9kZXMgICAgICAgICAgICAgIFRoZSBub2RlIGRhdGEgXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtBcnJheX0gICBsaW5rcyAgICAgICAgICAgICAgVGhlIGxpbmsgZGF0YVxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgY2hpbGRyZW5fc3RydWN0ICAgIFRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmVcbiAgICBcdFx0ICogQHBhcmFtICAgICAge09iamVjdH0gIGFuY2VzdG9yc19zdHJ1Y3QgICBUaGUgYW5jZXN0b3JzIHN0cnVjdHVyZVxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgbGFiZWxzICAgICAgICAgICAgIFRoZSBsYWJlbHNcbiAgICBcdFx0ICogQHBhcmFtICAgICAge0FycmF5fSAgIHNlbGVjdG9ycyAgICAgICAgICBUaGUgc2VsZWN0b3JzXG4gICAgXHRcdCAqL1xuXHRcdFx0Y29uc3RydWN0b3Iobm9kZXMsIGxpbmtzLCBjaGlsZHJlbl9zdHJ1Y3QsIGFuY2VzdG9yc19zdHJ1Y3QsIFxuXHRcdFx0XHRcdGxhYmVscywgc2VsZWN0b3JzKSB7XG5cdFx0XHRcdHN1cGVyKG5vZGVzLGxpbmtzKTtcblx0XHRcdFx0dGhpcy5jaGlsZHJlbl9zdHJ1Y3QgPSBjaGlsZHJlbl9zdHJ1Y3Q7XG5cdFx0XHRcdHRoaXMuYW5jZXN0b3JzX3N0cnVjdCA9IGFuY2VzdG9yc19zdHJ1Y3Q7XG5cdFx0XHRcdHRoaXMubGFiZWxzID0gbGFiZWxzO1xuXHRcdFx0XHR0aGlzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcblx0XHRcdH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogRGV0ZXJtaW5lcyBpZiBpdCBoYXMgY2hpbGQuXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIFRydWUgaWYgaGFzIGNoaWxkLCBGYWxzZSBvdGhlcndpc2UuXG5cdFx0ICAgICAqL1xuXHRcdCAgICBoYXNDaGlsZChpZCkge1xuXHRcdCAgICBcdGlmICh0aGlzLmNoaWxkcmVuX3N0cnVjdFtpZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgXHRcdHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgXHRyZXR1cm4gdHJ1ZTtcdFxuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFNldHMgdGhlIHBhcmVudCBhbmQgYW5jZXN0b3JzIGF0dHJpYnV0ZSB1c2luZyBcblx0XHQgICAgICogYW5jZXN0b3JzX3N0cnVjdCBmb3IgYWxsIHRoZSBub2Rlc1xuXHRcdCAgICAgKiBBbHNvIGFkZHMgYW55IG5vZGVzIHdpdGhvdXQgYW5jZXN0b3JzLCB0aGF0IGFyZW4ndCBcblx0XHQgICAgICogdG9wbGV2ZWwgdG8gdGhlIGNsaWVudCBzZXJ2aWNlLlxuXHRcdCAgICAgKi9cblx0XHQgICAgc2V0QW5jZXN0b3JzKCkge1xuXHRcdCAgICBcdHZhciB0aGlzRGF0YVNvdXJjZSA9IHRoaXM7XG5cdFx0ICAgIFx0dmFyIGFkZGVkQ2xpZW50ID0gZmFsc2U7XG5cdFx0ICAgIFx0Xy5mb3JFYWNoKHRoaXNEYXRhU291cmNlLm5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG5cdFx0ICAgIFx0XHRub2RlLmFuY2VzdG9ycyA9IHRoaXNEYXRhU291cmNlLmFuY2VzdG9yc19zdHJ1Y3Rbbm9kZS5pZF0gfHwgW107XG5cdFx0ICAgIFx0XHRpZiAoXy5pc0VtcHR5KG5vZGUuYW5jZXN0b3JzKSA9PT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0bm9kZS5wYXJlbnQgPSBub2RlLmFuY2VzdG9yc1swXTtcblx0XHQgICAgXHRcdH0gZWxzZSB7XG5cdFx0ICAgIFx0XHRcdGlmIChfLmluY2x1ZGVzKHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbCwgbm9kZS5pZCkgPT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0XHQvL2NvbnRhaW5lciBoYXMgbm8gcGFyZW50XG5cdFx0ICAgIFx0XHRcdFx0Ly9hZGRpbmcgdG8gY2xpZW50XG5cdFx0ICAgIFx0XHRcdFx0bm9kZS5hbmNlc3RvcnMucHVzaChcImNsaWVudFwiKTtcblx0XHQgICAgXHRcdFx0XHR0aGlzRGF0YVNvdXJjZS5hbmNlc3RvcnNfc3RydWN0W25vZGUuaWRdID0gW1wiY2xpZW50XCJdO1xuXHRcdCAgICBcdFx0XHRcdGlmIChhZGRlZENsaWVudCA9PT0gZmFsc2UpIHtcblx0XHQgICAgXHRcdFx0XHRcdGFkZGVkQ2xpZW50ID0gdHJ1ZTtcblx0XHRcdCAgICBcdFx0XHRcdHRoaXNEYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdC50b3BMZXZlbC5wdXNoKFwiY2xpZW50XCIpO1xuXHRcdCAgICBcdFx0XHRcdFx0dGhpc0RhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0WydjbGllbnQnXSA9IFtdO1xuXHRcdCAgICBcdFx0XHRcdH1cblx0XHQgICAgXHRcdFx0XHR0aGlzRGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbJ2NsaWVudCddLnB1c2gobm9kZS5pZCk7XG5cdFx0XHQgICAgXHRcdH1cblx0XHQgICAgXHRcdH1cblx0XHQgICAgXHR9KVxuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFJldHVybnMgdGhlIGZsb3cgYmV0d2VlbiB0aGUgaGlnaGVzdCBsZXZlbCBncm91cGluZ1xuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7T2JqZWN0fSAgVGhlIHRvcCBsZXZlbCBmbG93LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0VG9wTGV2ZWxGbG93KCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmxvd0JldHdlZW5TZXQodGhpcy5jaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwpO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEdldHMgdGhlIGZsb3cgYmV0d2VlbiBhbnkgc2V0IG9mIG5vZGUgbGV2ZWxzXG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVfbmFtZXMgIFRoZSBub2RlIG5hbWVzIGluIHRoZSBzZXRcblx0XHQgICAgICogQHJldHVybiAgICAge09iamVjdH0gIFRoZSBmbG93IGJldHdlZW4gc2V0LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0Rmxvd0JldHdlZW5TZXQobm9kZV9uYW1lcykge1xuXHRcdCAgICAgICAgdmFyIGxvY2FsX25vZGVzID0gdGhpcy5ub2Rlcztcblx0XHQgICAgICAgIHZhciBpZE1hcHBpbmcgPSB7fTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYWxfbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgbm9kZSA9IGxvY2FsX25vZGVzW2ldO1xuXG5cdFx0ICAgICAgICAgICAgLy9pZiBub2RlIGlzIGFscmVhZHkgYXQgaXRzIGhpZ2hlc3QgbGV2ZWxcblx0XHQgICAgICAgICAgICBpZiAobm9kZS5hbmNlc3RvcnMgPT09IG51bGwpIHtcblx0XHQgICAgICAgICAgICAgICAgaWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZS5uYW1lO1xuXHRcdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgIC8vY2hlY2sgdG8gc2VlIHdoaWNoIHRhZ3MgYXJlIHByZXNlbnQgaW4gdGhlIGFuY2VzdG9yIGxpc3Rcblx0XHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBub2RlX25hbWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5hbmNlc3RvcnMuaW5kZXhPZihub2RlX25hbWVzW2pdKSA+IC0xKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWRNYXBwaW5nW25vZGUuaWRdID0gbm9kZV9uYW1lc1tqXTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH0gICBcblx0XHQgICAgICAgIC8vbW9kaWZ5IGxpbmtzXG5cdFx0ICAgICAgICB2YXIgbGlua3MgPSB0aGlzLmxpbmtzO1xuXHRcdCAgICAgICAgdmFyIGxpbmtEYXRhID0gW107XG5cdFx0ICAgICAgICBcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgbGluayA9IFtdO1xuXHRcdCAgICAgICAgICAgIGxpbmsuc291cmNlID0gaWRNYXBwaW5nW2xpbmtzW2ldLnNvdXJjZV0gfHwgbGlua3NbaV0uc291cmNlO1xuXHRcdCAgICAgICAgICAgIGxpbmsudGFyZ2V0ID0gaWRNYXBwaW5nW2xpbmtzW2ldLnRhcmdldF0gfHwgbGlua3NbaV0udGFyZ2V0O1xuXHRcdCAgICAgICAgICAgIGxpbmsud2VpZ2h0ID0gbGlua3NbaV0ud2VpZ2h0O1xuXHRcdCAgICAgICAgICAgIGxpbmtEYXRhLnB1c2gobGluayk7XG5cdFx0ICAgICAgICB9XG5cblx0XHQgICAgICAgIC8vY3JlYXRpbmcgdGhlIG5vZGVEYXRhXG5cdFx0ICAgICAgICB2YXIgbm9kZURhdGEgPSBbXTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZV9uYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIHZhciBub2RlX3RvX2FkZCA9IFtdO1xuXHRcdCAgICAgICAgICAgIG5vZGVfdG9fYWRkLmlkID0gbm9kZV9uYW1lc1tpXTtcblx0XHQgICAgICAgICAgICBub2RlX3RvX2FkZC50ZXh0ID0gdGhpcy5ub2RlSWRUb05hbWUobm9kZV9uYW1lc1tpXSkgfHwgbm9kZV9uYW1lc1tpXTtcblxuXG5cdFx0ICAgICAgICAgICAgbm9kZV90b19hZGQuYW5jZXN0b3JzID0gdGhpcy5hbmNlc3RvcnNfc3RydWN0W25vZGVfbmFtZXNbaV1dIHx8IHRoaXMuYW5jZXN0b3JzX3N0cnVjdFtub2RlX3RvX2FkZC50ZXh0XSB8fCBbXTtcblx0XHQgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KG5vZGVfdG9fYWRkLmFuY2VzdG9ycykgPT09IGZhbHNlKSB7XG5cdFx0ICAgICAgICAgICAgICAgIG5vZGVfdG9fYWRkLnBhcmVudCA9IG5vZGVfdG9fYWRkLmFuY2VzdG9yc1swXTtcblx0XHQgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICBub2RlX3RvX2FkZC5wYXJlbnQgPSBudWxsO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICBub2RlRGF0YS5wdXNoKG5vZGVfdG9fYWRkKTtcblx0XHQgICAgICAgIH1cblxuXHRcdCAgICAgICAgcmV0dXJuIHtub2RlRGF0YTpub2RlRGF0YSwgbGlua0RhdGE6bGlua0RhdGF9O1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIHByb2Nlc3MgdGhlIG5vZGVEYXRhIG91dHB1dCBvZiBnZXRGbG93QmV0d2VlblNldFxuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBub2RlRGF0YSAgTm9kZURhdGEgdG8gY29udmVydCBcblx0XHQgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vZGUgb2JqZWN0c1xuXHRcdCAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBOb2RlIG9iamVjdHNcblx0XHQgICAgICovXG5cdFx0ICAgIHByb2Nlc3NOb2RlRGF0YShub2RlRGF0YSkge1xuXHRcdCAgICAgICAgdmFyIG5vZGVzID0gW107XG5cdFx0ICAgICAgICBfLmZvckVhY2gobm9kZURhdGEsIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQgICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKG51bGwsIG51bGwsIGRhdGEuaWQsIGRhdGEudGV4dCxcblx0XHQgICAgICAgICAgICAgICAgbnVsbCwgZGF0YS5wYXJlbnQsIGRhdGEuYW5jZXN0b3JzLCBudWxsLCBudWxsKTtcblx0XHQgICAgICAgICAgICBub2Rlcy5wdXNoKG5ld05vZGUpO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICByZXR1cm4gbm9kZXM7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogcHJvY2VzcyB0aGUgbGlua0RhdGEgb3V0cHV0IG9mIGdldEZsb3dCZXR3ZWVuU2V0XG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIGxpbmtEYXRhICBUaGUgbGluayBkYXRhXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICBUaGUgbm9kZXNcblx0XHQgICAgICogQHJldHVybiAgICAge0FycmF5fSAgTGluayBvYmplY3RzXG5cdFx0ICAgICAqL1xuXHRcdCAgICBwcm9jZXNzTGlua0RhdGEobGlua0RhdGEsIG5vZGVzKSB7XG5cdFx0ICAgIFx0LyoqXG5cdFx0XHQgICAgICogUmV0dXJucyB0aGUgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIGlkXG5cdFx0XHQgICAgICpcblx0XHRcdCAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG5cdFx0XHQgICAgICogQHJldHVybiAgICAge05vZGV9ICAgVGhlIG5vZGUgd2l0aCB0aGUgbWF0Y2hpbmcgaWRcblx0XHRcdCAgICAgKi9cblx0XHRcdCAgICBmdW5jdGlvbiBmaW5kTm9kZUJ5SWQoaWQsIG5vZGVzKSB7XG5cdFx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdCAgICAgICAgICAgIGlmIChpZCA9PSBub2Rlc1tpXS5pZCkge1xuXHRcdFx0ICAgICAgICAgICAgICAgIHJldHVybiBub2Rlc1tpXTtcblx0XHRcdCAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgIH1cblxuXHRcdCAgICAgICAgdmFyIGxpbmtzID0gW107XG5cdFx0ICAgICAgICAvL2EgbWFwcGluZyBmcm9tIHNvdXJjZS5pZC10YXJnZXQuaWQgdG8gdGhlIGxpbmsgYWRkZWRcblx0XHQgICAgICAgIHZhciBhZGRlZF9saW5rcyA9IHt9O1xuXHRcdCAgICAgICAgLy90cmFuc2Zvcm1pbmcgbGluayBkYXRhXG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtEYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKGxpbmtEYXRhW2ldLnNvdXJjZSAhPSBsaW5rRGF0YVtpXS50YXJnZXQpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS5zb3VyY2UsIG5vZGVzKTtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGZpbmROb2RlQnlJZChsaW5rRGF0YVtpXS50YXJnZXQsIG5vZGVzKTtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IGxpbmtEYXRhW2ldLndlaWdodDtcblx0XHQgICAgICAgICAgICAgICAgLy9pbiBvcmRlciB0byBzdW0gYWxsIHRoZSB3ZWlnaHRzIG9mIHRoZSBsaW5rcyBvZiB0aGUgc3ViLW5vZGVzLFxuXHRcdCAgICAgICAgICAgICAgICAvL3dlIHVzZSBhZGRlZF9saW5rcyB0byBrZWVwIHRyYWNrIGlmIGFuIGxpbmsgd2FzIGFkZGVkXG5cdFx0ICAgICAgICAgICAgICAgIC8vaWYgaXQgaXMsIHdlIG1vZGlmeSBpdHMgd2VpZ2h0XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgPT0gbnVsbCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuXHRcdCAgICAgICAgICAgICAgICBcdGNvbnRpbnVlO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID09PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gbmV3IFZpc3VhbGl6ZXJMaW5rLkxpbmsoc291cmNlLCB0YXJnZXQsIHdlaWdodCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBhZGRlZF9saW5rc1tzb3VyY2UuaWQgKyAnLScgKyB0YXJnZXQuaWRdID0gbGluaztcblx0XHQgICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGluayk7XG5cdFx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdfbGluayA9IGFkZGVkX2xpbmtzW3NvdXJjZS5pZCArICctJyArIHRhcmdldC5pZF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBleGlzdGluZ19saW5rLnNldFdlaWdodChleGlzdGluZ19saW5rLmdldFJhd1dlaWdodCgpICsgd2VpZ2h0KTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nX2xpbmsuaW5jcmVhc2VDb3VudCgpO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfSAgXG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gbGlua3M7XG5cdFx0ICAgIH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdERhdGFTb3VyY2U6IFZpc3VhbGl6ZXJEYXRhU291cmNlXG5cdFx0fVxufV0pO1xuXG5cblxuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3VwcycsIHtcbiAgICAgICAgICAgIHVybDogJy9hcHBsaWNhdGlvbmdyb3VwcycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuY3JlYXRlJywge1xuICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbmdyb3VwY3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5hcHBsaWNhdGlvbmdyb3Vwcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbmdyb3VwZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuYXBwbGljYXRpb25ncm91cHMuZWRpdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnYXBwbGljYXRpb25ncm91cGRldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LmFwcGxpY2F0aW9uZ3JvdXBzLmxpc3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdhcHBsaWNhdGlvbkdyb3VwbGlzdCdcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCIsIi8qKlxuICogVGhlIGJhc2UgY2xhc3MgdGhlIGdyYXBoIG9iamVjdC4gQW55IG5vZGVzIG9yIGxpbmtzIHRoYXQgYXJlIGNvbnRhaW5lZCBpblxuICogaXRzIG5vZGVzIG9yIGxpbmtzIHByb3BlcnR5IHdpbGwgYmUgZHJhd24gb24gdXBkYXRlR3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gZ3JhcGggb2JqZWN0LCBjcmVhdGUgYSBuZXcgZmFjdG9yeSB0aGF0IHVzZXMgdGhlIGdyYXBoXG4gKiB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBpdHMgZ3JhcGggY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBHcmFwaCBhcyBrZXkuXG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ0dyYXBoJywgWydQb2xpY3lTZXJ2aWNlJywgZnVuY3Rpb24gKFBvbGljeVNlcnZpY2UpIHtcbiAgICAgICAgY2xhc3MgR3JhcGgge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjb25zdHJ1Y3RvciBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgICBUaGUgc3ZnIHRoYXQgd2lsbCBcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZCB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgICAgTGlzdCBvZiBub2RlcyBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBsaW5rcyAgICAgIExpc3Qgb2YgbGlua3MgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihzdmcsIG5vZGVzLCBsaW5rcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbm9kZXMgfHwgW107XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gbGlua3MgfHwgW107XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzID0gW107XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3ZnUG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuUG9saWN5KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhblpvb206IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhblBhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdEZvcmNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVVwZGF0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlR0NsYXNzOiBcImNvbmNlcHRHXCIsXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoQ2xhc3M6IFwiZ3JhcGhcIixcbiAgICAgICAgICAgICAgICAgICAgcGF0aENsYXNzOiBcInBhdGhcIixcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNsYXNzOiBcImNpcmNsZVwiLFxuICAgICAgICAgICAgICAgICAgICBub2RlVGV4dDogXCJub2RlVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFJhZGl1czogNTAsXG4gICAgICAgICAgICAgICAgICAgIG1heFJhZGl1czogNjAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlPZmZzZXQ6IDYwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHN2Zy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW92ZXJcIl0uY2FsbCh0aGlzLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJkYmxjbGlja1wiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcImNvbnRleHRtZW51XCJdLmNhbGwodGhpcywgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZW91dFwiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeVtcIm1vdXNlZG93blwiXS5jYWxsKHRoaXMsIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2V1cFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmdQb2xpY3lbXCJtb3VzZXVwXCJdLmNhbGwodGhpcywgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhcnJvdyBtYXJrZXJzIGZvciBncmFwaCBsaW5rc1xuICAgICAgICAgICAgICAgIHZhciBkZWZzID0gc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKTtcbiAgICAgICAgICAgICAgICBkZWZzLmFwcGVuZCgnc3ZnOm1hcmtlcicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICdlbmQtYXJyb3cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwicmVmWFwiLCAyMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJyZWZZXCIsIC0xKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIDYpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDYpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKTtcblxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhcnJvdyBtYXJrZXJzIGZvciBsZWFkaW5nIGFycm93XG4gICAgICAgICAgICAgICAgZGVmcy5hcHBlbmQoJ3N2ZzptYXJrZXInKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCAnbWFyay1lbmQtYXJyb3cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndmlld0JveCcsICcwIC01IDEwIDEwJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3JlZlgnLCA3KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAzLjUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAzLjUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCAnTTAsLTVMMTAsMEwwLDUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdmcgPSBzdmc7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z0cgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh0aGlzR3JhcGguY29uc3RzLmdyYXBoQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdHID0gdGhpc0dyYXBoLnN2Z0c7XG5cbiAgICAgICAgICAgICAgICAvLyBzdmcgbm9kZXMgYW5kIGxpbmtzIFxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRocyA9IHN2Z0cuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJnXCIpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzID0gc3ZnRy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcImdcIik7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzaXplRnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgub25XaW5kb3dSZXNpemUoc3ZnKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmJpbmRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6cmVzaXplRnVuY1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShyZXNpemVGdW5jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjYWxscyB0aGUgZGVzdHJveSBtZXRob2QgZm9yIGFsbCBwb2xpY2llc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3kuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Z1BvbGljeS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXNHcmFwaC5iaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKGtleSwgdGhpc0dyYXBoLmJpbmRpbmdzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSdW5zIHRoZSBpbml0IGZ1bmN0aW9uIGZvciBhbGwgdGhlIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXROb2RlcygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJ1bnMgdGhlIGluaXQgZnVuY3Rpb24gZm9yIGFsbCB0aGUgbGlua3NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5pdExpbmtzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcmV0dXJucyB0aGUgbm9kZSBtYXRjaGluZyB0aGUgaWQsIFxuICAgICAgICAgICAgICogb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vbmVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgaWQgICAgICBUaGUgaWRlbnRpZmllclxuICAgICAgICAgICAgICogQHJldHVybiAgICAge05vZGV9ICB7IG1hdGNoaW5nIG5vZGUgfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmaW5kTm9kZUJ5SWQoaWQpe1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PT0gdGhpc0dyYXBoLm5vZGVzW2ldLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0dyYXBoLm5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBkM05vZGUgb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgaWQsXG4gICAgICAgICAgICAgKiBvciB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm9uZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFRoZSBpZGVudGlmaWVyXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7RDNOb2RlfSBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmaW5kRDNOb2RlKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGQzTm9kZTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkM05vZGUgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDNOb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIGRyYWcgcG9saWN5IHRoYXQgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgICAgICAqIHdoZW4gbm9kZXMgYXJlIGRyYWdnZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDMuYmVoYXZpb3IuZHJhZ30gIGQzZHJhZyAgRDMgZHJhZyBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbERyYWdQb2xpY3koZDNkcmFnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnID0gZDNkcmFnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gaW5zdGFsbCBhIHBvbGljeSB0aGF0IHdpbGwgYmUgY2FsbGVkIFxuICAgICAgICAgICAgICogd2hlbiB0aGVyZSBpcyBtb3VzZSBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgZ3JhcGgncyBzdmdcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbFN2Z1BvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN2Z1BvbGljeSA9IHBvbGljeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXNcbiAgICAgICAgICAgICAqIG1vdXNlIGludGVyYWN0aW9uIHdpdGggYSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluc3RhbGxEZWZhdWx0Tm9kZVBvbGljeShwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcy5wdXNoKHBvbGljeSk7XG4gICAgICAgICAgICAgICAgcG9saWN5LmluaXRpYWxpemUodGhpc0dyYXBoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVtb3ZlIGFuIGluc3RhbGxlZCBwb2xpY3kgZm9yIG5vZGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBwb2xpY3lSZW1vdmUgIFRoZSBwb2xpY3kgdG8gcmVtb3ZlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVuaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHBvbGljeVJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3ksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2xpY3kucG9saWN5TmFtZSA9PT0gcG9saWN5UmVtb3ZlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBub2RlIHBvbGljeSBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBwb2xpY3lOYW1lICBUaGUgcG9saWN5IG5hbWVcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtQb2xpY3l9ICBwb2xpY3kgICAgICBUaGUgbWF0Y2hpbmcgcG9saWN5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldE5vZGVQb2xpY3kocG9saWN5TmFtZSkge1xuICAgICAgICAgICAgXHR2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHROb2RlUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlcmUgaXMgYVxuICAgICAgICAgICAgICogbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIHBhdGhcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UG9saWN5fSAgcG9saWN5ICBUaGUgcG9saWN5IHRvIGluc3RhbGxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KHBvbGljeSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzLnB1c2gocG9saWN5KTtcbiAgICAgICAgICAgICAgICBwb2xpY3kuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVtb3ZlIGFuIGluc3RhbGxlZCBwb2xpY3kgZm9yIGxpbmtzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdW5pbnN0YWxsRGVmYXVsdFBhdGhQb2xpY3kocG9saWN5UmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvbGljeVJlbW92ZU5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2xpY3lSZW1vdmUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfKHRoaXNHcmFwaC5kZWZhdWx0UGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3kuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRlZmF1bHRQYXRoUG9saWNpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgaW50ZXJhY3Rpb24gd2l0aCBhIHBhdGhcbiAgICAgICAgICAgICAqIFByb3BvZ2F0ZXMgdGhlIGV2ZW50IHRvIGFsbCBpbnN0YWxsZWQgcGF0aCBwb2xpY2llc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgIFRoZSBldmVudCB0eXBlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNvYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIExpbmsgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBhdGhQb2xpY3lFdmVudChldmVudCwgZDNwYXRoLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM3BhdGgsIGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBpbnRlcmFjdGlvbiB3aXRoIGEgbm9kZVxuICAgICAgICAgICAgICogUHJvcG9nYXRlcyB0aGUgZXZlbnQgdG8gYWxsIGluc3RhbGxlZCBub2RlIHBvbGljaWVzXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgIFRoZSBldmVudCB0eXBlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNvYmplY3R9ICBkM25vZGUgIFRoZSBkMyBub2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIGQgICAgICAgVGhlIG1hdGNoaW5nIE5vZGUgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5kZWZhdWx0Tm9kZVBvbGljaWVzLCBmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5W2V2ZW50XShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyBwYW4gYW5kIHpvb20gcnVsZXMgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkMy5iZWhhdmlvci56b29tfSAgZDN6b29tICBEMyB6b29tIG9ialxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbnN0YWxsWm9vbVBvbGljeShkM3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdTdmcgPSBkM3pvb207XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcuY2FsbCh0aGlzLmRyYWdTdmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxuICAgICAgICAgICAgICogSG9vayBmb3Igb3ZlcnJpZGluZyBpbiBzdWJjbGFzc2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgU1ZHfSAgc3ZnICAgICBUaGUgc3ZnIHRoYXQgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgYXR0YWNoZWQgdG9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb25XaW5kb3dSZXNpemUoc3ZnKSB7fVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluc2VydHMgbGluZSBicmVha3MgaW4gbm9kZSB0ZXh0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0hUTUwgRWxlbX0gIGdFbCAgICBUaGUgZWxlbSB0byBhZGQgdGV4dCB0b1xuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHRpdGxlICAgVGhlIHRpdGxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluc2VydFRpdGxlTGluZWJyZWFrcyAoZ0VsLCB0aXRsZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB3b3JkcyA9IHRpdGxlLnNwbGl0KC9cXHMrL2cpLFxuICAgICAgICAgICAgICAgICAgICBud29yZHMgPSB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZ0VsLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpc0dyYXBoLmNvbnN0cy5ub2RlVGV4dClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCItXCIgKyAobndvcmRzLTEpKjcuNSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0c3BhbiA9IGVsLmFwcGVuZCgndHNwYW4nKS50ZXh0KHdvcmRzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgICAgIHRzcGFuLmF0dHIoJ3gnLCAwKS5hdHRyKCdkeScsICcxNScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmVzIGFsbCBsaW5rcyBmcm9tIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNwbGljZUxpbmtzRm9yTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRvU3BsaWNlID0gdGhpc0dyYXBoLmxpbmtzLmZpbHRlcihmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGwuc291cmNlID09PSBub2RlIHx8IGwudGFyZ2V0ID09PSBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9TcGxpY2UubWFwKGZ1bmN0aW9uKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnNwbGljZSh0aGlzR3JhcGgubGlua3MuaW5kZXhPZihsKSwgMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyB0aGUgbm9kZSB0byB0aGUgZ3JhcGggYW5kIHVwZGF0ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5vZGUgICAgVGhlIG5vZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIG5vZGUgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZU5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5zcGxpY2UodGhpc0dyYXBoLm5vZGVzLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyB0aGUgbGluayB0byB0aGUgZ3JhcGggYW5kIHVwZGF0ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bGlua30gIGxpbmsgICAgVGhlIGxpbmtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkTGluayhsaW5rKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzLnB1c2gobGluayk7XG4gICAgICAgICAgICAgICAgbGluay5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIGxpbmsgdG8gdGhlIGdyYXBoIGFuZCB1cGRhdGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2xpbmt9ICBsaW5rICAgIFRoZSBsaW5rXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUxpbmsobGluaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcy5zcGxpY2UodGhpc0dyYXBoLmxpbmtzLmluZGV4T2YobGluayksIDEpO1xuICAgICAgICAgICAgICAgIGxpbmsuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyB1cGRhdGluZyBleGlzdGluZyBwYXRoc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtQYXRofSAgcGF0aHMgICBMaXN0IG9mIHBhdGhzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUV4aXN0aW5nUGF0aHMocGF0aHMpIHtcbiAgICAgICAgICAgICAgICBwYXRocy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC51cGRhdGVBdHRyKGQzLnNlbGVjdCh0aGlzKSwgZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIGFkZGluZyBuZXcgcGF0aHNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7UGF0aH0gIG5ld1BhdGhzICBMaXN0IG9mIG5ldyBwYXRoc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVOZXdQYXRocyhuZXdQYXRocykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIGQubmV3UGF0aEF0dHIoZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vaWYgbm9kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBwb2xpY3ksIHVzZSBkZWZhdWx0IGZvciB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAgICBuZXdQYXRocy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdmVyXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdmVyXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcImRibGNsaWNrXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwiY29udGV4dG1lbnVcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnBhdGhQb2xpY3lFdmVudChcIm1vdXNlb3V0XCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGF0aFBvbGljeUV2ZW50KFwibW91c2Vkb3duXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2Vkb3duXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wYXRoUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aFBvbGljeUV2ZW50KFwibW91c2V1cFwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodGhpc0dyYXBoLmRyYWcpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIHVwZGF0aW5nIGV4aXN0aW5nIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUV4aXN0aW5nTm9kZXMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMgPSB0aGlzLmNpcmNsZXMuZGF0YSh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5pZDt9KVxuICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZUF0dHIoZDMuc2VsZWN0KHRoaXMpLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZ3JhcGggaXMgYWRkaW5nIG5ldyBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbmV3Tm9kZXMgIExpc3Qgb2YgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZU5ld05vZGVzKG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuZ3JhcGggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5pbml0aWFsaXplKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZC5uZXdOb2RlQXR0cihkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9pZiBub2RlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIHBvbGljeSwgdXNlIGRlZmF1bHQgZm9yIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgIG5ld05vZGVzLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW92ZXJcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW92ZXJcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwiZGJsY2xpY2tcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJkYmxjbGlja1wiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY29udGV4dG1lbnVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJjb250ZXh0bWVudVwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVQb2xpY3lFdmVudChcImNvbnRleHRtZW51XCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhhc1BvbGljeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVBvbGljeUV2ZW50KFwibW91c2VvdXRcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZW91dFwiLCBkMy5zZWxlY3QodGhpcyksIGQpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaGFzUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZWRvd25cIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZWRvd25cIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNldXBcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5oYXNQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVQb2xpY3lFdmVudChcIm1vdXNldXBcIiwgZDMuc2VsZWN0KHRoaXMpLCBkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlUG9saWN5RXZlbnQoXCJtb3VzZXVwXCIsIGQzLnNlbGVjdCh0aGlzKSwgZCk7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh0aGlzR3JhcGguZHJhZyk7XG5cbiAgICAgICAgICAgICAgICBuZXdOb2Rlcy5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCkge3JldHVybiBTdHJpbmcoZC5yYWRpdXMpfSk7XG5cblxuICAgICAgICAgICAgICAgIG5ld05vZGVzLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbnNlcnRUaXRsZUxpbmVicmVha3MoZDMuc2VsZWN0KHRoaXMpLCBkLnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByZXZlbnRzIG5vZGVzIGZyb20gY29sbGlkaW5nXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGFscGhhICAgQWZmZWN0cyBob3cgbXVjaCBjaGFuZ2VcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsaXNpb24gY2F1c2VzXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Ym9vbGVhbn0gIHtXaGV0aGVyIG5vZGVzIGFyZSBjb2xsaWRlZH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZDNGb3JjZUNvbGxpZGUoYWxwaGEpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICBcdFx0Y29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cztcbiAgICAgICAgICAgIFx0dmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuICAgICAgICAgICAgXHR2YXIgcXVhZHRyZWUgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBkLnJhZGl1cyArIGNvbnN0cy5tYXhSYWRpdXMgKyBjb25zdHMucGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG54MSA9IGQueCAtIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBueDIgPSBkLnggKyByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnkxID0gZC55IC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG55MiA9IGQueSArIHI7XG4gICAgICAgICAgICAgICAgICAgIHF1YWR0cmVlLnZpc2l0KGZ1bmN0aW9uKHF1YWQsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhZC5wb2ludCAmJiAocXVhZC5wb2ludCAhPT0gZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGQueCAtIHF1YWQucG9pbnQueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGQueSAtIHF1YWQucG9pbnQueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGQucmFkaXVzICsgcXVhZC5wb2ludC5yYWRpdXMgKyBjb25zdHMucGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobCA8IHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAobCAtIHIpIC8gbCAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54IC09IHggKj0gbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSAtPSB5ICo9IGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFkLnBvaW50LnggKz0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YWQucG9pbnQueSArPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geDEgPiBueDIgfHwgeDIgPCBueDEgfHwgeTEgPiBueTIgfHwgeTIgPCBueTE7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGljayBvZiB0aGUgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtEM3RpY2sgZXZlbnR9ICBlICAgIEQzdGljayBldmVudFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIHdpZHRoICBUaGUgd2lkdGggb2YgdGhlIHNpbXVsYXRpb25cbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkM0ZvcmNlVGljayhlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICBcdHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgXHRcdGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHM7XG5cbiAgICAgICAgICAgIFx0dmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1x0XG4gICAgICAgICAgICBcdHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgIFx0dmFyIHEgPSBkMy5nZW9tLnF1YWR0cmVlKHRoaXNHcmFwaC5ub2RlcyksXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcS52aXNpdCh0aGlzLmQzRm9yY2VDb2xsaWRlKG5vZGVzW2ldKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKHRoaXMuZDNGb3JjZUNvbGxpZGUoLjUpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueCA9IE1hdGgubWF4KGQucmFkaXVzICsgb2Zmc2V0LCBNYXRoLm1pbih3aWR0aCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLngpKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55ID0gTWF0aC5tYXgoZC5yYWRpdXMgKyBvZmZzZXQsIE1hdGgubWluKGhlaWdodCAtIG9mZnNldCAtIGQucmFkaXVzLCBkLnkpKTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHNcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhcnRzIG9uIHN0YXJ0IG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VTdGFydCgpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lnk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCBvbiB0aGUgZW5kIG9mIHRoZSBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VFbmQoKSB7XG4gICAgICAgICAgICBcdHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgXHR0aGlzR3JhcGguY2lyY2xlc1xuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS55OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGJvdW5kcyBmb3IgdGhlIFxuICAgICAgICAgICAgICogZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICB3aWR0aCBhbmQgaGVpZ2h0IGFzIHByb3BlcnRpZXMgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VCb3VuZHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHN2Z0hlaWdodDtcbiAgICAgICAgICAgICAgICByZXR1cm4ge3dpZHRoOndpZHRoLCBoZWlnaHQ6aGVpZ2h0fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEb2VzIGEgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBUaGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0Rm9yY2UoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSB0aGlzR3JhcGgubGlua3M7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShub2RlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSB0aGlzR3JhcGguZDNGb3JjZUJvdW5kcygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZvcmNlID0gZDMubGF5b3V0LmZvcmNlKClcbiAgICAgICAgICAgICAgICAgICAgLnNpemUoW2JvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgICAgIC5ub2Rlcyhub2RlcylcbiAgICAgICAgICAgICAgICAgICAgLmNoYXJnZShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTYwMDA7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5saW5rcyhsaW5rcyk7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5saW5rRGlzdGFuY2UoYm91bmRzLndpZHRoLzMpO1xuICAgICAgICAgICAgICAgIGZvcmNlLmxpbmtTdHJlbmd0aCguMik7XG4gICAgICAgICAgICAgICAgZm9yY2UuZ3Jhdml0eSguMik7XG5cbiAgICAgICAgICAgICAgICBmb3JjZS5vbigndGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXNHcmFwaC5kM0ZvcmNlVGljay5jYWxsKHRoaXNHcmFwaCwgXG4gICAgICAgICAgICAgICAgXHRcdFx0ZSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLm9uKCdzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIFx0dGhpc0dyYXBoLmQzRm9yY2VTdGFydC5jYWxsKHRoaXNHcmFwaClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZvcmNlLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXNHcmFwaC5kM0ZvcmNlRW5kLmNhbGwodGhpc0dyYXBoKVxuICAgICAgICAgICAgICAgIH0pOyBcblxuXG4gICAgICAgICAgICAgICAgZm9yY2Uuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChmb3JjZS5hbHBoYSgpID4gMWUtMikgJiYgKGsgPCAxNTApKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlLnRpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGsgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3JjZS5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFx0Y2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgcG9zaXRpb25zIHRvIGJlIHRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlbiBpZiBcbiAgICAgICAgICAgICAqIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgICogYWxzbyBzZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFBvc2l0aW9ucygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzR3JhcGguY29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1dpZHRoID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdmdIZWlnaHQgPSAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ZnV2lkdGggLSAoMipvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQgLSAoMipvZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpc0dyYXBoLm5vZGVzO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5yYWRpdXMgPSBub2Rlc1tpXS5yYWRpdXMgfHwgdGhpc0dyYXBoLmNvbnN0cy5zdGFydFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnggPT0gbnVsbCB8fCBub2Rlc1tpXS55ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzW2ldLnhTdGFydCA9IHdpZHRoLzIgICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS54ID0gd2lkdGgvMiAgKyBub2Rlc1tpXS5yYWRpdXMgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2Rlc1tpXS55U3RhcnQgPSBoZWlnaHQvMiArIG5vZGVzW2ldLnJhZGl1cyArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ueSA9IGhlaWdodC8yICsgbm9kZXNbaV0ucmFkaXVzICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHRvIHVwZGF0ZSB0aGUgdmlldyBvZiB0aGUgZ3JhcGggd2hlblxuICAgICAgICAgICAgICogZGF0YSBjaGFuZ2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1cGRhdGVHcmFwaChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZTtcblxuICAgICAgICAgICAgXHRpZiAodGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUpIHtcbiAgICAgICAgICAgIFx0XHRyZXR1cm47XG4gICAgICAgICAgICBcdH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhpc3RpbmdOb2RlcygpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdHcz0gdGhpc0dyYXBoLmNpcmNsZXMuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKTtcblxuICAgICAgICAgICAgXHQvLyBjb25zb2xlLmxvZygndXBkYXRlJywgbmV3R3MpO1xuICAgICAgICAgICAgICAgIG5ld0dzLmNsYXNzZWQoY29uc3RzLmNpcmNsZUdDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZU5ld05vZGVzKG5ld0dzKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaW5pdEZvcmNlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRGb3JjZShmdW5jdGlvbigpIHtcbiAgICBcdCAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlTmV3Tm9kZXMuY2FsbCh0aGlzR3JhcGgsIG5ld0dzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmluaXRGb3JjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3Tm9kZXMobmV3R3MpO1xuXHQgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgucGF0aHMgPSB0aGlzR3JhcGgucGF0aHMuZGF0YSh0aGlzR3JhcGgubGlua3MsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKGQuc291cmNlLmlkKSArIFwiK1wiICsgU3RyaW5nKGQudGFyZ2V0LmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSB0aGlzR3JhcGgucGF0aHM7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeGlzdGluZ1BhdGhzKHBhdGhzKTtcblxuICAgICAgICAgICAgICAgIHZhciBuZXdwYXRocyA9IHBhdGhzLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsJ3VybCgjZW5kLWFycm93KScpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJsaW5rXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV3UGF0aHMobmV3cGF0aHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBsaW5rc1xuICAgICAgICAgICAgICAgIHBhdGhzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgXHRjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEdyYXBoOiBHcmFwaFxuICAgICAgICB9XG59XSk7XG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmRhc2hib2FyZCcsIFsnY29udGl2Lm1vZGVscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5kYXNoYm9hcmQnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGFzaGJvYXJkJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2Rhc2hib2FyZCdcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCIsIi8qKlxuICogQ3JlYXRlZCBieSB2amFpbjMgb24gNS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5sb2dpbicsIFsnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5sb2dpbicsIHtcbiAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnbG9naW4nXG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubWVudScsIFtdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3BvbGljaWVzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbmV0d29ya3BvbGljaWVzJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uJywge1xuICAgICAgICAgICAgdXJsOiAnL2lzb2xhdGlvbicsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVpLXZpZXcvPidcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5jcmVhdGUnLCB7XG4gICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2lzb2xhdGlvbnBvbGljeWNyZWF0ZSdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLmlzb2xhdGlvbi5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdpc29sYXRpb25wb2xpY3lkZXRhaWxzJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuaXNvbGF0aW9uLmVkaXQnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZWRpdC86a2V5JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2lzb2xhdGlvbnBvbGljeWRldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGgnLCB7XG4gICAgICAgICAgICB1cmw6ICcvYmFuZHdpZHRoJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWktdmlldy8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoLmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnYmFuZHdpZHRocG9saWN5Y3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMuYmFuZHdpZHRoLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ2JhbmR3aWR0aHBvbGljeWRldGFpbHMnXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Lm5ldHdvcmtwb2xpY2llcy5iYW5kd2lkdGguZWRpdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9lZGl0LzprZXknLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnYmFuZHdpZHRocG9saWN5ZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3BvbGljaWVzLnJlZGlyZWN0aW9uJywge1xuICAgICAgICAgICAgdXJsOiAnL3JlZGlyZWN0aW9uJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8dWktdmlldy8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcG9saWNpZXMubGlzdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgIHBhcmFtczogeyBwb2xpY3lUYWI6IG51bGwgfSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ25ldHdvcmtwb2xpY2llc3RhYnMnXG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTgvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubmV0d29ya3MnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdjb250aXYubWVudS5uZXR3b3JrcycsIHtcbiAgICAgICAgICAgIHVybDogJy9uZXR3b3JrcycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MubGlzdCcsIHtcbiAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ25ldHdvcmtMaXN0J1xuICAgICAgICB9KS5cbiAgICAgICAgICAgIHN0YXRlKCdjb250aXYubWVudS5uZXR3b3Jrcy5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICduZXR3b3JrZGV0YWlscydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUubmV0d29ya3MuY3JlYXRlJywge1xuICAgICAgICAgICAgdXJsOiAnL2NyZWF0ZScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICduZXR3b3JrY3JlYXRlJ1xuICAgICAgICB9KTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5vcmdhbml6YXRpb25zJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY29udGl2Lm1lbnUub3JnYW5pemF0aW9ucycsIHtcbiAgICAgICAgICAgIHVybDogJy9vcmdhbml6YXRpb25zJyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXcgY2xhc3M9XCJ1aSBjb250YWluZXJcIi8+J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmxpc3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGlzdCcsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdvcmdhbml6YXRpb25saXN0J1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHVybDogJy9jcmVhdGUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnb3JnYW5pemF0aW9uY3JlYXRlJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5vcmdhbml6YXRpb25zLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscy86a2V5JyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ29yZ2FuaXphdGlvbmRldGFpbHMnXG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIFRoZSBncmFwaCB0aGF0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgdmlzdWFsaXphdGlvbiB0YWIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemVyR3JhcGgnLCBbJ0dyYXBoJywgZnVuY3Rpb24gKEdyYXBoKSB7XG4gICAgXHRjbGFzcyBWaXN1YWxpemVyR3JhcGggZXh0ZW5kcyBHcmFwaC5HcmFwaCB7XG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgXHRcdCAqXG4gICAgXHRcdCAqIEBwYXJhbSAgIHtIVE1MIFNWR30gIHN2ZyAgICAgICAgICAgICBUaGUgc3ZnIHRoYXQgd2lsbCBcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkIHRoZSBncmFwaFxuICAgICAgICAgICAgICogQHBhcmFtICAge0FycmF5fSAgbm9kZXMgICBcdFx0ICAgIExpc3Qgb2Ygbm9kZXNcbiAgICAgICAgICAgICAqIEBwYXJhbSAgIHtBcnJheX0gIGxpbmtzICAgXHRcdCAgICBMaXN0IG9mIGxpbmtzXG4gICAgXHRcdCAqIEBwYXJhbSAgIHtEYXRhU291cmNlfSAgZGF0YVNvdXJjZSAgICBUaGUgZGF0YSBzb3VyY2VcbiAgICBcdFx0ICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihzdmcsIG5vZGVzLCBsaW5rcywgZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHN1cGVyKHN2Zywgbm9kZXMsIGxpbmtzKTtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vaG9sZHMgY3VycmVudCB0cmFuc2l0aW9ucyB0aGF0IGFyZSBvY2N1cmluZ1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS50cmFuc2l0aW9uID0gW107XG4gICAgICAgICAgICAgICAgLy9NaW4gZGlzdGFuY2UgYmV0d2VlbiBub2RlcyB3aGVuIHNwYXduaW5nIHJhbmRvbWx5XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cy5lZGdlX2J1ZmZlciA9IDIwMDtcbiAgICAgICAgICAgICAgICAvL1NpemUgcmVkdWN0aW9uIGFzIHlvdSBnbyB0aHJvdWdoIGxldmVscyBpbiBub2Rlc1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jb25zdHMucmFkaXVzRGVjYXkgPSAxO1xuICAgICAgICAgICAgICAgIC8vQ3NzIGNsYXNzIGZvciBub2RlcyB0aGF0IGFyZSBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNvbnN0cy5jb250YWluZXJDbGFzcyA9ICdjb250YWluZXInO1xuXG4gICAgICAgICAgICAgICAgLy9kYXRhU291cmNlIGhvbGRzIHRoZSBzZXJ2ZXIgZGF0YSBhbmQgbWV0aG9kcyBmb3JcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnRpbmcgaXQgdG8gZGF0YSBmb3IgdGhlIGdyYXBoXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmRhdGFTb3VyY2UgPSBkYXRhU291cmNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vRHJhZyBiZWhhdmlvciBmb3Igbm9kZXNcbiAgICAgICAgICAgICAgICB2YXIgZHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgICAgICAgICAgICAgICAub3JpZ2luKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3g6IGQueCwgeTogZC55fTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZ3N0YXJ0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJkcmFnXCIsIGZ1bmN0aW9uKGFyZ3Mpe1xuICAgICAgICAgICAgICAgICAgICBcdGQzLnNlbGVjdCggdGhpcykuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiggZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueCArPSBkMy5ldmVudC5keDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gZDMuZXZlbnQuZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgWyBkLngsZC55IF0gKyBcIilcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcdFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJkcmFnZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5kcmFnID0gZHJhZztcblxuICAgICAgICAgICAgICAgIC8vUGFuIGFuZCBab29tIGJlaGF2aW9yIGZvciB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAgICB2YXIgem9vbSA9IGQzLmJlaGF2aW9yLnpvb20oKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJ6b29tXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQuc291cmNlRXZlbnQgIT0gbnVsbCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC5jdHJsS2V5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZC5jYWxsKHRoaXNHcmFwaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiem9vbXN0YXJ0XCIsIGZ1bmN0aW9uKGQsIGkpe1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguZHJhZ1N2ZyA9IHpvb207XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN2Zy5jYWxsKHpvb20pLm9uKFwiZGJsY2xpY2suem9vbVwiLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2l0aCBubyBhcmdzIHdoZW4gdGhlIGdyYXBoIGhhcyBhIHpvb20gYWN0aW9uXG4gICAgICAgICAgICAgKiBDYW4gYWxzbyBiZSBjYWxsZWQgd2l0aCBhcmdzIHRvIGZvcmNlIGEgem9vbSBvciBwYW4gXG4gICAgICAgICAgICAgKiBldmVudCBmb3IgdGhlIGdyYXBoLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gICB0cmFuc2xhdGUgIFRoZSBhbW91bnQgdG8gdHJhbnNsYXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgc2NhbGUgICAgICBUaGUgYW1vdW50IHRvIHNjYWxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHpvb21lZCh0cmFuc2xhdGUsIHNjYWxlKXtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLnN0YXRlLnJpZ2h0Q2xpY2sgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuanVzdFNjYWxlVHJhbnNHcmFwaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZSAhPSBudWxsICYmIHNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSB0aGlzR3JhcGguZHJhZ1N2ZztcbiAgICAgICAgICAgICAgICAgICAgem9vbS5zY2FsZShzY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHpvb20udHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgbmFtZXMgdG8gcHJldmVudCB0cmFuc2l0aW9uIGNvbmZsaWN0c1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbVNldENhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIFx0em9vbS5zY2FsZShzY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIFx0em9vbS50cmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZV9uYW1lID0gXCJ6b29tXCIgKyB0cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChcIi5cIiArIHRoaXMuY29uc3RzLmdyYXBoQ2xhc3MpLnRyYW5zaXRpb24odHJhbnNsYXRlX25hbWUpLmRlbGF5KDEwMCkuZHVyYXRpb24oNzUwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHpvb20udHJhbnNsYXRlKCkgKyAnKSBzY2FsZSgnICsgem9vbS5zY2FsZSgpICsgJyknKS5lYWNoKFwiZW5kXCIsIHpvb21TZXRDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGguc3RhdGUuY2FuWm9vbSkge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoXCIuXCIgKyB0aGlzLmNvbnN0cy5ncmFwaENsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKSArIFwiKSBzY2FsZShcIiArdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSArIFwiKVwiKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgd2luZG93IHJlc2l6ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7SFRNTCBTVkd9ICBzdmcgICAgVGhlIHN2ZyB0byByZXNpemVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb25XaW5kb3dSZXNpemUoc3ZnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJykub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGRpdldpZHRoID0gJCgnI3Zpc3VhbGl6YXRpb24tZ3JhcGgnKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBib2R5RWwuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHN2Zy5hdHRyKFwid2lkdGhcIiwgZGl2V2lkdGgpLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0IC0gb2Zmc2V0LnRvcCAtIDIwKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHVwZGF0ZWQgZGF0YSBmb3IgdGhlIGxpbmtzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUxpbmtEYXRhKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBub2RlX25hbWVzX3NldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmV0RGF0YSA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmdldEZsb3dCZXR3ZWVuU2V0KG5vZGVfbmFtZXNfc2V0KTtcbiAgICAgICAgICAgICAgICB2YXIgbGlua0RhdGEgPSByZXREYXRhLmxpbmtEYXRhO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5saW5rcyA9IHRoaXNHcmFwaC5kYXRhU291cmNlLnByb2Nlc3NMaW5rRGF0YShsaW5rRGF0YSwgdGhpc0dyYXBoLm5vZGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdExpbmtzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEdyYXBoOiBWaXN1YWxpemVyR3JhcGhcbiAgICAgICAgfVxufV0pO1xuXG5cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZqYWluMyBvbiA1LzE4LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnNlcnZpY2VsYnMnLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJ10pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNlcnZpY2VsYnMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvc2VydmljZWxicycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5saXN0Jywge1xuICAgICAgICAgICAgdXJsOiAnL2xpc3QnLFxuICAgICAgICAgICAgY29tcG9uZW50OiAnc2VydmljZWxiTGlzdCdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5jcmVhdGUnLCB7XG4gICAgICAgICAgICB1cmw6ICcvY3JlYXRlJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ3NlcnZpY2VsYkNyZWF0ZSdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2VydmljZWxicy5kZXRhaWxzJywge1xuICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMvOmtleScsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdzZXJ2aWNlbGJEZXRhaWxzJ1xuICAgICAgICB9KTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwIiwiLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgbGluayBvYmplY3RzIGZvciB0aGUgZ3JhcGguXG4gKiBTdXBwb3J0cyBwb2xpY2llcy5cbiAqIFxuICogVG8gd3JpdGUgeW91ciBvd24gbGluayBvYmplY3QsIGNyZWF0ZSBhIG5ldyBmYWN0b3J5IHRoYXQgdXNlcyB0aGUgbGlua1xuICogeW91IHdhbnQgdG8gaW5oZXJpdCBhcyBhIGRlcGVuZGVuY3ksIGFuZCBleHRlbmQgaXRzIGxpbmsgY2xhc3MuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBMaW5rIGFzIGtleVxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdMaW5rJywgW2Z1bmN0aW9uICgpIHtcbiAgICBcdGNsYXNzIExpbmsge1xuICAgIFx0XHQvKipcbiAgICBcdFx0ICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgIFx0XHQgKlxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHNvdXJjZU5vZGUgIFRoZSBzb3VyY2Ugbm9kZVxuICAgIFx0XHQgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHRhcmdldE5vZGUgIFRoZSB0YXJnZXQgbm9kZVxuICAgIFx0XHQgKi9cblx0XHRcdGNvbnN0cnVjdG9yKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpIHtcblx0XHRcdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2VOb2RlO1xuXHRcdFx0XHR0aGlzLnRhcmdldCA9IHRhcmdldE5vZGU7XG5cdFx0XHRcdHRoaXMuaGFzUG9saWN5ID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMucGF0aFBvbGljaWVzID0gW107XG5cdFx0XHRcdHRoaXMuZ3JhcGggPSBudWxsO1xuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIHdoZW4gYSBsaW5rIGlzIGFkZGVkIHRvIHRoZSBncmFwaFxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIGFkZGVkIHRvXG5cdFx0XHQgKi9cblx0XHRcdGluaXRpYWxpemUoZ3JhcGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuaW5pdGlhbGl6ZWQgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLmdyYXBoID0gZ3JhcGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSB1cGRhdGUgZ3JhcGggZm9yIGV4aXN0aW5nIGxpbmtzXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuXHRcdFx0ICogQHBhcmFtICAgICAge0xpbmt9ICBcdCAgIGQgICAgICAgTWF0Y2hpbmcgTGluayBPYmplY3QgICAgICAgXG5cdFx0XHQgKi9cblx0XHRcdHVwZGF0ZUF0dHIoZDNwYXRoLCBkKSB7XG5cdFx0XHRcdGQzcGF0aC5zdHlsZSgnbWFya2VyLWVuZCcsICd1cmwoI2VuZC1hcnJvdyknKVxuXHRcdCAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcnJvd1BhdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCBkdXJpbmcgdGhlIGZpcnN0IHVwZGF0ZSBncmFwaCBmb3IgYSBsaW5rXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuXHRcdFx0ICogQHBhcmFtICAgICAge0xpbmt9ICBcdCAgIGQgICAgICAgTWF0Y2hpbmcgTGluayBPYmplY3QgICAgICAgXG5cdFx0XHQgKi9cblx0XHRcdG5ld1BhdGhBdHRyKGQzcGF0aCwgZCkge1xuXHRcdFx0XHRkM3BhdGguYXR0cignZCcsIGFycm93UGF0aCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsY3VsYXRlcyB0aGUgYXJyb3cgcGF0aFxuXHRcdFx0ICpcblx0XHRcdCAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICBUaGUgcGF0aCB0byBkcmF3XG5cdFx0XHQgKi9cblx0XHQgICAgYXJyb3dQYXRoKCkge1xuXHRcdCAgICBcdHZhciBkID0gdGhpcztcblx0XHQgICAgICAgIHZhciBkeCA9IGQudGFyZ2V0LnggLSBkLnNvdXJjZS54LFxuXHRcdCAgICAgICAgICAgIGR5ID0gZC50YXJnZXQueSAtIGQuc291cmNlLnksXG5cdFx0ICAgICAgICAgICAgZHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHRcdCAgICAgICAgcmV0dXJuIFwiTVwiICsgZC5zb3VyY2UueCArIFwiLFwiICsgZC5zb3VyY2UueSArIFwiQVwiICsgZHIgKyBcIixcIiArIGRyICsgXCIgMCAwLDEgXCIgKyBkLnRhcmdldC54ICsgXCIsXCIgKyBkLnRhcmdldC55O1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIFVzZWQgdG8gaW5zdGFsbCBwb2xpY2llcyB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGlzXG5cdFx0ICAgICAqIGxpbmsgaGFzIGEgbW91c2UgZXZlbnRcblx0XHQgICAgICpcblx0XHQgICAgICogQHBhcmFtICAgICAge1BvbGljeX0gIHBvbGljeSAgVGhlIHBvbGljeSB0byBpbnN0YWxsXG5cdFx0ICAgICAqL1xuXHRcdFx0aW5zdGFsbFBhdGhQb2xpY3kocG9saWN5KSB7XG5cdFx0XHRcdHRoaXMuaGFzUG9saWN5ID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5wYXRoUG9saWNpZXMucHVzaChwb2xpY3kpO1xuXHRcdFx0XHRwb2xpY3kuaW5pdGlhbGl6ZSh0aGlzLmdyYXBoKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBVc2VkIHRvIHVuaW5zdGFsbCBwb2xpY3kgZm9yIHRoaXMgbGlua1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3lSZW1vdmUgIFRoZSBwb2xpY3kgdG8gcmVtb3ZlXG5cdFx0XHQgKi9cblx0XHRcdHVuaW5zdGFsbFBhdGhQb2xpY3kocG9saWN5UmVtb3ZlKSB7XG5cdFx0XHRcdHZhciBwb2xpY3lSZW1vdmVOYW1lO1xuXHRcdFx0XHR2YXIgdGhpc1BhdGggPSB0aGlzO1xuXHRcdFx0XHRpZiAodHlwZW9mIHBvbGljeVJlbW92ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRwb2xpY3lSZW1vdmVOYW1lID0gcG9saWN5UmVtb3ZlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmUucG9saWN5TmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfKHRoaXNQYXRoLnBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3ksIGluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKHBvbGljeS5wb2xpY3lOYW1lID09PSBwb2xpY3lSZW1vdmVOYW1lKSB7XG5cdFx0XHRcdFx0XHRwb2xpY3kuZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0dGhpc1BhdGgucGF0aFBvbGljaWVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKHRoaXNQYXRoLnBhdGhQb2xpY2llcy5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHR0aGlzUGF0aC5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbW91c2UgZXZlbnQgZm9yIHRoaXMgcGF0aFxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBldmVudCAgICAgVGhlIG1vdXNlIGV2ZW50XG5cdFx0XHQgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM3BhdGggIFRoZSBkMyBwYXRoXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7T2JqZWN0fSAgZCAgICAgICAgIFRoZSBtYXRjaGluZyBsaW5rIG9iamVjdFxuXHRcdFx0ICovXG5cdFx0XHRwYXRoUG9saWN5RXZlbnQoZXZlbnQsIGQzcGF0aCwgZCkge1xuXHRcdFx0XHRfKGQucGF0aFBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSkge1xuXHRcdFx0XHRcdHBvbGljeVtldmVudF0oZDNwYXRoLCBkKTtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdExpbms6IExpbmtcblx0XHR9XG59XSk7XG5cblxuXG5cblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnNldHRpbmdzJywgWydjb250aXYubW9kZWxzJywgJ2NvbnRpdi5kaXJlY3RpdmVzJywgJ2NvbnRpdi51dGlscyddKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncycsIHtcbiAgICAgICAgICAgIHVybDogJy9nbG9iYWwnLFxuICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgdWktdmlldyBjbGFzcz1cInVpIGNvbnRhaW5lclwiLz4nXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51LnNldHRpbmdzLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzZXR0aW5ncy9zZXR0aW5nc21lbnUuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5sb2dzJywge1xuICAgICAgICAgICAgdXJsOiAnL2xvZ3MnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5hdXRoJywge1xuICAgICAgICAgICAgdXJsOiAnL2F1dGgnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5saWNlbnNlJywge1xuICAgICAgICAgICAgdXJsOiAnL2xpY2Vuc2UnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJydcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUuc2V0dGluZ3MuZGV0YWlscy5wb2xpY2llcycsIHtcbiAgICAgICAgICAgIHVybDogJy9wb2xpY2llcycsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLm5ldHdvcmtzJywge1xuICAgICAgICAgICAgdXJsOiAnL25ldHdvcmtzJyxcbiAgICAgICAgICAgIGNvbXBvbmVudDogJ25ldHdvcmtzZXR0aW5nJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLnZvbHVtZXMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvdm9sdW1lcycsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICd2b2x1bWVzZXR0aW5nJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS5zZXR0aW5ncy5kZXRhaWxzLmNsdXN0ZXInLCB7XG4gICAgICAgICAgICB1cmw6ICcvY2x1c3RlcicsXG4gICAgICAgICAgICBjb21wb25lbnQ6ICdjbHVzdGVyc2V0dGluZ3MnXG4gICAgICAgIH0pO1xuICAgIH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLCIvKipcbiAqIFRoZSBsaW5rIHRoYXQgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHRoZSB2aXN1YWxpemF0aW9uIHRhYi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ1Zpc3VhbGl6ZXJMaW5rJywgWydMaW5rJywgZnVuY3Rpb24gKExpbmspIHtcblx0XHRjbGFzcyBWaXN1YWxpemVyTGluayBleHRlbmRzIExpbmsuTGluayB7XG5cdFx0XHQvKipcblx0XHRcdCAqIENvbnN0cnVjdHMgdGhlIG9iamVjdC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7Tm9kZX0gIHNvdXJjZU5vZGUgIFRoZSBzb3VyY2Ugbm9kZVxuXHRcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICB0YXJnZXROb2RlICBUaGUgdGFyZ2V0IG5vZGVcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB3ZWlnaHQgICAgVGhlIHdlaWdodCBvZiB0aGUgbGlua1xuXHRcdFx0ICovXG5cdFx0ICAgIGNvbnN0cnVjdG9yKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUsIHdlaWdodCkge1xuXHRcdCAgICAgICAgc3VwZXIoc291cmNlTm9kZSwgdGFyZ2V0Tm9kZSk7XG5cdFx0ICAgICAgICB0aGlzLndlaWdodCA9IHdlaWdodDtcblx0XHQgICAgICAgIC8vQ291bnQgaXMgdXNlZCB0byBrZWVwIHRyYWNrIG9mIGhvdyBtYW55XG5cdFx0ICAgICAgICAvL3BhdGhzIHRvIGl0cyBzdWJub2RlcyB0aGVyZSBhcmVcblx0XHQgICAgICAgIC8vaW4gb3JkZXIgdG8gY2FsY3VsYXRlIGF2ZXJhZ2UgdHJhZmZpY1xuXHRcdCAgICAgICAgdGhpcy5jb3VudCA9IDE7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogSW5jcmVhc2VzIHRoZSBjb3VudCBvZiB0aGUgbGlua1xuXHRcdCAgICAgKiBVU2VkIHRvIGtlZXAgdHJhY2sgb2YgaG93IG1hbnkgcGF0aHMgdG8gaXRzIHN1Ym5vZGVzXG5cdFx0ICAgICAqIHRoZXJlIGFyZSBpbiBvcmRlciB0byBjYWxjdWxhdGUgYXZlcmFnZSB0cmFmZmljXG5cdFx0ICAgICAqL1xuXHRcdCAgICBpbmNyZWFzZUNvdW50KCkge1xuXHRcdCAgICAgICAgdGhpcy5jb3VudCArPSAxO1xuXHRcdCAgICB9XG5cblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIENhbGN1bGF0ZXMgd2hlcmUgdG8gcGxhY2UgcXRpcCBmb3Jcblx0XHQgICAgICpcblx0XHQgICAgICogQHJldHVybiAgICAge09iamVjdH0gIE9iamVjdCB3aXRoIHFUaXAgc2V0dGluZ3Ncblx0XHQgICAgICovXG5cdFx0ICAgIHF0aXBIZWxwZXIoKSB7XG5cdFx0ICAgIFx0dmFyIHJldDtcblx0XHQgICAgXHR2YXIgZCA9IHRoaXM7XG5cdFx0ICAgIFx0dmFyIGR4ID0gKGQudGFyZ2V0LnggLSBkLnNvdXJjZS54KSAvIDIsXG5cdFx0ICAgICAgICAgICAgZHkgPSAoZC50YXJnZXQueSAtIGQuc291cmNlLnkpIC8gMjtcblx0XHQgICAgXHRpZiAoZC5zb3VyY2UueCA8IGQudGFyZ2V0LngpIHtcblx0ICAgIFx0XHRcdHJldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15OiAndG9wIGNlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2NlbnRlciBjZW50ZXInLCAvLyBhdCB0aGUgYm90dG9tIHJpZ2h0IG9mLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFtkeCwgZHldLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRqdXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcdHk6IDEwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdFx0cmV0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXk6ICdib3R0b20gY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0OiAnY2VudGVyIGNlbnRlcicsIC8vIGF0IHRoZSBib3R0b20gcmlnaHQgb2YuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogW2R4LCBkeV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0eTogLTEwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgXHR9XG5cdFx0ICAgIFx0cmV0dXJuIHJldDtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdFx0ICogQ2FsbGVkIHdoZW4gYSBsaW5rIGlzIGFkZGVkIHRvIHRoZSBncmFwaFxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIGFkZGVkIHRvXG5cdFx0XHQgKi9cblx0XHRcdGluaXRpYWxpemUoZ3JhcGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuaW5pdGlhbGl6ZWQgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRzdXBlci5pbml0aWFsaXplKGdyYXBoKTtcblx0XHRcdFx0XHR2YXIgc3RhdGUgPSBncmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblx0XHRcdFx0XHRpZiAoc3RhdGUgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0c3RhdGUgPSBncmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluayA9IHt9O1xuXHRcdFx0XHRcdFx0c3RhdGUubWF4V2VpZ2h0ID0gbnVsbDtcblx0XHRcdFx0XHRcdHN0YXRlLnVzZUF2Z1dlaWdodCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMudXBkYXRlTWF4V2VpZ2h0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBTZXRzIHdoZXRoZXIgdGhlIGdyYXBoIHNob3VsZCB1c2UgYXZnIHdlaWdodFxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtib29sZWFufSAgdmFsICAgICBUaGUgdmFsdWUgdG8gc2V0IHRvXG5cdFx0XHQgKi9cblx0XHRcdHNldFVzZUF2Z1dlaWdodCh2YWwpIHtcblx0XHQgICAgICAgIHRoaXMuZ3JhcGguc3RhdGUuVmlzdWFsaXplckxpbmsudXNlQXZnV2VpZ2h0ID0gISF2YWw7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogU2V0cyB0aGUgd2VpZ2h0IG9mIHRoaXMgbGlua1xuXHRcdCAgICAgKlxuXHRcdCAgICAgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgd2VpZ2h0ICBUaGUgd2VpZ2h0IHRvIHNldCB0b1xuXHRcdCAgICAgKi9cblx0XHQgICAgc2V0V2VpZ2h0KHdlaWdodCkge1xuXHRcdCAgICAgICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0ICAgIH1cblxuXHRcdCAgICAvKipcblx0XHQgICAgICogR2V0cyB0aGUgcmF3IHdlaWdodC5cblx0XHQgICAgICpcblx0XHQgICAgICogQHJldHVybiAgICAge251bWJlcn0gIFRoZSByYXcgd2VpZ2h0LlxuXHRcdCAgICAgKi9cblx0XHQgICAgZ2V0UmF3V2VpZ2h0KCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0OyBcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBHZXRzIHRoZSB3ZWlnaHQgdmFsdWUgb2YgdGhlIGxpbmssIGRlcGVuZGluZyBvbiB0aGVcblx0XHQgICAgICogdXNlQXZnV2VpZ3RoIHNldHRpbmdcblx0XHQgICAgICpcblx0XHQgICAgICogQHJldHVybiAgICAge251bWJlcn0gIFRoZSB3ZWlnaHQuXG5cdFx0ICAgICAqL1xuXHRcdCAgICBnZXRXZWlnaHQoKSB7XG5cdFx0ICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHQgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblxuXHRcdCAgICAgICAgaWYgKHN0YXRlLnVzZUF2Z1dlaWdodCkge1xuXHRcdCAgICAgICAgICAgIHZhciB3ZWlnaHQgPSB0aGlzLndlaWdodCAvIHRoaXMuY291bnQ7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHdlaWdodDtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiB0aGlzLndlaWdodDtcblx0XHQgICAgfVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBVcGRhdGVzIHRoZSBtYXggd2VpZ2h0IG9mIHRoZSBncmFwaFxuXHRcdCAgICAgKi9cblx0XHQgICAgdXBkYXRlTWF4V2VpZ2h0ICgpIHtcblx0XHQgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuXHRcdCAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlZpc3VhbGl6ZXJMaW5rO1xuXG5cdFx0ICAgICAgICB2YXIgbWF4TGluayA9IF8ubWF4QnkodGhpc0dyYXBoLmxpbmtzLCBmdW5jdGlvbihsKSB7XG5cdFx0ICAgICAgICBcdGlmIChsLmdyYXBoICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHJldHVybiBsLmdldFdlaWdodCgpO1xuXHRcdCAgICAgICAgXHR9XG5cdFx0ICAgICAgICBcdHJldHVybiAwO1xuXHRcdCAgICAgICAgfSk7XG5cdFx0ICAgICAgICBzdGF0ZS5tYXhXZWlnaHQgPSBtYXhMaW5rLmdldFdlaWdodCgpO1xuXHRcdCAgICB9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIGR1cmluZyB0aGUgdXBkYXRlIGdyYXBoIGZvciBleGlzdGluZyBsaW5rc1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzcGF0aCAgVGhlIGQzIHBhdGhcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtMaW5rfSAgXHQgICBkICAgICAgIE1hdGNoaW5nIExpbmsgT2JqZWN0ICAgICAgIFxuXHRcdFx0ICovXG5cdFx0XHR1cGRhdGVBdHRyKGQzcGF0aCwgZCkge1xuXHRcdCAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG5cdFx0ICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuVmlzdWFsaXplckxpbms7XG5cdFx0ICAgICAgICB0aGlzLnVwZGF0ZU1heFdlaWdodCgpO1xuXHQgICAgICAgICAgICB2YXIgY29sb3JTY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG5cdCAgICAgICAgICAgICAgICAuZG9tYWluKFswLCBzdGF0ZS5tYXhXZWlnaHRdKVxuXHQgICAgICAgICAgICAgICAgLnJhbmdlKFtcIiNmZmIzNjZcIiwgXCIjRjkyNjA2XCJdKTtcblx0ICAgICAgICAgICAgc3RhdGUuY29sb3JTY2FsZSA9IGNvbG9yU2NhbGU7XG5cdFx0XHRcdGQzcGF0aC5zdHlsZSgnbWFya2VyLWVuZCcsICd1cmwoI2VuZC1hcnJvdyknKVxuXHRcdCAgICAgICAgICAgIC5jbGFzc2VkKHRoaXNHcmFwaC5jb25zdHMuc2VsZWN0ZWRDbGFzcywgZnVuY3Rpb24oZCl7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBkID09PSBzdGF0ZS5zZWxlY3RlZEVkZ2U7XG5cdFx0ICAgICAgICAgICAgfSlcblx0XHQgICAgICAgICAgICAuYXR0cihcImRcIiwgdGhpcy5hcnJvd1BhdGguY2FsbChkKSlcblx0XHQgICAgICAgICAgICAudHJhbnNpdGlvbihcImV4aXN0aW5nUGF0aFRyYW5zaXRpb25cIilcblx0XHQgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuXHRcdCAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIGZ1bmN0aW9uKGQpe1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgYyA9IGNvbG9yU2NhbGUoZC5nZXRXZWlnaHQoKSk7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBjO1xuXHRcdCAgICAgICAgICAgIH0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCBkdXJpbmcgdGhlIGZpcnN0IHVwZGF0ZSBncmFwaCBmb3IgdGhpcyBsaW5rXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNwYXRoICBUaGUgZDMgcGF0aFxuXHRcdFx0ICogQHBhcmFtICAgICAge0xpbmt9ICBcdCAgIGQgICAgICAgTWF0Y2hpbmcgTGluayBPYmplY3Rcblx0XHRcdCAqL1xuXHRcdFx0bmV3UGF0aEF0dHIoZDNwYXRoLCBkKSB7XG5cdFx0ICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcblx0XHQgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5WaXN1YWxpemVyTGluaztcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGVNYXhXZWlnaHQoKTtcblx0ICAgICAgICAgICAgdmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuXHQgICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgc3RhdGUubWF4V2VpZ2h0XSlcblx0ICAgICAgICAgICAgICAgIC5yYW5nZShbXCIjZmZiMzY2XCIsIFwiI0Y5MjYwNlwiXSk7XG5cdCAgICAgICAgICAgICAgICBcblx0XHRcdFx0ZDNwYXRoLnRyYW5zaXRpb24oXCJuZXdQYXRoVHJhbnNpdGlvblwiKVxuXHRcdCAgICAgICAgICAgIC5kdXJhdGlvbig3NTApXG5cdFx0ICAgICAgICAgICAgLmF0dHJUd2VlbihcIm9wYWNpdHlcIiwgZnVuY3Rpb24oZCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoMCwxKTtcblx0XHQgICAgICAgICAgICB9KVxuXHRcdCAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIGZ1bmN0aW9uKGQpe1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgYyA9IGNvbG9yU2NhbGUoZC5nZXRXZWlnaHQoKSk7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBjO1xuXHRcdCAgICAgICAgICAgIH0pXG5cdFx0ICAgICAgICAgICAgLmF0dHIoJ2QnLCB0aGlzLmFycm93UGF0aC5jYWxsKGQpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0TGluayA6IFZpc3VhbGl6ZXJMaW5rXG5cdFx0fVxufV0pO1xuXG5cblxuXG5cbiIsIlxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nLCBbJ2NvbnRpdi5tb2RlbHMnLCAnY29udGl2LmRpcmVjdGl2ZXMnLCAnY29udGl2LnV0aWxzJywgXG5cdCdjb250aXYuZ3JhcGgnXSlcbiAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2NvbnRpdi5tZW51LnZpc3VhbGl6YXRpb24nLCB7XG4gICAgICAgICAgICB1cmw6ICcvdmlzdWFsaXphdGlvbicsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSlcbiAgICB9XSk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBub2RlIG9iamVjdHMgZm9yIHRoZSBncmFwaC5cbiAqIFN1cHBvcnRzIHBvbGljaWVzLlxuICogXG4gKiBUbyB3cml0ZSB5b3VyIG93biBOb2RlIG9iamVjdCwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBub2RlXG4gKiB5b3Ugd2FudCB0byBpbmhlcml0IGFzIGEgZGVwZW5kZW5jeSwgYW5kIGV4dGVuZCBpdHMgbm9kZSBjbGFzcy4gXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG9iamVjdCB3aXRoIE5vZGUgYXMga2V5XG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ05vZGUnLCBbZnVuY3Rpb24gKCkge1xuXHRcdGNsYXNzIE5vZGUge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgeCBsb2NhdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHkgICAgICAgeSBsb2NhdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIGlkICAgICAgVGhlIGlkZW50aWZpZXJcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFRoZSB0ZXh0IHRvIGRpc3BsYXlcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICByYWRpdXMgIFRoZSByYWRpdXMgb2YgdGhlIG5vZGVcblx0XHRcdCAqL1xuXHRcdFx0Y29uc3RydWN0b3IoeCwgeSwgaWQsIHRleHQsIHJhZGl1cykge1xuXHRcdFx0XHR0aGlzLnggPSB4O1xuXHRcdFx0XHR0aGlzLnkgPSB5O1xuXHRcdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdFx0dGhpcy5pZCA9IGlkO1xuXHRcdFx0XHR0aGlzLnRleHQgPSB0ZXh0O1xuXHRcdFx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHRcdFx0dGhpcy5oYXNQb2xpY3kgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5wb2xpY3kgPSBudWxsO1xuXHRcdFx0XHR0aGlzLm5vZGVQb2xpY2llcyA9IFtdO1xuXHRcdFx0XHR0aGlzLmdyYXBoID0gbnVsbDtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxlZCB3aGVuIGEgbm9kZSBpcyBhZGRlZCB0byB0aGUgZ3JhcGhcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBhZGRlZCB0b1xuXHRcdFx0ICovXG5cdFx0XHRpbml0aWFsaXplKGdyYXBoKSB7XG5cdFx0XHRcdGlmICh0aGlzLmluaXRpYWxpemVkID09IGZhbHNlKSB7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5ncmFwaCA9IGdyYXBoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIGR1cmluZyB0aGUgdXBkYXRlIGdyYXBoIGZvciBleGlzdGluZyBsaW5rc1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcblx0XHRcdCAqL1xuXHRcdFx0dXBkYXRlQXR0cihkM25vZGUsIGQpIHtcblx0XHRcdFx0ZDNub2RlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCl7cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjt9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbm9kZVxuXHRcdFx0ICogSG9vayBmb3Igc3ViIGNsYXNzZXNcblx0XHRcdCAqIFxuXHRcdFx0ICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuXHRcdFx0ICogQHBhcmFtICAgICAge05vZGV9ICAgICAgZCAgICAgICBNYXRjaGluZyBOb2RlIE9iamVjdFxuXHRcdFx0ICovXG5cdFx0XHRuZXdOb2RlQXR0cihkM25vZGUsIGQpIHtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBTZXRzIHRoZSByYWRpdXMgb2YgdGhlIG5vZGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgVGhlIHJhZGl1c1xuXHRcdFx0ICovXG5cdFx0XHRzZXRSYWRpdXMocmFkaXVzKSB7XG5cdFx0XHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdFx0fVxuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBVc2VkIHRvIGluc3RhbGwgcG9saWNpZXMgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhpc1xuXHRcdCAgICAgKiBub2RlIGhhcyBhIG1vdXNlIGV2ZW50XG5cdFx0ICAgICAqXG5cdFx0ICAgICAqIEBwYXJhbSAgICAgIHtQb2xpY3l9ICBwb2xpY3kgIFRoZSBwb2xpY3kgdG8gaW5zdGFsbFxuXHRcdCAgICAgKi9cblx0XHRcdGluc3RhbGxOb2RlUG9saWN5KHBvbGljeSkge1xuXHRcdFx0XHR0aGlzLmhhc1BvbGljeSA9IHRydWU7XG5cdFx0XHRcdHRoaXMubm9kZVBvbGljaWVzLnB1c2gocG9saWN5KTtcblx0XHRcdFx0cG9saWN5LmluaXRpYWxpemUodGhpcy5ncmFwaCk7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVXNlZCB0byB1bmluc3RhbGwgcG9saWN5IGZvciB0aGlzIG5vZGVcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7UG9saWN5fHN0cmluZ30gIHBvbGljeVJlbW92ZSAgVGhlIHBvbGljeSB0byByZW1vdmVcblx0XHRcdCAqL1x0XHRcdFxuXHRcdFx0dW5pbnN0YWxsTm9kZVBvbGljeShwb2xpY3lSZW1vdmUpIHtcblx0XHRcdFx0dmFyIHBvbGljeVJlbW92ZU5hbWU7XG5cdFx0XHRcdHZhciB0aGlzTm9kZSA9IHRoaXM7XG5cdFx0XHRcdGlmICh0eXBlb2YgcG9saWN5UmVtb3ZlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHBvbGljeVJlbW92ZU5hbWUgPSBwb2xpY3lSZW1vdmU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9saWN5UmVtb3ZlTmFtZSA9IHBvbGljeVJlbW92ZS5wb2xpY3lOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF8odGhpc05vZGUubm9kZVBvbGljaWVzKS5mb3JFYWNoKGZ1bmN0aW9uKHBvbGljeSwgaW5kZXgpIHtcblx0XHRcdFx0XHRpZiAocG9saWN5LnBvbGljeU5hbWUgPT09IHBvbGljeVJlbW92ZU5hbWUpIHtcblx0XHRcdFx0XHRcdHBvbGljeS5kZXN0cm95KCk7XG5cdFx0XHRcdFx0XHR0aGlzTm9kZS5ub2RlUG9saWNpZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAodGhpc05vZGUubm9kZVBvbGljaWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXNOb2RlLmhhc1BvbGljeSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ2FsbGVkIHdoZW4gdGhlcmUgaXMgYSBtb3VzZSBldmVudCBmb3IgdGhpcyBub2RlXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge3N0cmluZ30gIGV2ZW50ICAgICBUaGUgbW91c2UgZXZlbnRcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgICAgVGhlIG1hdGNoaW5nIG5vZGUgb2JqZWN0XG5cdFx0XHQgKi9cblx0XHRcdG5vZGVQb2xpY3lFdmVudChldmVudCwgZDNub2RlLCBkKSB7XG5cdFx0XHRcdF8uZm9yRWFjaCh0aGlzLm5vZGVQb2xpY2llcywgZnVuY3Rpb24ocG9saWN5KSB7XG5cdFx0XHRcdFx0cG9saWN5W2V2ZW50XShkM25vZGUsIGQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdE5vZGU6IE5vZGVcblx0XHR9XG59XSk7XG5cblxuXG5cblxuXG5cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIHZpZXdzLCBhbmQgY29tcG9uZW50c1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdkFwcCcsIFtcbiAgICAndWkucm91dGVyJyxcbiAgICAnY29udGl2LmxvZ2luJyxcbiAgICAnY29udGl2Lm1lbnUnLFxuICAgICdjb250aXYuZGFzaGJvYXJkJyxcbiAgICAnY29udGl2LmFwcGxpY2F0aW9uZ3JvdXBzJyxcbiAgICAnY29udGl2Lm5ldHdvcmtzJyxcbiAgICAnY29udGl2Lm5ldHdvcmtwb2xpY2llcycsXG4gICAgJ2NvbnRpdi5zZXJ2aWNlbGJzJyxcbiAgICAnY29udGl2Lm9yZ2FuaXphdGlvbnMnLFxuICAgICdjb250aXYuc2V0dGluZ3MnLFxuICAgICdjb250aXYudmlzdWFsaXphdGlvbidcbl0pXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdicsIHtcbiAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3IGNsYXNzPVwidWkgZmx1aWQgY29udGFpbmVyXCIvPidcbiAgICAgICAgfSk7XG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAuanMubWFwIiwiLyoqXG4gKiBUaGUgbm9kZSB0aGF0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IGZvciB0aGUgdmlzdWFsaXphdGlvbiB0YWIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemVyTm9kZScsIFsnTm9kZScsIGZ1bmN0aW9uIChOb2RlKSB7XG5cdFx0Y2xhc3MgVmlzdWFsaXplck5vZGUgZXh0ZW5kcyBOb2RlLk5vZGUge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHggICAgICAgXHR4IGxvY2F0aW9uXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7bnVtYmVyfSAgeSAgICAgICBcdHkgbG9jYXRpb25cblx0XHRcdCAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIFx0VGhlIGlkZW50aWZpZXJcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB0ZXh0ICAgIFx0VGhlIHRleHQgdG8gZGlzcGxheVxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHJhZGl1cyAgXHRUaGUgcmFkaXVzIG9mIHRoZSBub2RlXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgcGFyZW50ICAgICBUaGUgcGFyZW50IGlkXG5cdFx0XHQgKiBAcGFyYW0gICAgICB7QXJyYXl9ICAgYW5jZXN0b3JzICBBcnJheSBvZiBhbmNlc3RvcnMgSWRcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB4U3RhcnQgICAgIHggbG9jIHRvIHN0YXJ0IGFuaW1hdGlvblxuXHRcdFx0ICogQHBhcmFtICAgICAge251bWJlcn0gIHlTdGFydCAgICAgeSBsb2MgdG8gc3RhcnQgYW5pbWF0aW9uXG5cdFx0XHQgKi9cblx0XHQgICAgY29uc3RydWN0b3IoeCwgeSwgaWQsIHRleHQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMsIFxuXHRcdCAgICBcdHhTdGFydCwgeVN0YXJ0KSB7XG5cdFx0ICAgICAgICBzdXBlcih4LCB5LCBpZCwgdGV4dCwgcmFkaXVzKTtcblx0XHQgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHRcdCAgICAgICAgdGhpcy5hbmNlc3RvcnMgPSBhbmNlc3RvcnM7XG5cdFx0ICAgICAgICBpZiAoeFN0YXJ0ID09IG51bGwpIHtcblx0XHQgICAgICAgIFx0dGhpcy54U3RhcnQgPSB4O1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgIFx0dGhpcy54U3RhcnQgPSB4U3RhcnQ7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoeVN0YXJ0ID09IG51bGwpIHtcblx0XHQgICAgICAgIFx0dGhpcy55U3RhcnQgPSB5O1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgIFx0dGhpcy55U3RhcnQgPSB5U3RhcnQ7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCB1cGRhdGUgZ3JhcGggZm9yIGEgbm9kZVxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtEM09iamVjdH0gIGQzbm9kZSAgVGhlIGQzIG5vZGVcblx0XHRcdCAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICBkICAgICAgICAgVGhlIG1hdGNoaW5nIE5vZGVcblx0XHRcdCAqL1xuXHRcdFx0bmV3Tm9kZUF0dHIoZDNub2RlLCBkKSB7XG5cdFx0XHRcdHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuXHRcdFx0XHRpZiAodGhpc0dyYXBoLmNvbnN0cy5jb250YWluZXJDbGFzcyAhPSBudWxsICYmXG5cdFx0XHRcdFx0XHR0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbZC5pZF0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdGQzbm9kZS5jbGFzc2VkKHRoaXNHcmFwaC5jb25zdHMuY29udGFpbmVyQ2xhc3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGQzbm9kZS50cmFuc2l0aW9uKFwibm9kZVBvc2l0aW9uVHJhbnNpdGlvblwiKVxuXHRcdCAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuXHRcdCAgICAgICAgICAgICAgICAuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIGlmIChkLnhTdGFydCAhPSBudWxsICYmIGQueVN0YXJ0ICE9IG51bGwpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeFN0YXJ0ID0gZC54U3RhcnQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHlTdGFydCA9IGQueVN0YXJ0O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGQueFN0YXJ0ID0gZC54O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGQueVN0YXJ0ID0gZC55O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkMy5pbnRlcnBvbGF0ZVN0cmluZyhcInRyYW5zbGF0ZShcIiArIHhTdGFydCArIFwiLFwiICsgeVN0YXJ0ICsgXCIpXCIsIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIik7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiLCBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCIpO1xuXHRcdCAgICAgICAgICAgICAgICB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Tm9kZTogVmlzdWFsaXplck5vZGVcblx0XHR9XG5cbn1dKTtcblxuXG5cblxuXG5cblxuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgdmphaW4zIG9uIDUvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYubWVudScpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRpdi5tZW51Jywge1xuICAgICAgICAgICAgdXJsOiAnL20nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtZW51L21lbnUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTWVudUN0cmwgYXMgbWVudUN0cmwnLFxuICAgICAgICAgICAgcGFyYW1zOiB7IHVzZXJuYW1lOiBudWxsIH1cbiAgICAgICAgfSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ01lbnVDdHJsJywgWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24gKCRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgIHZhciBtZW51Q3RybCA9IHRoaXM7XG4gICAgICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2LmxvZ2luJyk7XG4gICAgICAgIH1cbiAgICAgICAgbWVudUN0cmwudXNlcm5hbWUgPSAkc3RhdGVQYXJhbXMudXNlcm5hbWU7XG4gICAgICAgIG1lbnVDdHJsLmxvZ291dCA9IGxvZ291dDtcbiAgICB9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51Q3RybC5qcy5tYXAiLCIvKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgdG8gYWRkIGEgc2VsZWN0IG5vZGUgZmVhdHVyZS5cbiAqIFN1cHBvcnRzIHNlbGVjdGluZyBtdWx0aXBsZSBub2RlcyBieSB1c2luZyB0aGUgY3RybCBrZXkuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdOb2RlU2VsZWN0aW9uUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG5cbiAgICBcdGNsYXNzIE5vZGVTZWxlY3Rpb25Qb2xpY3kgZXh0ZW5kcyBQb2xpY3kuUG9saWN5IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihcIk5vZGVTZWxlY3Rpb25Qb2xpY3lcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICogT3ZlcndyaXRlcyB0aGUgb24gZHJhZyBldmVudCBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0dyYXBofSAgZ3JhcGggICBUaGUgZ3JhcGggaXQgaXMgXG4gICAgXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIG9uXG4gICAgXHRcdCAqL1xuICAgICAgICAgICAgaW5pdGlhbGl6ZShncmFwaCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZShncmFwaCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGVkTm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RzID0gZ3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdHMuc2VsZWN0ZWRDbGFzcyA9IFwic2VsZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAvL292ZXJ3cml0dGluZyBncmFwaCdzIG5vZGUgb24gZHJhZyBldmVudCB0byBzdXBwb3J0XG4gICAgICAgICAgICAgICAgLy9tb3ZpbmcgbXVsdGlwbGUgbm9kZXMgYXQgb25jZVxuICAgICAgICAgICAgICAgIHZhciBkcmFnID0gZ3JhcGguZHJhZztcbiAgICAgICAgICAgICAgICBkcmFnLm9uKCdkcmFnJywgZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IGdyYXBoO1xuICAgICAgICAgICAgICAgIFx0aWYgKHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgXHRcdHZhciBzZWxlY3RlZENsYXNzID0gdGhpc0dyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5LnNlbGVjdGVkQ2xhc3M7XG4gICAgICAgICAgICAgICAgXHRcdHZhciBzZWxlY3Rpb24gPSBkMy5zZWxlY3RBbGwoICcuJyArc2VsZWN0ZWRDbGFzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzZWxlY3Rpb25bMF0uaW5kZXhPZiggdGhpcyk9PS0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGQzLnNlbGVjdCggdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiggZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueCArPSBkMy5ldmVudC5keDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gZDMuZXZlbnQuZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgWyBkLngsZC55IF0gKyBcIilcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgICAgICBcdH1cblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkcyB0aGUgZ2l2ZW4gbm9kZSB0byB0aGUgYXJyYXkgb2Ygc2VsZWN0ZWQgbm9kZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM05vZGUgICAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIG5vZGVEYXRhICBNYXRjaGluZyBOb2RlIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRTZWxlY3ROb2RlKGQzTm9kZSwgbm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cy5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuXG4gICAgICAgICAgICAgICAgZDNOb2RlLmNsYXNzZWQoY29uc3RzLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGVkTm9kZXMucHVzaChub2RlRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBhcnJheSBvZiBzZWxlY3RlZCBub2Rlcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7RDNPYmplY3R9ICBkM05vZGUgICAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgICAgIG5vZGVEYXRhICBNYXRjaGluZyBub2RlIG9iamVjdCBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3ZlU2VsZWN0RnJvbU5vZGUoZDNOb2RlLCBub2RlRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLk5vZGVTZWxlY3Rpb25Qb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5maWx0ZXIoZnVuY3Rpb24oY2QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNkLmlkID09PSBub2RlRGF0YS5pZDtcbiAgICAgICAgICAgICAgICB9KS5jbGFzc2VkKGNvbnN0cy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RhdGUuc2VsZWN0ZWROb2Rlcy5pbmRleE9mKG5vZGVEYXRhKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyBhbGwgc2VsZWN0ZWQgbm9kZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUFsbFNlbGVjdGVkTm9kZXMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLk5vZGVTZWxlY3Rpb25Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cyA9IHRoaXNHcmFwaC5jb25zdHMuTm9kZVNlbGVjdGlvblBvbGljeTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5jaXJjbGVzLmNsYXNzZWQoY29uc3RzLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZE5vZGVzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT24gTW91c2Vkb3duLCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2hhbmdlIHRoZVxuICAgICAgICAgICAgICogc2VsZWN0ZWQgc3RhdHVzIG9mIHRoZSBjbGlja2VkIG5vZGUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgZCAgICAgICBNYXRjaGluZyBOb2RlIE9iamVjdCAgICAgICBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbW91c2Vkb3duKGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuICAgICAgICAgICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChkMy5ldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3RGcm9tTm9kZShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRTZWxlY3ROb2RlKGQzbm9kZSwgZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnNlbGVjdGVkTm9kZXMuaW5kZXhPZihkKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG5vIGNvbnRyb2wga2V5LCBhbmQgY2xpY2tlZCBub3Qgc2VsZWN0ZWQgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG9mIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsU2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPbiBNb3VzZXVwLCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2hhbmdlIHRoZVxuICAgICAgICAgICAgICogc2VsZWN0ZWQgc3RhdHVzIG9mIHRoZSBjbGlja2VkIG5vZGUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgZCAgICAgICBNYXRjaGluZyBOb2RlIE9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb3VzZXVwKGQzbm9kZSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5Ob2RlU2VsZWN0aW9uUG9saWN5O1xuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIGxlbmd0aCBpcyBncmVhdGVyIHRoYW4gMSwgdGhlbiB3ZSBhcmUgbW92aW5nIG11bHRpcGxlIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIC8vbGVhdmUgdGhlbSBhbGwgaGlnaGxpZ2h0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy9vdGhlcndpc2Ugd2UgYXJlIGp1c3QgbW92aW5nIG9uZSBub2RlLCBzbyB1bmhpZ2hsaWdodFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0ZWROb2Rlcy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3RGcm9tTm9kZShkM25vZGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQb2xpY3k6IE5vZGVTZWxlY3Rpb25Qb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG5cblxuXG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG4vKipcbiAqIENyZWF0ZWQgYnkgY3NoYW1wdXIgb24gMTAvMTgvMTYuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgZm9ybXNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9mb3Jtc1wiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb21tb25cIik7XG52YXIgZGlyZWN0aXZlc19tb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5tb2R1bGVcIik7XG52YXIgc3RvcmFnZXBvbGljeWxpc3RjdHJsXzEgPSByZXF1aXJlKFwiLi9zdG9yYWdlcG9saWN5bGlzdGN0cmxcIik7XG52YXIgU3RvcmFnZXBvbGljeU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RvcmFnZXBvbGljeU1vZHVsZSgpIHtcbiAgICB9XG4gICAgU3RvcmFnZXBvbGljeU1vZHVsZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuTmdNb2R1bGUoe1xuICAgICAgICAgICAgaW1wb3J0czogW1xuICAgICAgICAgICAgICAgIGZvcm1zXzEuRm9ybXNNb2R1bGUsXG4gICAgICAgICAgICAgICAgY29tbW9uXzEuQ29tbW9uTW9kdWxlLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXNfbW9kdWxlXzEuRGlyZWN0aXZlc01vZHVsZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAgICAgICAgIHN0b3JhZ2Vwb2xpY3lsaXN0Y3RybF8xLlN0b3JhZ2Vwb2xpY3lMaXN0Q29tcG9uZW50XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwb3J0czogW1xuICAgICAgICAgICAgICAgIHN0b3JhZ2Vwb2xpY3lsaXN0Y3RybF8xLlN0b3JhZ2Vwb2xpY3lMaXN0Q29tcG9uZW50XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcbiAgICBdLCBTdG9yYWdlcG9saWN5TW9kdWxlKTtcbiAgICByZXR1cm4gU3RvcmFnZXBvbGljeU1vZHVsZTtcbn0oKSk7XG5leHBvcnRzLlN0b3JhZ2Vwb2xpY3lNb2R1bGUgPSBTdG9yYWdlcG9saWN5TW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RvcmFnZXBvbGljeS5tb2R1bGUuanMubWFwIiwiLyoqXG4gKiBUaGlzIHBvbGljeSBjaGFuZ2VzIHRoZSB2aWV3IHRvIHRoZSB0aW1lZ3JhcGggb2YgbGluayBkYXRhIG9uIGNsaWNrLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnUGF0aENoYW5nZVZpZXdQb2xpY3knLCBbJ1BvbGljeScsIGZ1bmN0aW9uIChQb2xpY3kpIHtcbiAgICBcdGNsYXNzIFBhdGhDaGFuZ2VWaWV3UG9saWN5IGV4dGVuZHMgUG9saWN5LlBvbGljeSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB0byBidWlsZCBwb2xpY3lcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICB7QW5ndWxhciBTdGF0ZX0gICAgJHN0YXRlICAgIFVzZWQgdG8gY2hhbmdlIHZpZXdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IoJHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoJ1BhdGhDaGFuZ2VWaWV3UG9saWN5Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhdGUgPSAkc3RhdGU7XG4gICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIGNoaWxkIGNvbnRhaW5lcnMgb2YgdGhlIHNlcnZpY2VcbiAgICAgICAgICAgICAqIENhbiBoYW5kbGUgbmVzdGVkIHNlcnZpY2VzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICBpZCAgICAgIE5vZGUgSURcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2VuZXJhdGVMaXN0KGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciByZXRMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGdlbmVyYXRlTGlzdEhlbHBlciA9IGZ1bmN0aW9uKGlkLCByZXRMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlSWRzID0gdGhpc1BvbGljeS5ncmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdFtpZF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkSWQgPSBub2RlSWRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNQb2xpY3kuZ3JhcGguZGF0YVNvdXJjZS5oYXNDaGlsZChjaGlsZElkKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJSZXRMaXN0ID0gZ2VuZXJhdGVMaXN0SGVscGVyKGNoaWxkSWQsIHJldExpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldExpc3QuY29uY2F0KHN1YlJldExpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRMaXN0LnB1c2goY2hpbGRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVMaXN0SGVscGVyKGlkLCByZXRMaXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0TGlzdFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8gcmVyb3V0ZSBhbiBlZGdlIHdoZW4gY2xpY2tlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtMaW5rfSAgZWRnZSAgICBUaGUgY2xpY2tlZCBlZGdlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZpZXdFZGdlKGVkZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZUlkID0gZWRnZS5zb3VyY2UuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gZWRnZS50YXJnZXQuaWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmFwaC5kYXRhU291cmNlLmhhc0NoaWxkKHNvdXJjZUlkKSA9PT0gdHJ1ZSkgey8vTm90IGEgY29udGFpbmVyIG5vZGUsIG5lZWQgdG8gYWdncmVnYXRlXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxpc3QgPSB0aGlzLmdlbmVyYXRlTGlzdChzb3VyY2VJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGlzdCA9IFtzb3VyY2VJZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JhcGguZGF0YVNvdXJjZS5oYXNDaGlsZCh0YXJnZXRJZCkgPT09IHRydWUpIHsvL05vdCBhIGNvbnRhaW5lciBub2RlLCBuZWVkIHRvIGFnZ3JlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMaXN0ID0gdGhpcy5nZW5lcmF0ZUxpc3QodGFyZ2V0SWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExpc3QgPSBbdGFyZ2V0SWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiRzdGF0ZS5nbygnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5lZGdlJywgXG4gICAgICAgICAgICAgICAgICAgIHtzb3VyY2VOYW1lOiBzb3VyY2VJZCwgdGFyZ2V0TmFtZTogdGFyZ2V0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0OiBzb3VyY2VMaXN0LCB0YXJnZXRMaXN0OiB0YXJnZXRMaXN0fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vdXNlZG93bihkM3BhdGgsIGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdFZGdlKGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFBvbGljeTogUGF0aENoYW5nZVZpZXdQb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIlxuXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdjb250aXYubWVudS52aXN1YWxpemF0aW9uLmVkZ2UnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2VkZ2Uve3NvdXJjZU5hbWUsIHRhcmdldE5hbWUsIHNvdXJjZUxpc3QsIHRhcmdldExpc3R9JyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlTGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGlzdDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1Zpc3VhbGl6YXRpb25FZGdlQ3RybCBhcyB2aXN1YWxpemF0aW9uZWRnZUN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlzdWFsaXphdGlvbi92aXN1YWxpemF0aW9uZWRnZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdWaXN1YWxpemF0aW9uRWRnZUN0cmwnLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICdWaXN1YWxpemF0aW9uU2VydmljZScsICckaW50ZXJ2YWwnLFxuICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgVmlzdWFsaXphdGlvblNlcnZpY2UsICRpbnRlcnZhbCkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZU5hbWUgPSAkc3RhdGVQYXJhbXMuc291cmNlTmFtZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXROYW1lID0gJHN0YXRlUGFyYW1zLnRhcmdldE5hbWU7XG4gICAgICAgICAgICB2YXIgc291cmNlTGlzdCA9ICRzdGF0ZVBhcmFtcy5zb3VyY2VMaXN0O1xuICAgICAgICAgICAgdmFyIHRhcmdldExpc3QgPSAkc3RhdGVQYXJhbXMudGFyZ2V0TGlzdDtcblxuICAgICAgICAgICAgLy9JZiB0aGUgcGFnZSBpcyByZWxvYWRlZCwgdGhlc2Ugc3RhdGUgcGFyYW1zIGFyZSBhbGwgbnVsbCxcbiAgICAgICAgICAgIC8vc28gaXQgd2lsbCByb3V0ZSB0aGVtIGJhY2sgdG8gdGhlIHZpc3VhbGl6YXRpb24gdGFiIHRvcCB2aWV3XG4gICAgICAgICAgICBpZiAoc291cmNlTGlzdCA9PSBudWxsIHx8IHRhcmdldExpc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5saXN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgdCA9IGQuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgJHNjb3BlLmVkZ2VEYXRhSW50ZXJ2YWwgPSBcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIFZpc3VhbGl6YXRpb25TZXJ2aWNlLmdldEVkZ2VEYXRhKHNvdXJjZUxpc3QsIHRhcmdldExpc3QsIHQudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3VsdC5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0cywgZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KHIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSArPSByLnNlcmllc1swXS52YWx1ZXNbMF1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlTmFtZSA9IHNvdXJjZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcmdldE5hbWUgPSB0YXJnZXROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGdlRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkZ2VEYXRhVGltZSA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xuXG4gICAgICAgICAgICAvL0Rlc3Ryb3lpbmcgdGhlIGludGVydmFsIGZ1bmN0aW9uIG9uIHJvdXRlIGNoYW5nZVxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7ICRpbnRlcnZhbC5jYW5jZWwoJHNjb3BlLmVkZ2VEYXRhSW50ZXJ2YWwpOyB9KTtcblxuXG4gICAgICAgICAgICBWaXN1YWxpemF0aW9uU2VydmljZS5nZXRPbGRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN1bHQucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVkZ2VEYXRhID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vcmVzdWx0cywgaWYgbm90IGVtcHR5LCBhcmUgZXhwZWN0ZWQgdG8gaGF2ZVxuICAgICAgICAgICAgICAgICAgICAvLzYgZGF0YSBlbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyZXN1bHRzLCBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KHIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gci5zZXJpZXNbMF0udmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoZWRnZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChkYXRhLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlRGF0YS5wdXNoKGRbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChkYXRhLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlRGF0YVtpXSArPSBkWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VMaXN0ID0gc291cmNlTGlzdDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcmdldExpc3QgPSB0YXJnZXRMaXN0O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2xkRWRnZURhdGEgPSBlZGdlRGF0YTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1dKTtcblxuXG5cblxuIiwiLyoqXG4gKiBCYXNlIHBvbGljeSBjbGFzcyBmb3IgdGhlIGdyYXBoIG9iamVjdFxuICogXG4gKiBQb2xpY2llcyBhcmUgdXNlZCB0byBpc29sYXRlIGZlYXR1cmVzIGZvciBhIGdyYXBoLlxuICogUG9saWNpZXMgY2FuIGJlIGluc3RhbGxlZCBvbiBub2RlcywgbGlua3MsIG9yIHRoZSBncmFwaC5cbiAqIEVhY2ggcG9saWN5IGhhcyBpbnRlcmFjdGlvbiBoYW5kbGVycyB0aGF0IHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBncmFwaFxuICogaWYgaW5zdGFsbGVkLiBQb2xpY2llcyBjYW4gYWxzbyBtb2RpZnkgZ3JhcGggZnVuY3Rpb25zIChzZWUgUVRpcFBvbGljeSkuXG4gKiBNdWx0aXBsZSBwb2xpY2llcyBjYW4gYmUgaW5zdGFsbGVkIGZvciBhIG5vZGUgb3IgbGluay4gXG4gKiBcbiAqIFRvIHdyaXRlIHlvdXIgb3duIHBvbGljeSwgY3JlYXRlIGEgbmV3IGZhY3RvcnkgdGhhdCB1c2VzIHRoZSBwb2xpY3lcbiAqIHlvdSB3YW50IHRvIGluaGVyaXQgYXMgYSBkZXBlbmRlbmN5LCBhbmQgZXh0ZW5kIGl0cyBwb2xpY3kuIFxuICogUmV0dXJuIHRoZSBjbGFzcyBvYmplY3Qgd2l0aCBQb2xpY3kgYXMga2V5LCBhbmQgXG4gKiBhZGQgdGhlIHBvbGljeSB0byB0aGUgUG9saWN5U2VydmljZSBmYWN0b3J5LlxuICogXG4gKiBGb3Igc2F2aW5nIHN0YXRlIG9yIGNvbnN0cyBmb3IgdGhlIHBvbGljeSwgY3JlYXRlIGEgbmFtZXNwYWNlXG4gKiBpbiBncmFwaC5zdGF0ZSBhbmQgZ3JhcGguY29uc3RzLlxuICogRXguIFxuICogICAgICBncmFwaC5zdGF0ZS5teVBvbGljeSA9IHt9O1xuICogICAgICBncmFwaC5jb25zdHMubXlQb2xpY3kgPSB7fTtcbiAqICAgICAgXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdQb2xpY3knLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGFzcyBQb2xpY3kge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge3N0cmluZ30gIHBvbGljeU5hbWUgIFRoZSBwb2xpY3kgbmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwb2xpY3lOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xpY3lOYW1lID0gcG9saWN5TmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHBvbGljeSBpcyBpbnN0YWxsZWQuXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEBwYXJhbSAge0dyYXBofSAgZ3JhcGggICBUaGUgR3JhcGggdGhhdCB0aGUgcG9saWN5IGlzXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgaW5zdGFsbGVkIG9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGFuZGxlciwgbWVhbnQgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzdWJjbGFzc2VzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICB7ZDMgb2JqZWN0fSAgICBkM29iaiAgICBUaGUgZDNvYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSAge05vZGUvTGluay9HcmFwaH0gIGQgICBUaGUgb2JqZWN0IGl0IHdhc1xuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBmb3IuICAgIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb3VzZW92ZXIgKGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgZGJsY2xpY2soZDNvYmosIGQpIHt9XG4gICAgICAgICAgICBjb250ZXh0bWVudShkM29iaiwgZCkge31cbiAgICAgICAgICAgIG1vdXNlb3V0KGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgbW91c2Vkb3duKGQzb2JqLCBkKSB7fVxuICAgICAgICAgICAgbW91c2V1cChkM29iaiwgZCkge31cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgICAgICAgKiBVc2VkIHRvIHJlbW92ZSBhbnkgZWxlbWVudHMgb3IgYmluZGluZ3MgdGhlIHBvbGljeVxuICAgICAgICAgICAgICogaGFzIGFkZGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZXN0cm95KCkge31cbiAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFBvbGljeTogUG9saWN5XG4gICAgICAgIH1cbn1dKTtcblxuXG5cblxuIiwiXG5cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLmRpcmVjdGl2ZShcInZpc3VhbGl6YXRpb25FZGdlXCIsIFsnJHdpbmRvdycsXG4gICAgICAgIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZpc3VhbGl6YXRpb25FZGdlRDMoc2NvcGUsIGQzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGJvZHlFbC5jbGllbnRXaWR0aCAtIDQwMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gIGJvZHlFbC5jbGllbnRIZWlnaHQgLSA0MDA7XG5cblxuICAgICAgICAgICAgICAgIC8vdGFrZW4gZnJvbSBodHRwOi8vYmwub2Nrcy5vcmcvc2ltZW5icmVra2VuLzY2MzQwNzBcbiAgICAgICAgICAgICAgICAvLyAvKiogTUFJTiBTVkcgKiovXG4gICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gNTksXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSA3NTAsXG4gICAgICAgICAgICAgICAgbm93ID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdvcmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZDMucmFuZ2UobGltaXQpLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLm9sZEVkZ2VEYXRhW01hdGguZmxvb3IoZC8xMCldIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGQzLnRpbWUuc2NhbGUoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSwgbm93IC0gZHVyYXRpb25dKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIGQzLm1heChncm91cHMuY3VycmVudC5kYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCArIDEwOyB9KV0pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAgICAgLmludGVycG9sYXRlKCdiYXNpcycpXG4gICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KG5vdyAtIChsaW1pdCAtIDEgLSBpKSAqIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkKVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciB4U3ZnID0gZDMuc2VsZWN0KCcuZ3JhcGgnKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDI1KVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ292ZXJmbG93JywgJ3Zpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHZhciB5QXhpcyA9IHhTdmcuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXG4gICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIHdpZHRoICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh5LmF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHkpLm9yaWVudCgnbGVmdCcpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc3ZnPSBkMy5zZWxlY3QoJy5ncmFwaCcpLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NoYXJ0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGggLSA1MClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCArIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLnN0eWxlKCdvdmVyZmxvdycsIFwidmlzaWJsZVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBheGlzID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4IGF4aXMnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KCdib3R0b20nKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBzdmcuYXBwZW5kKCdnJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLnBhdGggPSBwYXRocy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoW2dyb3VwLmRhdGFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgbmFtZSArICcgZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBncm91cC5jb2xvcilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5kYXRhLnB1c2goc2NvcGUuZWRnZURhdGEgfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5wYXRoLmF0dHIoJ2QnLCBsaW5lKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2hpZnQgZG9tYWluXG4gICAgICAgICAgICAgICAgICAgIHguZG9tYWluKFtub3cgLSAobGltaXQgLSAyKSAqIGR1cmF0aW9uLCBub3cgLSBkdXJhdGlvbl0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNsaWRlIHgtYXhpcyBsZWZ0XG4gICAgICAgICAgICAgICAgICAgIGF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHguYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgeUF4aXMudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHkuYXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2xpZGUgcGF0aHMgbGVmdFxuICAgICAgICAgICAgICAgICAgICBwYXRocy5hdHRyKCd0cmFuc2Zvcm0nLCBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhc2UoJ2xpbmVhcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeChub3cgLSAobGltaXQgLSAxKSAqIGR1cmF0aW9uKSArICcpJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBvbGRlc3QgZGF0YSBwb2ludCBmcm9tIGVhY2ggZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpY2soKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VBJyxcbiAgICAgICAgICAgICAgICByZXBsYWNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbmVkZ2V0ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaEdyb3VwKFsnZWRnZURhdGEnLCAnb2xkRWRnZURhdGEnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5lZGdlRGF0YSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5vbGRFZGdlRGF0YSAhPSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmluaXRpYWxpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmluaXRpYWxpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQzID0gJHdpbmRvdy5kMzsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbkVkZ2VEMyhzY29wZSwgZDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXVxuKTtcbiIsIi8qKlxuICogQ29udGFpbnMgYWxsIHRoZSBwb2xpY2llcy5cbiAqIFNlZSBwb2xpY3kuanMgZm9yIGluZm8gb24gaG93IHBvbGljaWVzIHdvcmsuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdjb250aXYuZ3JhcGgnKVxuICAgIC5mYWN0b3J5KCdQb2xpY3lTZXJ2aWNlJywgWydQb2xpY3knLCdRVGlwUG9saWN5JywgJ1BhdGhDaGFuZ2VWaWV3UG9saWN5JywgXG4gICAgICAgICdOb2RlU2VsZWN0aW9uUG9saWN5JywgJ1NwbGl0Sm9pbk5vZGVQb2xpY3knLCAnU3BsaXRKb2luVmlld1BvbGljeScsXG4gICAgICAgICdTYXZlU3RhdGVQb2xpY3knLFxuICAgICAgICAgICAgZnVuY3Rpb24gKFBvbGljeSwgUVRpcFBvbGljeSwgUGF0aENoYW5nZVZpZXdQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICBOb2RlU2VsZWN0aW9uUG9saWN5LCAgU3BsaXRKb2luTm9kZVBvbGljeSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBTcGxpdEpvaW5WaWV3UG9saWN5LCBTYXZlU3RhdGVQb2xpY3kpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIFBvbGljeTogUG9saWN5LlBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgUVRpcFBvbGljeTogUVRpcFBvbGljeS5Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIFBhdGhDaGFuZ2VWaWV3UG9saWN5OiBQYXRoQ2hhbmdlVmlld1BvbGljeS5Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIE5vZGVTZWxlY3Rpb25Qb2xpY3k6IE5vZGVTZWxlY3Rpb25Qb2xpY3kuUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBTcGxpdEpvaW5Ob2RlUG9saWN5OiBTcGxpdEpvaW5Ob2RlUG9saWN5LlBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgU3BsaXRKb2luVmlld1BvbGljeTogU3BsaXRKb2luVmlld1BvbGljeS5Qb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIFNhdmVTdGF0ZVBvbGljeTogU2F2ZVN0YXRlUG9saWN5LlBvbGljeVxuICAgICAgICAgICAgICAgIH1cbn1dKTsiLCJcbmFuZ3VsYXIubW9kdWxlKCdjb250aXYudmlzdWFsaXphdGlvbicpXG4gICAgLnNlcnZpY2UoJ1N0YXRlU2F2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zYXZlZFN0YXRlcyA9IHt9O1xuICAgIH0pXG4gICAgLmRpcmVjdGl2ZShcInZpc3VhbGl6YXRpb25HcmFwaFwiLCBbJyR3aW5kb3cnLCAnJHN0YXRlJywgJ1Zpc3VhbGl6ZXJHcmFwaCcsICdQb2xpY3lTZXJ2aWNlJywgJ1Zpc3VhbGl6ZXJEYXRhU291cmNlJywgJ1N0YXRlU2F2ZScsXG4gICAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRzdGF0ZSwgVmlzdWFsaXplckdyYXBoLCBQb2xpY3lTZXJ2aWNlLCBWaXN1YWxpemVyRGF0YVNvdXJjZSwgU3RhdGVTYXZlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB2aXN1YWxpemF0aW9ubGlzdGQzKHNjb3BlLCBlbGVtLCBWaXN1YWxpemVyR3JhcGgsIFBvbGljeVNlcnZpY2UsIFZpc3VhbGl6ZXJEYXRhU291cmNlLCBTdGF0ZVNhdmUpIHtcbiAgICAgICAgICAgICAgICAvL2Rvbid0IHJ1biB1bnRpbCBhbGwgaW5pdGlhbGl6YXRpb24gY2FsbHMgaGF2ZSByZXR1cm5lZFxuICAgICAgICAgICAgICAgIGlmIChzY29wZS5ub2RlcyA9PT0gdW5kZWZpbmVkIHx8IHNjb3BlLmxpbmtzID09PSB1bmRlZmluZWQgfHwgc2NvcGUuY2hpbGRyZW5fc3RydWN0ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIERhdGFTb3VyY2VcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNvdXJjZSA9IG5ldyBWaXN1YWxpemVyRGF0YVNvdXJjZS5EYXRhU291cmNlKHNjb3BlLm5vZGVzLCBzY29wZS5saW5rcywgc2NvcGUuY2hpbGRyZW5fc3RydWN0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFuY2VzdG9yc19zdHJ1Y3QsIHNjb3BlLmxhYmVscywgc2NvcGUuc2VydmljZVNlbGVjdG9ycyk7XG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZS5zZXRBbmNlc3RvcnMoKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcywgbGlua3M7XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9wRGF0YSA9IGRhdGFTb3VyY2UuZ2V0VG9wTGV2ZWxGbG93KCk7XG4gICAgICAgICAgICAgICAgbm9kZXMgPSBkYXRhU291cmNlLnByb2Nlc3NOb2RlRGF0YSh0b3BEYXRhLm5vZGVEYXRhKTtcbiAgICAgICAgICAgICAgICBsaW5rcyA9IGRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHRvcERhdGEubGlua0RhdGEsIG5vZGVzKTtcblxuICAgICAgICAgICAgICAgIHZhciBib2R5RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBib2R5RWwuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9ICBib2R5RWwuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgLyoqIE1BSU4gU1ZHICoqL1xuICAgICAgICAgICAgICAgIHZhciByYXdTdmc9ZWxlbS5maW5kKCdzdmcnKTtcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkKHJhd1N2Zy5wYXJlbnQoKSkub2Zmc2V0KCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGl2V2lkdGggPSAkKHJhd1N2Zy5wYXJlbnQoKSkud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QocmF3U3ZnWzBdKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRpdldpZHRoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgLSBvZmZzZXQudG9wIC0gMjApO1xuXG4gICAgICAgICAgICAgICAgLy9pbnN0YWxsaW5nIHBvbGljaWVzXG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoID0gbmV3IFZpc3VhbGl6ZXJHcmFwaC5HcmFwaChzdmcsIG5vZGVzLCBsaW5rcywgZGF0YVNvdXJjZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2hpbGRyZW5fc3RydWN0LCBzY29wZS5hbmNlc3RvcnNfc3RydWN0KTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KG5ldyBQb2xpY3lTZXJ2aWNlLlNhdmVTdGF0ZVBvbGljeShTdGF0ZVNhdmUuc2F2ZWRTdGF0ZXMpKTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHRQYXRoUG9saWN5KG5ldyBQb2xpY3lTZXJ2aWNlLlBhdGhDaGFuZ2VWaWV3UG9saWN5KCRzdGF0ZSkpO1xuICAgICAgICAgICAgICAgIC8vUVRpcFBvbGljeSBpcyBmb3IgYm90aCBOb2RlcyBhbmQgUGF0aHMsIGluc3RhbGwgc2FtZSBvbmUgb24gYm90aFxuICAgICAgICAgICAgICAgIHZhciBxVGlwUG9saWN5ID0gbmV3IFBvbGljeVNlcnZpY2UuUVRpcFBvbGljeSgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZpc3VhbGl6YXRpb25HcmFwaC5pbnN0YWxsRGVmYXVsdE5vZGVQb2xpY3kocVRpcFBvbGljeSk7XG4gICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmluc3RhbGxEZWZhdWx0UGF0aFBvbGljeShxVGlwUG9saWN5KTtcbiAgICAgICAgICAgICAgICB2YXIgc3BsaXRKb2luVmlld1BvbGljeSA9IG5ldyBQb2xpY3lTZXJ2aWNlLlNwbGl0Sm9pblZpZXdQb2xpY3koKTtcbiAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguaW5zdGFsbERlZmF1bHROb2RlUG9saWN5KHNwbGl0Sm9pblZpZXdQb2xpY3kpO1xuICAgICAgICAgICAgICAgIHNwbGl0Sm9pblZpZXdQb2xpY3kuaW5zdGFsbEJhY2tCdXR0b24oJCgnI2JhY2tCdXR0b24nKSk7XG4gICAgICAgICAgICAgICAgc3BsaXRKb2luVmlld1BvbGljeS5pbnN0YWxsVGl0bGUoJCgnI2dyYXBoLXRpdGxlJykpO1xuXG4gICAgICAgICAgICAgICAgLy9sb2FkIG9sZCB2aWV3IGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAgICBpZiAoXy5pc0VtcHR5KFN0YXRlU2F2ZS5zYXZlZFN0YXRlcykgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyYXBoID0gc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoO1xuICAgICAgICAgICAgICAgICAgICBncmFwaC5sb2FkKFN0YXRlU2F2ZS5zYXZlZFN0YXRlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VBJyxcbiAgICAgICAgICAgICAgICByZXBsYWNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Zpc3VhbGl6YXRpb24vdmlzdWFsaXphdGlvbnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtKXtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLnVuYmluZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmlzdWFsaXphdGlvbkdyYXBoLmRlc3Ryb3koKTt9KTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoR3JvdXAoWydub2RlcycsICdsaW5rcycsICdjaGlsZHJlbl9zdHJ1Y3QnLCAnYW5jZXN0b3JzX3N0cnVjdCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLm5vZGVzICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUubGlua3MgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5jaGlsZHJlbl9zdHJ1Y3QgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5hbmNlc3RvcnNfc3RydWN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbmxpc3RkMyhzY29wZSwgZWxlbSwgVmlzdWFsaXplckdyYXBoLCBQb2xpY3lTZXJ2aWNlLCBWaXN1YWxpemVyRGF0YVNvdXJjZSwgU3RhdGVTYXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGguZGF0YVNvdXJjZS5saW5rcyA9IHNjb3BlLmxpbmtzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS52aXN1YWxpemF0aW9uR3JhcGgudXBkYXRlTGlua0RhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgXVxuKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8qKlxuICogVGhpcyBwb2xpY3kgYWRkcyB0b29sdGlwIGZ1bmN0aW9uYWxpdHkgdG8gbm9kZXMgYW5kIGxpbmtzLlxuICogV2hlbiBpbnN0YWxsaW5nLCBpbnN0YWxsIG9uIGJvdGggbGlua3MgYW5kIG5vZGVzLlxuICogXG4gKiBVc2VzIHRoZSBxVGlwIGpRdWVyeSBwbHVnaW5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi5ncmFwaCcpXG4gICAgLmZhY3RvcnkoJ1FUaXBQb2xpY3knLCBbJ1BvbGljeScsIGZ1bmN0aW9uIChQb2xpY3kpIHtcbiAgICAgICAgY2xhc3MgUVRpcFBvbGljeSBleHRlbmRzIFBvbGljeS5Qb2xpY3kge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKFwiUVRpcFBvbGljeVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICogTW9kaWZpZXMgdGhlIHVwZGF0ZU5ld05vZGVzIGFuZCBcbiAgICAgICAgICAgICAqIHVwZGF0ZU5ld1BhdGhzIG1ldGhvZCBvZiB0aGUgZ3JhcGggdG8gaW5zdGFsbCBxdGlwXG4gICAgICAgICAgICAgKiBvbnRvIGVhY2ggbm9kZSBhbmQgcGF0aC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7R3JhcGh9ICBncmFwaCAgIFRoZSBncmFwaCBpdCBpcyBcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkIG9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyLmluaXRpYWxpemUoZ3JhcGgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlFUaXBQb2xpY3kgPSB7fTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLm1vdXNlZG93biA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZ3JhcGguY29uc3RzLlFUaXBQb2xpY3kgPSB7fTtcblxuICAgICAgICAgICAgICAgIC8vVHJhY2tpbmcgbW91c2UgY2xpY2sgc3RhdGUgdG8gbWFrZSB0b29sdGlwXG4gICAgICAgICAgICAgICAgLy9kaXNhcHBlYXIgaWYgdGhlIG5vZGUgaXMgYmVpbmcgZHJhZ2dlZC5cbiAgICAgICAgICAgICAgICAkKCcjdmlzdWFsaXphdGlvbi1ncmFwaCcpLm1vdXNldXAoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb3VzZXVwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL292ZXJyaWRlIHVwZGF0ZU5ld05vZGVzIGFuZCB1cGRhdGVOZXdQYXRoc1xuICAgICAgICAgICAgICAgIC8vdG8gaW5zdGFsbCBxdGlwXG4gICAgICAgICAgICAgICAgdmFyIGdyYXBoVXBkYXRlTmV3Tm9kZXMgPSBncmFwaC51cGRhdGVOZXdOb2RlcztcbiAgICAgICAgICAgICAgICBncmFwaC51cGRhdGVOZXdOb2RlcyA9IGZ1bmN0aW9uKG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoVXBkYXRlTmV3Tm9kZXMuY2FsbChncmFwaCwgbmV3Tm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZU5ld05vZGVzKG5ld05vZGVzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGdyYXBoVXBkYXRlTmV3UGF0aHMgPSBncmFwaC51cGRhdGVOZXdQYXRocztcbiAgICAgICAgICAgICAgICBncmFwaC51cGRhdGVOZXdQYXRocyA9IGZ1bmN0aW9uKG5ld1BhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoVXBkYXRlTmV3UGF0aHMuY2FsbChncmFwaCwgbmV3UGF0aHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZU5ld1BhdGhzKG5ld1BhdGhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyBhbGwgcVRpcHMgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHBvbGljeSBpcyB1bmluc3RhbGxlZCBvclxuICAgICAgICAgICAgICogdGhlIGdyYXBoIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICAvL3JlbW92aW5nIGFsbCBxdGlwIGZyb20gRE9NXG4gICAgICAgICAgICAgICAgJCgnW2lkXj1cInF0aXBcIl0nKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBLZWVwaW5nIHRyYWNrIG9mIG1vdXNlZG93biBzdGF0ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtkM09iamVjdH0gIGQzb2JqICBUaGUgZDMgcGJqZWN0XG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZS9MaW5rfSAgZCAgICAgVGhlIG1hdGNoaW5nIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1vdXNlZG93bihkM29iaiwgZCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5RVGlwUG9saWN5O1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vdXNlZG93biA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2VlcGluZyB0cmFjayBvZiBtb3VzZWRvd24gc3RhdGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNPYmplY3R9ICBkM29iaiAgVGhlIGQzIHBiamVjdFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGUvTGlua30gIGQgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtb3VzZXVwKGQzb2JqLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG4gICAgICAgICAgICAgICAgc3RhdGUubW91c2Vkb3duID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoZW5RVGlwQXZhaWxhYmxlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IDUwMDsgLy8gbXNcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQoZG9jdW1lbnQpLnF0aXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXNQb2xpY3kud2hlblFUaXBBdmFpbGFibGUoY2FsbGJhY2spLCBpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gTmV3IE5vZGVzIGFyZSBhZGRlZCBkdXJpbmcgdGhlXG4gICAgICAgICAgICAgKiB1cGRhdGUgZ3JhcGggZnVuY3Rpb25cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNOb2RlfSAgbmV3Tm9kZXMgIFRoZSBuZXcgbm9kZXMgdGhhdCBhcmVcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWRkZWQgdG8gdGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZU5ld05vZGVzKG5ld05vZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhdHRhY2hRVGlwKCkge1xuICAgICAgICAgICAgICAgICAgICAvL2F0dGFjaGluZyBxdGlwXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGVzLmVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNOb2RlID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vSWYgbm9kZSBoYXMgY2hpbGRyZW4sIHRoZW4gaXQgaXMgYSBzZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0W2QuaWRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gXCI8Yj48dT5TZWxlY3RvcnM6PC9iPjwvdT4gXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yTWFwID0gdGhpc0dyYXBoLmRhdGFTb3VyY2Uuc2VsZWN0b3JzW2QuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNLZXlzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNlbGVjdG9yTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0tleXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGtleSArIFwiIDogPGk+XCIrIHNlbGVjdG9yTWFwW2tleV0gKyBcIjwvaT4sXFxuIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzS2V5cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb21tYSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiTm8gU2VsZWN0b3JzLCBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IFwiPGI+PHU+TGFiZWxzOjwvYj48L3U+IFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHNNYXAgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5sYWJlbHNbZC5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0tleXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbGFiZWxzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0tleXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGtleSArIFwiIDogPGk+XCIrIGxhYmVsc01hcFtrZXldICsgXCI8L2k+LFxcbiBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0tleXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29tbWEgd2lsbCBiZSByZW1vdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBcIk5vIGxhYmVscywgXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgbGFzdCBjb21tYVxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXNOb2RlKS5xdGlwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFwaSA9ICQodGhpc05vZGUpLnF0aXAoJ2FwaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICQoJyNncmFwaENvbnRhaW5lcicpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gW29mZnNldC5sZWZ0ICsgKChkLnggKiB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpKSArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzBdKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldC50b3AgKyAoKGQueSArZC5yYWRpdXMpICogdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKSkgICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnNldCgncG9zaXRpb24udGFyZ2V0JywgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzdGF0ZS5tb3VzZWRvd247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvbG86ICQoJyN2aXN1YWxpemF0aW9uLWdyYXBoJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6ICdxdGlwLWJsdWUgcXRpcC1zaGFkb3cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteTogJ3RvcCBjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogJ2JvdHRvbSBjZW50ZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhcmdldDogcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdtb3VzZWRvd24gbW91c2VsZWF2ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9pbmNhc2UgbGlicmFyeSBoYXNuJ3QgbG9hZGVkIHlldFxuICAgICAgICAgICAgICAgIGlmICgkKGRvY3VtZW50KS5xdGlwICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2hRVGlwKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGVuUVRpcEF2YWlsYWJsZShhdHRhY2hRVGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gbmV3IHBhdGhzIGFyZSBhZGRlZCBkdXJpbmcgdGhlXG4gICAgICAgICAgICAgKiB1cGRhdGUgZ3JhcGggZnVuY3Rpb25cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7ZDNQYXRofSAgbmV3UGF0aHMgIFRoZSBuZXcgcGF0aHMgdGhhdCBhcmVcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgYWRkZWQgdG8gdGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZU5ld1BhdGhzKG5ld1BhdGhzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlFUaXBQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAvL2luY2FzZSBsaWJyYXJ5IGhhc24ndCBsb2FkZWQgeWV0XG4gICAgICAgICAgICAgICAgaWYgKCQoZG9jdW1lbnQpLnF0aXAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYWRkaW5nIHF0aXBcbiAgICAgICAgICAgICAgICAgICAgbmV3UGF0aHMuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1BhdGggPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXR0aW5nIG1pZHBvaW50IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoRWwgICA9IGQzLnNlbGVjdCh0aGlzKS5ub2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlkcG9pbnQgPSBwYXRoRWwuZ2V0UG9pbnRBdExlbmd0aChwYXRoRWwuZ2V0VG90YWxMZW5ndGgoKS8yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZXQgPSBkLnF0aXBIZWxwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gXCJCeXRlczogXCIgKyBkLmdldFdlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzUGF0aCkucXRpcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG1vdXNlIGlzIGRvd24sIGRvbid0IGxldCBxdGlwIHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhc3RhdGUubW91c2Vkb3duO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2xvOiAkKCcjZ3JhcGhDb250YWluZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogJ3F0aXAtYmx1ZSBxdGlwLXNoYWRvdydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15OiB0YXJnZXRSZXQubXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0OiAnY2VudGVyIGNlbnRlcicsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdtb3VzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdDogdGFyZ2V0UmV0LmFkanVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogJ21vdXNlZG93biBtb3VzZWxlYXZlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFBvbGljeTogUVRpcFBvbGljeVxuICAgICAgICB9XG59XSk7XG5cblxuXG5cblxuXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbnRpdi52aXN1YWxpemF0aW9uJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnY29udGl2Lm1lbnUudmlzdWFsaXphdGlvbi5saXN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9saXN0JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVmlzdWFsaXphdGlvbkxpc3RDdHJsIGFzIHZpc3VhbGl6YXRpb25MaXN0Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aXN1YWxpemF0aW9uL3Zpc3VhbGl6YXRpb25saXN0Lmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1Zpc3VhbGl6YXRpb25MaXN0Q3RybCcsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsICdWaXN1YWxpemF0aW9uU2VydmljZScsICckaW50ZXJ2YWwnLCBcbiAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgVmlzdWFsaXphdGlvblNlcnZpY2UsICRpbnRlcnZhbCkge1xuICAgICAgICAgICAgLy90byBzZWUgdGhlIGV4cGVjdGVkIGZvcm1hdCB0byBiZSByZXR1cm5lZCBmcm9tIHRoZXNlIGNhbGxzLFxuICAgICAgICAgICAgLy9sb29rIGF0IGFwcC9jb21wb25lbnRzL2dyYXBob2JqZWN0cy9kYXRhc291cmNlL3Zpc3VhbGl6ZXJkYXRhc291cmNlLmpzXG4gICAgICAgICAgICB2YXIgc3VjY2Vzc0dyYXBoRGF0YUNhbGxiYWNrID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0LnJlc3VsdHNbMF0uc2VyaWVzLCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZHBvaW50ID0gc2VyaWVzLnRhZ3MuRW5kcG9pbnRJUDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gc2VyaWVzLnRhZ3MuUHJvdmlkZXJJUDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMobm9kZUlkcywgZW5kcG9pbnQpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHMucHVzaChlbmRwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMobm9kZUlkcywgcHJvdmlkZXIpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBsaW5rc1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlua091dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBzZXJpZXMudmFsdWVzWzBdWzJdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGlua091dCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rSW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHByb3ZpZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogc2VyaWVzLnZhbHVlc1swXVsxXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBsaW5rcy5wdXNoKGxpbmtJbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVzID0gbm9kZXM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpbmtzID0gbGlua3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy9pbml0aWFsIGNhbGxcbiAgICAgICAgICAgIFZpc3VhbGl6YXRpb25TZXJ2aWNlLmdldEdyYXBoRGF0YSgpLnRoZW4oc3VjY2Vzc0dyYXBoRGF0YUNhbGxiYWNrLCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vd2lsbCBmYWlsIHNpbGVudGx5LCBncmFwaCB3b24ndCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsgJGludGVydmFsLmNhbmNlbCgkc2NvcGUuZ3JhcGhEYXRhSW50ZXJ2YWwpOyB9KTtcblxuICAgICAgICAgICAgVmlzdWFsaXphdGlvblNlcnZpY2UuZ2V0U3RydWN0dXJlRGF0YSgpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vdG8gc2VlIHRoZSBleHBlY3RlZCBmb3JtIG9mIGFuY2VzdG9yX3N0cnVjdCBhbmQgY2hpbGRyZW5fc3RydWN0LCBcbiAgICAgICAgICAgICAgICAvL2xvb2sgYXQgYXBwL2NvbXBvbmVudHMvZ3JhcGhvYmplY3RzL2RhdGFzb3VyY2UvdmlzdWFsaXplcmRhdGFzb3VyY2UuanNcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5jZXN0b3JzX3N0cnVjdCA9IHJlc3VsdC5hbmNlc3RvcnNfc3RydWN0O1xuICAgICAgICAgICAgICAgICRzY29wZS5jaGlsZHJlbl9zdHJ1Y3QgPSByZXN1bHQuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgICRzY29wZS5sYWJlbHMgPSByZXN1bHQubGFiZWxzO1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXJ2aWNlU2VsZWN0b3JzID0gcmVzdWx0LnNlcnZpY2VTZWxlY3RvcnM7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vd2lsbCBmYWlsIHNpbGVudGx5LCBncmFwaCB3b24ndCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnY29udGl2LnZpc3VhbGl6YXRpb24nKVxuICAgIC5mYWN0b3J5KCdWaXN1YWxpemF0aW9uU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlcyBhIGdldCByZXF1ZXN0IHdpdGggdGhlIHVybCBhbmQgY29uZmlnLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gICAgICB7c3RyaW5nfSAgdXJsICAgICBUaGUgdXJsXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBjb25maWcgIFRoZSBjb25maWd1cmF0aW9uc1xuICAgICAgICAgKiBAcmV0dXJuICAgICB7JEh0dHAgUHJvbWlzZX0gICBQcm9taXNlIG9mIHRoZSByZXF1ZXN0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtYWtlR2V0KHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwgY29uZmlnKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZXMgYSBwb3N0IHJlcXVlc3Qgd2l0aCB0aGUgdXJsIGFuZCBkYXRhXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICB1cmwgICAgIFRoZSB1cmxcbiAgICAgICAgICogQHBhcmFtICAgICAge0pTT059ICAgIGRhdGEgICAgVGhlIGRhdGFcbiAgICAgICAgICogQHJldHVybiAgICAgeyRIdHRwIFByb21pc2V9ICAgUHJvbWlzZSBvZiB0aGUgcmVxdWVzdFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWFrZVBvc3QodXJsLCBkYXRhKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGNvbnZlcnRzIHRoZSBkYXRhIGludG8geC13d3ctZnJvbS11cmxlbmNvZGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0pTT059ICBvYmogICAgIEpTT04gZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtzdHJpbmd9ICB4LXd3dy1mb3JtLXVybGVuY29kZWQgc3RyaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBwYXJhbSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9ICcnLCBuYW1lLCB2YWx1ZSwgZnVsbFN1Yk5hbWUsIHN1Yk5hbWUsIHN1YlZhbHVlLCBpbm5lck9iaiwgaTtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8dmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTdWJOYW1lID0gbmFtZSArICdbJyArIGkgKyAnXSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9ialtmdWxsU3ViTmFtZV0gPSBzdWJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSArPSBwYXJhbShpbm5lck9iaikgKyAnJic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoc3ViTmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVbc3ViTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgJ1snICsgc3ViTmFtZSArICddJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lck9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IHBhcmFtKGlubmVyT2JqKSArICcmJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyAnJic7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeS5sZW5ndGggPyBxdWVyeS5zdWJzdHIoMCwgcXVlcnkubGVuZ3RoIC0gMSkgOiBxdWVyeTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgdXJsOnVybCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6J1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc09iamVjdChkYXRhKSAmJiBTdHJpbmcoZGF0YSkgIT09ICdbb2JqZWN0IEZpbGVdJyA/IHBhcmFtKGRhdGEpIDogZGF0YTtcbiAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEdyYXBoRGF0YSgpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBDb250aXZHbG9iYWxzLlZJU1VBTElaQVRJT05fRU5EUE9JTlQ7XG4gICAgICAgICAgICB1cmwgKz0gJ2luZmx1eC9xdWVyeSc7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBkYjpcInRlbGVncmFmXCIsXG4gICAgICAgICAgICAgICAgICAgIHE6XCJTRUxFQ1QgQnl0ZXNJbiwgQnl0ZXNPdXQsIEVuZHBvaW50SVAsIFByb3ZpZGVySVAgRlJPTSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxbSBHUk9VUCBCWSAqIExJTUlUIDFcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZUdldCh1cmwsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTdHJ1Y3R1cmVEYXRhKCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnc2VydmljZXMnO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VHZXQodXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkV2hlcmVRdWVyeShwb2ludHMsIHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IFwiKFwiO1xuICAgICAgICAgICAgcXVlcnkgKz0gdHlwZSArIFwiPVwiO1xuICAgICAgICAgICAgcXVlcnkgKz0gXCInXCIgKyBwb2ludHNbMF0gKyBcIicgXCI7XG4gICAgICAgICAgICAvL3N0YXJ0cyBhdCAxLCBzbyB3aWxsIG5vdCBydW4gaWYgbGVuZ3RoIGlzIDFcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gJ09SICc7XG4gICAgICAgICAgICAgICAgcXVlcnkgKz0gdHlwZSArIFwiPVwiO1xuICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IFwiJ1wiICsgcG9pbnRzW2ldICsgXCInIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVlcnkgKz0gXCIpXCI7XG4gICAgICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRFZGdlRGF0YShzb3VyY2VMaXN0LCB0YXJnZXRMaXN0LCB0aW1lKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gQ29udGl2R2xvYmFscy5WSVNVQUxJWkFUSU9OX0VORFBPSU5UO1xuICAgICAgICAgICAgdXJsICs9ICdpbmZsdXgvcXVlcnknO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGIgOiBcInRlbGVncmFmXCIsXG4gICAgICAgICAgICAgICAgICAgIHE6IFwiU0VMRUNUIHN1bShcIiArICdCeXRlc091dCcgKyBcIikgZnJvbSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxNXMgQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgXCJFbmRwb2ludElQXCIpICtcIiBBTkQgXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkodGFyZ2V0TGlzdCwgJ1Byb3ZpZGVySVAnKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiR1JPVVAgQlkgdGltZSgyMHMpIExJTUlUIDE7IFNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNJbicgKyBcIikgZnJvbSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxNXMgQU5EIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBidWlsZFdoZXJlUXVlcnkoc291cmNlTGlzdCwgJ1Byb3ZpZGVySVAnKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsICdFbmRwb2ludElQJykgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBcIkdST1VQIEJZIHRpbWUoMjBzKSBmaWxsKDApIExJTUlUIDFcIlxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlUG9zdCh1cmwsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0T2xkRWRnZURhdGEoc291cmNlTGlzdCwgdGFyZ2V0TGlzdCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IENvbnRpdkdsb2JhbHMuVklTVUFMSVpBVElPTl9FTkRQT0lOVDtcbiAgICAgICAgICAgIHVybCArPSAnaW5mbHV4L3F1ZXJ5JztcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkYiA6IFwidGVsZWdyYWZcIixcbiAgICAgICAgICAgICAgICAgICAgcTogXCJTRUxFQ1Qgc3VtKFwiICsgJ0J5dGVzT3V0JyArIFwiKSBGUk9NIGh0dHBqc29uX3N2Y3N0YXRzIFdIRVJFIHRpbWUgPiBub3coKSAtIDFtIEFORCBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHNvdXJjZUxpc3QsIFwiRW5kcG9pbnRJUFwiKSArXCIgQU5EIFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICsgYnVpbGRXaGVyZVF1ZXJ5KHRhcmdldExpc3QsIFwiUHJvdmlkZXJJUFwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIEdST1VQIEJZIHRpbWUoMTBzKSBmaWxsKDApIExJTUlUIDY7IFNFTEVDVCBzdW0oXCIgKyAnQnl0ZXNJbicgKyBcIikgRlJPTSBodHRwanNvbl9zdmNzdGF0cyBXSEVSRSB0aW1lID4gbm93KCkgLSAxbSBBTkQgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeShzb3VyY2VMaXN0LCBcIlByb3ZpZGVySVBcIikgK1wiIEFORCBcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGJ1aWxkV2hlcmVRdWVyeSh0YXJnZXRMaXN0LCBcIkVuZHBvaW50SVBcIikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiBHUk9VUCBCWSB0aW1lKDEwcykgZmlsbCgwKSBMSU1JVCA2XCJcbiAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZVBvc3QodXJsLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRHcmFwaERhdGE6IGdldEdyYXBoRGF0YSxcbiAgICAgICAgICAgIGdldFN0cnVjdHVyZURhdGE6IGdldFN0cnVjdHVyZURhdGEsXG4gICAgICAgICAgICBnZXRFZGdlRGF0YTogZ2V0RWRnZURhdGEsXG4gICAgICAgICAgICBnZXRPbGRFZGdlRGF0YTogZ2V0T2xkRWRnZURhdGFcbiAgICAgICAgfVxuICAgIH1dKTtcblxuXG5cblxuXG5cbiIsIi8qKlxuICogVGhpcyBwb2xpY3kgcHJvdmlkZXMgYSB3YXkgZm9yIHByb3BlcnRpZXMgdG8gYmUgc2F2ZWQgXG4gKiBiZXR3ZWVuIHZpZXcgY2hhbmdlc1xuICogXG4gKiBJdCBtb2RpZmllcyB0aGUgZGVzdHJveSBmdW5jdGlvbiB0byBhbHNvIHBhc3MgaW4gYW4gb2JqZWN0IHRoYXRcbiAqIHdpbGwgaGF2ZSBhbGwgaXRzIHByb3BlcnRpZXMgc2F2ZWQgYW5kIHdpbGwgYmUgYXZhaWxhYmxlIFxuICogb24gZ3JhcGggbG9hZC4gV2hlbiBzYXZpbmcgdmFyaWFibGVzIHRvIHRoZSBvYmplY3QsIG5hbWVzcGFjZSB3aXRoXG4gKiB0aGUgcG9saWN5IG5hbWUuXG4gKiBcbiAqIFRoaXMgcG9saWN5IG11c3QgYmUgbG9hZGVkIGZpcnN0IGluIG9yZGVyIGZvciBpdCBzYXZlZCB2YXJpYWJsZXMgXG4gKiB0byBiZSBsb2FkZWQgd2hlbiB0aGUgdmlldyBjb21lcyBiYWNrIHRvIHRoZSBncmFwaFxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnU2F2ZVN0YXRlUG9saWN5JywgWydQb2xpY3knLCBmdW5jdGlvbiAoUG9saWN5KSB7XG4gICAgXHRjbGFzcyBTYXZlU3RhdGVQb2xpY3kgZXh0ZW5kcyBQb2xpY3kuUG9saWN5IHtcbiAgICBcdFx0XG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBUYWtlcyBpbiB0aGUgYW5ndWxhciBzZXJ2aWNlIHRvIHdoaWNoIGl0IHdpbGxcbiAgICBcdFx0ICogc2F2ZSBpdCdzIHByb3BlcnRpZXMgdG8uXG4gICAgXHRcdCAqXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBPYmplY3QgdG8gc2F2ZSBcbiAgICBcdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgdG9cbiAgICBcdFx0ICovXG4gICAgXHRcdGNvbnN0cnVjdG9yKHNhdmVkU3RhdGUpIHtcbiAgICBcdFx0XHRzdXBlcignU2F2ZVN0YXRlUG9saWN5Jyk7XG4gICAgXHRcdFx0dGhpcy5zYXZlZFN0YXRlID0gc2F2ZWRTdGF0ZTtcbiAgICBcdFx0fVxuXG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBDYWxsZWQgd2hlbiB0aGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgIFx0XHQgKiBNb2RpZmllcyB0aGUgZGVzdHJveSBtZXRob2QgXG4gICAgXHRcdCAqIGFuZCBhZGRzIGEgbG9hZCBtZXRob2QgdG8gdGhlIGdyYXBoXG4gICAgXHRcdCAqXG4gICAgXHRcdCAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoIGl0IGlzIFxuICAgIFx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZCBvblxuICAgIFx0XHQgKi9cbiAgICBcdFx0aW5pdGlhbGl6ZShncmFwaCkge1xuICAgIFx0XHRcdHRoaXMuZ3JhcGggPSBncmFwaDtcbiAgICBcdFx0XHR2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgXHRcdFx0Z3JhcGguZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIFx0XHRcdFx0dGhpc1BvbGljeS5ncmFwaERlc3Ryb3kuY2FsbChncmFwaCwgdGhpc1BvbGljeS5zYXZlZFN0YXRlKTtcbiAgICBcdFx0XHR9O1xuXG4gICAgXHRcdFx0Z3JhcGgubG9hZCA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICBcdFx0XHRcdHRoaXNQb2xpY3kuZ3JhcGhMb2FkLmNhbGwoZ3JhcGgsIHNhdmVkU3RhdGUpO1xuICAgIFx0XHRcdH1cbiAgICBcdFx0fVxuXG4gICAgXHRcdC8qKlxuICAgIFx0XHQgKiBXaWxsIG92ZXJyaWRlIHRoZSBncmFwaCdzIGRlZmF1bHQgZGVzdHJveSwgd2l0aCBcbiAgICBcdFx0ICogdGhpcyBwb2xpY3kncyBzYXZlZFN0YXRlIHBhc3NlZCBpbi5cbiAgICBcdFx0ICogQ2FsbGVkIHdpdGggdGhpcyBhcyB0aGUgZ3JhcGhcbiAgICBcdFx0ICpcbiAgICBcdFx0ICogQHBhcmFtICAgICAge09iamVjdH0gIHNhdmVkU3RhdGUgIFRoZSBzYXZlZCBzdGF0ZVxuICAgIFx0XHQgKi9cbiAgICBcdFx0Z3JhcGhEZXN0cm95KHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcztcbiAgICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdE5vZGVQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9saWN5LmRlc3Ryb3koc2F2ZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXNHcmFwaC5iaW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKGtleSwgdGhpc0dyYXBoLmJpbmRpbmdzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBncmFwaCBhcyB0aGlzXG4gICAgICAgICAgICAgKiBVc2VkIHRvIGhhdmUgYWxsIG90aGVyIHBvbGljaWVzIHVzZSB0aGUgbG9hZCBzdGF0ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBUaGUgc2F2ZWQgc3RhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ3JhcGhMb2FkKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgIFx0dmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgIF8odGhpc0dyYXBoLmRlZmF1bHROb2RlUG9saWNpZXMpLmZvckVhY2goZnVuY3Rpb24ocG9saWN5KSB7XG4gICAgICAgICAgICAgICAgIFx0aWYgKHBvbGljeS5sb2FkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXHRwb2xpY3kubG9hZChzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgXHR9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXyh0aGlzR3JhcGguZGVmYXVsdFBhdGhQb2xpY2llcykuZm9yRWFjaChmdW5jdGlvbihwb2xpY3kpIHtcbiAgICAgICAgICAgICAgICAgXHRpZiAocG9saWN5LmxvYWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBcdHBvbGljeS5sb2FkKHNhdmVkU3RhdGUpO1xuICAgICAgICAgICAgICAgICBcdH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICBcdH1cbiAgICBcdHJldHVybiB7XG4gICAgXHRcdFBvbGljeTogU2F2ZVN0YXRlUG9saWN5XG4gICAgXHR9XG59XSk7XG5cblxuXG5cblxuXG5cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbi8qKlxuICogQ3JlYXRlZCBieSBjc2hhbXB1ciBvbiAxMC8xOC8xNi5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBmb3Jtc18xID0gcmVxdWlyZShcIkBhbmd1bGFyL2Zvcm1zXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvbW1vblwiKTtcbnZhciBkaXJlY3RpdmVzX21vZHVsZV8xID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvZGlyZWN0aXZlcy9kaXJlY3RpdmVzLm1vZHVsZVwiKTtcbnZhciB2b2x1bWVsaXN0Y3RybF8xID0gcmVxdWlyZShcIi4vdm9sdW1lbGlzdGN0cmxcIik7XG52YXIgdm9sdW1lc2VydmljZV8xID0gcmVxdWlyZShcIi4vdm9sdW1lc2VydmljZVwiKTtcbnZhciB2b2x1bWVkZXRhaWxzY3RybF8xID0gcmVxdWlyZShcIi4vdm9sdW1lZGV0YWlsc2N0cmxcIik7XG52YXIgVm9sdW1lTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWb2x1bWVNb2R1bGUoKSB7XG4gICAgfVxuICAgIFZvbHVtZU1vZHVsZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuTmdNb2R1bGUoe1xuICAgICAgICAgICAgaW1wb3J0czogW1xuICAgICAgICAgICAgICAgIGZvcm1zXzEuRm9ybXNNb2R1bGUsXG4gICAgICAgICAgICAgICAgY29tbW9uXzEuQ29tbW9uTW9kdWxlLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXNfbW9kdWxlXzEuRGlyZWN0aXZlc01vZHVsZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAgICAgICAgIHZvbHVtZWxpc3RjdHJsXzEuVm9sdW1lTGlzdENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB2b2x1bWVkZXRhaWxzY3RybF8xLlZvbHVtZURldGFpbHNDb21wb25lbnQsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwb3J0czogW1xuICAgICAgICAgICAgICAgIHZvbHVtZWxpc3RjdHJsXzEuVm9sdW1lTGlzdENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB2b2x1bWVkZXRhaWxzY3RybF8xLlZvbHVtZURldGFpbHNDb21wb25lbnQsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbdm9sdW1lc2VydmljZV8xLlZvbHVtZVNlcnZpY2VdXG4gICAgICAgIH0pLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcbiAgICBdLCBWb2x1bWVNb2R1bGUpO1xuICAgIHJldHVybiBWb2x1bWVNb2R1bGU7XG59KCkpO1xuZXhwb3J0cy5Wb2x1bWVNb2R1bGUgPSBWb2x1bWVNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12b2x1bWUubW9kdWxlLmpzLm1hcCIsIi8qKlxuICogVGhpcyBwb2xpY3kgaXMgdXNlZCBmb3Igc3BsaXR0aW5nIGEgbm9kZSBpbnRvIGl0cyBjaGlsZHJlbixcbiAqIGFuZCBqb2luaW5nIHRoZW0gYmFjayB0byB0aGVpciBwYXJlbnQuXG4gKiBTcGxpdHMgb24gZG91YmxlIGNsaWNrLCBhbmQgam9pbnMgb24gcmlnaHQgY2xpY2suXG4gKiBJZiBtdWx0aXBsZSBub2RlcyBhcmUgc2VsZWN0ZWQgYXQgdGhlIHRpbWUgb2YgYSBzcGxpdCBvciBqb2luIGV2ZW50LFxuICogaXQgd2lsbCBzcGxpdCBvciBqb2luIGFsbCBvZiB0aGVtLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnU3BsaXRKb2luTm9kZVBvbGljeScsIFsnTm9kZVNlbGVjdGlvblBvbGljeScsICdWaXN1YWxpemVyTm9kZScsIFxuICAgIFx0XHRmdW5jdGlvbiAoTm9kZVNlbGVjdGlvblBvbGljeSwgVmlzdWFsaXplck5vZGUpIHtcblx0XHRjbGFzcyBTcGxpdEpvaW5Ob2RlUG9saWN5IGV4dGVuZHMgTm9kZVNlbGVjdGlvblBvbGljeS5Qb2xpY3kge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG5cdFx0XHQgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xpY3lOYW1lID0gXCJTcGxpdEpvaW5Ob2RlUG9saWN5XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyLmluaXRpYWxpemUoZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlNwbGl0Sm9pbk5vZGVQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zcGxpdE5vZGVzID0gW107IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRyaWdnZXJpbmcgc3BsaXQgb24gZG91YmxlIGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqZWN0fSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGJsY2xpY2soZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcblxuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE11bHRpcGxlTm9kZXMoc3VwZXJTdGF0ZS5zZWxlY3RlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsU2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdE5vZGUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVHJpZ2dlcmluZyBqb2luIG9uIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqfSAgZDNub2RlICBUaGUgZDMgbm9kZVxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIGQgICAgICBUaGUgbWF0Y2hpbmcgZGF0YSBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29udGV4dG1lbnUoZDNub2RlLCBkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuTm9kZVNlbGVjdGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIHRyeSB0byBqb2luIGEgaGlnaGxpZ2h0ZWQgbm9kZSB3aGlsZSBtdWx0aXBsZSBub2RlcyBhcmUgc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIC8vd2Ugam9pbiBhbGwgaGlnaGxpZ2h0ZWQgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSBzdXBlclN0YXRlLnNlbGVjdGVkTm9kZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE5vZGVzLmluZGV4T2YoZCkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qb2luTm9kZShzZWxlY3RlZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgd2UgdHJ5IHRvIGpvaW4gYSBub2RlIHRoYXQgaXNuJ3QgcGFydCBvZiBhIGhpZ2hsaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2UgcmVtb3ZlIGFsbCBoaWdobGlnaHRzIGFuZCB0aGVuIGpvaW4gdGhlIGNsaWNrZWQgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxTZWxlY3RlZE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmpvaW5Ob2RlKGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwbGl0cyBhIG5vZGUuXG4gICAgICAgICAgICAgKiB1c2VkIHRvIHNoYXJlIGNvZGUgYmV0d2VlbiBzcGxpdE5vZGUgYW5kIHNwbGl0TXVsdGlwbGVOb2Rlc1xuICAgICAgICAgICAgICogd2hpbGUgcHJldmVudGluZyB0aGUgaGFuZGxlcnMgZm9yIHRoZW0gYm90aCBmaXJpbmdcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIGJlaW5nIHNwbGl0XG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7QXJyYXl9ICBUaGUgbmV3IG5vZGVzIGNyZWF0ZWQgYnkgdGhlIHNwbGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF9fc3BsaXROb2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICAvL2lmIGl0IGhhcyBubyBjaGlsZHJlbiB0byBzcGxpdCBpbnRvXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdFtuYW1lXSA9PT0gdW5kZWZpbmVkIHx8IF8uaXNFbXB0eShjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3JlbW92aW5nIHRoZSBub2RlIGZyb20gdGhlIGxpc3Qgb2Ygbm9kZXNcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMgPSBfLmZpbHRlcih0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKGdyYXBoTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdyYXBoTm9kZXMgIT0gbm9kZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzR3JhcGgubm9kZXMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvL2dldHRpbmcgYWxsIHRoZSBub2RlIGlkJ3MgZm9yIGZpbmRpbmcgZmxvd1xuICAgICAgICAgICAgICAgIHZhciBub2RlX25hbWVzX3NldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL3NldCBvZiBub2RlcyBhZnRlciB0aGUgc3BsaXRcbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZV9uYW1lc19zZXQucHVzaChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV1baV0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZXMucHVzaChjaGlsZHJlbl9zdHJ1Y3RbbmFtZV1baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmV0RGF0YSA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmdldEZsb3dCZXR3ZWVuU2V0KG5vZGVfbmFtZXNfc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRhIGZvciBuZXcgbm9kZXNcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gbm9kZS5hbmNlc3RvcnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAvL2tlZXBpbmcgb3JkZXJpbmcgdGhhdCBmaXJzdCBpbiBhbmNlc3RvciBsaXN0IGlzIGNsb3Nlc3QgaW4gcmVsYXRpb25zaGlwXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JzLnNwbGljZSgwLCAwLCBub2RlLmlkKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVfb2JqcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBub2RlLnJhZGl1cyAqIHRoaXNHcmFwaC5jb25zdHMucmFkaXVzRGVjYXk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVEYXRhID0gcmV0RGF0YS5ub2RlRGF0YTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRpbmcgd2hpY2ggb2YgdGhlIG5vZGVzIGluIHJldERhdGFbMF0gYXJlIG5ld1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3X25vZGVzLmluZGV4T2Yobm9kZURhdGFbaV0uaWQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IG5vZGVEYXRhW2ldLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBub2RlRGF0YVtpXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19ub2RlID0gbmV3IFZpc3VhbGl6ZXJOb2RlLk5vZGUobnVsbCwgbnVsbCwgaWQsIHRleHQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMsIHhMb2MsIHlMb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X25vZGUuaW5pdGlhbGl6ZSh0aGlzR3JhcGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X25vZGVfb2Jqcy5wdXNoKG5ld19ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTGlua0RhdGEocmV0RGF0YS5saW5rRGF0YSwgdGhpc0dyYXBoLm5vZGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXRMaW5rcygpO1xuXG4gICAgICAgICAgICAgICAgc3RhdGUuc3BsaXROb2Rlcy5wdXNoKG5vZGUuaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfbm9kZV9vYmpzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwbGl0cyB0aGUgZ2l2ZSBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIGJlaW5nIHNwbGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNwbGl0Tm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX19zcGxpdE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpdE5vZGVFdmVudChyZXMpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3BsaXRzIGFsbCB0aGUgbm9kZXMgcGFzc2VkIGluXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbm9kZXMgICBBcnJheSBvZiBub2RlcyB0byBiZSBzcGxpdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE11bHRpcGxlTm9kZXMobm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzTm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fc3BsaXROb2RlKG5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzTm9kZXMgPSByZXNOb2Rlcy5jb25jYXQocmVzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0TXVsdGlwbGVOb2Rlc0V2ZW50KHJlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIGEgc2luZ2xlIG5vZGUgaXMgc3BsaXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE5vZGVFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgbXVsdGlwbGUgbm9kZXMgYXJlIHNwbGl0IGF0IG9uY2VcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7QXJyYXl9ICBuZXdOb2RlcyAgVGhlIG5ldyBub2Rlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcGxpdE11bHRpcGxlTm9kZXNFdmVudChuZXdOb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zZXRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB1c2VkIHRvIHNoYXJlIGNvZGUgYmV0d2VlbiBqb2luTm9kZSBhbmQgam9pbk11bHRpcGxlTm9kZVxuICAgICAgICAgICAgICogd2hpbGUgcHJldmVudGluZyBib3RoIGhhbmRsZXJzIGZpcmluZ1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gICAgICAgICAgbm9kZSAgICBUaGUgbm9kZSB0byBqb2luXG4gICAgICAgICAgICAgKiBAcmV0dXJuICAgICB7Tm9kZX0gIFRoZSBuZXcgbm9kZSBhZnRlciB0aGUgam9pblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfX2pvaW5Ob2RlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhhdCBub2RlIHN0aWxsIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgLy9pZiBpdCBoYXMgbm8gYW5jZXN0b3IsIG5vdGhpbmcgdG8gam9pblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9fYmVfZGVsZXRlZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlX25hbWVzX3NldCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc0dyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbm9kZSB3b24ndCBiZSBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNHcmFwaC5ub2Rlc1tpXS5hbmNlc3RvcnMuaW5kZXhPZihub2RlLnBhcmVudCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2godGhpc0dyYXBoLm5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvX2JlX2RlbGV0ZWQucHVzaCh0aGlzR3JhcGgubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZV9pZCA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGVfbmFtZXNfc2V0LnB1c2gobm9kZS5wYXJlbnQpO1xuXG4gICAgICAgICAgICAgICAgLy9mb3JtYXR0aW5nIGRhdGFcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gbm9kZS5yYWRpdXMgLyB0aGlzR3JhcGguY29uc3RzLnJhZGl1c0RlY2F5OyBcbiAgICAgICAgICAgICAgICB2YXIgeExvYyA9IG5vZGUueDtcbiAgICAgICAgICAgICAgICB2YXIgeUxvYyA9IG5vZGUueTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5hbmNlc3RvcnNbMV07XG4gICAgICAgICAgICAgICAgdmFyIGFuY2VzdG9ycyA9IG5vZGUuYW5jZXN0b3JzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZSA9IG5ldyBWaXN1YWxpemVyTm9kZS5Ob2RlKHhMb2MsIHlMb2MsIG5ld19ub2RlX2lkLCBuZXdfbm9kZV9pZCwgcmFkaXVzLCBwYXJlbnQsIGFuY2VzdG9ycyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJldERhdGEgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5nZXRGbG93QmV0d2VlblNldChub2RlX25hbWVzX3NldCk7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG5vZGVzIHRoYXQgd2lsbCBiZSBqb2luZWRcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvX2JlX2RlbGV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVfdG9fZGVsZXRlID0gdG9fYmVfZGVsZXRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlX3RvX2RlbGV0ZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGVfdG9fZGVsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmxpbmtzID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UucHJvY2Vzc0xpbmtEYXRhKHJldERhdGEubGlua0RhdGEsIHRoaXNHcmFwaC5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmluaXROb2RlcygpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0TGlua3MoKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnNwbGl0Tm9kZXMuc3BsaWNlKHN0YXRlLnNwbGl0Tm9kZXMuaW5kZXhPZihuZXdfbm9kZS5pZCksIDEpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld19ub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEpvaW5zIHRoZSBnaXZlbiBub2RlXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICBub2RlICAgIFRoZSBub2RlIHRvIGpvaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgam9pbk5vZGUobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gdGhpcy5fX2pvaW5Ob2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBcdHRoaXMuam9pbk5vZGVFdmVudChuZXdOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSm9pbnMgYWxsIHRoZSBnaXZlbiBub2Rlc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5vZGVzICAgVGhlIG5vZGVzIHRvIGpvaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgam9pbk11bHRpcGxlTm9kZShub2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBuZXdfbm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9fam9pbk5vZGUobm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdfbm9kZXMucHVzaChyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmpvaW5NdWx0aXBsZU5vZGVzRXZlbnQobmV3X25vZGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBqb2luZWRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7Tm9kZX0gIG5ld05vZGUgIFRoZSBuZXcgbm9kZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBqb2luTm9kZUV2ZW50KG5ld05vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgbXVsdGlwbGUgbm9kZXMgYXJlIGpvaW5lZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtBcnJheX0gIG5ld05vZGVzICBUaGUgbmV3IG5vZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGpvaW5NdWx0aXBsZU5vZGVzRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaDtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pbk5vZGVQb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG4iLCIvKipcbiAqIFRoaXMgcG9saWN5IGlzIHVzZWQgdG8gY2hhbmdlIHRoZSB2aWV3IHRvIGZvY3VzIG9uIHNwbGl0dGluZyBhbmQgXG4gKiBqb2luaW5nIGV2ZW50cy5cbiAqIE92ZXJyaWRlcyB0aGUgY2VydGFpbiBmb3JjZSBsYXlvdXQgZnVuY3Rpb25zIG9mIHRoZSBncmFwaCB0byBwYXJ0aXRpb24gYSBzcGxpdFxuICogaW50byB0aGUgZm9jdXNlZCBub2RlcyBhbmQgdGhlIGNvbm5lY3RlZCBub2Rlcy5cbiAqIFxuICogSGFzIHNhdmUvbG9hZCBtZXRob2RzIGZvciB0aGUgc2F2ZSBzdGF0ZSBwb2xpY3kuXG4gKiBIYXMgYmFjayBidXR0b24gc3VwcG9ydC5cbiAqIENhbiBhdXRvIGNoYW5nZSB0aGUgdGl0bGUgb2YgdGhlIGdyYXBoLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnY29udGl2LmdyYXBoJylcbiAgICAuZmFjdG9yeSgnU3BsaXRKb2luVmlld1BvbGljeScsIFsnU3BsaXRKb2luTm9kZVBvbGljeScsICdWaXN1YWxpemVyTm9kZScsIGZ1bmN0aW9uIChTcGxpdEpvaW5Ob2RlUG9saWN5LCBWaXN1YWxpemVyTm9kZSkgeyBcbiAgICAgICAgY2xhc3MgU3BsaXRKb2luVmlld1BvbGljeSBleHRlbmRzIFNwbGl0Sm9pbk5vZGVQb2xpY3kuUG9saWN5e1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xpY3lOYW1lID0gXCJTcGxpdEpvaW5WaWV3UG9saWN5XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtHcmFwaH0gIGdyYXBoICAgVGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRpYWxpemUoZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyLmluaXRpYWxpemUoZ3JhcGgpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zYXZlZFN0YXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIHN0YXRlLmZvY3VzR3JvdXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jaSA9IFtdO1xuICAgICAgICAgICAgICAgIHN0YXRlLnpvb21zID0ge307XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0ID0ge307XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0RGVmYXVsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbURlZmF1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVJZHNUb1Jlc2hvdyA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICB2YXIgY29uc3RzID0gZ3JhcGguY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdHMuYm91bmRhcnkgPSAwLjg7XG5cbiAgICAgICAgICAgICAgICAvL292ZXJyaWRpbmcgZDNmb3JjZSBtZXRob2RzIG9mIHRoZSBncmFwaC5cbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlQm91bmRzID0gdGhpcy5kM0ZvcmNlQm91bmRzO1xuICAgICAgICAgICAgICAgIGdyYXBoLmQzRm9yY2VUaWNrID0gdGhpcy5kM0ZvcmNlVGljaztcbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlU3RhcnQgPSB0aGlzLmQzRm9yY2VTdGFydDtcbiAgICAgICAgICAgICAgICBncmFwaC5kM0ZvcmNlRW5kID0gdGhpcy5kM0ZvcmNlRW5kO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExpbmtzIHRoZSBwcm92aWRlZCBlbGVtZW50IGEgYmFjayBidXR0b24gZmVhdHVyZVxuICAgICAgICAgICAgICogRG9lc24ndCB0cmlnZ2VyIHRoZSBvbi1jbGljayBldmVudFxuICAgICAgICAgICAgICogVGhhdCBzaG91bGQgYmUgZG9uZSB0aHJvdWdoIGFuZ3VsYXIgbmctY2xpY2suXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge2pRdWVyeX0gIGVsZW0gICAgVGhlIGpxdWVyeSBzZWxlY3RlZCBlbGVtZW50XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluc3RhbGxCYWNrQnV0dG9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5iYWNrQnV0dG9uRWxlbSA9IGVsZW07XG4gICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudW5kb0xhc3RFdmVudC5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpbGwgYWxsb3cgdGhpcyBwb2xpY3kgdG8gY2hhbmdlIHRoZSB0aXRsZSBvZiB0aGUgZ3JhcGhcbiAgICAgICAgICAgICAqIGFzIHNwbGl0IGFuZCBqb2luIGV2ZW50cyBvY2N1ci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gICAgICB7alF1ZXJ5fSAgZWxlbSAgICBUaGUganF1ZXJ5IHNlbGVjdGVkIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5zdGFsbFRpdGxlKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbSA9IGVsZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIGdyYXBoIGlzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBzYXZlZFN0YXRlICBBbnkgcHJvcGVydHkgb24gdGhpc1xuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCB3aWxsIGJlIGFjY2Vzc2libGVcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSB2aWV3IHJlbG9hZHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVzdHJveShzYXZlZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgLy9Pbmx5IGlmIHRoZSBzYXZlIHN0YXRlIHBvbGljeSBpcyBpbnN0YWxsZWRcbiAgICAgICAgICAgICAgICBpZiAoc2F2ZWRTdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZShzYXZlZFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2lsbCBzYXZlIHRoZSBjdXJyZW50IHN0YXRlLCBhbmQgYWxsIGhpc3RvcnkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge09iamVjdH0gIHNhdmVkU3RhdGUgIEFueSBwcm9wZXJ0eSBvbiB0aGlzXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IHdpbGwgYmUgYWNjZXNzaWJsZVxuICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHZpZXcgcmVsb2Fkc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzYXZlKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSB0aGlzR3JhcGgubGlua3M7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJUaXRsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJUaXRsZSA9IHN0YXRlLnRpdGxlRWxlbS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmb2N1c0dyb3VwcyA9IHN0YXRlLmZvY3VzR3JvdXBzO1xuICAgICAgICAgICAgICAgIHZhciBldmVudEhpc3RvcnkgPSBzdGF0ZS5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgICAgICAgdmFyIHpvb21zID0gc3RhdGUuem9vbXM7XG4gICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHN0YXRlLmxheW91dDtcblxuICAgICAgICAgICAgICAgIHZhciBsYXlvdXREZWZhdWx0ID0gc3RhdGUubGF5b3V0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICB2YXIgem9vbURlZmF1bHQgPSBzdGF0ZS56b29tRGVmYXVsdDtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0ge25vZGVzOm5vZGVzLCBsaW5rczpsaW5rcywgXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczpzdGF0ZS5zYXZlZFN0YXRlcywgY3VyclRpdGxlOmN1cnJUaXRsZSwgXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzR3JvdXBzOiBmb2N1c0dyb3VwcyxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIaXN0b3J5OmV2ZW50SGlzdG9yeSwgem9vbXM6em9vbXMsXG4gICAgICAgICAgICAgICAgICAgIGxheW91dDpsYXlvdXQsIGxheW91dERlZmF1bHQ6bGF5b3V0RGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgem9vbURlZmF1bHQ6em9vbURlZmF1bHR9O1xuICAgICAgICAgICAgICAgIHNhdmVkU3RhdGUuU3BsaXRKb2luVmlld1BvbGljeSA9IHJldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBncmFwaCBpcyByZWxvYWRlZCwgYXNzdW1pbmdcbiAgICAgICAgICAgICAqIHNhdmUgc3RhdGUgcG9saWN5IGlzIGluc3RhbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBsb2FkU3RhdGUgIENvbnRhaW5zIGFsbCB0aGUgc2F2ZWRcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2FkKGxvYWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzUG9saWN5ID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIGxvYWRTdGF0ZSA9IGxvYWRTdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHN0YXRlLnNhdmVkU3RhdGVzID0gbG9hZFN0YXRlLnN0YXRlcztcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSBsb2FkU3RhdGUubGlua3M7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gbG9hZFN0YXRlLm5vZGVzO1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJUaXRsZSA9IGxvYWRTdGF0ZS5jdXJyVGl0bGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbS50ZXh0KGN1cnJUaXRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeSA9IGxvYWRTdGF0ZS5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHMgPSBsb2FkU3RhdGUuZm9jdXNHcm91cHM7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbXMgPSBsb2FkU3RhdGUuem9vbXM7XG4gICAgICAgICAgICAgICAgc3RhdGUubGF5b3V0ID0gbG9hZFN0YXRlLmxheW91dDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXlvdXREZWZhdWx0ID0gbG9hZFN0YXRlLmxheW91dERlZmF1bHQ7XG4gICAgICAgICAgICAgICAgc3RhdGUuem9vbURlZmF1bHQgPSBsb2FkU3RhdGUuem9vbURlZmF1bHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYmFja0J1dHRvbkVsZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtLmZhZGVUbygnc2xvdycsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJjb25uZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9sb2FkaW5nIGEgcHJldmlvdXMgbGF5b3V0XG4gICAgICAgICAgICAgICAgdmFyIGxheW91dDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dERlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbURlZmF1bHQ7IFxuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9sYXlvdXQgY2FuJ3QgYmUgbnVsbFxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGxheW91dFtuLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsYXlvdXQsIG4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG4ueCA9IHBvcy54O1xuICAgICAgICAgICAgICAgICAgICBuLnkgPSBwb3MueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUuaW5pdEZvcmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGguY2FsbCh0aGlzR3JhcGgsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZUdyYXBoQ2FsbGJhY2suY2FsbCh0aGlzUG9saWN5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmlnZ2VyaW5nIHNwbGl0IG9uIGRvdWJsZSBjbGlja1xuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBGb2N1cyBncm91cCBzdG9yZXMgdGhlIG5vZGUgdGhhdCBpcyBhYm91dCB0byBiZSBzcGxpdC5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogV2hlbiBmb2N1cyBncm91cCBoYXMgbGVuZ3RoIDAsIHRoZSBmaXJzdCBzcGxpdCBcbiAgICAgICAgICAgICAqIHdpbGwganVzdCBiZSBwdXNoZWQgb24uXG4gICAgICAgICAgICAgKiBUaGUgbm9kZSB3aWxsIGJlIHNwbGl0IGFuZCBwdXNoZWQgdG8gdGhlIHRvcCBoYWxmIFxuICAgICAgICAgICAgICogb2YgdGhlIHNjcmVlbiwgYW5kIHRoZSBib3R0b20gaGFsZiB3aWxsIGNvbnRhaW4gYW55XG4gICAgICAgICAgICAgKiBub2RlcyBpdCBoYXMgY29ubmVjdGlvbnMgdG8uXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIFdoZW4gYSBmb2N1cyBncm91cCBsZW5ndGggaXMgPj0gMSwgaWYgdGhlIG5vZGUgdG8gYmVcbiAgICAgICAgICAgICAqIHNwbGl0IGlzIGEgZm9jdXMgbm9kZSwgaXQgd2lsbCByZXBsYWNlIGZvY3VzR3JvdXBzWzBdIGFuZFxuICAgICAgICAgICAgICogdGhlIHRvcCBoYWxmIHdpbGwgYmUgaXRzIGNoaWxkcmVuLCBhbmQgYm90dG9tIGhhbGYgd2lsbFxuICAgICAgICAgICAgICogYmUgdGhlIG5vZGVzIGl0IGhhcyBjb25uZWN0aW9ucyB0by5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogSWYgdGhlIHNwbGl0IGlzIGluIHRoZSBib3R0b20gaGFsZiwgdGhlbiB0aGUgYm90dG9tIGhhbGZcbiAgICAgICAgICAgICAqIHdpbGwgZGlzcGxheSBpdCdzIGNoaWxkcmVuIGFuZCB3aWxsIG9ubHkgc2hvdyBjb25uZWN0aW9ucyBiZXR3ZWVuXG4gICAgICAgICAgICAgKiB0aGUgdHdvIGdyb3VwcywgYW5kIHdpbGwgcmVwbGFjZSBmb2N1c0dyb3Vwc1sxXS5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0QzT2JqfSAgIGQzbm9kZSAgVGhlIGQzIG5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtPYmplY3R9ICBkICAgICAgIFRoZSBtYXRjaGluZyBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkYmxjbGljayhkM25vZGUsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgY2FuIHNwbGl0XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBkLmlkO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbl9zdHJ1Y3QgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3Q7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuX3N0cnVjdFtuYW1lXSA9PT0gdW5kZWZpbmVkIHx8IF8uaXNFbXB0eShjaGlsZHJlbl9zdHJ1Y3RbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwcy5zbGljZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkgeyAvL3RvcGxldmVsIHNwbGl0XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnB1c2goZC5pZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmluY2x1ZGVzKGNoaWxkcmVuX3N0cnVjdFtzdGF0ZS5mb2N1c0dyb3Vwc1swXV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkKSkgeyAvL3NwbGl0dGluZyBhIGZvY3VzIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbMF0gPSBkLmlkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAxKSB7Ly9zcGxpdHRpbmcgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25uZWN0ZWQgbm9kZVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwcy5wdXNoKGQuaWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMV1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkKSkgey8vc3BsaXR0aW5nIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Nvbm5lY3RlZCBub2RlXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzWzFdID0gZC5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDIgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mb2N1c0dyb3Vwc1sxXSA9PT0gZC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAvL1NwbGl0dGluZyBhIGNvbm5lY3RlZCBub2RlLCBrZWVwIGFsbCBmb2N1cyBub2Rlc1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZXNUb0tlZXAgPSBbZF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlSWRzVG9SZXNob3cgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwT25lTm9kZXMgPSBjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dO1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhncm91cE9uZU5vZGVzLCBub2RlLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHNUb1Jlc2hvdy5wdXNoKG5vZGUuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vTWFrZSBzcGxpdCBub2RlcyB0aGUgZm9jdXMgYW5kIGtlZXAgbm9kZXMgdGhhdCBhcmUgY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvS2VlcCA9IFtkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVJZHNUb1Jlc2hvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLmxpbmtzLCBmdW5jdGlvbihsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluay5zb3VyY2UgPT09IGQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LmluZGV4T2YobGluay50YXJnZXQuaWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay50YXJnZXQuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsudGFyZ2V0LlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobGluay50YXJnZXQuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobGluay50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rLnRhcmdldCA9PT0gZCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LmluZGV4T2YobGluay5zb3VyY2UuaWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5zb3VyY2UuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuc291cmNlLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlkc1RvUmVzaG93LnB1c2gobGluay5zb3VyY2UuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9LZWVwLnB1c2gobGluay5zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1JlbW92aW5nIGxpbmtzIGZyb20gdGhlIG5vZGUgdG8gYmUgc3BsaXRcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaWQgIT09IGQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgudXBkYXRlR3JhcGgoKTtcblxuICAgICAgICAgICAgICAgIC8vZGlzYWJsaW5nIHVwZGF0ZSBncmFwaCB0byBwcmV2ZW50IG5ldyBkYXRhIGZyb21cbiAgICAgICAgICAgICAgICAvL3JlZHJhd2luZyBsaW5rcyB3aGlsZSB0aGVyZSBhcmUgYW5pbWF0aW9ucyBnb2luZyBvblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5zdGF0ZS5kaXNhYmxlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguY2lyY2xlcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaWQgIT09IGQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZGVsYXkoMjAwKS5kdXJhdGlvbig0MDApLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGlzYWJsaW5nIHF0aXAgaWYgaW5zdGFsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5xdGlwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnF0aXAoJ2Rpc2FibGUnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHhMb2MgPSAocGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwid2lkdGhcIikpIC8gc2NhbGUpIC8gMiAgKyB0cmFuc2xhdGVbMF07XG4gICAgICAgICAgICAgICAgdmFyIHlMb2MgPSAocGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwiaGVpZ2h0XCIpKSAvIHNjYWxlKS8gMiAgKyB0cmFuc2xhdGVbMV07XG4gICAgICAgICAgICAgICAgZC54U3RhcnQgPSBkLng7XG4gICAgICAgICAgICAgICAgZC55U3RhcnQgPSBkLnk7XG4gICAgICAgICAgICAgICAgZC54ID0geExvYztcbiAgICAgICAgICAgICAgICBkLnkgPSB5TG9jO1xuICAgICAgICAgICAgICAgIGQzbm9kZS50cmFuc2l0aW9uKFwibm9kZVBvc2l0aW9uVHJhbnNpdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4U3RhcnQgPSBkLnhTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeVN0YXJ0ID0gZC55U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54U3RhcnQgPSBkLng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55U3RhcnQgPSBkLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmludGVycG9sYXRlU3RyaW5nKFwidHJhbnNsYXRlKFwiICsgeFN0YXJ0ICsgXCIsXCIgKyB5U3RhcnQgKyBcIilcIiwgXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0Tm9kZUZ1bmMgPSBzdXBlci5zcGxpdE5vZGU7XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUlkc1RvUmVzaG93ID0gbm9kZUlkc1RvUmVzaG93O1xuICAgICAgICAgICAgICAgIC8vd2FpdGluZyBmb3Igbm9kZSB0cmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2RlcyA9IG5vZGVzVG9LZWVwO1xuICAgICAgICAgICAgICAgICAgICBzcGxpdE5vZGVGdW5jLmNhbGwodGhpc1BvbGljeSwgZCk7XG4gICAgICAgICAgICAgICAgfSwgNzUwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUbyBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGdyYXBoIGlzIHNwbGl0LlxuICAgICAgICAgICAgICogQnJpbmdzIGFsbCBub2RlcyBiYWNrIGludG8gdmlldyBhbmQgc2V0cyB0aGVpciBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUdyYXBoQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKDQwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJmb2N1c1wiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImNvbm5lY3RlZFwiLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLlNwbGl0Sm9pblZpZXdQb2xpY3kgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9PT0gXCJmb2N1c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiZm9jdXNcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImNvbm5lY3RlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVJZHNUb1Jlc2hvdyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnVwZGF0ZUdyYXBoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmFuZG9tbHkgc2V0cyB0aGUgcG9zaXRpb25zIG9mIGFueSB1bnNldCBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFBvc2l0aW9ucygpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoQ29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cztcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBncmFwaENvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXNHcmFwaC5ub2RlcztcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gdGhpc1BvbGljeS5kM0ZvcmNlQm91bmRzLmNhbGwodGhpc0dyYXBoKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUueCA9PSBudWxsIHx8IG5vZGUueSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGdldFJhbmRvbUludChub2RlLnJhZGl1cyArIG9mZnNldCwgcmV0LndpZHRoIC0gbm9kZS5yYWRpdXMgLSBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBnZXRSYW5kb21JbnQobm9kZS5yYWRpdXMgKyBvZmZzZXQsIHJldC5oZWlnaHQgLSBub2RlLnJhZGl1cyAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS55ID0geTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIG9uIHRoZSBzdGFydCBvZiB0aGUgZDMgZm9yY2Ugc2ltdWxhdGlvblxuICAgICAgICAgICAgICogV2lsbCBvdmVycmlkZSB0aGUgbWV0aG9kIG9mIHRoZSBncmFwaFxuICAgICAgICAgICAgICogXCJ0aGlzXCIgcG9pbnRzIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkM0ZvcmNlU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXNcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgZnVuY3Rpb24oZCkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnhTdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC54U3RhcnQgPSAoZC54U3RhcnQgKiB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpKSArIHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZnVuY3Rpb24oZCkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnlTdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55U3RhcnQgPSAoZC55U3RhcnQgKnRoaXNHcmFwaC5kcmFnU3ZnLnNjYWxlKCkpICsgdGhpc0dyYXBoLmRyYWdTdmcudHJhbnNsYXRlKClbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC55O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5wYXRoc1xuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS55OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgb24gdGhlIHN0YXJ0IG9mIHRoZSBkMyBmb3JjZSBzaW11bGF0aW9uXG4gICAgICAgICAgICAgKiBXaWxsIG92ZXJyaWRlIHRoZSBtZXRob2Qgb2YgdGhlIGdyYXBoXG4gICAgICAgICAgICAgKiBcInRoaXNcIiBwb2ludHMgdG8gdGhlIGdyYXBoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGQzRm9yY2VFbmQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeSA9IHN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlUG9saWN5LmxheW91dERlZmF1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdExheW91dCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGF5b3V0W24uaWRdID0ge3g6bi54LCB5Om4ueX07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS5sYXlvdXREZWZhdWx0ID0gZGVmYXVsdExheW91dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeS56b29tRGVmYXVsdCA9IFt0cmFuc2xhdGUsIHNjYWxlXTsgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXNcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnk7IH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzLmF0dHIoJ3gxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2lsbCBiZSBjYWxsZWQgZHVyaW5nIEQzIGZvcmNlIHNpbXVsYXRpb25zXG4gICAgICAgICAgICAgKiBieSB0aGUgZ3JhcGgsIHNvIFwidGhpc1wiIHdpbGwgcG9pbnQgdG8gdGhlIGdyYXBoIG9iamVjdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtudW1iZXJ9ICB3aWR0aCAgIEQzIExheW91dCBXaWR0aFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge251bWJlcn0gIGhlaWdodCAgRDMgTGF5b3V0IEhlaWdodFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkM0ZvcmNlVGljayhlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHMgPSB0aGlzR3JhcGguY29uc3RzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVBvbGljeSA9IHN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gY29uc3RzLmRpc3BsYXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpc0dyYXBoLmRyYWdTdmcuc2NhbGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIE1vdmUgbm9kZXMgdG93YXJkIGNsdXN0ZXIgZm9jdXMuXG4gICAgICAgICAgICAgICAgdmFyIGZvY2kgPSBzdGF0ZVBvbGljeS5mb2NpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdyYXZpdHkoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2NpLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9PT0gXCJmb2N1c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueSArPSAoZm9jaVswXSAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gKGZvY2lbMV0gLSBkLnkpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQueCArPSAod2lkdGgvMiAtIGQueCkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ICs9IChoZWlnaHQvMiAtIGQueSkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gKHdpZHRoLzIgLSBkLngpICogYWxwaGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG5vZGVzIGFyZSB3aXRoaW4gYm91bmRzXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLmNpcmNsZXNcbiAgICAgICAgICAgICAgICAgICAgLmVhY2godGhpcy5kM0ZvcmNlQ29sbGlkZSguNSkpXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKGdyYXZpdHkoLjIgKiBlLmFscGhhKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQueCA9IE1hdGgubWF4KChkLnJhZGl1cyArIG9mZnNldCkvc2NhbGUsIE1hdGgubWluKHdpZHRoICsgKCgtb2Zmc2V0LSBkLnJhZGl1cykgLyBzY2FsZSksIGQueCkpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5TcGxpdEpvaW5WaWV3UG9saWN5ID09IG51bGwgfHwgZC5TcGxpdEpvaW5WaWV3UG9saWN5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgPSBNYXRoLm1heCgoZC5yYWRpdXMgKyBvZmZzZXQpL3NjYWxlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKGhlaWdodCArICgoLW9mZnNldCAtIGQucmFkaXVzKS9zY2FsZSksIGQueSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImZvY3VzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgPSBNYXRoLm1heChkLnJhZGl1cyArIG9mZnNldCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbigoaGVpZ2h0ICsgKCgtb2Zmc2V0IC0gZC5yYWRpdXMpL3NjYWxlKSkqY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3kuYm91bmRhcnksIGQueSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC55ID0gTWF0aC5tYXgoKGhlaWdodCArICgob2Zmc2V0IC0gZC5yYWRpdXMpL3NjYWxlKSkgKmNvbnN0cy5TcGxpdEpvaW5WaWV3UG9saWN5LmJvdW5kYXJ5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKGhlaWdodCArICgoLW9mZnNldCAtIGQucmFkaXVzKS9zY2FsZSksIGQueSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnBhdGhzXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lng7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lnk7IH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYm91bmRhcmllcyBvZiB0aGUgc2ltdWxhdGlvblxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBXaWxsIGJlIGNhbGxlZCBkdXJpbmcgRDMgZm9yY2Ugc2ltdWxhdGlvbnNcbiAgICAgICAgICAgICAqIGJ5IHRoZSBncmFwaCwgc28gXCJ0aGlzXCIgd2lsbCBwb2ludCB0byB0aGUgZ3JhcGggb2JqZWN0XG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqIEByZXR1cm4gICAgIHtPYmplY3R9ICAgICAgICAgIFJldHVybnMgYW4gb2JqZWN0XG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGhhcyB0aGUgd2lkdGhcbiAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBoZWlnaHQgYXMgXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkM0ZvcmNlQm91bmRzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzID0gdGhpc0dyYXBoLmNvbnN0cyxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RzUG9saWN5ID0gY29uc3RzLlNwbGl0Sm9pblZpZXdQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlUG9saWN5ID0gc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzR3JhcGgubm9kZXM7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsY01heE5vZGVzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWEgPSB3aWR0aCAqIGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IHRoaXNHcmFwaC5jb25zdHMuc3RhcnRSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIC8vdHJlYXRpbmcgdGhlbSBhcyBhIHNxdWFyZSBmb3IgYXBwcm94XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSAocmFkaXVzICozLjUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gYXJlYSAvKGxlbmd0aCAqbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9UaGUgb2Zmc2V0IGlzIHRoZSBidWZmZXIgZnJvbSB0aGUgZWRnZXNcbiAgICAgICAgICAgICAgICAvL09yaWdpbmFsIFdpZHRoIGFuZCBIZWlnaHQgYXJlIGdpdmVuIHRvIHRoZSBmb3JjZSBsYXlvdXRcbiAgICAgICAgICAgICAgICAvL3NvIHRoYXQgaXQgaXMgY2VudGVyZWQsIGJ1dCBub2RlcyB3aWxsIGJlIGZvcmNlZCB0byBiZVxuICAgICAgICAgICAgICAgIC8vd2l0aGluIHRoZSBvZmZzZXQgYm91bmRzXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbnN0cy5kaXNwbGF5T2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9IHBhcnNlRmxvYXQodGhpc0dyYXBoLnN2Zy5zdHlsZShcIndpZHRoXCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gcGFyc2VGbG9hdCh0aGlzR3JhcGguc3ZnLnN0eWxlKFwiaGVpZ2h0XCIpKTtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN2Z1dpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzdmdIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gY2FsY01heE5vZGVzKHdpZHRoIC0gKDIqb2Zmc2V0KSwgaGVpZ2h0IC0gKDIqb2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gMTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID4gYW1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gYW1vdW50IC8gbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHRoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLCBzY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoIC89IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgLz0gc2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLnpvb21lZCh0aGlzR3JhcGguZHJhZ1N2Zy50cmFuc2xhdGUoKSwgc2NhbGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vY2FsY3VsYXRpbmcgZm9jaSBmb3Igc2ltdWxhdGlvblxuICAgICAgICAgICAgICAgIHZhciBmb2N1c0dyb3VwcyA9IHN0YXRlUG9saWN5LmZvY3VzR3JvdXBzO1xuICAgICAgICAgICAgICAgIHZhciBmb2NpO1xuICAgICAgICAgICAgICAgIGlmIChmb2N1c0dyb3Vwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jaSA9IFtoZWlnaHQvMl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zZXR0aW5nIGZvY2kgaGVpZ2h0IHBvc2l0aW9uIGJhc2VkIG9uIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvY3VzTm9kZXMgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbZm9jdXNHcm91cHNbMF1dO1xuICAgICAgICAgICAgICAgICAgICBjb25zdHNQb2xpY3kuYm91bmRhcnkgPSBmb2N1c05vZGVzLmxlbmd0aCAvIG5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IGhlaWdodCAqIGNvbnN0c1BvbGljeS5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdCA9IGhlaWdodCAtIHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcCA8IDIqdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9ICgyLjUgKiB0aGlzR3JhcGguY29uc3RzLm1heFJhZGl1cykgLyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBoZWlnaHQgKiBjb25zdHNQb2xpY3kuYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3QgPSBoZWlnaHQgLSB0b3A7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm90IDwgMiogdGhpc0dyYXBoLmNvbnN0cy5tYXhSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0c1BvbGljeS5ib3VuZGFyeSA9IDEgLSAoKDIuNSAqIHRoaXNHcmFwaC5jb25zdHMubWF4UmFkaXVzKSAvIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBoZWlnaHQgKiBjb25zdHNQb2xpY3kuYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3QgPSBoZWlnaHQgLSB0b3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9jaSA9IFt0b3AvMiwgdG9wICsgYm90IC8gMl07XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGVQb2xpY3kuZm9jaSA9IGZvY2k7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt3aWR0aDp3aWR0aCwgaGVpZ2h0OmhlaWdodH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIGFmdGVyIGEgc2luZ2xlIG5vZGUgaXMgc3BsaXRcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge0FycmF5fSAgbmV3Tm9kZXMgIFRoZSBuZXcgbm9kZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3BsaXROb2RlRXZlbnQobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1BvbGljeSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChuZXdOb2RlcywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmNsdWRlcyhjaGlsZHJlbl9zdHJ1Y3Rbc3RhdGUuZm9jdXNHcm91cHNbMF1dLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImZvY3VzXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kudHlwZSA9IFwiY29ubmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IG5ld05vZGVzWzBdLnBhcmVudDtcbiAgICAgICAgICAgICAgICAvLyBzdGF0ZS5mb2N1c0dyb3VwID0gdGl0bGU7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHRoZSBsYXN0IGV2ZW50IGhhcyB0aGUgc2FtZSBpZCwgaXQgbXVzdCBiZSB0aGVcbiAgICAgICAgICAgICAgICAvL29wcHBvc2l0ZSBvZiB0aGlzIGV2ZW50LCBzbyB3ZSByZW1vdmUgdGhhdCBldmVudCBmcm9tXG4gICAgICAgICAgICAgICAgLy90aGUgZXZlbnQgc3RhY2suXG4gICAgICAgICAgICAgICAgLy9PdGhlcndpc2UsIHdlIGFkZCB0aGUgZXZlbnQgb3QgdGhlIHN0YWNrXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeVtzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoIC0gMV0uaWQgPT09IHRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucHVzaCh7aWQ6dGl0bGUsIGV2ZW50OidzcGxpdCd9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYmFja0J1dHRvbkVsZW0gIT0gbnVsbCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmJhY2tCdXR0b25FbGVtLmZhZGVUbygnc2xvdycsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUudGl0bGVFbGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBzdGF0ZS5mb2N1c0dyb3Vwc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZm9jdXNHcm91cHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9ICcgJiAnICsgc3RhdGUuZm9jdXNHcm91cHNbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudGl0bGVFbGVtLnRleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9yZS1lbmFibGUgZ3JhcGggdXBkYXRlXG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLnN0YXRlLmRpc2FibGVVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnNldExheW91dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIGxheW91dCBvZiB0aGUgbm9kZXMuIFxuICAgICAgICAgICAgICogSWYgdGhlcmUgaXMgYSBwcmV2aW91cyBsYXlvdXQsIGl0IHdpbGwgYmUgbG9hZGVkLlxuICAgICAgICAgICAgICogRWxzZSwgaXQgd2lsbCBydW4gYSBEMyBGb3JjZSBzaW11bGF0aW9uIGFuZCBjcmVhdGUgb25lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXRMYXlvdXQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNQb2xpY3kgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXNHcmFwaC5zdGF0ZS5TcGxpdEpvaW5WaWV3UG9saWN5O1xuICAgICAgICAgICAgICAgIHZhciBsYXlvdXQ7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQgPSBzdGF0ZS5sYXlvdXREZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IHN0YXRlLnpvb21EZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6b29tID0gc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguem9vbWVkKHpvb21bMF0sIHpvb21bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxheW91dCA9IHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxheW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzR3JhcGgubm9kZXMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBsYXlvdXRbbi5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsYXlvdXQsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbi54ID0gcG9zLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLnkgPSBwb3MueTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaC5jYWxsKHRoaXNHcmFwaCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnVwZGF0ZUdyYXBoQ2FsbGJhY2suY2FsbCh0aGlzUG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9OZWVkIHRvIHJ1biBhIGZvcmNlIHNpbXVsYXRpb24gYXMgdGhpcyBsYXlvdXRcbiAgICAgICAgICAgICAgICAgICAgLy9oYXNuJ3QgYmVlbiBkb25lIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3RhdGUuaW5pdEZvcmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXNQb2xpY3kuc2V0UG9zaXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNHcmFwaC51cGRhdGVHcmFwaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQb2xpY3kudXBkYXRlR3JhcGhDYWxsYmFjay5jYWxsKHRoaXNQb2xpY3kpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuem9vbXNbc3RhdGUuZm9jdXNHcm91cHNdID0gW3RoaXNHcmFwaC5kcmFnU3ZnLnRyYW5zbGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguZHJhZ1N2Zy5zY2FsZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLm5vZGVzLCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRbbi5pZF0gPSB7eDpuLngsIHk6bi55fTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxheW91dFtzdGF0ZS5mb2N1c0dyb3Vwc10gPSBsYXlvdXQ7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPdmVycmlkaW5nIGZyb20gc3VwZXIgY2xhc3Mgc28gdGhhdCB3ZSBjYW4gaGF2ZVxuICAgICAgICAgICAgICogdG9wIGxldmVsIG5vZGVzIHJlYXBwZWFyIHdoZW4gdGhleSBhcmUgaGlkZGVuXG4gICAgICAgICAgICAgKiBkdWUgdG8gdGhlcmUgYmVpbmcgdHdvIGZvY3VzIGdyb3Vwcy5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogQHBhcmFtICAgICAge05vZGV9ICAgICAgICAgIG5vZGUgICAgVGhlIG5vZGUgdG8gam9pblxuICAgICAgICAgICAgICogQHJldHVybiAgICAge05vZGV9ICBUaGUgbmV3IG5vZGUgYWZ0ZXIgdGhlIGpvaW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX19qb2luTm9kZShub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXNHcmFwaCA9IHRoaXMuZ3JhcGgsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlU3VwZXIgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luTm9kZVBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhhdCBub2RlIHN0aWxsIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuX3N0cnVjdCA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmNoaWxkcmVuX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG5vZGUuaWQ7XG4gICAgICAgICAgICAgICAgLy9pZiBpdCBoYXMgbm8gYW5jZXN0b3IsIG5vdGhpbmcgdG8gam9pblxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHRvX2JlX2RlbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWVTZXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG5vZGUgd29uJ3QgYmUgY29sbGFwc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzR3JhcGgubm9kZXNbaV0uYW5jZXN0b3JzLmluZGV4T2Yobm9kZS5wYXJlbnQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVNldC5wdXNoKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b19iZV9kZWxldGVkLnB1c2godGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV3X25vZGVfaWQgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICBub2RlTmFtZVNldC5wdXNoKG5vZGUucGFyZW50KTtcblxuICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnNfc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuYW5jZXN0b3JzX3N0cnVjdDtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuICAgICAgICAgICAgICAgIC8vIC0gc2V0dGluZyBmb2N1c0dyb3VwcyAtXG4gICAgICAgICAgICAgICAgLy9laXRoZXIgcmVwbGFjaW5nIG9uZSBvZiB0aGUgZ3JvdXBzLFxuICAgICAgICAgICAgICAgIC8vb3Igam9pbmluZyBiYWNrIGludG8gYSB0b3AgbGV2ZWwsIHNvIHRoZXJlIGlzIG9ubHlcbiAgICAgICAgICAgICAgICAvL29uZSBmb2N1c1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmZvY3VzR3JvdXBzLmluZGV4T2YocGFyZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3JzX3N0cnVjdFtwYXJlbnRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZm9jdXNHcm91cHNbaW5kZXhdID0gYW5jZXN0b3JzX3N0cnVjdFtwYXJlbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmZvY3VzR3JvdXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9uYW1lVG9BZGQgYXJlIHRvcCBsZXZlbCBub2RlcyB0aGF0IGFyZSB0byBiZSBhZGRlZFxuICAgICAgICAgICAgICAgIC8vdG8gdGhlIGdyYXBoLlxuICAgICAgICAgICAgICAgIHZhciBuYW1lVG9BZGQgPSBbXTtcbiAgICAgICAgICAgICAgICAvL3dpbGwgb25seSBuZWVkIHRvIGFkZCBhIHRvcCBsZXZlbCBub2RlIGlmIHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgLy9vbmx5IG9uZSBmb2N1c1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgb25seSB0aG9zdCB0aGF0IGFyZW4ndCBhbiBhbmNlc3RvciBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgICAgICAgICAvL3RvIGpvaW4sIHRoZSBmb2N1cyBncm91cCBvciBhbiBhbmNlc3RvciBvZiBpdCxcbiAgICAgICAgICAgICAgICAgICAgLy9hbmQgYXJlbid0IGFscmVhZHkgaW4gbm9kZU5hbWVTZXQuXG4gICAgICAgICAgICAgICAgICAgIC8vZ2V0IGZsb3cgYmV0d2VlbiB0b3AgbGV2ZWwgYXMgbG9uZyBhc1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSB0b3AgbGV2ZWwgaXNuJ3QgYW4gYW5jZXN0b3Igb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vZm9jdXMgZ3JvdXAsIGFuZCBpc24ndCBhbHJlYWR5IHBhcnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vbm9kZSBzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBhbmNlc3RvcnNfc3RydWN0W25vZGUuaWRdO1xuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMucHVzaChzdGF0ZS5mb2N1c0dyb3Vwc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG9yIGVtcHR5IGFycmF5IGlzIHRvIHByZXZlbnQgY29uY2F0ZW5hdGluZyBhIG51bGxcbiAgICAgICAgICAgICAgICAgICAgLy9vciB1bmRlZmluZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzID0gYW5jZXN0b3JzLmNvbmNhdChhbmNlc3RvcnNfc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChjaGlsZHJlbl9zdHJ1Y3QudG9wTGV2ZWwsIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNlc3RvcnMuaW5kZXhPZihuKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZU5hbWVTZXQuaW5kZXhPZihuKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZU5hbWVTZXQgPSBub2RlTmFtZVNldC5jb25jYXQobmFtZVRvQWRkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvL25vIGZvY3VzIGdyb3VwcyBtZWFucyB3ZSBhcmUgYXQgdG9wIGxldmVsXG4gICAgICAgICAgICAgICAgICAgIC8vU2hvdWxkIGFkZCBhbnkgdG9wIGxldmVsIG5vZGVzIHRoYXQgYXJlbid0XG4gICAgICAgICAgICAgICAgICAgIC8vYWxyZWFkeSB0aGVyZVxuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goY2hpbGRyZW5fc3RydWN0LnRvcExldmVsLCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWVTZXQuaW5kZXhPZihuKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZU5hbWVTZXQgPSBub2RlTmFtZVNldC5jb25jYXQobmFtZVRvQWRkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0YVxuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBub2RlLnJhZGl1cyAvIHRoaXNHcmFwaC5jb25zdHMucmFkaXVzRGVjYXk7IFxuICAgICAgICAgICAgICAgIHZhciB4TG9jID0gbm9kZS54O1xuICAgICAgICAgICAgICAgIHZhciB5TG9jID0gbm9kZS55O1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLmFuY2VzdG9yc1sxXTtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gbm9kZS5hbmNlc3RvcnMuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgVmlzdWFsaXplck5vZGUuTm9kZSh4TG9jLCB5TG9jLCBuZXdfbm9kZV9pZCwgbmV3X25vZGVfaWQsIHJhZGl1cywgcGFyZW50LCBhbmNlc3RvcnMpO1xuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5ub2Rlcy5wdXNoKG5ld05vZGUpO1xuXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgYWxsIG5vZGVzIHRoYXQgd2lsbCBiZSBqb2luZWRcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvX2JlX2RlbGV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVfdG9fZGVsZXRlID0gdG9fYmVfZGVsZXRlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzLnNwbGljZSh0aGlzR3JhcGgubm9kZXMuaW5kZXhPZihub2RlX3RvX2RlbGV0ZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKG5vZGVfdG9fZGVsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmV0RGF0YSA9IHRoaXNHcmFwaC5kYXRhU291cmNlLmdldEZsb3dCZXR3ZWVuU2V0KG5vZGVOYW1lU2V0KTtcbiAgICAgICAgICAgICAgICAvL2hvbGRzIHRoZSBub2RlRGF0YSB3aGljaCB3aWxsIGJlIHByb2Nlc3NlZFxuICAgICAgICAgICAgICAgIHZhciBub2Rlc1RvUHJvY2VzcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vZmluZGluZyB0aGUgbm9kZSBkYXRhIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHRvcCBsZXZlbFxuICAgICAgICAgICAgICAgIC8vbm9kZXMgdG8gYWRkIC0gbmFtZVRvQWRkLlxuICAgICAgICAgICAgICAgIHZhciBub2RlRGF0YSA9IHJldERhdGEubm9kZURhdGE7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmluZGV4T2Yobm9kZURhdGFbaV0uaWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUb1Byb2Nlc3MucHVzaChub2RlRGF0YVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL1RoZSB0b3AgbGV2ZWwgbm9kZXMgdGhhdCBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICB2YXIgbmV3Tm9kZXMgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTm9kZURhdGEobm9kZXNUb1Byb2Nlc3MpO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChuZXdOb2RlcywgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICBuLnJhZGl1cyA9IG4ucmFkaXVzIHx8IHRoaXNHcmFwaC5jb25zdHMuc3RhcnRSYWRpdXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpc0dyYXBoLm5vZGVzID0gdGhpc0dyYXBoLm5vZGVzLmNvbmNhdChuZXdOb2Rlcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzR3JhcGgubGlua3MgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5wcm9jZXNzTGlua0RhdGEocmV0RGF0YS5saW5rRGF0YSwgdGhpc0dyYXBoLm5vZGVzKTtcbiAgICAgICAgICAgICAgICAvL09ubHkga2VlcCB0b3AgbGV2ZWwgbm9kZXMgdGhhdCBoYXZlIGNvbm5lY3Rpb25zIHRvXG4gICAgICAgICAgICAgICAgLy90aGUgY3VycmVudCBmb2N1cyBncm91cFxuICAgICAgICAgICAgICAgIC8vd2UgcmVtb3ZlIHRoZSBub2RlIG5hbWUgZnJvbSBuYW1lVG9BZGQgaWYgd2UgYXJlXG4gICAgICAgICAgICAgICAgLy9rZWVwaW5nIGl0XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godGhpc0dyYXBoLmxpbmtzLCBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNraW5nIGlmIHRoZXJlIGV4aXN0cyBhIGxpbmsgdG91Y2hpbmcgZWFjaCBvZiBuYW1lVG9BZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lVG9BZGQuaW5kZXhPZihsLnNvdXJjZS5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzWzBdID09PSBsLnRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZihsLnNvdXJjZS5pZCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZVRvQWRkLmluZGV4T2YobC50YXJnZXQuaWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5mb2N1c0dyb3Vwc1swXSA9PT0gbC5zb3VyY2UucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb0FkZC5zcGxpY2UobmFtZVRvQWRkLmluZGV4T2YobC50YXJnZXQuaWQpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9XZSB3YW50IHRvIGtlZXAgdGhlbSBhbGxcbiAgICAgICAgICAgICAgICAgICAgLy9zaW5jZSBhbnkgbGVmdCBpbiBuYW1lVG9BZGQgd2lsbCBiZSByZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAvL3dlIHJlc2V0IG5hbWVUb0FkZCBoZXJlLlxuICAgICAgICAgICAgICAgICAgICBuYW1lVG9BZGQgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy93aGF0ZXZlciBpcyByZW1haW5pbmcgaW4gbmFtZVRvQWRkIGlzbid0IGNvbm5lY3RlZFxuICAgICAgICAgICAgICAgIC8vdG8gdGhlIGZvY3VzIGdyb3VwLCBzbyB3ZSBzaG91bGQgcmVtb3ZlIGl0LlxuICAgICAgICAgICAgICAgIHZhciBub2RlVG9SZW1vdmUgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXNHcmFwaC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVUb0FkZC5pbmRleE9mKHRoaXNHcmFwaC5ub2Rlc1tpXS5pZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvQWRkLnNwbGljZShuYW1lVG9BZGQuaW5kZXhPZih0aGlzR3JhcGgubm9kZXNbaV0uaWQpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGguc3BsaWNlTGlua3NGb3JOb2RlKHRoaXNHcmFwaC5ub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVtb3ZlLnB1c2godGhpc0dyYXBoLm5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVRvQWRkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG5vZGVUb1JlbW92ZSwgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzR3JhcGgubm9kZXMuc3BsaWNlKHRoaXNHcmFwaC5ub2Rlcy5pbmRleE9mKG4pLCAxKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXNHcmFwaC5pbml0Tm9kZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzR3JhcGguaW5pdExpbmtzKCk7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZVN1cGVyLnNwbGl0Tm9kZXMuc3BsaWNlKHN0YXRlU3VwZXIuc3BsaXROb2Rlcy5pbmRleE9mKG5ld05vZGUuaWQpLCAxKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdOb2RlOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaW5nbGUgbm9kZSBpcyBqb2luZWRcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogSWYgdGhlIGZvY3VzIGdyb3VwIGhhcyBiZWVuIHNlZW4gYmVmb3JlLCBpdCB3aWxsXG4gICAgICAgICAgICAgKiBsb2FkIHRoYXQgbGF5b3V0LiBPdGhlcndpc2UsIGl0IHdpbGwgcnVuIGEgZDMgZm9yY2VcbiAgICAgICAgICAgICAqIHNpbXVsYXRpb24gdG8gZ2VuZXJhdGUgb25lLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAgICAgIHtOb2RlfSAgbmV3Tm9kZSAgVGhlIG5ldyBub2RlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGpvaW5Ob2RlRXZlbnQobmV3Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzR3JhcGggPSB0aGlzLmdyYXBoLFxuICAgICAgICAgICAgICAgICAgICB0aGlzUG9saWN5ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzR3JhcGguc3RhdGUuU3BsaXRKb2luVmlld1BvbGljeTtcblxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGxhc3QgZXZlbnQgaGFzIHRoZSBzYW1lIGlkLCBpdCBtdXN0IGJlIHRoZVxuICAgICAgICAgICAgICAgIC8vb3BwcG9zaXRlIG9mIHRoaXMgZXZlbnQsIHNvIHdlIHJlbW92ZSB0aGF0IGV2ZW50IGZyb21cbiAgICAgICAgICAgICAgICAvL3RoZSBldmVudCBzdGFjay5cbiAgICAgICAgICAgICAgICAvL090aGVyd2lzZSwgd2UgYWRkIHRoZSBldmVudCB0byB0aGUgc3RhY2tcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3Rvcnlbc3RhdGUuZXZlbnRIaXN0b3J5Lmxlbmd0aCAtIDFdLmlkID09PSBuZXdOb2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudEhpc3RvcnkucHVzaCh7aWQ6bmV3Tm9kZS5pZCwgZXZlbnQ6J2pvaW4nfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5fc3RydWN0ID0gdGhpc0dyYXBoLmRhdGFTb3VyY2UuY2hpbGRyZW5fc3RydWN0O1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHRoaXNHcmFwaC5ub2RlcywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICBkLlNwbGl0Sm9pblZpZXdQb2xpY3kgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY2hpbGRyZW5fc3RydWN0W3N0YXRlLmZvY3VzR3JvdXBzWzBdXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuU3BsaXRKb2luVmlld1BvbGljeS50eXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5TcGxpdEpvaW5WaWV3UG9saWN5LnR5cGUgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL3NldHRpbmcgYmFjayBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYmFja0J1dHRvbkVsZW0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50SGlzdG9yeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYmFja0J1dHRvbkVsZW0uZmFkZVRvKCdzbG93JywgMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9zZXR0aW5nIHRpdGxlXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnRpdGxlRWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gc3RhdGUuZm9jdXNHcm91cHNbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmZvY3VzR3JvdXBzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSAnICYgJyArIHN0YXRlLmZvY3VzR3JvdXBzWzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnRpdGxlRWxlbS50ZXh0KHRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzUG9saWN5LnNldExheW91dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVuZG9lcyB0aGUgbGFzdCBzcGxpdCBvciBqb2luIGV2ZW50LlxuICAgICAgICAgICAgICogTWVhbnQgdG8gYmUgY2FsbGVkIGJ5IHRoZSBiYWNrIGJ1dHRvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdW5kb0xhc3RFdmVudCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0dyYXBoID0gdGhpcy5ncmFwaCxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpc0dyYXBoLnN0YXRlLlNwbGl0Sm9pblZpZXdQb2xpY3k7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHN0YXRlLmV2ZW50SGlzdG9yeVtzdGF0ZS5ldmVudEhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbGFzdC5pZDtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdC5ldmVudCA9PT0gJ2pvaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzR3JhcGguZmluZE5vZGVCeUlkKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQzbm9kZSA9IHRoaXNHcmFwaC5maW5kRDNOb2RlKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1BvbGljeS5kYmxjbGljayhkM25vZGUsIG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlSWQgPSB0aGlzR3JhcGguZGF0YVNvdXJjZS5jaGlsZHJlbl9zdHJ1Y3RbaWRdWzBdO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gdGhpc0dyYXBoLmZpbmROb2RlQnlJZChub2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5qb2luTm9kZS5jYWxsKHRoaXNQb2xpY3ksIG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQb2xpY3k6IFNwbGl0Sm9pblZpZXdQb2xpY3lcbiAgICAgICAgfVxufV0pO1xuXG5cblxuXG5cblxuXG4iXX0=
