"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}(),_createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(e){var t=function(){function t(o,n,i){_classCallCheck(this,t);var r=this;r.nodes=n||[],r.links=i||[],r.defaultNodePolicies=[],r.defaultPathPolicies=[],r.svgPolicy=new e.Policy,r.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},r.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},o.on("mouseover",function(e){r.svgPolicy.mouseover.call(this,e)}).on("dblclick",function(e){r.svgPolicy.dblclick.call(this,e)}).on("contextmenu",function(e){r.svgPolicy.contextmenu.call(this,e)}).on("mouseout",function(e){r.svgPolicy.mouseout.call(this,e)}).on("mousedown",function(e){r.svgPolicy.mousedown.call(this,e)}).on("mouseup",function(e){r.svgPolicy.mouseup.call(this,e)});var a=o.append("svg:defs");a.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),a.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),r.svg=o,r.svgG=o.append("g").classed(r.consts.graphClass,!0);var l=r.svgG;r.paths=l.append("g").selectAll("g"),r.circles=l.append("g").selectAll("g"),r.initNodes(),r.initLinks(),r.setPositions();var s=function(){r.onWindowResize(o)};r.bindings={resize:s},$(window).resize(s)}return _createClass(t,[{key:"destroy",value:function(){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy()}),_(e.defaultPathPolicies).forEach(function(e){e.destroy()}),e.svgPolicy.destroy();for(var t in e.bindings)$(window).off(t,e.bindings[t])}},{key:"initNodes",value:function(){var e=this;_.forEach(e.nodes,function(t){t.initialize(e)})}},{key:"initLinks",value:function(){var e=this;_.forEach(e.links,function(t){t.initialize(e)})}},{key:"findNodeById",value:function(e){for(var t=this,o=0;o<t.nodes.length;o++)if(e===t.nodes[o].id)return t.nodes[o]}},{key:"findD3Node",value:function(e){var t,o=this;return o.circles.each(function(o){o.id===e&&(t=d3.select(this))}),t}},{key:"installDragPolicy",value:function(e){this.drag=e}},{key:"installSvgPolicy",value:function(e){this.svgPolicy=e}},{key:"installDefaultNodePolicy",value:function(e){var t=this;t.defaultNodePolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultNodePolicy",value:function(e){var t;t="string"==typeof e?e:e.policyName,_(thisGraph.defaultNodePolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),thisGraph.defaultNodePolicies.splice(o,1))})}},{key:"getNodePolicy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t,o){return t.policyName===e?t:void 0})}},{key:"installDefaultPathPolicy",value:function(e){var t=this;t.defaultPathPolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.defaultPathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.defaultPathPolicies.splice(n,1))})}},{key:"pathPolicyEvent",value:function(e,t,o){var n=this;_(n.defaultPathPolicies).forEach(function(n){n[e](t,o)})}},{key:"nodePolicyEvent",value:function(e,t,o){var n=this;_.forEach(n.defaultNodePolicies,function(n){n[e](t,o)})}},{key:"installZoomPolicy",value:function(e){this.dragSvg=e,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(e){}},{key:"insertTitleLinebreaks",value:function(e,t){for(var o=this,n=t.split(/\s+/g),i=n.length,r=e.append("text").attr("class",o.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(i-1)),a=0;a<n.length;a++){var l=r.append("tspan").text(n[a]);a>0&&l.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(e){var t=this,o=t.links.filter(function(t){return t.source===e||t.target===e});o.map(function(e){t.links.splice(t.links.indexOf(e),1)})}},{key:"addNode",value:function(e){var t=this;t.nodes.push(e),e.initialize(t),t.updateGraph()}},{key:"removeNode",value:function(e){var t=this;t.nodes.splice(t.nodes.indexOf(e),1),t.spliceLinksForNode(e),t.updateGraph()}},{key:"addLink",value:function(e){var t=this;t.links.push(e),e.initialize(t),t.updateGraph()}},{key:"removeLink",value:function(e){var t=this;t.links.splice(t.links.indexOf(e),1),e.initialize(t),t.updateGraph()}},{key:"updateExistingPaths",value:function(e){e.each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewPaths",value:function(e){var t=this;t.initLinks(),e.each(function(e){e.newPathAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.pathPolicyEvent("mouseover",d3.select(this),e):t.pathPolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.pathPolicyEvent("dblclick",d3.select(this),e):t.pathPolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.pathPolicyEvent("contextmenu",d3.select(this),e):t.pathPolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.pathPolicyEvent("mouseout",d3.select(this),e):t.pathPolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.pathPolicyEvent("mousedown",d3.select(this),e):t.pathPolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.pathPolicyEvent("mouseup",d3.select(this),e):t.pathPolicyEvent("mouseup",d3.select(this),e)}).call(t.drag)}},{key:"updateExistingNodes",value:function(){var e=this;e.circles=this.circles.data(e.nodes,function(e){return e.id}).each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewNodes",value:function(e){var t=this;e.each(function(e){null==e.graph&&e.initialize(t),e.newNodeAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.nodePolicyEvent("mouseover",d3.select(this),e):t.nodePolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.nodePolicyEvent("dblclick",d3.select(this),e):t.nodePolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.nodePolicyEvent("contextmenu",d3.select(this),e):t.nodePolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.nodePolicyEvent("mouseout",d3.select(this),e):t.nodePolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.nodePolicyEvent("mousedown",d3.select(this),e):t.nodePolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.nodePolicyEvent("mouseup",d3.select(this),e):t.nodePolicyEvent("mouseup",d3.select(this),e)}).call(t.drag),e.append("circle").attr("r",function(e){return String(e.radius)}),e.each(function(e){t.insertTitleLinebreaks(d3.select(this),e.text)})}},{key:"d3ForceCollide",value:function(e){var t=this,o=t.consts,n=t.nodes,i=d3.geom.quadtree(n);return function(t){var n=t.radius+o.maxRadius+o.padding,r=t.x-n,a=t.x+n,l=t.y-n,s=t.y+n;i.visit(function(n,i,c,u,d){if(n.point&&n.point!==t){var p=t.x-n.point.x,f=t.y-n.point.y,v=Math.sqrt(p*p+f*f),h=t.radius+n.point.radius+o.padding;h>v&&(v=(v-h)/v*e,t.x-=p*=v,t.y-=f*=v,n.point.x+=p,n.point.y+=f)}return i>a||r>u||c>s||l>d})}}},{key:"d3ForceTick",value:function(e,t,o){for(var n=this,i=n.consts,r=i.displayOffset,a=n.nodes,l=d3.geom.quadtree(n.nodes),s=0,c=a.length;++s<c;)l.visit(this.d3ForceCollide(a[s]));n.circles.each(this.d3ForceCollide(.5)).attr("cx",function(e){return e.x=Math.max(e.radius+r,Math.min(t-r-e.radius,e.x))}).attr("cy",function(e){return e.y=Math.max(e.radius+r,Math.min(o-r-e.radius,e.y))}),n.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceStart",value:function(){var e=this;e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this;e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){var e=$("#visualization-graph").width(),t=$("#visualization-graph").height(),o=e,n=t;return{width:o,height:n}}},{key:"setForce",value:function(e){var t=this,o=t.nodes,n=t.links;if(!_.isEmpty(o)){var i=t.d3ForceBounds(),r=d3.layout.force().size([i.width,i.height]).nodes(o).charge(function(e){return-6e3}).links(n);r.linkDistance(i.width/3),r.linkStrength(.2),r.gravity(.2),r.on("tick",function(e){t.d3ForceTick.call(t,e,i.width,i.height)}),r.on("start",function(){t.d3ForceStart.call(t)}),r.on("end",function(){t.d3ForceEnd.call(t)}),r.start();for(var a=0;r.alpha()>.01&&150>a;)r.tick(),a+=1;r.stop(),null!=e&&e()}}},{key:"setPositions",value:function(){for(var e=this,t=e.consts.displayOffset,o=$("#visualization-graph").width(),n=$("#visualization-graph").height(),i=o-2*t,r=n-2*t,a=e.nodes,l=0;l<a.length;l++)a[l].radius=a[l].radius||e.consts.startRadius,null!=a[l].x&&null!=a[l].y||(a[l].x=i/2+a[l].radius+t,a[l].y=r/2+a[l].radius+t)}},{key:"updateGraph",value:function(e){var t=this,o=t.consts,n=t.state;if(!t.state.disableUpdate){this.updateExistingNodes();var i=t.circles.enter().append("g");i.classed(o.circleGClass,!0),t.circles.exit().remove(),0==n.initForce?(t.setForce(function(){t.updateNewNodes.call(t,i)}),n.initForce=!0):this.updateNewNodes(i),t.paths=t.paths.data(t.links,function(e){return String(e.source.id)+"+"+String(e.target.id)});var r=t.paths;this.updateExistingPaths(r);var a=r.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(a),r.exit().remove(),null!=e&&e()}}}]),t}();return{Graph:t}}]),angular.module("contiv.utils",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(e){var t=function(e){function t(e,o,n,i){_classCallCheck(this,t);var r=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o,n)),a=r;a.state.transition=[],a.consts.edge_buffer=200,a.consts.radiusDecay=1,a.consts.containerClass="container",a.dataSource=i;var l=d3.behavior.drag().origin(function(e){return{x:e.x,y:e.y}}).on("dragstart",function(){}).on("drag",function(e){d3.select(this).attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),a.updateGraph()}).on("dragend",function(){});a.drag=l;var s=d3.behavior.zoom().on("zoom",function(){return null!=d3.event.sourceEvent&&d3.event.sourceEvent.ctrlKey?!1:(a.zoomed.call(a),!0)}).on("zoomstart",function(e,t){});return a.dragSvg=s,a.svg.call(s).on("dblclick.zoom",null),r}return _inherits(t,e),_createClass(t,[{key:"zoomed",value:function(e,t){var o=this;if(1!=o.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=e&&null!=t){var n=o.dragSvg;n.scale(t),n.translate(e);var i=function(){n.scale(t),n.translate(e)},r="zoom"+e;return void d3.select("."+this.consts.graphClass).transition(r).delay(100).duration(750).attr("transform","translate("+n.translate()+") scale("+n.scale()+")").each("end",i)}o.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+o.dragSvg.translate()+") scale("+o.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(e){var t=document.getElementsByTagName("body")[0],o=$("#visualization-graph").offset(),n=$("#visualization-graph").width(),i=t.clientHeight;e.attr("width",n).attr("height",i-o.top-20)}},{key:"updateLinkData",value:function(){for(var e=this,t=[],o=0;o<e.nodes.length;o++)t.push(e.nodes[o].id);var n=e.dataSource.getFlowBetweenSet(t),i=n.linkData;e.links=e.dataSource.processLinkData(i,e.nodes),this.initNodes(),this.initLinks(),e.updateGraph()}}]),t}(e.Graph);return{Graph:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(e,t){var o=function(){function o(e,t){_classCallCheck(this,o),this.nodes=e,this.links=t}return _createClass(o,[{key:"updateNodes",value:function(e){this.nodes=e}},{key:"updateLinks",value:function(e){this.links=e}},{key:"nodeIdToName",value:function(e){for(var t=this.nodes,o=0;o<t.length;o++)if(t[o].id==e)return t[o].name}},{key:"processNodeData",value:function(t){var o=[];return _.forEach(t,function(t){var n=new e.Node(null,null,t.id,t.text,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,o){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r=0;r<e.length;r++)if(e[r].source!=e[r].target){var a=n(e[r].source,o),l=n(e[r].target,o);if(null==a||null==l)continue;var s=new t.Link(a,l);i.push(s)}return i}}]),o}();return{DataSource:o}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(e,t,o){var n=function(e){function n(e,t,o,i,r,a){_classCallCheck(this,n);var l=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t));return l.children_struct=o,l.ancestors_struct=i,l.labels=r,l.selectors=a,l}return _inherits(n,e),_createClass(n,[{key:"hasChild",value:function(e){return null!=this.children_struct[e]}},{key:"setAncestors",value:function(){var e=this,t=!1;_.forEach(e.nodes,function(o){o.ancestors=e.ancestors_struct[o.id]||[],_.isEmpty(o.ancestors)===!1?o.parent=o.ancestors[0]:0==_.includes(e.children_struct.topLevel,o.id)&&(o.ancestors.push("client"),e.ancestors_struct[o.id]=["client"],t===!1&&(t=!0,e.children_struct.topLevel.push("client"),e.children_struct.client=[]),e.children_struct.client.push(o.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(e){for(var t=this.nodes,o={},n=0;n<t.length;n++){var i=t[n];if(null===i.ancestors)o[i.id]=i.name;else for(var r=0;r<e.length;r++)if(i.ancestors.indexOf(e[r])>-1){o[i.id]=e[r];break}}for(var a=this.links,l=[],n=0;n<a.length;n++){var s=[];s.source=o[a[n].source]||a[n].source,s.target=o[a[n].target]||a[n].target,s.weight=a[n].weight,l.push(s)}for(var c=[],n=0;n<e.length;n++){var u=[];u.id=e[n],u.text=this.nodeIdToName(e[n])||e[n],u.ancestors=this.ancestors_struct[e[n]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:l}}},{key:"processNodeData",value:function(e){var o=[];return _.forEach(e,function(e){var n=new t.Node(null,null,e.id,e.text,null,e.parent,e.ancestors,null,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,t){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r={},a=0;a<e.length;a++)if(e[a].source!=e[a].target){var l=n(e[a].source,t),s=n(e[a].target,t),c=e[a].weight;if(null==l||null==s)continue;if(void 0===r[l.id+"-"+s.id]){var u=new o.Link(l,s,c);r[l.id+"-"+s.id]=u,i.push(u)}else{var d=r[l.id+"-"+s.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return i}}]),n}(e.DataSource);return{DataSource:n}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Link",[function(){var e=function(){function e(t,o){_classCallCheck(this,e),this.source=t,this.target=o,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(e,t){e.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var e=this,t=e.target.x-e.source.x,o=e.target.y-e.source.y,n=Math.sqrt(t*t+o*o);return"M"+e.source.x+","+e.source.y+"A"+n+","+n+" 0 0,1 "+e.target.x+","+e.target.y}},{key:"installPathPolicy",value:function(e){this.hasPolicy=!0,this.pathPolicies.push(e),e.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.pathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.pathPolicies.splice(n,1))}),0===o.pathPolicies.length&&(o.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(e,t,o){_(o.pathPolicies).forEach(function(n){n[e](t,o)})}}]),e}();return{Link:e}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function e(t,o,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,o);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,o,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(e){var t=function(e){function t(e,o,n){_classCallCheck(this,t);var i=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o));return i.weight=n,i.count=1,i}return _inherits(t,e),_createClass(t,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var e,t=this,o=(t.target.x-t.source.x)/2,n=(t.target.y-t.source.y)/2;return e=t.source.x<t.target.x?{my:"top center",at:"center center",target:[o,n],adjust:{y:10}}:{my:"bottom center",at:"center center",target:[o,n],adjust:{y:-10}}}},{key:"initialize",value:function(e){if(0==this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.VisualizerLink;null==o&&(o=e.state.VisualizerLink={},o.maxWeight=null,o.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(e){this.graph.state.VisualizerLink.useAvgWeight=!!e}},{key:"setWeight",value:function(e){this.weight=e}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink;if(t.useAvgWeight){var o=this.weight/this.count;return o}return this.weight}},{key:"updateMaxWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink,o=_.maxBy(e.links,function(e){return null!=e.graph?e.getWeight():0});t.maxWeight=o.getWeight()}},{key:"updateAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);n.colorScale=i,e.style("marker-end","url(#end-arrow)").classed(o.consts.selectedClass,function(e){return e===n.selectedEdge}).attr("d",this.arrowPath.call(t)).transition("existingPathTransition").duration(750).attr("stroke",function(e){var t=i(e.getWeight());return t})}},{key:"newPathAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);e.transition("newPathTransition").duration(750).attrTween("opacity",function(e){return d3.interpolateString(0,1)}).attr("stroke",function(e){var t=i(e.getWeight());return t}).attr("d",this.arrowPath.call(t))}}]),t}(e.Link);return{Link:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Node",[function(){var e=function(){function e(t,o,n,i,r){_classCallCheck(this,e),this.x=t,this.y=o,this.radius=r,this.id=n,this.text=i,this.radius=r,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.attr("transform",function(e){return"translate("+e.x+","+e.y+")"})}},{key:"newNodeAttr",value:function(e,t){}},{key:"setRadius",value:function(e){this.radius=e}},{key:"installNodePolicy",value:function(e){this.hasPolicy=!0,this.nodePolicies.push(e),e.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.nodePolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.nodePolicies.splice(n,1))}),0===o.nodePolicies.length&&(o.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(e,t,o){_.forEach(this.nodePolicies,function(n){n[e](t,o)})}}]),e}();return{Node:e}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(e){var t=function(e){function t(e,o,n,i,r,a,l,s,c){_classCallCheck(this,t);var u=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o,n,i,r));return u.parent=a,u.ancestors=l,null==s?u.xStart=e:u.xStart=s,null==c?u.yStart=o:u.yStart=c,u}return _inherits(t,e),_createClass(t,[{key:"newNodeAttr",value:function(e,t){var o=this.graph;null!=o.consts.containerClass&&null==o.dataSource.children_struct[t.id]&&e.classed(o.consts.containerClass,!0),e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){if(null!=e.xStart&&null!=e.yStart){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")}return d3.interpolateString("translate("+e.x+","+e.y+")","translate("+e.x+","+e.y+")")})}}]),t}(e.Node);return{Node:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function t(e,o,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,o);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:t(r,o,n)}if("value"in i)return i.value;
var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"NodeSelectionPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.NodeSelectionPolicy={};o.selectedNodes=[];var n=e.consts.NodeSelectionPolicy={};n.selectedClass="selected";var i=e.drag;i.on("drag",function(t){var o=e;if(null!=o.consts.NodeSelectionPolicy){var n=o.consts.NodeSelectionPolicy.selectedClass,i=d3.selectAll("."+n);-1==i[0].indexOf(this)&&(i.classed(n,!1),i=d3.select(this),i.classed(n,!0)),i.attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),o.updateGraph()}})}}},{key:"addSelectNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;e.classed(i.selectedClass,!0),n.selectedNodes.push(t)}},{key:"removeSelectFromNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;o.circles.filter(function(e){return e.id===t.id}).classed(i.selectedClass,!1);var r=n.selectedNodes.indexOf(t);n.selectedNodes.splice(r,1)}},{key:"removeAllSelectedNodes",value:function(){var e=this.graph,t=e.state.NodeSelectionPolicy,o=e.consts.NodeSelectionPolicy;e.circles.classed(o.selectedClass,!1),t.selectedNodes=[]}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?n.selectedNodes.indexOf(t)>-1?this.removeSelectFromNode(e,t):this.addSelectNode(e,t):-1==n.selectedNodes.indexOf(t)&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.ctrlKey||n.selectedNodes.length<=1&&this.removeSelectFromNode(e,t)}}]),t}(e.Policy);return{Policy:t}}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"PathChangeViewPolicy"));return o.$state=e,o}return _inherits(t,e),_createClass(t,[{key:"generateList",value:function(e){var t=this,o=[],n=function i(e,o){for(var n=t.graph.dataSource.children_struct[e],r=0;r<n.length;r++){var a=n[r];if(t.graph.dataSource.hasChild(a)===!0){var l=i(a,o);o.concat(l)}else o.push(a)}};return n(e,o),o}},{key:"viewEdge",value:function(e){var t=[],o=[],n=e.source.id,i=e.target.id;t=this.graph.dataSource.hasChild(n)===!0?this.generateList(n):[n],o=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],this.$state.go("contiv.menu.visualization.edge",{sourceName:n,targetName:i,sourceList:t,targetList:o})}},{key:"mousedown",value:function(e,t){this.viewEdge(t)}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Policy",[function(){var e=function(){function e(t){_classCallCheck(this,e),this.policyName=t,this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){this.initialized||(this.initialized=!0,this.graph=e)}},{key:"mouseover",value:function(e,t){}},{key:"dblclick",value:function(e,t){}},{key:"contextmenu",value:function(e,t){}},{key:"mouseout",value:function(e,t){}},{key:"mousedown",value:function(e,t){}},{key:"mouseup",value:function(e,t){}},{key:"destroy",value:function(){}}]),e}();return{Policy:e}}]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(e,t,o,n,i,r,a){return{Policy:e.Policy,QTipPolicy:t.Policy,PathChangeViewPolicy:o.Policy,NodeSelectionPolicy:n.Policy,SplitJoinNodePolicy:i.Policy,SplitJoinViewPolicy:r.Policy,SaveStatePolicy:a.Policy}}]),angular.module("contiv.menu",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function o(e,t,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:o(r,t,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"QTipPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=this,n=e.state.QTipPolicy={};n.mousedown=!1,e.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(e){n.mouseup=!1});var i=e.updateNewNodes;e.updateNewNodes=function(t){i.call(e,t),o.updateNewNodes(t)};var r=e.updateNewPaths;e.updateNewPaths=function(t){r.call(e,t),o.updateNewPaths(t)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!0}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!1}},{key:"whenQTipAvailable",value:function(e){var t=this,o=500;window.setTimeout(function(){null!=$(document).qtip?e():window.setTimeout(t.whenQTipAvailable(e),o)},o)}},{key:"updateNewNodes",value:function(e){function t(){e.each(function(e){var t,i=this;if(null!=o.dataSource.children_struct[e.id]){t="<b><u>Selectors:</b></u> ";var r=o.dataSource.selectors[e.id],a=!1;for(var l in r)a=!0,t+=l+" : <i>"+r[l]+"</i>,\n ";a===!1&&(t="No Selectors, ")}else{t="<b><u>Labels:</b></u> ";var s=o.dataSource.labels[e.id],a=!1;for(var l in s)a=!0,t+=l+" : <i>"+s[l]+"</i>,\n ";a===!1&&(t="No labels, ")}t=t.slice(0,-2),$(i).qtip({content:{title:e.id,text:t},events:{show:function(){var t=$(i).qtip("api"),r=$("#graphContainer").offset(),a=[r.left+(e.x*o.dragSvg.scale()+o.dragSvg.translate()[0]),r.top+(e.y+e.radius)*o.dragSvg.scale()+o.dragSvg.translate()[1]];return t.set("position.target",a),!n.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var o=this.graph,n=o.state.QTipPolicy;void 0!=$(document).qtip?t():this.whenQTipAvailable(t)}},{key:"updateNewPaths",value:function(e){var t=this.graph,o=t.state.QTipPolicy;void 0!=$(document).qtip&&e.each(function(e){var t=this,n=d3.select(this).node(),i=(n.getPointAtLength(n.getTotalLength()/2),e.qtipHelper()),r="Bytes: "+e.getWeight();$(t).qtip({content:{text:r},events:{show:function(){return!o.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:i.my,at:"center center",target:"mouse",adjust:i.adjust},hide:{event:"mousedown mouseleave"}})})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"SaveStatePolicy"));return o.savedState=e,o}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){this.graph=e;var t=this;e.destroy=function(){t.graphDestroy.call(e,t.savedState)},e.load=function(o){t.graphLoad.call(e,o)}}},{key:"graphDestroy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy(e)}),_(t.defaultPathPolicies).forEach(function(t){t.destroy(e)});for(var o in t.bindings)$(window).off(o,t.bindings[o])}},{key:"graphLoad",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){null!=t.load&&t.load(e)}),_(t.defaultPathPolicies).forEach(function(t){null!=t.load&&t.load(e)})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function n(e,t,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:n(r,t,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return e.policyName="SplitJoinNodePolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinNodePolicy={};t.splitNodes=[]}}},{key:"dblclick",value:function(e,t){var o=this.graph,n=o.state.SplitJoinNodePolicy;d3.event.ctrlKey||(n.selectedNodes.indexOf(t)>-1?this.splitMultipleNodes(n.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(t)))}},{key:"contextmenu",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var i=n.selectedNodes;if(i.indexOf(t)>-1)for(var r=0;r<i.length;r++)this.joinNode(i[r]);else this.removeAllSelectedNodes(),this.joinNode(t)}}},{key:"__splitNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=e.id,r=o.dataSource.children_struct;if(void 0!==r[i]&&!_.isEmpty(r[i])){o.nodes=_.filter(o.nodes,function(t){return t!=e}),o.spliceLinksForNode(e);for(var a=[],l=0;l<o.nodes.length;l++)a.push(o.nodes[l].id);for(var s=[],l=0;l<r[i].length;l++)a.push(r[i][l]),s.push(r[i][l]);var c=o.dataSource.getFlowBetweenSet(a),u=e.x,d=e.y,p=e.ancestors.slice();p.splice(0,0,e.id);for(var f=e.id,v=[],h=e.radius*o.consts.radiusDecay,g=c.nodeData,l=0;l<g.length;l++)if(s.indexOf(g[l].id)>-1){var m=g[l].id,y=g[l].text,P=new t.Node(null,null,m,y,h,f,p,u,d);P.initialize(o),o.nodes.push(P),v.push(P)}return o.links=o.dataSource.processLinkData(c.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.push(e.id),v}}},{key:"splitNode",value:function(e){var t=this.__splitNode(e);null!=t&&this.splitNodeEvent(t)}},{key:"splitMultipleNodes",value:function(e){for(var t=(this.graph,[]),o=0;o<e.length;o++){var n=this.__splitNode(e[o]);t=t.concat(n)}this.splitMultipleNodesEvent(n)}},{key:"splitNodeEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy;if(-1!=o.nodes.indexOf(e)){var i=o.dataSource.children_struct,r=e.id;if(!(i.topLevel.indexOf(r)>-1)){for(var a=[],l=[],s=0;s<o.nodes.length;s++)-1==o.nodes[s].ancestors.indexOf(e.parent)?l.push(o.nodes[s].id):a.push(o.nodes[s]);var c=e.parent;l.push(e.parent);var u=e.radius/o.consts.radiusDecay,d=e.x,p=e.y,f=e.ancestors[1],v=e.ancestors.slice(1),h=new t.Node(d,p,c,c,u,f,v);o.nodes.push(h);for(var g=o.dataSource.getFlowBetweenSet(l),s=0;s<a.length;s++){var m=a[s];o.nodes.splice(o.nodes.indexOf(m),1),o.spliceLinksForNode(m)}return o.links=o.dataSource.processLinkData(g.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(h.id),1),h}}}},{key:"joinNode",value:function(e){var t=this.__joinNode(e);null!=t&&this.joinNodeEvent(t)}},{key:"joinMultipleNode",value:function(e){for(var t=[],o=0;o<e.length;o++){var n=this.__joinNode(e[o]);t.push(n)}this.joinMultipleNodesEvent(t)}},{key:"joinNodeEvent",value:function(e){var t=this.graph;t.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(e){var t=this.graph;t.updateGraph()}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function i(e,t,o){null===e&&(e=Function.prototype);var n=Object.getOwnPropertyDescriptor(e,t);if(void 0===n){var r=Object.getPrototypeOf(e);return null===r?void 0:i(r,t,o)}if("value"in n)return n.value;var a=n.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return e.policyName="SplitJoinViewPolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinViewPolicy={};t.savedStates=[],t.eventHistory=[],t.focusGroups=[],t.foci=[],t.zooms={},t.layout={},t.layoutDefault=null,t.zoomDefault=null,t.nodeIdsToReshow=null,t.backButtonElem=null,t.titleElem=null;var n=e.consts.SplitJoinViewPolicy={};n.boundary=.8,e.d3ForceBounds=this.d3ForceBounds,e.d3ForceTick=this.d3ForceTick,e.d3ForceStart=this.d3ForceStart,e.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;n.backButtonElem=e,n.backButton=function(){n.eventHistory.length>0&&o.undoLastEvent.call(o)}}},{key:"installTitle",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy;o.titleElem=e}},{key:"destroy",value:function(e){null!=e&&this.save(e)}},{key:"save",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy,n=t.nodes,i=t.links,r=null;null!=o.titleElem&&(r=o.titleElem.text());var a=o.focusGroups,l=o.eventHistory,s=o.zooms,c=o.layout,u=o.layoutDefault,d=o.zoomDefault,p={nodes:n,links:i,states:o.savedStates,currTitle:r,focusGroups:a,eventHistory:l,zooms:s,layout:c,layoutDefault:u,zoomDefault:d};e.SplitJoinViewPolicy=p}},{key:"load",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;e=e.SplitJoinViewPolicy,n.savedStates=e.states,o.links=e.links,o.nodes=e.nodes;var i=e.currTitle;null!=n.titleElem&&n.titleElem.text(i),n.eventHistory=e.eventHistory,n.focusGroups=e.focusGroups,n.zooms=e.zooms,n.layout=e.layout,n.layoutDefault=e.layoutDefault,n.zoomDefault=e.zoomDefault,null!=n.backButtonElem&&n.eventHistory.length>0&&n.backButtonElem.fadeTo("slow",1);var r=o.dataSource.children_struct;_.forEach(o.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(r[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var a;if(0===n.focusGroups.length){a=n.layoutDefault;var l=n.zoomDefault;o.zoomed(l[0],l[1])}else{var l=n.zooms[n.focusGroups];null!=l&&o.zoomed(l[0],l[1]),a=n.layout[n.focusGroups]}_.forEach(o.nodes,function(e){var t=a[e.id];null==t&&console.log(a,e),e.x=t.x,e.y=t.y}),o.state.initForce=!0,o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)})}},{key:"dblclick",value:function(e,t){var n=this.graph,i=n.state.SplitJoinViewPolicy,r=t.id,a=n.dataSource.children_struct;if(void 0!==a[r]&&!_.isEmpty(a[r])){if(i.focusGroups.slice(),0===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[0]],t.id)?i.focusGroups[0]=t.id:1===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[1]],t.id)&&(i.focusGroups[1]=t.id),2===i.focusGroups.length&&i.focusGroups[1]===t.id){var l=[t],s=[],c=a[i.focusGroups[0]];_.forEach(n.nodes,function(e){_.includes(c,e.id)&&(s.push(e.id),l.push(e))})}else{var l=[t],s=[];_.forEach(n.links,function(e){e.source===t&&-1==s.indexOf(e.target.id)?(e.target.SplitJoinViewPolicy={},e.target.SplitJoinViewPolicy.type="connected",s.push(e.target.id),l.push(e.target)):e.target===t&&-1==s.indexOf(e.source.id)&&(e.source.SplitJoinViewPolicy={},e.source.SplitJoinViewPolicy.type="connected",s.push(e.source.id),l.push(e.source))})}n.circles.each(function(e){e.id!==t.id&&n.spliceLinksForNode(e)}),n.updateGraph(),n.state.disableUpdate=!0,n.circles.each(function(e){e.id!==t.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=n.dragSvg.translate(),d=n.dragSvg.scale(),p=parseFloat(n.svg.style("width"))/d/2+u[0],f=parseFloat(n.svg.style("height"))/d/2+u[1];t.xStart=t.x,t.yStart=t.y,t.x=p,t.y=f,e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")});var v=_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"splitNode",this);i.nodeIdsToReshow=s;var h=this;setTimeout(function(){n.nodes=l,v.call(h,t)},750)}}},{key:"updateGraphCallback",value:function(){var e=this.graph,t=e.state.SplitJoinViewPolicy;e.circles.each(function(e){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=e.SplitJoinViewPolicy&&("focus"===e.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===e.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),t.nodeIdsToReshow=null,e.updateGraph()}},{key:"setPositions",value:function(){function e(e,t){return Math.floor(Math.random()*(t-e+1))+e}var t=this.graph,o=this,n=t.consts,i=n.displayOffset,r=t.nodes,a=o.d3ForceBounds.call(t);_.forEach(r,function(t){if(null==t.x||null==t.y){var o=e(t.radius+i,a.width-t.radius-i),n=e(t.radius+i,a.height-t.radius-i);t.x=o,t.y=n}})}},{key:"d3ForceStart",value:function(){var e=this;e.circles.attr("cx",function(t){return null!=t.xStart&&(t.xStart=t.xStart*e.dragSvg.scale()+e.dragSvg.translate()[0]),t.x}).attr("cy",function(t){return null!=t.yStart&&(t.yStart=t.yStart*e.dragSvg.scale()+e.dragSvg.translate()[1]),t.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this,t=e.state,o=t.SplitJoinViewPolicy;if(null==o.layoutDefault){var n={};_.forEach(e.nodes,function(e){n[e.id]={x:e.x,y:e.y}}),o.layoutDefault=n;var i=e.dragSvg.scale(),r=e.dragSvg.translate();o.zoomDefault=[r,i]}e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceTick",value:function(e,t,o){function n(e){return function(n){2===u.length?("focus"===n.SplitJoinViewPolicy.type?n.y+=(u[0]-n.y)*e:n.y+=(u[1]-n.y)*e,n.x+=(t/2-n.x)*e):(n.y+=(o/2-n.y)*e,n.x+=(t/2-n.x)*e)}}var i=this,r=i.state,a=i.consts,l=r.SplitJoinViewPolicy,s=a.displayOffset,c=i.dragSvg.scale(),u=l.foci;i.circles.each(this.d3ForceCollide(.5)).each(n(.2*e.alpha)).attr("cx",function(e){return e.x=Math.max((e.radius+s)/c,Math.min(t+(-s-e.radius)/c,e.x))}).attr("cy",function(e){return null==e.SplitJoinViewPolicy||null==e.SplitJoinViewPolicy?(e.y=Math.max((e.radius+s)/c,Math.min(o+(-s-e.radius)/c,e.y)),e.y):"focus"===e.SplitJoinViewPolicy.type?(e.y=Math.max(e.radius+s,Math.min((o+(-s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,e.y)),e.y):"connected"===e.SplitJoinViewPolicy.type?(e.y=Math.max((o+(s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,Math.min(o+(-s-e.radius)/c,e.y)),e.y):void 0}),i.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){function e(e,o){var n=e*o,i=t.consts.startRadius,r=3.5*i,a=n/(r*r);return a}var t=this,o=t.state,n=t.consts,i=n.SplitJoinViewPolicy,r=o.SplitJoinViewPolicy,a=t.nodes,l=n.displayOffset,s=parseFloat(t.svg.style("width")),c=parseFloat(t.svg.style("height")),u=s,d=c,p=e(u-2*l,d-2*l),f=1;a.length>p?(f=p/a.length,t.zoomed(t.dragSvg.translate(),f),u/=f,d/=f):t.zoomed(t.dragSvg.translate(),f);var v,h=r.focusGroups;if(0===h.length)v=[d/2];else{var g=t.dataSource.children_struct[h[0]];i.boundary=g.length/a.length;var m=d*i.boundary,y=d-m;m<2*t.consts.maxRadius&&(i.boundary=2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),y<2*t.consts.maxRadius&&(i.boundary=1-2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),v=[m/2,m+y/2]}return r.foci=v,{width:u,height:d}}},{key:"splitNodeEvent",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy,i=o.dataSource.children_struct;_.forEach(e,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var r=e[0].parent;if(0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===r?n.eventHistory.pop():n.eventHistory.push({id:r,event:"split"}),null!=n.backButtonElem&&0!==n.eventHistory.length&&n.backButtonElem.fadeTo("slow",1),null!=n.titleElem){var a="";n.focusGroups.length>0&&(a+=n.focusGroups[0]),2===n.focusGroups.length&&(a+=" & "+n.focusGroups[1]),n.titleElem.text(a)}o.state.disableUpdate=!1,t.setLayout()}},{key:"setLayout",value:function(){var e,t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;if(0===n.focusGroups.length){e=n.layoutDefault;var i=n.zoomDefault;o.zoomed(i[0],i[1])}else{var i=n.zooms[n.focusGroups];null!=i&&o.zoomed(i[0],i[1]),e=n.layout[n.focusGroups]}if(null!=e)_.forEach(o.nodes,function(t){var o=e[t.id];null==o&&console.log(e,t),t.x=o.x,t.y=o.y}),o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)});else{o.state.initForce=!1,o.updateGraph(function(){t.updateGraphCallback.call(t)}),n.zooms[n.focusGroups]=[o.dragSvg.translate(),o.dragSvg.scale()];var e={};_.forEach(o.nodes,function(t){e[t.id]={x:t.x,y:t.y}}),n.layout[n.focusGroups]=e}}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=o.state.SplitJoinViewPolicy;if(-1!=o.nodes.indexOf(e)){var r=o.dataSource.children_struct,a=e.id;if(!(r.topLevel.indexOf(a)>-1)){for(var l=e.parent,s=[],c=[],u=0;u<o.nodes.length;u++)-1==o.nodes[u].ancestors.indexOf(e.parent)?c.push(o.nodes[u].id):s.push(o.nodes[u]);var d=e.parent;c.push(e.parent);var p=o.dataSource.ancestors_struct,r=o.dataSource.children_struct,f=i.focusGroups.indexOf(l);null!=p[l]?i.focusGroups[f]=p[l]:i.focusGroups.splice(f,1);var v=[];if(1===i.focusGroups.length){var h=p[e.id];h.push(i.focusGroups[0]),h=h.concat(p[i.focusGroups[0]]||[]),_.forEach(r.topLevel,function(e){-1===h.indexOf(e)&&-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v)}else 0===i.focusGroups.length&&(_.forEach(r.topLevel,function(e){-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v));var g=e.radius/o.consts.radiusDecay,m=e.x,y=e.y,l=e.ancestors[1],h=e.ancestors.slice(1),P=new t.Node(m,y,d,d,g,l,h);o.nodes.push(P);for(var u=0;u<s.length;u++){var w=s[u];o.nodes.splice(o.nodes.indexOf(w),1),o.spliceLinksForNode(w)}for(var S=o.dataSource.getFlowBetweenSet(c),b=[],E=S.nodeData,u=0;u<E.length;u++)-1!==v.indexOf(E[u].id)&&b.push(E[u]);var N=o.dataSource.processNodeData(b);_.forEach(N,function(e){e.radius=e.radius||o.consts.startRadius}),o.nodes=o.nodes.concat(N),o.links=o.dataSource.processLinkData(S.linkData,o.nodes),1===i.focusGroups.length?_.forEach(o.links,function(e){-1!==v.indexOf(e.source.id)?i.focusGroups[0]===e.target.parent&&v.splice(v.indexOf(e.source.id),1):-1!==v.indexOf(e.target.id)&&i.focusGroups[0]===e.source.parent&&v.splice(v.indexOf(e.target.id),1)}):v=[];var k=[];if(0!==v.length)for(var u=0;u<o.nodes.length&&(-1===v.indexOf(o.nodes[u].id)||(v.splice(v.indexOf(o.nodes[u].id),1),o.spliceLinksForNode(o.nodes[u]),k.push(o.nodes[u]),0!==v.length));u++);return _.forEach(k,function(e){o.nodes.splice(o.nodes.indexOf(e),1)}),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(P.id),1),P}}}},{key:"joinNodeEvent",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===e.id?n.eventHistory.pop():n.eventHistory.push({id:e.id,event:"join"});var i=t.dataSource.children_struct;if(_.forEach(t.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"}),null!=n.backButtonElem&&0===n.eventHistory.length&&n.backButtonElem.fadeTo("slow",0),null!=n.titleElem){var r="";n.focusGroups.length>0&&(r+=n.focusGroups[0]),2===n.focusGroups.length&&(r+=" & "+n.focusGroups[1]),n.titleElem.text(r)}o.setLayout()}},{key:"undoLastEvent",value:function(){var e,t=this.graph,n=this,i=t.state.SplitJoinViewPolicy,r=i.eventHistory[i.eventHistory.length-1],a=r.id;if("join"===r.event){e=t.findNodeById(a);var l=t.findD3Node(a);n.dblclick(l,e)}else{var s=t.dataSource.children_struct[a][0];e=t.findNodeById(s),_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"joinNode",this).call(n,e)}}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(e){e.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","$stateParams","ApplicationGroupsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.applicationgroups.list")}function a(){r()}function l(){n.get().then(function(e){u.networks=_.filter(e,{tenantName:"default"})})}function s(){u.form.$valid&&(i.hideServerError(u),i.startLoader(u),u.applicationGroup.networkName=u.selectedNetwork.networkName,u.applicationGroup.key=o.generateKey(u.applicationGroup),o.create(u.applicationGroup).then(function(e){i.stopLoader(u),r()},function(e){i.stopLoader(u),i.showServerError(u,e)}))}function c(){i.stopLoader(u),i.hideServerError(u),u.applicationGroup={groupName:"",networkName:"",policies:[],netProfile:"",tenantName:"default"}}var u=this;u.networks=[],u.applicationGroup={},u.selectedNetwork={},u.mode="edit",l(),u.createApplicationGroup=s,u.cancelCreating=a,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.applicationgroups.edit")?u.mode="edit":u.mode="details"}function r(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:u.applicationGroup.key})}function l(){a()}function s(){n.hideServerError(u),n.startLoader(u),o["delete"](u.applicationGroup).then(function(e){
n.stopLoader(u),r()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function c(){n.hideServerError(u),n.startLoader(u),o.save(u.applicationGroup).then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)})}var u=this;u.applicationGroup={},u.selectedNetwork={},n.stopLoader(u),n.hideServerError(u),o.getModelByKey(t.key).then(function(e){u.applicationGroup=e}),u.saveApplicationGroup=c,u.cancelEditing=l,u.deleteApplicationGroup=s,i()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.groups=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.applicationgroups").directive("ctvBandwidthpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","NetprofilesModel",function(e,t){function o(){t.get().then(function(t){e.netProfiles=_.filter(t,{tenantName:"default"}),""!==e.applicationgroup.netProfile&&(e.selectedNetprofile.policy=_.find(e.netProfiles,function(t){return t.profileName===e.applicationgroup.netProfile}))})}e.netProfiles=[],e.selectedNetprofile={policy:{}},e.updateApplicationgroup=function(){null===e.selectedNetprofile.policy?e.applicationgroup.netProfile="":e.applicationgroup.netProfile=e.selectedNetprofile.policy.profileName},o()}],templateUrl:"applicationgroups/bandwidthpolicy.html"}}),angular.module("contiv.applicationgroups").directive("ctvIsolationpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel",function(e,t,o,n,i){function r(){e.applicationgroup.policies.forEach(function(t){i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)})})}function a(){n.get().then(function(t){e.isolationPolicies=_.filter(t,{tenantName:"default"})})}e.incomingRules=[],e.outgoingRules=[],e.selectedPolicy={policy:{}},e.selectedPolicies=[],e.isolationPolicies=[],e.addIsolationPolicy=function(){var t=e.selectedPolicy.policy.policyName;void 0!==t&&0==_.includes(e.selectedPolicies,t)&&(e.selectedPolicies.push(t),i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)}),e.applicationgroup.policies.push(t))},e.removeIsolationPolicy=function(t){_.remove(e.selectedPolicies,function(e){return e===t}),_.remove(e.applicationgroup.policies,function(e){return e===t}),_.remove(e.incomingRules,function(e){return e.policyName===t}),_.remove(e.outgoingRules,function(e){return e.policyName===t})},("details"==e.mode||"edit"==e.mode&&""!=e.applicationgroup.groupName)&&(void 0===e.applicationgroup.policies&&(e.applicationgroup.policies=[]),r()),a()}],templateUrl:"applicationgroups/isolationpolicy.html"}}),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,a,l){function s(e){o.get(e).then(function(e){c.nodes=e.length}),n.get(e).then(function(e){c.networks=e.length}),i.get(e).then(function(e){c.volumes=e.length}),r.get(e).then(function(e){c.groups=e.length}),a.get(e).then(function(e){c.networkpolicies=e.length}),l.get(e).then(function(e){c.storagepolicies=e.length})}var c=this;c.nodes=0,c.networks=0,c.volumes=0,c.groups=0,c.networkpolicies=0,c.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").directive("ctvBandwidth",function(){return{restrict:"E",scope:{bandwidthPolicy:"=",mode:"@"},link:function(e){if(""!=e.bandwidthPolicy.bandwidth){var t=e.bandwidthPolicy.bandwidth.split(" ");e.bandwidthPolicy.bandwidthNumber=Number(t[0]),e.bandwidthPolicy.bandwidthUnit=t[1]}},templateUrl:"network_policies/bandwidth.html"}}),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",controller:"BandwidthPolicyCreateCtrl as bandwidthPolicyCreateCtrl",templateUrl:"network_policies/bandwidthpolicycreate.html"})}]).controller("BandwidthPolicyCreateCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networkpolicies.list.bandwidth")}function r(){i()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newPolicy.key=o.generateKey(s.newPolicy),s.newPolicy.bandwidth=s.newPolicy.bandwidthNumber+" "+s.newPolicy.bandwidthUnit,o.create(s.newPolicy).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function l(){n.stopLoader(s),n.hideServerError(s),s.newPolicy={profileName:"",tenantName:"default",bandwidth:"",DSCP:""}}var s=this;s.createPolicy=a,s.cancelCreating=r,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).controller("BandwidthPolicyDetailsCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.networkpolicies.bandwidth.edit")?u.mode="edit":u.mode="details"}function r(){n.hideServerError(u),n.startLoader(u),o.deleteUsingKey(u.policy.key,"name").then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function a(){e.go("contiv.menu.networkpolicies.list.bandwidth")}function l(){e.go("contiv.menu.networkpolicies.bandwidth.details",{key:u.policy.key})}function s(){l()}function c(){u.form.$valid&&(n.hideServerError(u),n.startLoader(u),u.policy.bandwidth=u.policy.bandwidthNumber+" "+u.policy.bandwidthUnit,o.save(u.policy).then(function(e){n.stopLoader(u),l()},function(e){n.stopLoader(u),n.showServerError(u,e)}))}var u=this;u.bandwidthProfiles=[],o.getModelByKey(t.key).then(function(e){u.policy=e}),n.stopLoader(u),n.hideServerError(u),i(),u.deletePolicy=r,u.savePolicy=c,u.cancelEditing=s}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.bandwidth",{url:"/bandwidth",controller:"BandwidthPolicyListCtrl as bandwidthPolicyListCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"})}]).controller("BandwidthPolicyListCtrl",["$scope","$interval","$filter","NetprofilesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"profileName")},function(e){i.stopLoader(a)})}var a=this;r(!0);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.list.isolation")}function i(){n()}function r(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newPolicy.key=t.generateKey(l.newPolicy),t.create(l.newPolicy).then(function(e){o.stopLoader(l),n()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function a(){o.stopLoader(l),o.hideServerError(l),l.newPolicy={policyName:"",tenantName:"default"}}var l=this;l.createPolicy=r,l.cancelCreating=i,a()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.networkpolicies.list.isolation")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:L.policy.key})}function c(){s()}function u(){s()}function d(){a.hideServerError(L),a.startLoader(L),o["delete"](L.policy).then(function(e){a.stopLoader(L),l()},function(e){a.stopLoader(L),a.showServerError(L,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?L.mode="edit":L.mode="details"}function f(){L.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIpAddress:"",protocol:"tcp",port:0,direction:"in",tenantName:"default",policyName:L.policy.policyName},L.newIncomingSelectedApplicationGroup="",L.newIncomingSelectedNetwork="",L.disableIncomingNetworkSelection=!1,L.disableIncomingApplicationGroupSelection=!1,L.disableIncomingIPAddressSelection=!1,L.incorrectCIDR=!1,L.validateCIDRFlag=!1}function v(){L.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIpAddress:"",protocol:"tcp",port:0,direction:"out",tenantName:"default",policyName:L.policy.policyName},L.newOutgoingSelectedApplicationGroup="",L.newOutgoingSelectedNetwork="",L.disableOutgoingNetworkSelection=!1,L.disableOutgoingApplicationGroupSelection=!1,L.disableOutgoingIPAddressSelection=!1,L.incorrectCIDR=!1,L.validateCIDRFlag=!1}function h(){i.get().then(function(e){L.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){L.applicationGroups=_.filter(e,{tenantName:"default"})})}function m(){null!=L.newOutgoingSelectedApplicationGroup?(L.newOutgoingRule.toEndpointGroup=L.newOutgoingSelectedApplicationGroup.groupName,L.newOutgoingRule.toNetwork="",L.disableOutgoingNetworkSelection=!0):(L.newOutgoingRule.toEndpointGroup="",L.disableOutgoingNetworkSelection=!1)}function y(){null!=L.newIncomingSelectedApplicationGroup?(L.newIncomingRule.fromEndpointGroup=L.newIncomingSelectedApplicationGroup.groupName,L.newIncomingRule.fromNetwork="",L.disableIncomingNetworkSelection=!0):(L.newIncomingRule.fromEndpointGroup="",L.disableOutgoingApplicationGroupSelection=!1,L.disableIncomingNetworkSelection=!1)}function P(){null!=L.newOutgoingSelectedNetwork?(L.newOutgoingRule.toNetwork=L.newOutgoingSelectedNetwork,L.newOutgoingRule.ToEndpointGroup="",L.disableOutgoingApplicationGroupSelection=!0,L.disableOutgoingIPAddressSelection=!0):(L.newOutgoingRule.toIpAddress="",L.disableOutgoingApplicationGroupSelection=!1,L.disableOutgoingIPAddressSelection=!1)}function w(){null!=L.newIncomingSelectedNetwork?(L.newIncomingRule.fromNetwork=L.newIncomingSelectedNetwork,L.newIncomingRule.fromEndpointGroup="",L.disableIncomingApplicationGroupSelection=!0,L.disableIncomingIPAddressSelection=!0):(L.newIncomingRule.fromNetwork="",L.disableIncomingApplicationGroupSelection=!1,L.disableIncomingIPAddressSelection=!1)}function S(e){e.ruleId=(L.incomingRules.length+L.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function b(){k(L.newIncomingRule.fromIpAddress)&&(a.hideServerError(L),a.startLoader(L),S(L.newIncomingRule),L.newIncomingRule.key=n.generateKey(L.newIncomingRule),n.create(L.newIncomingRule).then(function(e){a.stopLoader(L),L.incomingRules.push(e),f()},function(e){a.stopLoader(L),a.showServerError(L,e)}))}function E(){""==L.newIncomingRule.fromIpAddress?(L.incorrectCIDR=!1,L.disableIncomingNetworkSelection=!1):L.disableIncomingNetworkSelection=!0,L.validateCIDRFlag&&L.incorrectCIDR&&k(L.newIncomingRule.fromIpAddress)}function N(){""==L.newOutgoingRule.toIpAddress?(L.incorrectCIDR=!1,L.disableOutgoingNetworkSelection=!1):L.disableOutgoingNetworkSelection=!0,L.validateCIDRFlag&&L.incorrectCIDR&&k(L.newOutgoingRule.toIpAddress)}function k(e){var t=new RegExp(ContivGlobals.CIDR_REGEX);return""==e?!0:t.test(e)?(L.incorrectCIDR=!1,!0):(L.incorrectCIDR=!0,L.validateCIDRFlag=!0,!1)}function C(){k(L.newOutgoingRule.toIpAddress)&&(a.hideServerError(L),a.startLoader(L),S(L.newOutgoingRule),L.newOutgoingRule.key=n.generateKey(L.newOutgoingRule),n.create(L.newOutgoingRule).then(function(e){a.stopLoader(L),L.outgoingRules.push(e),v()},function(e){a.stopLoader(L),a.showServerError(L,e)}))}function O(e){a.hideServerError(L),a.startLoader(L),n.deleteUsingKey(e).then(function(t){a.stopLoader(L),_.remove(L.incomingRules,function(t){return t.key==e})},function(e){a.stopLoader(L),a.showServerError(L,e)})}function D(e){a.hideServerError(L),a.startLoader(L),n.deleteUsingKey(e).then(function(t){a.stopLoader(L),_.remove(L.outgoingRules,function(t){return t.key==e})},function(e){a.stopLoader(L),a.showServerError(L,e)})}var L=this;L.networks=[],L.applicationGroups=[],L.disableOutgoingNetworkSelection=!1,L.disableIncomingNetworkSelection=!1,L.disableOutgoingApplicationGroupSelection=!1,L.disableIncomingApplicationGroupSelection=!1,L.disableIncomingIPAddressSelection=!1,L.disableOutgoingIPAddressSelection=!1,L.newIncomingSelectedApplicationGroup="",L.newOutgoingSelectedApplicationGroup="",L.newIncomingSelectedNetwork="",L.newOutgoingSelectedNetwork="",L.incorrectCIDR=!1,L.validateCIDRFlag=!1,a.stopLoader(L),a.hideServerError(L),o.getModelByKey(t.key).then(function(e){L.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){L.incomingRules=e,f()}),n.getOutgoingRules(e.policyName,"default").then(function(e){L.outgoingRules=e,v()})}),h(),g(),L.deletePolicy=d,L.deleteIncomingRule=O,L.deleteOutgoingRule=D,L.addIncomingRule=b,L.addOutgoingRule=C,L.doneEditing=u,L.cancelEditing=c,L.onChangeOutgoingApplicationGroupSelection=m,L.onChangeIncomingApplicationGroupSelection=y,L.onChangeOutgoingNetworkSelection=P,L.onChangeIncomingNetworkSelection=w,L.onChangeIncomingIPAddress=E,L.onChangeOutgoingIPAddress=N,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.isolation",{url:"/isolation",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list",{url:"/list","abstract":!0,controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.list.redirection",{url:"/redirection",template:""})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){function t(){e.$current.includes["contiv.menu.networkpolicies.list.isolation"]&&e.go("contiv.menu.networkpolicies.isolation.create"),e.$current.includes["contiv.menu.networkpolicies.list.bandwidth"]&&e.go("contiv.menu.networkpolicies.bandwidth.create")}var o=this;o.createNetworkPolicy=t}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function l(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=a,s.cancelCreating=r,l()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"}).state("contiv.menu.networks.details.info",{url:"/info",templateUrl:"networks/networkinfo.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.networks.list")}function c(){l.hideServerError(d),l.startLoader(d),r["delete"](d.network).then(function(e){l.stopLoader(d),s()},function(e){l.stopLoader(d),l.showServerError(d,e)})}function u(e){a.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;l.stopLoader(d),l.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=c;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]);var NetworksListCtrl=function(){function e(e,t,o,n){function i(e){o.get(e).then(function(e){n.stopLoader(r),r.networks=e},function(e){n.stopLoader(r)})}var r=this;i(!1);var a;angular.isDefined(a)||(a=t(function(){i(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}return e.$inject=["$scope","$interval","NetworksModel","CRUDHelperService"],e}();angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",component:"networkList"})}]).component("networkList",{templateUrl:"networks/networklist.html",controller:NetworksListCtrl,controllerAs:"networksListCtrl"}),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details.stats",{url:"/stats",controller:"NetworkStatsCtrl as networkStatsCtrl",templateUrl:"networks/networkstats.html"})}]).controller("NetworkStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.NETWORKS_INSPECT_ENDPOINT,e).then(function(e){if(s.networkInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.endpoints){var t=a.buildEndPoints(e.Oper.endpoints);a.checkContainerChanged(s.containerDetails,t)&&(s.endpoints=e.Oper.endpoints,s.containerDetails=t)}else s.endpoints=[],s.containerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.nodes").factory("BgpService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.BGPS_ENDPOINT+o.key+"/";return e.get(i).then(function(e){n.resolve(e.data),o.neighbor=e.data,o.neighbors.push({name:o.neighbor.neighbor,value:o.neighbor["neighbor-as"]})},function(e){n.reject(e.data)}),n.promise}function n(t){var o=ContivGlobals.BGPS_ENDPOINT+t.key+"/";return e.post(o,t.neighbor)}function i(o){var n=t.defer(),i=ContivGlobals.BGPS_INSPECT_ENDPOINT+o+"/";return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getBgp:o,updateBgp:n,getBgpInspect:i}}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(){var o=t.defer(),n=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}return{getActiveLogs:o,getLastLogs:n}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getActiveLogs().then(function(e){i.activeLogs=e},function(e){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function a(){r()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.nodeOpsObj.nodes=[t.key],i.cleanupExtraVars(s),i.createExtraVars(s),o.commission(s.nodeOpsObj).then(function(e){n.stopLoader(s),r()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}var s=this;s.nodeOpsObj={},s.extra_vars={},s.ansibleVariables=[],s.envVariables=[],i.getSettings(s),s.cancelCommissioningNode=a,s.commission=l,n.stopLoader(s),n.hideServerError(s)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"}).state("contiv.menu.nodes.details.edit",{url:"/edit",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel","BgpService",function(e,t,o,n,i,r){function a(){var e={nodes:[t.key]};i.decommission(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function s(){switch(h.node.inventory_state.status){case"Unallocated":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Decommissioned":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Provisioning":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Allocated":h.showCommissionButton=!1,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!0;break;case"Cancelled":h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Maintenance":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;default:h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1}}function c(e){i.getModelByKey(t.key,e).then(function(e){h.node=e,s()})}function u(){e.is("contiv.menu.nodes.details.edit")?h.mode="edit":h.mode="details"}function d(){e.go("contiv.menu.nodes.details.info")}function p(){h.form.$valid&&(h.neighbor.key=t.key,h.neighbors.forEach(function(e){h.neighbor.neighbor=e.name,h.neighbor["neighbor-as"]=e.value}),r.updateBgp(h).then(function(e){h.neighbor=e.config.data,d()},function(e){}))}function f(){r.getBgp(h).then(function(e){h.neighbor=e},function(e){})}function v(){r.getBgpInspect(t.key).then(function(e){h.inspect=e,h.routes=e.Oper.routes,h.filteredroutes=e.Oper.routes},function(e){})}var h=this;h.numberpattern=ContivGlobals.NUMBER_REGEX,h.decommission=a,h.upgrade=l,h.setMode=u,h.updateBgpInfo=p,h.returnToInfo=d,h.neighbors=[],h.neighbor={},h.key=t.key,f(),v(),u(),c(!1);var g;angular.isDefined(g)||(g=n(function(){c(!0)},5e3)),o.$on("$destroy",function(){n.cancel(g)})}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.list")}function a(){r()}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),s(),i.createExtraVars(c),o.discover(c.nodeOpsObj).then(function(e){n.stopLoader(c),r()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=l,c.cancelDiscoveringNode=a,n.stopLoader(c),n.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getLastLogs().then(function(e){i.lastLogs=e},function(e){})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.nodes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","OrganizationsModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.organizations.list")}function i(){n()}function r(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newOrganization.key=l.newOrganization.tenantName,t.create(l.newOrganization).then(function(e){o.stopLoader(l),n()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function a(){o.stopLoader(l),o.hideServerError(l),l.newOrganization={tenantName:""}}var l=this;l.createOrganization=r,l.cancelCreating=i,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.organizations.list")}function r(){n.hideServerError(a),n.startLoader(a),o["delete"](a.organization).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)})}var a=this;n.stopLoader(a),n.hideServerError(a),o.getModelByKey(t.key).then(function(e){a.organization=e}),a.deleteOrganization=r}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.organizations=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function a(){r()}function l(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function c(){s(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{
url:"/details/:key",params:{state:null},controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.details.info",{url:"/info",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"}).state("contiv.menu.servicelbs.details.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.details.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function a(){e.go("contiv.menu.servicelbs.details.info",{key:p.servicelb.key,state:"details"})}function l(){a()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function c(){n.hideServerError(p),n.startLoader(p);var e=p.servicelb.selectors;d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),a()},function(t){p.servicelb.selectors=e,u(),n.stopLoader(p),n.showServerError(p,t)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){p.servicelb.selectors=[],angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=c,p.cancelEditing=l,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.servicelbs=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details.stats",{url:"/stats",controller:"ServicelbStatsCtrl as servicelbStatsCtrl",templateUrl:"service_lbs/servicelbstats.html"})}]).controller("ServicelbStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","ServicelbsModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.SERVICELBS_INSPECT_ENDPOINT,e).then(function(e){if(s.servicelbInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.providers){var t=a.buildEndPoints(e.Oper.providers);a.checkContainerChanged(s.providerDetails,t)&&(s.providers=e.Oper.providers,s.providerDetails=t)}else s.providers=[],s.providerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(e,t,o){function n(){i.form.$valid&&(t.hideServerError(i),t.startLoader(i),i.nodeOpsObj.nodes=[e.key],o.cleanupExtraVars(i),o.createExtraVars(i),o.updateSettings(i.nodeOpsObj).then(function(e){t.stopLoader(i)},function(e){t.stopLoader(i),t.showServerError(i,e)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],o.getSettings(i),i.updateClusterSettings=n,t.stopLoader(i),t.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.networks",{url:"/networks",controller:"NetworkSettingCtrl as networkSettingCtrl",templateUrl:"settings/networksettings.html"})}]).controller("NetworkSettingCtrl",["CRUDHelperService","NetworkService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t.data)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;i.vlanPattern=ContivGlobals.VLAN_REGEX,i.vxlanPattern=ContivGlobals.VXLAN_REGEX,n(),i.updateNetworkSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.volumes",{url:"/volumes",controller:"VolumeSettingCtrl as volumeSettingCtrl",templateUrl:"/settings/volumesettings.html"})}]).controller("VolumeSettingCtrl",["CRUDHelperService","VolumeSettingService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;n(),i.updateVolumeSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function a(){c.filesystemcmds.forEach(function(e){c.newStoragePolicy.filesystems[e.name]=e.value})}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),a(),o.create(c.newStoragePolicy).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){n.stopLoader(c),n.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=l,c.cancelCreating=r,c.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.is("contiv.menu.storagepolicies.edit")?m.mode="edit":m.mode="details"}function c(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:m.policy.name})}function d(){u()}function p(){l.hideServerError(m),l.startLoader(m),r.deleteUsingKey(m.policy.name,"name").then(function(e){l.stopLoader(m),c()},function(e){l.stopLoader(m),l.showServerError(m,e)})}function f(e){a.get(e).then(function(e){m.volumes=i("orderBy")(_.filter(e,{policy:m.policy.name}),"name")})}function v(){angular.forEach(m.policy.filesystems,function(e,t){this.push({name:t,value:e})},m.filesystemcmds)}function h(){m.filesystemcmds.forEach(function(e){m.policy.filesystems[e.name]=e.value})}function g(){m.form.$valid&&(l.hideServerError(m),l.startLoader(m),h(),r.save(m.policy).then(function(e){l.stopLoader(m),u()},function(e){l.stopLoader(m),l.showServerError(m,e)}))}var m=this;m.filesystemcmds=[],l.stopLoader(m),l.hideServerError(m),r.getModelByKey(t.key,!1,"name").then(function(e){m.policy=e,v(),f(!1)}),m.deletePolicy=p,m.savePolicy=g,m.cancelEditing=d,s();var y;angular.isDefined(y)||(y=n(function(){f(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(y)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(e,t,o,n,i,r){var a=n.sourceName,l=n.targetName,s=n.sourceList,c=n.targetList;if(null==s||null==c)return void o.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();e.edgeDataInterval=r(function(){i.getEdgeData(s,c,d.toString()).then(function(t){var o=t.results,n=0;_.forEach(o,function(e){_.isEmpty(e)===!1&&(n+=e.series[0].values[0][1])}),e.sourceName=a,e.targetName=l,e.edgeData=n,e.edgeDataTime=d},function(e){})},3e3),e.$on("$destroy",function(){r.cancel(e.edgeDataInterval)}),i.getOldEdgeData(s,c).then(function(t){var o=t.results,n=[];_.forEach(o,function(e){if(_.isEmpty(e)===!1){var t=e.series[0].values;_.isEmpty(n)?_.forEach(t,function(e){n.push(e[1])}):_.forEach(t,function(e,t){n[t]+=e[1]})}}),e.sourceName=a,e.targetName=l,e.sourceList=s,e.targetList=c,e.oldEdgeData=n},function(e){})}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(e){function t(e,t){function o(){s=new Date;for(var t in c){var n=c[t];n.data.push(e.edgeData||0),n.path.attr("d",p)}u.domain([s-(a-2)*l,s-l]),g.transition().duration(l).ease("linear").call(u.axis),v.transition().duration(l).ease("linear").call(d.axis),m.attr("transform",null).transition().duration(l).ease("linear").attr("transform","translate("+u(s-(a-1)*l)+")").each("end",function(){o()});for(var t in c){var n=c[t];n.data.shift()}}var n=document.getElementsByTagName("body")[0],i=n.clientWidth-400,r=n.clientHeight-400,a=59,l=750,s=new Date(Date.now()-l),c={current:{value:0,color:"orange",data:t.range(a).map(function(t){return e.oldEdgeData[Math.floor(t/10)]||0})}},u=t.time.scale().domain([s-(a-2),s-l]).range([0,i]),d=t.scale.linear().domain([0,t.max(c.current.data,function(e){return e+10})]).range([r,0]),p=t.svg.line().interpolate("basis").x(function(e,t){return u(s-(a-1-t)*l)}).y(function(e){return d(e)}),f=t.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),v=f.append("g").attr("class","y axis").call(d.axis=t.svg.axis().scale(d).orient("left")),h=t.select(".graph").append("svg").attr("class","chart").attr("width",i-50).attr("height",r+50),g=h.append("g").attr("class","x axis").attr("transform","translate(0,"+r+")").call(u.axis=t.svg.axis().scale(u).orient("bottom")),m=h.append("g");for(var y in c){var P=c[y];P.path=m.append("path").data([P.data]).attr("class",y+" group").style("stroke",P.color)}o()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(o){o.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=o.edgeData&&null!=o.oldEdgeData&&!o.initialize){o.initialize=!0;var n=e.d3;t(o,n)}})}}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(e,t,o,n,i,r){function a(e,o,n,i,r,a){if(void 0!==e.nodes&&void 0!==e.links&&void 0!==e.children_struct&&void 0!==e.ancestors_struct){var l=new r.DataSource(e.nodes,e.links,e.children_struct,e.ancestors_struct,e.labels,e.serviceSelectors);l.setAncestors();var s,c,u=l.getTopLevelFlow();s=l.processNodeData(u.nodeData),c=l.processLinkData(u.linkData,s);var d=document.getElementsByTagName("body")[0],p=(d.clientWidth,d.clientHeight),f=o.find("svg"),v=$(f.parent()).offset(),h=$(f.parent()).width(),g=d3.select(f[0]).attr("width",h).attr("height",p-v.top-20);e.visualizationGraph=new n.Graph(g,s,c,l,e.children_struct,e.ancestors_struct),e.visualizationGraph.installDefaultPathPolicy(new i.SaveStatePolicy(a.savedStates)),e.visualizationGraph.installDefaultPathPolicy(new i.PathChangeViewPolicy(t));var m=new i.QTipPolicy;e.visualizationGraph.installDefaultNodePolicy(m),e.visualizationGraph.installDefaultPathPolicy(m);var y=new i.SplitJoinViewPolicy;if(e.visualizationGraph.installDefaultNodePolicy(y),y.installBackButton($("#backButton")),y.installTitle($("#graph-title")),0==_.isEmpty(a.savedStates)){var P=e.visualizationGraph;P.load(a.savedStates)}else e.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(e,t){e.$on("$destroy",function(){$("#visualization-graph").unbind(),e.visualizationGraph.destroy()}),e.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=e.nodes&&null!=e.links&&null!=e.children_struct&&null!=e.ancestors_struct&&(e.initialized?(e.visualizationGraph.dataSource.links=e.links,e.visualizationGraph.updateLinkData()):(e.initialized=!0,a(e,t,o,n,i,r)))})}}}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(e,t,o,n){var i=function(t){var o=[],n=[],i=[];_.forEach(t.results[0].series,function(e){var t,r=e.tags.EndpointIP,a=e.tags.ProviderIP;0==_.includes(i,r)&&(t={name:r,id:r,parent:null,ancestors:null},o.push(t),i.push(r)),0==_.includes(i,a)&&(t={name:a,id:a,parent:null,ancestors:null},o.push(t),i.push(a));var l={source:r,target:a,weight:e.values[0][2]};n.push(l);var s={source:a,target:r,weight:e.values[0][1]};n.push(s)}),e.nodes=o,e.links=n};o.getGraphData().then(i,function(e){}),e.$on("$destroy",function(){n.cancel(e.graphDataInterval)}),o.getStructureData().then(function(t){e.ancestors_struct=t.ancestors_struct,e.children_struct=t.children_struct,e.labels=t.labels,e.serviceSelectors=t.serviceSelectors},function(e){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(e,t){function o(o,n){var i=t.defer();return e.get(o,n).then(function(e){i.resolve(e.data)},function(e){i.reject(e.data)}),i.promise}function n(o,n){var i=function(e){var t,o,n,r,a,l,s,c="";for(t in e)if(o=e[t],o instanceof Array)for(s=0;s<o.length;++s)a=o[s],n=t+"["+s+"]",l={},l[n]=a,c+=i(l)+"&";else if(o instanceof Object)for(r in o)a=o[r],n=t+"["+r+"]",l={},l[n]=a,c+=i(l)+"&";else void 0!==o&&null!==o&&(c+=encodeURIComponent(t)+"="+encodeURIComponent(o)+"&");return c.length?c.substr(0,c.length-1):c},r=t.defer();return e({url:o,method:"POST",data:n,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(e){return angular.isObject(e)&&"[object File]"!==String(e)?i(e):e}]}).then(function(e){r.resolve(e.data)},function(e){r.reject(e.data)}),r.promise}function i(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;e+="influx/query";var t={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return o(e,t)}function r(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;return e+="services",o(e)}function a(e,t){var o="(";o+=t+"=",o+="'"+e[0]+"' ";for(var n=1;n<e.length;n++)o+="OR ",o+=t+"=",o+="'"+e[n]+"' ";return o+=")"}function l(e,t,o){var i=ContivGlobals.VISUALIZATION_ENDPOINT;i+="influx/query";var r={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return n(i,r)}function s(e,t){var o=ContivGlobals.VISUALIZATION_ENDPOINT;o+="influx/query";var i={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return n(o,i)}return{getGraphData:i,getStructureData:r,getEdgeData:l,getOldEdgeData:s}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function a(){r()}function l(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.volumes.list")}function c(){l.hideServerError(v),l.startLoader(v),r["delete"](v.volume).then(function(e){l.stopLoader(v),s()})}function u(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,d(),p()})}function d(){a.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function p(){a.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function f(){v.snapshotSuccess=!1,l.hideServerError(v),l.startLoader(v),a.triggerSnapshot(v.volume).then(function(e){l.stopLoader(v),v.snapshotSuccess=!0},function(e){l.stopLoader(v),l.showServerError(v,e)})}var v=this;v.deleteVolume=c,v.triggerVolumeSnapshot=f,u(!1);var h;angular.isDefined(h)||(h=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.volumes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function i(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+"take/"+o.policy+"/"+o.name;return e.post(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n,triggerSnapshot:i}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.copy",{url:"/copy/",params:{snapshot:null,policy:null,volume:null},controller:"VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl",templateUrl:"volumes/volumesnapshotcopy.html"})}]).controller("VolumeSnapshotCopyCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+t.volume})}function s(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+u.newvolume})}function c(){if(u.form.$valid){a.hideServerError(u),a.startLoader(u);var e={};e.policy=t.policy,e.name=t.volume,r.copy(e,t.snapshot,u.newvolume).then(function(e){a.stopLoader(u),s()},function(e){a.stopLoader(u),a.showServerError(u,e)})}}var u=this;u.policy=t.policy,u.volume=t.volume,u.snapshot=t.snapshot,u.copySnapshot=c,u.cancelCopy=l}]),angular.module("contiv.directives").directive("ctvAccordion",function(){return{restrict:"E",transclude:!0,scope:{items:"="},link:function(e,t){"function"==typeof t.find(".ui.accordion").accordion&&t.find(".ui.accordion").accordion()},templateUrl:"components/directives/accordion.html"}}),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@",defaultsortcolumn:"@"},controller:["$scope","$element","$attrs","$filter",function(o,n,i,r){function a(n,i){if(p.searchText=i,(void 0===n||0>n)&&(n=0),p.pageNo=n,void 0!==o.items){var a=e(o.items,p.searchText);a=r("orderBy")(a,p.sortObj.field,p.sortObj.reverse);var l=Math.ceil(a.length/p.size);0==l&&(l=1),p.chunks=[];for(var s=0;l>s;s++)p.chunks.push({selected:!1,pageNo:s});if(n>=p.chunks.length&&(p.pageNo=0),p.chunks[p.pageNo].selected=!0,p.chunks.length>5){var c,u;c=p.pageNo-2,u=p.pageNo+3,0>c&&(u-=c,c=0),u>p.chunks.length&&(c-=u-p.chunks.length,u=p.chunks.length),o.paginationMenu.chunks=p.chunks.slice(c,u)}else o.paginationMenu.chunks=p.chunks;p.filteredItems=t(a,p.size,p.pageNo*p.size),o.filtereditems=p.filteredItems}return!1}function l(){var e;return e=p.pageNo<=0?0:p.pageNo-1,a(e)}function s(){var e;return e=p.pageNo+1,e>p.chunks.length-1&&(e=p.chunks.length-1),a(e)}function c(e){o.paginationMenu=e}function u(e){return{field:e,reverse:!1,iconDirection:{"angle down icon":!0,"angle up icon":!1}}}function d(e){e==p.sortObj.field?(p.sortObj.field=e,p.sortObj.reverse=!p.sortObj.reverse,p.sortObj.iconDirection={"angle down icon":!p.sortObj.reverse,"angle up icon":p.sortObj.reverse}):p.sortObj=u(e),p.showChunk(p.pageNo,p.searchText),o.$apply()}var p=this;p.chunks=[],p.pageNo=0,p.sortObj=u(o.defaultsortcolumn),p.size=parseInt(o.size,10),isNaN(p.size)&&(p.size=12),p.showChunk=a,p.showNextChunk=s,p.showPrevChunk=l,p.addPaginationMenu=c,p.sort=d}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,require:"^^ctvTable",scope:{"class":"@",sortfield:"="},link:function(e,t,o,n){e.tablectrl=n,void 0!=e.sortfield&&null!=e.sortfield&&t.bind("click",function(){n.sort(e.sortfield)})},templateUrl:"components/directives/tableheader.html"}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{colspan:"@"},replace:!0,link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}}),angular.module("contiv.utils").factory("InspectService",function(){function e(e){var t={};for(var o in e){var n=[];for(var i in e[o]){var r={};switch(r.name=i,r.format="none",r.type="string",i){case"ipAddress":r.value=e[o][i].filter(function(e){return e.length>0}).join();break;case"labels":r.value=e[o][i].replace(/(map\[|\])/gi,"").replace(/(:)/gi,"=").split(" ").filter(function(e){return e.length>0}),r.format="label",r.type="array";break;default:r.value=e[o][i]}n.push(r)}t[e[o].containerID]=n}return t}function t(e,t){if(void 0==e)return!0;if(Object.keys(e).length!=Object.keys(t).length)return!0;for(var o in t)if(!(o in e))return!0;return!1}return{buildEndPoints:e,checkContainerChanged:t}}),angular.module("contiv.utils").factory("NetworkService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NETWORK_SETTINGS_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data[0])},function(e){o.reject(e.data)}),o.promise}function n(t){return e.post(ContivGlobals.NETWORK_SETTINGS_ENDPOINT+"global/",t)}return{getSettings:o,updateSettings:n}}]),angular.module("contiv.utils").factory("NodesService",["$http","$q",function(e,t){function o(o){var r=t.defer(),a=ContivGlobals.NODES_SETTINGS_GET_ENDPOINT;return e.get(a).then(function(e){r.resolve(e.data),o.setting=e.data;var t=o.setting.extra_vars,a=t[s.SCHED_PROVIDER],l=t[s.CONTIV_NET_MODE];t[s.CONTROL_INTERFACE]&&(o.extra_vars[s.CONTROL_INTERFACE]=t[s.CONTROL_INTERFACE]),t[s.DATA_INTERFACE]&&(o.extra_vars[s.DATA_INTERFACE]=t[s.DATA_INTERFACE]),t[s.VIP_ADDR]&&(o.extra_vars[s.VIP_ADDR]=t[s.VIP_ADDR]),a&&(o.extra_vars[s.SCHED_PROVIDER]=a,"ucp-swarm"===a&&(o.extra_vars[s.UCP_BOOTSTRAP_NODE]=t[s.UCP_BOOTSTRAP_NODE])),l&&(o.extra_vars[s.CONTIV_NET_MODE]=l,"standalone"===l?o.extra_vars[s.FWD_MODE]=t[s.FWD_MODE]:"aci"===l&&(o.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]=t[s.APIC_CONTR_UNRESTRICT_MODE],o.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN]=t[s.APIC_EPG_BRIDGE_DOMAIN],o.extra_vars[s.APIC_LEAF_NODES]=t[s.APIC_LEAF_NODES],o.extra_vars[s.APIC_PASSWORD]=t[s.APIC_PASSWORD],o.extra_vars[s.APIC_PHYS_DOMAIN]=t[s.APIC_PHYS_DOMAIN],o.extra_vars[s.APIC_URL]=t[s.APIC_URL],o.extra_vars[s.APIC_USERNAME]=t[s.APIC_USERNAME])),t[s.CLUSTER_NAME]&&(o.extra_vars[s.CLUSTER_NAME]=t[s.CLUSTER_NAME]),n(t[s.ENV],o.envVariables),i(t,o.ansibleVariables)},function(e){r.reject(e.data)}),r.promise}function n(e,t){var o;for(o in e)t.push({name:o,value:e[o]})}function i(e,t){var o,n=[s.APIC_CONTR_UNRESTRICT_MODE,s.APIC_EPG_BRIDGE_DOMAIN,s.APIC_LEAF_NODES,s.APIC_PASSWORD,s.APIC_PHYS_DOMAIN,s.APIC_URL,s.APIC_USERNAME,s.CONTIV_NET_MODE,s.CONTROL_INTERFACE,s.ENV,s.FWD_MODE,s.DATA_INTERFACE,s.SCHED_PROVIDER,s.VIP_ADDR,s.UCP_BOOTSTRAP_NODE,s.CLUSTER_NAME];for(o in e)-1===n.indexOf(o)&&t.push({name:o,value:e[o]})}function r(t){return e.post(ContivGlobals.NODES_SETTINGS_SET_ENDPOINT,t,{headers:{"Content-Type":"application/json"}})}function a(e){e.ansibleVariables.forEach(function(t){e.extra_vars[t.name]=t.value});var t={};e.envVariables.forEach(function(e){t[e.name]=e.value}),e.extra_vars[s.ENV]=t,e.nodeOpsObj.extra_vars=JSON.stringify(e.extra_vars)}function l(e){"aci"==e.extra_vars[s.CONTIV_NET_MODE]?delete e.extra_vars[s.FWD_MODE]:(delete e.extra_vars[s.APIC_URL],delete e.extra_vars[s.APIC_USERNAME],delete e.extra_vars[s.APIC_PASSWORD],delete e.extra_vars[s.APIC_LEAF_NODES],delete e.extra_vars[s.APIC_PHYS_DOMAIN],delete e.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN],delete e.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]),"native-swarm"==e.extra_vars[s.SCHED_PROVIDER]&&delete e.extra_vars[s.UCP_BOOTSTRAP_NODE];
}var s={APIC_CONTR_UNRESTRICT_MODE:"apic_contracts_unrestricted_mode",APIC_EPG_BRIDGE_DOMAIN:"apic_epg_bridge_domain",APIC_LEAF_NODES:"apic_leaf_nodes",APIC_PASSWORD:"apic_password",APIC_PHYS_DOMAIN:"apic_phys_domain",APIC_URL:"apic_url",APIC_USERNAME:"apic_username",CONTIV_NET_MODE:"contiv_network_mode",CONTROL_INTERFACE:"control_interface",ENV:"env",FWD_MODE:"fwd_mode",DATA_INTERFACE:"netplugin_if",SCHED_PROVIDER:"scheduler_provider",VIP_ADDR:"service_vip",UCP_BOOTSTRAP_NODE:"ucp_bootstrap_node_name",CLUSTER_NAME:"cluster_name"};return{getSettings:o,createEnvVariables:n,createAnsibleVariables:i,updateSettings:r,createExtraVars:a,cleanupExtraVars:l}}]),angular.module("contiv.utils").factory("VolumeSettingService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.VOLUMES_GLOBAL_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(t){return e.post(ContivGlobals.VOLUMES_GLOBAL_ENDPOINT,t)}return{getSettings:o,updateSettings:n}}]),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,
