"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(t,e){var n=function(){function n(t,e){_classCallCheck(this,n),this.nodes=t,this.links=e}return _createClass(n,[{key:"updateNodes",value:function(t){this.nodes=t}},{key:"updateLinks",value:function(t){this.links=t}},{key:"nodeIdToName",value:function(t){for(var e=this.nodes,n=0;n<e.length;n++)if(e[n].id==t)return e[n].name}},{key:"processNodeData",value:function(e){var n=[];return _.forEach(e,function(e){var o=new t.Node(null,null,e.id,e.text,null);n.push(o)}),n}},{key:"processLinkData",value:function(t,n){function o(t,e){for(var n=0;n<e.length;n++)if(t==e[n].id)return e[n]}for(var i=[],r=0;r<t.length;r++)if(t[r].source!=t[r].target){var a=o(t[r].source,n),s=o(t[r].target,n);if(null==a||null==s)continue;var l=new e.Link(a,s);i.push(l)}return i}}]),n}();return{DataSource:n}}]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}();angular.module("contiv.utils",[]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(t,e,n){var o=function(t){function o(t,e,n,i,r,a){_classCallCheck(this,o);var s=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this,t,e));return s.children_struct=n,s.ancestors_struct=i,s.labels=r,s.selectors=a,s}return _inherits(o,t),_createClass(o,[{key:"hasChild",value:function(t){return null!=this.children_struct[t]}},{key:"setAncestors",value:function(){var t=this,e=!1;_.forEach(t.nodes,function(n){n.ancestors=t.ancestors_struct[n.id]||[],_.isEmpty(n.ancestors)===!1?n.parent=n.ancestors[0]:0==_.includes(t.children_struct.topLevel,n.id)&&(n.ancestors.push("client"),t.ancestors_struct[n.id]=["client"],e===!1&&(e=!0,t.children_struct.topLevel.push("client"),t.children_struct.client=[]),t.children_struct.client.push(n.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(t){for(var e=this.nodes,n={},o=0;o<e.length;o++){var i=e[o];if(null===i.ancestors)n[i.id]=i.name;else for(var r=0;r<t.length;r++)if(i.ancestors.indexOf(t[r])>-1){n[i.id]=t[r];break}}for(var a=this.links,s=[],o=0;o<a.length;o++){var l=[];l.source=n[a[o].source]||a[o].source,l.target=n[a[o].target]||a[o].target,l.weight=a[o].weight,s.push(l)}for(var c=[],o=0;o<t.length;o++){var u=[];u.id=t[o],u.text=this.nodeIdToName(t[o])||t[o],u.ancestors=this.ancestors_struct[t[o]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:s}}},{key:"processNodeData",value:function(t){var n=[];return _.forEach(t,function(t){var o=new e.Node(null,null,t.id,t.text,null,t.parent,t.ancestors,null,null);n.push(o)}),n}},{key:"processLinkData",value:function(t,e){function o(t,e){for(var n=0;n<e.length;n++)if(t==e[n].id)return e[n]}for(var i=[],r={},a=0;a<t.length;a++)if(t[a].source!=t[a].target){var s=o(t[a].source,e),l=o(t[a].target,e),c=t[a].weight;if(null==s||null==l)continue;if(void 0===r[s.id+"-"+l.id]){var u=new n.Link(s,l,c);r[s.id+"-"+l.id]=u,i.push(u)}else{var d=r[s.id+"-"+l.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return i}}]),o}(t.DataSource);return{DataSource:o}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(t){var e=function(){function e(n,o,i){_classCallCheck(this,e);var r=this;r.nodes=o||[],r.links=i||[],r.defaultNodePolicies=[],r.defaultPathPolicies=[],r.svgPolicy=new t.Policy,r.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},r.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},n.on("mouseover",function(t){r.svgPolicy.mouseover.call(this,t)}).on("dblclick",function(t){r.svgPolicy.dblclick.call(this,t)}).on("contextmenu",function(t){r.svgPolicy.contextmenu.call(this,t)}).on("mouseout",function(t){r.svgPolicy.mouseout.call(this,t)}).on("mousedown",function(t){r.svgPolicy.mousedown.call(this,t)}).on("mouseup",function(t){r.svgPolicy.mouseup.call(this,t)});var a=n.append("svg:defs");a.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),a.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),r.svg=n,r.svgG=n.append("g").classed(r.consts.graphClass,!0);var s=r.svgG;r.paths=s.append("g").selectAll("g"),r.circles=s.append("g").selectAll("g"),r.initNodes(),r.initLinks(),r.setPositions();var l=function(){r.onWindowResize(n)};r.bindings={resize:l},$(window).resize(l)}return _createClass(e,[{key:"destroy",value:function(){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy()}),_(t.defaultPathPolicies).forEach(function(t){t.destroy()}),t.svgPolicy.destroy();for(var e in t.bindings)$(window).off(e,t.bindings[e])}},{key:"initNodes",value:function(){var t=this;_.forEach(t.nodes,function(e){e.initialize(t)})}},{key:"initLinks",value:function(){var t=this;_.forEach(t.links,function(e){e.initialize(t)})}},{key:"findNodeById",value:function(t){for(var e=this,n=0;n<e.nodes.length;n++)if(t===e.nodes[n].id)return e.nodes[n]}},{key:"findD3Node",value:function(t){var e,n=this;return n.circles.each(function(n){n.id===t&&(e=d3.select(this))}),e}},{key:"installDragPolicy",value:function(t){this.drag=t}},{key:"installSvgPolicy",value:function(t){this.svgPolicy=t}},{key:"installDefaultNodePolicy",value:function(t){var e=this;e.defaultNodePolicies.push(t),t.initialize(e)}},{key:"uninstallDefaultNodePolicy",value:function(t){var e;e="string"==typeof t?t:t.policyName,_(thisGraph.defaultNodePolicies).forEach(function(t,n){t.policyName===e&&(t.destroy(),thisGraph.defaultNodePolicies.splice(n,1))})}},{key:"getNodePolicy",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e,n){return e.policyName===t?e:void 0})}},{key:"installDefaultPathPolicy",value:function(t){var e=this;e.defaultPathPolicies.push(t),t.initialize(e)}},{key:"uninstallDefaultPathPolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.defaultPathPolicies).forEach(function(t,o){t.policyName===e&&(t.destroy(),n.defaultPathPolicies.splice(o,1))})}},{key:"pathPolicyEvent",value:function(t,e,n){var o=this;_(o.defaultPathPolicies).forEach(function(o){o[t](e,n)})}},{key:"nodePolicyEvent",value:function(t,e,n){var o=this;_.forEach(o.defaultNodePolicies,function(o){o[t](e,n)})}},{key:"installZoomPolicy",value:function(t){this.dragSvg=t,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(t){}},{key:"insertTitleLinebreaks",value:function(t,e){for(var n=this,o=e.split(/\s+/g),i=o.length,r=t.append("text").attr("class",n.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(i-1)),a=0;a<o.length;a++){var s=r.append("tspan").text(o[a]);a>0&&s.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(t){var e=this,n=e.links.filter(function(e){return e.source===t||e.target===t});n.map(function(t){e.links.splice(e.links.indexOf(t),1)})}},{key:"addNode",value:function(t){var e=this;e.nodes.push(t),t.initialize(e),e.updateGraph()}},{key:"removeNode",value:function(t){var e=this;e.nodes.splice(e.nodes.indexOf(t),1),e.spliceLinksForNode(t),e.updateGraph()}},{key:"addLink",value:function(t){var e=this;e.links.push(t),t.initialize(e),e.updateGraph()}},{key:"removeLink",value:function(t){var e=this;e.links.splice(e.links.indexOf(t),1),t.initialize(e),e.updateGraph()}},{key:"updateExistingPaths",value:function(t){t.each(function(t){t.updateAttr(d3.select(this),t)})}},{key:"updateNewPaths",value:function(t){var e=this;e.initLinks(),t.each(function(t){t.newPathAttr(d3.select(this),t)}),t.on("mouseover",function(t){t.hasPolicy?t.pathPolicyEvent("mouseover",d3.select(this),t):e.pathPolicyEvent("mouseover",d3.select(this),t)}).on("dblclick",function(t){t.hasPolicy?t.pathPolicyEvent("dblclick",d3.select(this),t):e.pathPolicyEvent("dblclick",d3.select(this),t)}).on("contextmenu",function(t){t.hasPolicy?t.pathPolicyEvent("contextmenu",d3.select(this),t):e.pathPolicyEvent("contextmenu",d3.select(this),t)}).on("mouseout",function(t){t.hasPolicy?t.pathPolicyEvent("mouseout",d3.select(this),t):e.pathPolicyEvent("mouseout",d3.select(this),t)}).on("mousedown",function(t){t.hasPolicy?t.pathPolicyEvent("mousedown",d3.select(this),t):e.pathPolicyEvent("mousedown",d3.select(this),t)}).on("mouseup",function(t){t.hasPolicy?t.pathPolicyEvent("mouseup",d3.select(this),t):e.pathPolicyEvent("mouseup",d3.select(this),t)}).call(e.drag)}},{key:"updateExistingNodes",value:function(){var t=this;t.circles=this.circles.data(t.nodes,function(t){return t.id}).each(function(t){t.updateAttr(d3.select(this),t)})}},{key:"updateNewNodes",value:function(t){var e=this;t.each(function(t){null==t.graph&&t.initialize(e),t.newNodeAttr(d3.select(this),t)}),t.on("mouseover",function(t){t.hasPolicy?t.nodePolicyEvent("mouseover",d3.select(this),t):e.nodePolicyEvent("mouseover",d3.select(this),t)}).on("dblclick",function(t){t.hasPolicy?t.nodePolicyEvent("dblclick",d3.select(this),t):e.nodePolicyEvent("dblclick",d3.select(this),t)}).on("contextmenu",function(t){t.hasPolicy?t.nodePolicyEvent("contextmenu",d3.select(this),t):e.nodePolicyEvent("contextmenu",d3.select(this),t)}).on("mouseout",function(t){t.hasPolicy?t.nodePolicyEvent("mouseout",d3.select(this),t):e.nodePolicyEvent("mouseout",d3.select(this),t)}).on("mousedown",function(t){t.hasPolicy?t.nodePolicyEvent("mousedown",d3.select(this),t):e.nodePolicyEvent("mousedown",d3.select(this),t)}).on("mouseup",function(t){t.hasPolicy?t.nodePolicyEvent("mouseup",d3.select(this),t):e.nodePolicyEvent("mouseup",d3.select(this),t)}).call(e.drag),t.append("circle").attr("r",function(t){return String(t.radius)}),t.each(function(t){e.insertTitleLinebreaks(d3.select(this),t.text)})}},{key:"d3ForceCollide",value:function(t){var e=this,n=e.consts,o=e.nodes,i=d3.geom.quadtree(o);return function(e){var o=e.radius+n.maxRadius+n.padding,r=e.x-o,a=e.x+o,s=e.y-o,l=e.y+o;i.visit(function(o,i,c,u,d){if(o.point&&o.point!==e){var p=e.x-o.point.x,f=e.y-o.point.y,v=Math.sqrt(p*p+f*f),h=e.radius+o.point.radius+n.padding;h>v&&(v=(v-h)/v*t,e.x-=p*=v,e.y-=f*=v,o.point.x+=p,o.point.y+=f)}return i>a||r>u||c>l||s>d})}}},{key:"d3ForceTick",value:function(t,e,n){for(var o=this,i=o.consts,r=i.displayOffset,a=o.nodes,s=d3.geom.quadtree(o.nodes),l=0,c=a.length;++l<c;)s.visit(this.d3ForceCollide(a[l]));o.circles.each(this.d3ForceCollide(.5)).attr("cx",function(t){return t.x=Math.max(t.radius+r,Math.min(e-r-t.radius,t.x))}).attr("cy",function(t){return t.y=Math.max(t.radius+r,Math.min(n-r-t.radius,t.y))}),o.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceStart",value:function(){var t=this;t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceEnd",value:function(){var t=this;t.circles.attr("cx",function(t){return t.x}).attr("cy",function(t){return t.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceBounds",value:function(){var t=$("#visualization-graph").width(),e=$("#visualization-graph").height(),n=t,o=e;return{width:n,height:o}}},{key:"setForce",value:function(t){var e=this,n=e.nodes,o=e.links;if(!_.isEmpty(n)){var i=e.d3ForceBounds(),r=d3.layout.force().size([i.width,i.height]).nodes(n).charge(function(t){return-6e3}).links(o);r.linkDistance(i.width/3),r.linkStrength(.2),r.gravity(.2),r.on("tick",function(t){e.d3ForceTick.call(e,t,i.width,i.height)}),r.on("start",function(){e.d3ForceStart.call(e)}),r.on("end",function(){e.d3ForceEnd.call(e)}),r.start();for(var a=0;r.alpha()>.01&&150>a;)r.tick(),a+=1;r.stop(),null!=t&&t()}}},{key:"setPositions",value:function(){for(var t=this,e=t.consts.displayOffset,n=$("#visualization-graph").width(),o=$("#visualization-graph").height(),i=n-2*e,r=o-2*e,a=t.nodes,s=0;s<a.length;s++)a[s].radius=a[s].radius||t.consts.startRadius,null!=a[s].x&&null!=a[s].y||(a[s].x=i/2+a[s].radius+e,a[s].y=r/2+a[s].radius+e)}},{key:"updateGraph",value:function(t){var e=this,n=e.consts,o=e.state;if(!e.state.disableUpdate){this.updateExistingNodes();var i=e.circles.enter().append("g");i.classed(n.circleGClass,!0),e.circles.exit().remove(),0==o.initForce?(e.setForce(function(){e.updateNewNodes.call(e,i)}),o.initForce=!0):this.updateNewNodes(i),e.paths=e.paths.data(e.links,function(t){return String(t.source.id)+"+"+String(t.target.id)});var r=e.paths;this.updateExistingPaths(r);var a=r.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(a),r.exit().remove(),null!=t&&t()}}}]),e}();return{Graph:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(t){var e=function(t){function e(t,n,o,i){_classCallCheck(this,e);var r=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,o)),a=r;a.state.transition=[],a.consts.edge_buffer=200,a.consts.radiusDecay=1,a.consts.containerClass="container",a.dataSource=i;var s=d3.behavior.drag().origin(function(t){return{x:t.x,y:t.y}}).on("dragstart",function(){}).on("drag",function(t){d3.select(this).attr("transform",function(t,e){return t.x+=d3.event.dx,t.y+=d3.event.dy,"translate("+[t.x,t.y]+")"}),a.updateGraph()}).on("dragend",function(){});a.drag=s;var l=d3.behavior.zoom().on("zoom",function(){return null!=d3.event.sourceEvent&&d3.event.sourceEvent.ctrlKey?!1:(a.zoomed.call(a),!0)}).on("zoomstart",function(t,e){});return a.dragSvg=l,a.svg.call(l).on("dblclick.zoom",null),r}return _inherits(e,t),_createClass(e,[{key:"zoomed",value:function(t,e){var n=this;if(1!=n.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=t&&null!=e){var o=n.dragSvg;o.scale(e),o.translate(t);var i=function(){o.scale(e),o.translate(t)},r="zoom"+t;return void d3.select("."+this.consts.graphClass).transition(r).delay(100).duration(750).attr("transform","translate("+o.translate()+") scale("+o.scale()+")").each("end",i)}n.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+n.dragSvg.translate()+") scale("+n.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(t){var e=document.getElementsByTagName("body")[0],n=$("#visualization-graph").offset(),o=$("#visualization-graph").width(),i=e.clientHeight;t.attr("width",o).attr("height",i-n.top-20)}},{key:"updateLinkData",value:function(){for(var t=this,e=[],n=0;n<t.nodes.length;n++)e.push(t.nodes[n].id);var o=t.dataSource.getFlowBetweenSet(e),i=o.linkData;t.links=t.dataSource.processLinkData(i,t.nodes),this.initNodes(),this.initLinks(),t.updateGraph()}}]),e}(t.Graph);return{Graph:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("Link",[function(){var t=function(){function t(e,n){_classCallCheck(this,t),this.source=e,this.target=n,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){0==this.initialized&&(this.initialized=!0,this.graph=t)}},{key:"updateAttr",value:function(t,e){t.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(t,e){t.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var t=this,e=t.target.x-t.source.x,n=t.target.y-t.source.y,o=Math.sqrt(e*e+n*n);return"M"+t.source.x+","+t.source.y+"A"+o+","+o+" 0 0,1 "+t.target.x+","+t.target.y}},{key:"installPathPolicy",value:function(t){this.hasPolicy=!0,this.pathPolicies.push(t),t.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.pathPolicies).forEach(function(t,o){t.policyName===e&&(t.destroy(),n.pathPolicies.splice(o,1))}),0===n.pathPolicies.length&&(n.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(t,e,n){_(n.pathPolicies).forEach(function(o){o[t](e,n)})}}]),t}();return{Link:t}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_get=function t(e,n,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:t(r,n,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(t){var e=function(t){function e(t,n,o){_classCallCheck(this,e);var i=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return i.weight=o,i.count=1,i}return _inherits(e,t),_createClass(e,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var t,e=this,n=(e.target.x-e.source.x)/2,o=(e.target.y-e.source.y)/2;return t=e.source.x<e.target.x?{my:"top center",at:"center center",target:[n,o],adjust:{y:10}}:{my:"bottom center",at:"center center",target:[n,o],adjust:{y:-10}}}},{key:"initialize",value:function(t){if(0==this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=t.state.VisualizerLink;null==n&&(n=t.state.VisualizerLink={},n.maxWeight=null,n.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(t){this.graph.state.VisualizerLink.useAvgWeight=!!t}},{key:"setWeight",value:function(t){this.weight=t}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var t=this.graph,e=t.state.VisualizerLink;if(e.useAvgWeight){var n=this.weight/this.count;return n}return this.weight}},{key:"updateMaxWeight",value:function(){var t=this.graph,e=t.state.VisualizerLink,n=_.maxBy(t.links,function(t){return null!=t.graph?t.getWeight():0});e.maxWeight=n.getWeight()}},{key:"updateAttr",value:function(t,e){var n=this.graph,o=n.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,o.maxWeight]).range(["#ffb366","#F92606"]);o.colorScale=i,t.style("marker-end","url(#end-arrow)").classed(n.consts.selectedClass,function(t){return t===o.selectedEdge}).attr("d",this.arrowPath.call(e)).transition("existingPathTransition").duration(750).attr("stroke",function(t){var e=i(t.getWeight());return e})}},{key:"newPathAttr",value:function(t,e){var n=this.graph,o=n.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,o.maxWeight]).range(["#ffb366","#F92606"]);t.transition("newPathTransition").duration(750).attrTween("opacity",function(t){return d3.interpolateString(0,1)}).attr("stroke",function(t){var e=i(t.getWeight());return e}).attr("d",this.arrowPath.call(e))}}]),e}(t.Link);return{Link:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("Node",[function(){var t=function(){function t(e,n,o,i,r){_classCallCheck(this,t),this.x=e,this.y=n,this.radius=r,this.id=o,this.text=i,this.radius=r,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){0==this.initialized&&(this.initialized=!0,this.graph=t)}},{key:"updateAttr",value:function(t,e){t.attr("transform",function(t){return"translate("+t.x+","+t.y+")"})}},{key:"newNodeAttr",value:function(t,e){}},{key:"setRadius",value:function(t){this.radius=t}},{key:"installNodePolicy",value:function(t){this.hasPolicy=!0,this.nodePolicies.push(t),t.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(t){var e,n=this;e="string"==typeof t?t:t.policyName,_(n.nodePolicies).forEach(function(t,o){t.policyName===e&&(t.destroy(),n.nodePolicies.splice(o,1))}),0===n.nodePolicies.length&&(n.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(t,e,n){_.forEach(this.nodePolicies,function(o){o[t](e,n)})}}]),t}();return{Node:t}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(t){var e=function(t){function e(t,n,o,i,r,a,s,l,c){_classCallCheck(this,e);var u=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,o,i,r));return u.parent=a,u.ancestors=s,null==l?u.xStart=t:u.xStart=l,null==c?u.yStart=n:u.yStart=c,u}return _inherits(e,t),_createClass(e,[{key:"newNodeAttr",value:function(t,e){var n=this.graph;null!=n.consts.containerClass&&null==n.dataSource.children_struct[e.id]&&t.classed(n.consts.containerClass,!0),t.transition("nodePositionTransition").duration(750).attrTween("transform",function(t){if(null!=t.xStart&&null!=t.yStart){var e=t.xStart,n=t.yStart;return t.xStart=t.x,t.yStart=t.y,d3.interpolateString("translate("+e+","+n+")","translate("+t.x+","+t.y+")")}return d3.interpolateString("translate("+t.x+","+t.y+")","translate("+t.x+","+t.y+")")})}}]),e}(t.Node);return{Node:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_get=function e(t,n,o){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,n,o)}if("value"in i)return i.value;
var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(t){var e=function(t){function e(){return _classCallCheck(this,e),_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"NodeSelectionPolicy"))}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){if(!this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=t.state.NodeSelectionPolicy={};n.selectedNodes=[];var o=t.consts.NodeSelectionPolicy={};o.selectedClass="selected";var i=t.drag;i.on("drag",function(e){var n=t;if(null!=n.consts.NodeSelectionPolicy){var o=n.consts.NodeSelectionPolicy.selectedClass,i=d3.selectAll("."+o);-1==i[0].indexOf(this)&&(i.classed(o,!1),i=d3.select(this),i.classed(o,!0)),i.attr("transform",function(t,e){return t.x+=d3.event.dx,t.y+=d3.event.dy,"translate("+[t.x,t.y]+")"}),n.updateGraph()}})}}},{key:"addSelectNode",value:function(t,e){var n=this.graph,o=n.state.NodeSelectionPolicy,i=n.consts.NodeSelectionPolicy;t.classed(i.selectedClass,!0),o.selectedNodes.push(e)}},{key:"removeSelectFromNode",value:function(t,e){var n=this.graph,o=n.state.NodeSelectionPolicy,i=n.consts.NodeSelectionPolicy;n.circles.filter(function(t){return t.id===e.id}).classed(i.selectedClass,!1);var r=o.selectedNodes.indexOf(e);o.selectedNodes.splice(r,1)}},{key:"removeAllSelectedNodes",value:function(){var t=this.graph,e=t.state.NodeSelectionPolicy,n=t.consts.NodeSelectionPolicy;t.circles.classed(n.selectedClass,!1),e.selectedNodes=[]}},{key:"mousedown",value:function(t,e){var n=this.graph,o=n.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?o.selectedNodes.indexOf(e)>-1?this.removeSelectFromNode(t,e):this.addSelectNode(t,e):-1==o.selectedNodes.indexOf(e)&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(t,e){var n=this.graph,o=n.state.NodeSelectionPolicy;d3.event.ctrlKey||o.selectedNodes.length<=1&&this.removeSelectFromNode(t,e)}}]),e}(t.Policy);return{Policy:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(t){var e=function(t){function e(t){_classCallCheck(this,e);var n=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"PathChangeViewPolicy"));return n.$state=t,n}return _inherits(e,t),_createClass(e,[{key:"generateList",value:function(t){var e=this,n=[],o=function i(t,n){for(var o=e.graph.dataSource.children_struct[t],r=0;r<o.length;r++){var a=o[r];if(e.graph.dataSource.hasChild(a)===!0){var s=i(a,n);n.concat(s)}else n.push(a)}};return o(t,n),n}},{key:"viewEdge",value:function(t){var e=[],n=[],o=t.source.id,i=t.target.id;e=this.graph.dataSource.hasChild(o)===!0?this.generateList(o):[o],n=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],this.$state.go("contiv.menu.visualization.edge",{sourceName:o,targetName:i,sourceList:e,targetList:n})}},{key:"mousedown",value:function(t,e){this.viewEdge(e)}}]),e}(t.Policy);return{Policy:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("Policy",[function(){var t=function(){function t(e){_classCallCheck(this,t),this.policyName=e,this.graph=null,this.initialized=!1}return _createClass(t,[{key:"initialize",value:function(t){this.initialized||(this.initialized=!0,this.graph=t)}},{key:"mouseover",value:function(t,e){}},{key:"dblclick",value:function(t,e){}},{key:"contextmenu",value:function(t,e){}},{key:"mouseout",value:function(t,e){}},{key:"mousedown",value:function(t,e){}},{key:"mouseup",value:function(t,e){}},{key:"destroy",value:function(){}}]),t}();return{Policy:t}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.applicationgroups.create",{url:"/create",component:"applicationgroupcreate"}).state("contiv.menu.applicationgroups.details",{url:"/details/:key",component:"applicationgroupdetails"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",component:"applicationgroupdetails"}).state("contiv.menu.applicationgroups.list",{url:"/list",component:"applicationGrouplist"})}]),angular.module("contiv.dashboard",["contiv.models"]).config(["$stateProvider",function(t){t.state("contiv.menu.dashboard",{url:"/dashboard",component:"dashboard"})}]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(t,e,n,o,i,r,a){return{Policy:t.Policy,QTipPolicy:e.Policy,PathChangeViewPolicy:n.Policy,NodeSelectionPolicy:o.Policy,SplitJoinNodePolicy:i.Policy,SplitJoinViewPolicy:r.Policy,SaveStatePolicy:a.Policy}}]),angular.module("contiv.login",["contiv.utils"]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_get=function n(t,e,o){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:n(r,e,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(t){var e=function(t){function e(){return _classCallCheck(this,e),_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"QTipPolicy"))}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){if(!this.initialized){_get(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"initialize",this).call(this,t);var n=this,o=t.state.QTipPolicy={};o.mousedown=!1,t.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(t){o.mouseup=!1});var i=t.updateNewNodes;t.updateNewNodes=function(e){i.call(t,e),n.updateNewNodes(e)};var r=t.updateNewPaths;t.updateNewPaths=function(e){r.call(t,e),n.updateNewPaths(e)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(t,e){var n=this.graph,o=n.state.QTipPolicy;o.mousedown=!0}},{key:"mouseup",value:function(t,e){var n=this.graph,o=n.state.QTipPolicy;o.mousedown=!1}},{key:"whenQTipAvailable",value:function(t){var e=this,n=500;window.setTimeout(function(){null!=$(document).qtip?t():window.setTimeout(e.whenQTipAvailable(t),n)},n)}},{key:"updateNewNodes",value:function(t){function e(){t.each(function(t){var e,i=this;if(null!=n.dataSource.children_struct[t.id]){e="<b><u>Selectors:</b></u> ";var r=n.dataSource.selectors[t.id],a=!1;for(var s in r)a=!0,e+=s+" : <i>"+r[s]+"</i>,\n ";a===!1&&(e="No Selectors, ")}else{e="<b><u>Labels:</b></u> ";var l=n.dataSource.labels[t.id],a=!1;for(var s in l)a=!0,e+=s+" : <i>"+l[s]+"</i>,\n ";a===!1&&(e="No labels, ")}e=e.slice(0,-2),$(i).qtip({content:{title:t.id,text:e},events:{show:function(){var e=$(i).qtip("api"),r=$("#graphContainer").offset(),a=[r.left+(t.x*n.dragSvg.scale()+n.dragSvg.translate()[0]),r.top+(t.y+t.radius)*n.dragSvg.scale()+n.dragSvg.translate()[1]];return e.set("position.target",a),!o.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var n=this.graph,o=n.state.QTipPolicy;void 0!=$(document).qtip?e():this.whenQTipAvailable(e)}},{key:"updateNewPaths",value:function(t){var e=this.graph,n=e.state.QTipPolicy;void 0!=$(document).qtip&&t.each(function(t){var e=this,o=d3.select(this).node(),i=(o.getPointAtLength(o.getTotalLength()/2),t.qtipHelper()),r="Bytes: "+t.getWeight();$(e).qtip({content:{text:r},events:{show:function(){return!n.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:i.my,at:"center center",target:"mouse",adjust:i.adjust},hide:{event:"mousedown mouseleave"}})})}}]),e}(t.Policy);return{Policy:e}}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(t){var e=function(t){function e(t){_classCallCheck(this,e);var n=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"SaveStatePolicy"));return n.savedState=t,n}return _inherits(e,t),_createClass(e,[{key:"initialize",value:function(t){this.graph=t;var e=this;t.destroy=function(){e.graphDestroy.call(t,e.savedState)},t.load=function(n){e.graphLoad.call(t,n)}}},{key:"graphDestroy",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy(t)}),_(e.defaultPathPolicies).forEach(function(e){e.destroy(t)});for(var n in e.bindings)$(window).off(n,e.bindings[n])}},{key:"graphLoad",value:function(t){var e=this;_(e.defaultNodePolicies).forEach(function(e){null!=e.load&&e.load(t)}),_(e.defaultPathPolicies).forEach(function(e){null!=e.load&&e.load(t)})}}]),e}(t.Policy);return{Policy:e}}]),angular.module("contiv.menu",[]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_get=function o(t,e,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,e);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:o(r,e,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(t,e){var n=function(t){function n(){_classCallCheck(this,n);var t=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return t.policyName="SplitJoinNodePolicy",t}return _inherits(n,t),_createClass(n,[{key:"initialize",value:function(t){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var e=t.state.SplitJoinNodePolicy={};e.splitNodes=[]}}},{key:"dblclick",value:function(t,e){var n=this.graph,o=n.state.SplitJoinNodePolicy;d3.event.ctrlKey||(o.selectedNodes.indexOf(e)>-1?this.splitMultipleNodes(o.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(e)))}},{key:"contextmenu",value:function(t,e){var n=this.graph,o=n.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var i=o.selectedNodes;if(i.indexOf(e)>-1)for(var r=0;r<i.length;r++)this.joinNode(i[r]);else this.removeAllSelectedNodes(),this.joinNode(e)}}},{key:"__splitNode",value:function(t){var n=this.graph,o=n.state.SplitJoinNodePolicy,i=t.id,r=n.dataSource.children_struct;if(void 0!==r[i]&&!_.isEmpty(r[i])){n.nodes=_.filter(n.nodes,function(e){return e!=t}),n.spliceLinksForNode(t);for(var a=[],s=0;s<n.nodes.length;s++)a.push(n.nodes[s].id);for(var l=[],s=0;s<r[i].length;s++)a.push(r[i][s]),l.push(r[i][s]);var c=n.dataSource.getFlowBetweenSet(a),u=t.x,d=t.y,p=t.ancestors.slice();p.splice(0,0,t.id);for(var f=t.id,v=[],h=t.radius*n.consts.radiusDecay,y=c.nodeData,s=0;s<y.length;s++)if(l.indexOf(y[s].id)>-1){var g=y[s].id,m=y[s].text,P=new e.Node(null,null,g,m,h,f,p,u,d);P.initialize(n),n.nodes.push(P),v.push(P)}return n.links=n.dataSource.processLinkData(c.linkData,n.nodes),n.initNodes(),n.initLinks(),o.splitNodes.push(t.id),v}}},{key:"splitNode",value:function(t){var e=this.__splitNode(t);null!=e&&this.splitNodeEvent(e)}},{key:"splitMultipleNodes",value:function(t){for(var e=(this.graph,[]),n=0;n<t.length;n++){var o=this.__splitNode(t[n]);e=e.concat(o)}this.splitMultipleNodesEvent(o)}},{key:"splitNodeEvent",value:function(t){var e=this.graph;e.setPositions(),e.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(t){var e=this.graph;e.setPositions(),e.updateGraph()}},{key:"__joinNode",value:function(t){var n=this.graph,o=n.state.SplitJoinNodePolicy;if(-1!=n.nodes.indexOf(t)){var i=n.dataSource.children_struct,r=t.id;if(!(i.topLevel.indexOf(r)>-1)){for(var a=[],s=[],l=0;l<n.nodes.length;l++)-1==n.nodes[l].ancestors.indexOf(t.parent)?s.push(n.nodes[l].id):a.push(n.nodes[l]);var c=t.parent;s.push(t.parent);var u=t.radius/n.consts.radiusDecay,d=t.x,p=t.y,f=t.ancestors[1],v=t.ancestors.slice(1),h=new e.Node(d,p,c,c,u,f,v);n.nodes.push(h);for(var y=n.dataSource.getFlowBetweenSet(s),l=0;l<a.length;l++){var g=a[l];n.nodes.splice(n.nodes.indexOf(g),1),n.spliceLinksForNode(g)}return n.links=n.dataSource.processLinkData(y.linkData,n.nodes),n.initNodes(),n.initLinks(),o.splitNodes.splice(o.splitNodes.indexOf(h.id),1),h}}}},{key:"joinNode",value:function(t){var e=this.__joinNode(t);null!=e&&this.joinNodeEvent(e)}},{key:"joinMultipleNode",value:function(t){for(var e=[],n=0;n<t.length;n++){var o=this.__joinNode(t[n]);e.push(o)}this.joinMultipleNodesEvent(e)}},{key:"joinNodeEvent",value:function(t){var e=this.graph;e.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(t){var e=this.graph;e.updateGraph()}}]),n}(t.Policy);return{Policy:n}}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.isolation.create",{url:"/create",component:"isolationpolicycreate"}).state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",component:"bandwidthpolicycreate"}).state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.list",{url:"/list",params:{policyTab:null},component:"networkpoliciestabs"})}]);var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_get=function i(t,e,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,e);if(void 0===o){var r=Object.getPrototypeOf(t);return null===r?void 0:i(r,e,n)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(t,e){var n=function(t){function n(){_classCallCheck(this,n);var t=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return t.policyName="SplitJoinViewPolicy",t}return _inherits(n,t),_createClass(n,[{key:"initialize",value:function(t){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,t);var e=t.state.SplitJoinViewPolicy={};e.savedStates=[],e.eventHistory=[],e.focusGroups=[],e.foci=[],e.zooms={},e.layout={},e.layoutDefault=null,e.zoomDefault=null,e.nodeIdsToReshow=null,e.backButtonElem=null,e.titleElem=null;var o=t.consts.SplitJoinViewPolicy={};o.boundary=.8,t.d3ForceBounds=this.d3ForceBounds,t.d3ForceTick=this.d3ForceTick,t.d3ForceStart=this.d3ForceStart,t.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(t){var e=this.graph,n=this,o=e.state.SplitJoinViewPolicy;o.backButtonElem=t,o.backButton=function(){o.eventHistory.length>0&&n.undoLastEvent.call(n)}}},{key:"installTitle",value:function(t){var e=this.graph,n=e.state.SplitJoinViewPolicy;n.titleElem=t}},{key:"destroy",value:function(t){null!=t&&this.save(t)}},{key:"save",value:function(t){var e=this.graph,n=e.state.SplitJoinViewPolicy,o=e.nodes,i=e.links,r=null;null!=n.titleElem&&(r=n.titleElem.text());var a=n.focusGroups,s=n.eventHistory,l=n.zooms,c=n.layout,u=n.layoutDefault,d=n.zoomDefault,p={nodes:o,links:i,states:n.savedStates,currTitle:r,focusGroups:a,eventHistory:s,zooms:l,layout:c,layoutDefault:u,zoomDefault:d};t.SplitJoinViewPolicy=p}},{key:"load",value:function(t){var e=this,n=this.graph,o=n.state.SplitJoinViewPolicy;t=t.SplitJoinViewPolicy,o.savedStates=t.states,n.links=t.links,n.nodes=t.nodes;var i=t.currTitle;null!=o.titleElem&&o.titleElem.text(i),o.eventHistory=t.eventHistory,o.focusGroups=t.focusGroups,o.zooms=t.zooms,o.layout=t.layout,o.layoutDefault=t.layoutDefault,o.zoomDefault=t.zoomDefault,null!=o.backButtonElem&&o.eventHistory.length>0&&o.backButtonElem.fadeTo("slow",1);var r=n.dataSource.children_struct;_.forEach(n.nodes,function(t){t.SplitJoinViewPolicy={},_.includes(r[o.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"});var a;if(0===o.focusGroups.length){a=o.layoutDefault;var s=o.zoomDefault;n.zoomed(s[0],s[1])}else{var s=o.zooms[o.focusGroups];null!=s&&n.zoomed(s[0],s[1]),a=o.layout[o.focusGroups]}_.forEach(n.nodes,function(t){var e=a[t.id];null==e&&console.log(a,t),t.x=e.x,t.y=e.y}),n.state.initForce=!0,n.updateGraph.call(n,function(){e.updateGraphCallback.call(e)})}},{key:"dblclick",value:function(t,e){var o=this.graph,i=o.state.SplitJoinViewPolicy,r=e.id,a=o.dataSource.children_struct;if(void 0!==a[r]&&!_.isEmpty(a[r])){if(i.focusGroups.slice(),0===i.focusGroups.length?i.focusGroups.push(e.id):_.includes(a[i.focusGroups[0]],e.id)?i.focusGroups[0]=e.id:1===i.focusGroups.length?i.focusGroups.push(e.id):_.includes(a[i.focusGroups[1]],e.id)&&(i.focusGroups[1]=e.id),2===i.focusGroups.length&&i.focusGroups[1]===e.id){var s=[e],l=[],c=a[i.focusGroups[0]];_.forEach(o.nodes,function(t){_.includes(c,t.id)&&(l.push(t.id),s.push(t))})}else{var s=[e],l=[];_.forEach(o.links,function(t){t.source===e&&-1==l.indexOf(t.target.id)?(t.target.SplitJoinViewPolicy={},t.target.SplitJoinViewPolicy.type="connected",l.push(t.target.id),s.push(t.target)):t.target===e&&-1==l.indexOf(t.source.id)&&(t.source.SplitJoinViewPolicy={},t.source.SplitJoinViewPolicy.type="connected",l.push(t.source.id),s.push(t.source))})}o.circles.each(function(t){t.id!==e.id&&o.spliceLinksForNode(t)}),o.updateGraph(),o.state.disableUpdate=!0,o.circles.each(function(t){t.id!==e.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=o.dragSvg.translate(),d=o.dragSvg.scale(),p=parseFloat(o.svg.style("width"))/d/2+u[0],f=parseFloat(o.svg.style("height"))/d/2+u[1];e.xStart=e.x,e.yStart=e.y,e.x=p,e.y=f,t.transition("nodePositionTransition").duration(750).attrTween("transform",function(t){var e=t.xStart,n=t.yStart;return t.xStart=t.x,t.yStart=t.y,d3.interpolateString("translate("+e+","+n+")","translate("+t.x+","+t.y+")")});var v=_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"splitNode",this);i.nodeIdsToReshow=l;var h=this;setTimeout(function(){o.nodes=s,v.call(h,e)},750)}}},{key:"updateGraphCallback",value:function(){var t=this.graph,e=t.state.SplitJoinViewPolicy;t.circles.each(function(t){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=t.SplitJoinViewPolicy&&("focus"===t.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===t.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),e.nodeIdsToReshow=null,t.updateGraph()}},{key:"setPositions",value:function(){function t(t,e){return Math.floor(Math.random()*(e-t+1))+t}var e=this.graph,n=this,o=e.consts,i=o.displayOffset,r=e.nodes,a=n.d3ForceBounds.call(e);_.forEach(r,function(e){if(null==e.x||null==e.y){var n=t(e.radius+i,a.width-e.radius-i),o=t(e.radius+i,a.height-e.radius-i);e.x=n,e.y=o}})}},{key:"d3ForceStart",value:function(){var t=this;t.circles.attr("cx",function(e){return null!=e.xStart&&(e.xStart=e.xStart*t.dragSvg.scale()+t.dragSvg.translate()[0]),e.x}).attr("cy",function(e){return null!=e.yStart&&(e.yStart=e.yStart*t.dragSvg.scale()+t.dragSvg.translate()[1]),e.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceEnd",value:function(){var t=this,e=t.state,n=e.SplitJoinViewPolicy;if(null==n.layoutDefault){var o={};_.forEach(t.nodes,function(t){o[t.id]={x:t.x,y:t.y}}),n.layoutDefault=o;var i=t.dragSvg.scale(),r=t.dragSvg.translate();n.zoomDefault=[r,i]}t.circles.attr("cx",function(t){return t.x}).attr("cy",function(t){return t.y}),t.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceTick",value:function(t,e,n){function o(t){return function(o){2===u.length?("focus"===o.SplitJoinViewPolicy.type?o.y+=(u[0]-o.y)*t:o.y+=(u[1]-o.y)*t,o.x+=(e/2-o.x)*t):(o.y+=(n/2-o.y)*t,o.x+=(e/2-o.x)*t)}}var i=this,r=i.state,a=i.consts,s=r.SplitJoinViewPolicy,l=a.displayOffset,c=i.dragSvg.scale(),u=s.foci;i.circles.each(this.d3ForceCollide(.5)).each(o(.2*t.alpha)).attr("cx",function(t){return t.x=Math.max((t.radius+l)/c,Math.min(e+(-l-t.radius)/c,t.x))}).attr("cy",function(t){return null==t.SplitJoinViewPolicy||null==t.SplitJoinViewPolicy?(t.y=Math.max((t.radius+l)/c,Math.min(n+(-l-t.radius)/c,t.y)),t.y):"focus"===t.SplitJoinViewPolicy.type?(t.y=Math.max(t.radius+l,Math.min((n+(-l-t.radius)/c)*a.SplitJoinViewPolicy.boundary,t.y)),t.y):"connected"===t.SplitJoinViewPolicy.type?(t.y=Math.max((n+(l-t.radius)/c)*a.SplitJoinViewPolicy.boundary,Math.min(n+(-l-t.radius)/c,t.y)),t.y):void 0}),i.paths.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}},{key:"d3ForceBounds",value:function(){function t(t,n){var o=t*n,i=e.consts.startRadius,r=3.5*i,a=o/(r*r);return a}var e=this,n=e.state,o=e.consts,i=o.SplitJoinViewPolicy,r=n.SplitJoinViewPolicy,a=e.nodes,s=o.displayOffset,l=parseFloat(e.svg.style("width")),c=parseFloat(e.svg.style("height")),u=l,d=c,p=t(u-2*s,d-2*s),f=1;a.length>p?(f=p/a.length,e.zoomed(e.dragSvg.translate(),f),u/=f,d/=f):e.zoomed(e.dragSvg.translate(),f);var v,h=r.focusGroups;if(0===h.length)v=[d/2];else{var y=e.dataSource.children_struct[h[0]];i.boundary=y.length/a.length;var g=d*i.boundary,m=d-g;g<2*e.consts.maxRadius&&(i.boundary=2.5*e.consts.maxRadius/d,g=d*i.boundary,m=d-g),m<2*e.consts.maxRadius&&(i.boundary=1-2.5*e.consts.maxRadius/d,g=d*i.boundary,m=d-g),v=[g/2,g+m/2]}return r.foci=v,{width:u,height:d}}},{key:"splitNodeEvent",value:function(t){var e=this,n=this.graph,o=n.state.SplitJoinViewPolicy,i=n.dataSource.children_struct;_.forEach(t,function(t){t.SplitJoinViewPolicy={},_.includes(i[o.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"});var r=t[0].parent;if(0!==o.eventHistory.length&&o.eventHistory[o.eventHistory.length-1].id===r?o.eventHistory.pop():o.eventHistory.push({id:r,event:"split"}),null!=o.backButtonElem&&0!==o.eventHistory.length&&o.backButtonElem.fadeTo("slow",1),null!=o.titleElem){var a="";o.focusGroups.length>0&&(a+=o.focusGroups[0]),2===o.focusGroups.length&&(a+=" & "+o.focusGroups[1]),o.titleElem.text(a)}n.state.disableUpdate=!1,e.setLayout()}},{key:"setLayout",value:function(){var t,e=this,n=this.graph,o=n.state.SplitJoinViewPolicy;if(0===o.focusGroups.length){t=o.layoutDefault;var i=o.zoomDefault;n.zoomed(i[0],i[1])}else{var i=o.zooms[o.focusGroups];null!=i&&n.zoomed(i[0],i[1]),t=o.layout[o.focusGroups]}if(null!=t)_.forEach(n.nodes,function(e){var n=t[e.id];null==n&&console.log(t,e),e.x=n.x,e.y=n.y}),n.updateGraph.call(n,function(){e.updateGraphCallback.call(e)});else{n.state.initForce=!1,n.updateGraph(function(){e.updateGraphCallback.call(e)}),o.zooms[o.focusGroups]=[n.dragSvg.translate(),n.dragSvg.scale()];var t={};_.forEach(n.nodes,function(e){t[e.id]={x:e.x,y:e.y}}),o.layout[o.focusGroups]=t}}},{key:"__joinNode",value:function(t){var n=this.graph,o=n.state.SplitJoinNodePolicy,i=n.state.SplitJoinViewPolicy;if(-1!=n.nodes.indexOf(t)){var r=n.dataSource.children_struct,a=t.id;if(!(r.topLevel.indexOf(a)>-1)){for(var s=t.parent,l=[],c=[],u=0;u<n.nodes.length;u++)-1==n.nodes[u].ancestors.indexOf(t.parent)?c.push(n.nodes[u].id):l.push(n.nodes[u]);var d=t.parent;c.push(t.parent);var p=n.dataSource.ancestors_struct,r=n.dataSource.children_struct,f=i.focusGroups.indexOf(s);null!=p[s]?i.focusGroups[f]=p[s]:i.focusGroups.splice(f,1);var v=[];if(1===i.focusGroups.length){var h=p[t.id];h.push(i.focusGroups[0]),h=h.concat(p[i.focusGroups[0]]||[]),_.forEach(r.topLevel,function(t){-1===h.indexOf(t)&&-1==c.indexOf(t)&&v.push(t)}),c=c.concat(v)}else 0===i.focusGroups.length&&(_.forEach(r.topLevel,function(t){-1==c.indexOf(t)&&v.push(t)}),c=c.concat(v));var y=t.radius/n.consts.radiusDecay,g=t.x,m=t.y,s=t.ancestors[1],h=t.ancestors.slice(1),P=new e.Node(g,m,d,d,y,s,h);n.nodes.push(P);for(var u=0;u<l.length;u++){var b=l[u];n.nodes.splice(n.nodes.indexOf(b),1),n.spliceLinksForNode(b)}for(var w=n.dataSource.getFlowBetweenSet(c),k=[],S=w.nodeData,u=0;u<S.length;u++)-1!==v.indexOf(S[u].id)&&k.push(S[u]);var E=n.dataSource.processNodeData(k);_.forEach(E,function(t){t.radius=t.radius||n.consts.startRadius}),n.nodes=n.nodes.concat(E),n.links=n.dataSource.processLinkData(w.linkData,n.nodes),1===i.focusGroups.length?_.forEach(n.links,function(t){-1!==v.indexOf(t.source.id)?i.focusGroups[0]===t.target.parent&&v.splice(v.indexOf(t.source.id),1):-1!==v.indexOf(t.target.id)&&i.focusGroups[0]===t.source.parent&&v.splice(v.indexOf(t.target.id),1)}):v=[];var N=[];if(0!==v.length)for(var u=0;u<n.nodes.length&&(-1===v.indexOf(n.nodes[u].id)||(v.splice(v.indexOf(n.nodes[u].id),1),n.spliceLinksForNode(n.nodes[u]),N.push(n.nodes[u]),0!==v.length));u++);return _.forEach(N,function(t){n.nodes.splice(n.nodes.indexOf(t),1)}),n.initNodes(),n.initLinks(),o.splitNodes.splice(o.splitNodes.indexOf(P.id),1),P}}}},{key:"joinNodeEvent",value:function(t){var e=this.graph,n=this,o=e.state.SplitJoinViewPolicy;0!==o.eventHistory.length&&o.eventHistory[o.eventHistory.length-1].id===t.id?o.eventHistory.pop():o.eventHistory.push({id:t.id,event:"join"});var i=e.dataSource.children_struct;if(_.forEach(e.nodes,function(t){t.SplitJoinViewPolicy={},_.includes(i[o.focusGroups[0]],t.id)?t.SplitJoinViewPolicy.type="focus":t.SplitJoinViewPolicy.type="connected"}),null!=o.backButtonElem&&0===o.eventHistory.length&&o.backButtonElem.fadeTo("slow",0),null!=o.titleElem){var r="";o.focusGroups.length>0&&(r+=o.focusGroups[0]),2===o.focusGroups.length&&(r+=" & "+o.focusGroups[1]),o.titleElem.text(r)}n.setLayout()}},{key:"undoLastEvent",value:function(){var t,e=this.graph,o=this,i=e.state.SplitJoinViewPolicy,r=i.eventHistory[i.eventHistory.length-1],a=r.id;if("join"===r.event){t=e.findNodeById(a);var s=e.findD3Node(a);o.dblclick(s,t)}else{var l=e.dataSource.children_struct[a][0];t=e.findNodeById(l),_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"joinNode",this).call(o,t)}}}]),n}(t.Policy);return{Policy:n}}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networks.list",{url:"/list",component:"networkList"}).state("contiv.menu.networks.details",{url:"/details/:key",component:"networkdetails"}).state("contiv.menu.networks.create",{url:"/create",component:"networkcreate"})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.organizations.list",{url:"/list",component:"organizationlist"})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.servicelbs.list",{url:"/list",component:"servicelbList"}).state("contiv.menu.servicelbs.create",{url:"/create",component:"servicelbCreate"}).state("contiv.menu.servicelbs.details",{url:"/details/:key",component:"servicelbDetails"})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""}).state("contiv.menu.settings.details.networks",{url:"/networks",component:"networksetting"}).state("contiv.menu.settings.details.volumes",{url:"/volumes",component:"volumesetting"})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.storagepolicies.list",{url:"/list",component:"storagepolicylist"})}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(t){t.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(t){t.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.volumes.list",{url:"/list",component:"volumelist"}).state("contiv.menu.volumes.details",{url:"/details/:key",component:"volumedetails"})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(t,e){
t.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),e.otherwise("/")}]),angular.module("contiv.login").config(["$stateProvider",function(t){t.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(t,e){function n(){t.go("contiv.menu.dashboard",{username:i.username})}function o(){n()}var i=this;e.stopLoader(i),e.hideServerError(i),i.login=o}]),angular.module("contiv.menu").config(["$stateProvider",function(t){t.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(t,e){function n(){t.go("contiv.login")}var o=this;o.username=e.username,o.logout=n}]),angular.module("contiv.nodes").factory("BgpService",["$http","$q",function(t,e){function n(n){var o=e.defer(),i=ContivGlobals.BGPS_ENDPOINT+n.key+"/";return t.get(i).then(function(t){o.resolve(t.data),n.neighbor=t.data,n.neighbors.push({name:n.neighbor.neighbor,value:n.neighbor["neighbor-as"]})},function(t){o.reject(t.data)}),o.promise}function o(e){var n=ContivGlobals.BGPS_ENDPOINT+e.key+"/";return t.post(n,e.neighbor)}function i(n){var o=e.defer(),i=ContivGlobals.BGPS_INSPECT_ENDPOINT+n+"/";return t.get(i).then(function(t){o.resolve(t.data)},function(t){o.reject(t.data)}),o.promise}return{getBgp:n,updateBgp:o,getBgpInspect:i}}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(t,e){function n(){var n=e.defer(),o=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return t.get(o).then(function(t){n.resolve(t.data)},function(t){n.reject(t.data)}),n.promise}function o(){var n=e.defer(),o=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return t.get(o).then(function(t){n.resolve(t.data)},function(t){n.reject(t.data)}),n.promise}return{getActiveLogs:n,getLastLogs:o}}]),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(t,e,n){function o(){n.getActiveLogs().then(function(t){i.activeLogs=t},function(t){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;o();var r;angular.isDefined(r)||(r=e(function(){o()},ContivGlobals.REFRESH_INTERVAL)),t.$on("$destroy",function(){e.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(t,e,n,o,i){function r(){t.go("contiv.menu.nodes.details.info",{key:e.key})}function a(){r()}function s(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.nodeOpsObj.nodes=[e.key],i.cleanupExtraVars(l),i.createExtraVars(l),n.commission(l.nodeOpsObj).then(function(t){o.stopLoader(l),r()},function(t){o.stopLoader(l),o.showServerError(l,t)}))}var l=this;l.nodeOpsObj={},l.extra_vars={},l.ansibleVariables=[],l.envVariables=[],i.getSettings(l),l.cancelCommissioningNode=a,l.commission=s,o.stopLoader(l),o.hideServerError(l)}]),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"}).state("contiv.menu.nodes.details.edit",{url:"/edit",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel","BgpService",function(t,e,n,o,i,r){function a(){var t={nodes:[e.key]};i.decommission(t).then(function(t){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function s(){var t={nodes:[e.key]};i.upgrade(t).then(function(t){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function l(){switch(h.node.inventory_state.status){case"Unallocated":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Decommissioned":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Provisioning":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Allocated":h.showCommissionButton=!1,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!0;break;case"Cancelled":h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Maintenance":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;default:h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1}}function c(t){i.getModelByKey(e.key,t).then(function(t){h.node=t,l()})}function u(){t.is("contiv.menu.nodes.details.edit")?h.mode="edit":h.mode="details"}function d(){t.go("contiv.menu.nodes.details.info")}function p(){h.form.$valid&&(h.neighbor.key=e.key,h.neighbors.forEach(function(t){h.neighbor.neighbor=t.name,h.neighbor["neighbor-as"]=t.value}),r.updateBgp(h).then(function(t){h.neighbor=t.config.data,d()},function(t){}))}function f(){r.getBgp(h).then(function(t){h.neighbor=t},function(t){})}function v(){r.getBgpInspect(e.key).then(function(t){h.inspect=t,h.routes=t.Oper.routes,h.filteredroutes=t.Oper.routes},function(t){})}var h=this;h.numberpattern=ContivGlobals.NUMBER_REGEX,h.decommission=a,h.upgrade=s,h.setMode=u,h.updateBgpInfo=p,h.returnToInfo=d,h.neighbors=[],h.neighbor={},h.key=e.key,f(),v(),u(),c(!1);var y;angular.isDefined(y)||(y=o(function(){c(!0)},5e3)),n.$on("$destroy",function(){o.cancel(y)})}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(t,e,n,o,i){function r(){t.go("contiv.menu.nodes.list")}function a(){r()}function s(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),l(),i.createExtraVars(c),n.discover(c.nodeOpsObj).then(function(t){o.stopLoader(c),r()},function(t){o.stopLoader(c),o.showServerError(c,t)}))}function l(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=s,c.cancelDiscoveringNode=a,o.stopLoader(c),o.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(t,e,n){function o(){n.getLastLogs().then(function(t){i.lastLogs=t},function(t){})}var i=this;o();var r;angular.isDefined(r)||(r=e(function(){o()},ContivGlobals.REFRESH_INTERVAL)),t.$on("$destroy",function(){e.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(t){t.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(t,e,n,o,i){function r(t){o.get(t).then(function(t){i.stopLoader(a),a.nodes=t},function(t){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=e(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),t.$on("$destroy",function(){e.cancel(s)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(t){t.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","OrganizationsModel","CRUDHelperService",function(t,e,n){function o(){t.go("contiv.menu.organizations.list")}function i(){o()}function r(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newOrganization.key=s.newOrganization.tenantName,e.create(s.newOrganization).then(function(t){n.stopLoader(s),o()},function(t){n.stopLoader(s),n.showServerError(s,t)}))}function a(){n.stopLoader(s),n.hideServerError(s),s.newOrganization={tenantName:""}}var s=this;s.createOrganization=r,s.cancelCreating=i,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(t){t.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(t,e,n,o){function i(){t.go("contiv.menu.organizations.list")}function r(){o.hideServerError(a),o.startLoader(a),n["delete"](a.organization).then(function(t){o.stopLoader(a),i()},function(t){o.stopLoader(a),o.showServerError(a,t)})}var a=this;o.stopLoader(a),o.hideServerError(a),n.getModelByKey(e.key).then(function(t){a.organization=t}),a.deleteOrganization=r}]),angular.module("contiv.settings").config(["$stateProvider",function(t){t.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(t,e,n){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),i.nodeOpsObj.nodes=[t.key],n.cleanupExtraVars(i),n.createExtraVars(i),n.updateSettings(i.nodeOpsObj).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],n.getSettings(i),i.updateClusterSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(t){t.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(t,e,n,o){function i(){t.go("contiv.menu.storagepolicies.list")}function r(){i()}function a(){c.filesystemcmds.forEach(function(t){c.newStoragePolicy.filesystems[t.name]=t.value})}function s(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),a(),n.create(c.newStoragePolicy).then(function(t){o.stopLoader(c),i()},function(t){o.stopLoader(c),o.showServerError(c,t)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=s,c.cancelCreating=r,c.filesystemcmds=[],l()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(t){t.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(t,e,n,o,i,r,a,s){function l(){t.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function c(){t.go("contiv.menu.storagepolicies.list")}function u(){t.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){s.hideServerError(g),s.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(t){s.stopLoader(g),c()},function(t){s.stopLoader(g),s.showServerError(g,t)})}function f(t){a.get(t).then(function(t){g.volumes=i("orderBy")(_.filter(t,{policy:g.policy.name}),"name")})}function v(){angular.forEach(g.policy.filesystems,function(t,e){this.push({name:e,value:t})},g.filesystemcmds)}function h(){g.filesystemcmds.forEach(function(t){g.policy.filesystems[t.name]=t.value})}function y(){g.form.$valid&&(s.hideServerError(g),s.startLoader(g),h(),r.save(g.policy).then(function(t){s.stopLoader(g),u()},function(t){s.stopLoader(g),s.showServerError(g,t)}))}var g=this;g.filesystemcmds=[],s.stopLoader(g),s.hideServerError(g),r.getModelByKey(e.key,!1,"name").then(function(t){g.policy=t,v(),f(!1)}),g.deletePolicy=p,g.savePolicy=y,g.cancelEditing=d,l();var m;angular.isDefined(m)||(m=o(function(){f(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(m)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(t){t.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.visualization").config(["$stateProvider",function(t){t.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(t,e,n,o,i,r){var a=o.sourceName,s=o.targetName,l=o.sourceList,c=o.targetList;if(null==l||null==c)return void n.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();t.edgeDataInterval=r(function(){i.getEdgeData(l,c,d.toString()).then(function(e){var n=e.results,o=0;_.forEach(n,function(t){_.isEmpty(t)===!1&&(o+=t.series[0].values[0][1])}),t.sourceName=a,t.targetName=s,t.edgeData=o,t.edgeDataTime=d},function(t){})},3e3),t.$on("$destroy",function(){r.cancel(t.edgeDataInterval)}),i.getOldEdgeData(l,c).then(function(e){var n=e.results,o=[];_.forEach(n,function(t){if(_.isEmpty(t)===!1){var e=t.series[0].values;_.isEmpty(o)?_.forEach(e,function(t){o.push(t[1])}):_.forEach(e,function(t,e){o[e]+=t[1]})}}),t.sourceName=a,t.targetName=s,t.sourceList=l,t.targetList=c,t.oldEdgeData=o},function(t){})}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(t){function e(t,e){function n(){l=new Date;for(var e in c){var o=c[e];o.data.push(t.edgeData||0),o.path.attr("d",p)}u.domain([l-(a-2)*s,l-s]),y.transition().duration(s).ease("linear").call(u.axis),v.transition().duration(s).ease("linear").call(d.axis),g.attr("transform",null).transition().duration(s).ease("linear").attr("transform","translate("+u(l-(a-1)*s)+")").each("end",function(){n()});for(var e in c){var o=c[e];o.data.shift()}}var o=document.getElementsByTagName("body")[0],i=o.clientWidth-400,r=o.clientHeight-400,a=59,s=750,l=new Date(Date.now()-s),c={current:{value:0,color:"orange",data:e.range(a).map(function(e){return t.oldEdgeData[Math.floor(e/10)]||0})}},u=e.time.scale().domain([l-(a-2),l-s]).range([0,i]),d=e.scale.linear().domain([0,e.max(c.current.data,function(t){return t+10})]).range([r,0]),p=e.svg.line().interpolate("basis").x(function(t,e){return u(l-(a-1-e)*s)}).y(function(t){return d(t)}),f=e.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),v=f.append("g").attr("class","y axis").call(d.axis=e.svg.axis().scale(d).orient("left")),h=e.select(".graph").append("svg").attr("class","chart").attr("width",i-50).attr("height",r+50),y=h.append("g").attr("class","x axis").attr("transform","translate(0,"+r+")").call(u.axis=e.svg.axis().scale(u).orient("bottom")),g=h.append("g");for(var m in c){var P=c[m];P.path=g.append("path").data([P.data]).attr("class",m+" group").style("stroke",P.color)}n()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(n){n.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=n.edgeData&&null!=n.oldEdgeData&&!n.initialize){n.initialize=!0;var o=t.d3;e(n,o)}})}}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(t,e,n,o,i,r){function a(t,n,o,i,r,a){if(void 0!==t.nodes&&void 0!==t.links&&void 0!==t.children_struct&&void 0!==t.ancestors_struct){var s=new r.DataSource(t.nodes,t.links,t.children_struct,t.ancestors_struct,t.labels,t.serviceSelectors);s.setAncestors();var l,c,u=s.getTopLevelFlow();l=s.processNodeData(u.nodeData),c=s.processLinkData(u.linkData,l);var d=document.getElementsByTagName("body")[0],p=(d.clientWidth,d.clientHeight),f=n.find("svg"),v=$(f.parent()).offset(),h=$(f.parent()).width(),y=d3.select(f[0]).attr("width",h).attr("height",p-v.top-20);t.visualizationGraph=new o.Graph(y,l,c,s,t.children_struct,t.ancestors_struct),t.visualizationGraph.installDefaultPathPolicy(new i.SaveStatePolicy(a.savedStates)),t.visualizationGraph.installDefaultPathPolicy(new i.PathChangeViewPolicy(e));var g=new i.QTipPolicy;t.visualizationGraph.installDefaultNodePolicy(g),t.visualizationGraph.installDefaultPathPolicy(g);var m=new i.SplitJoinViewPolicy;if(t.visualizationGraph.installDefaultNodePolicy(m),m.installBackButton($("#backButton")),m.installTitle($("#graph-title")),0==_.isEmpty(a.savedStates)){var P=t.visualizationGraph;P.load(a.savedStates)}else t.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(t,e){t.$on("$destroy",function(){$("#visualization-graph").unbind(),t.visualizationGraph.destroy()}),t.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=t.nodes&&null!=t.links&&null!=t.children_struct&&null!=t.ancestors_struct&&(t.initialized?(t.visualizationGraph.dataSource.links=t.links,t.visualizationGraph.updateLinkData()):(t.initialized=!0,a(t,e,n,o,i,r)))})}}}]),angular.module("contiv.visualization").config(["$stateProvider",function(t){t.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(t,e,n,o){var i=function(e){var n=[],o=[],i=[];_.forEach(e.results[0].series,function(t){var e,r=t.tags.EndpointIP,a=t.tags.ProviderIP;0==_.includes(i,r)&&(e={name:r,id:r,parent:null,ancestors:null},n.push(e),i.push(r)),0==_.includes(i,a)&&(e={name:a,id:a,parent:null,ancestors:null},n.push(e),i.push(a));var s={source:r,target:a,weight:t.values[0][2]};o.push(s);var l={source:a,target:r,weight:t.values[0][1]};o.push(l)}),t.nodes=n,t.links=o};n.getGraphData().then(i,function(t){}),t.$on("$destroy",function(){o.cancel(t.graphDataInterval)}),n.getStructureData().then(function(e){t.ancestors_struct=e.ancestors_struct,t.children_struct=e.children_struct,t.labels=e.labels,t.serviceSelectors=e.serviceSelectors},function(t){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(t,e){function n(n,o){var i=e.defer();return t.get(n,o).then(function(t){i.resolve(t.data)},function(t){i.reject(t.data)}),i.promise}function o(n,o){var i=function(t){var e,n,o,r,a,s,l,c="";for(e in t)if(n=t[e],n instanceof Array)for(l=0;l<n.length;++l)a=n[l],o=e+"["+l+"]",s={},s[o]=a,c+=i(s)+"&";else if(n instanceof Object)for(r in n)a=n[r],o=e+"["+r+"]",s={},s[o]=a,c+=i(s)+"&";else void 0!==n&&null!==n&&(c+=encodeURIComponent(e)+"="+encodeURIComponent(n)+"&");return c.length?c.substr(0,c.length-1):c},r=e.defer();return t({url:n,method:"POST",data:o,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(t){return angular.isObject(t)&&"[object File]"!==String(t)?i(t):t}]}).then(function(t){r.resolve(t.data)},function(t){r.reject(t.data)}),r.promise}function i(){var t=ContivGlobals.VISUALIZATION_ENDPOINT;t+="influx/query";var e={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return n(t,e)}function r(){var t=ContivGlobals.VISUALIZATION_ENDPOINT;return t+="services",n(t)}function a(t,e){var n="(";n+=e+"=",n+="'"+t[0]+"' ";for(var o=1;o<t.length;o++)n+="OR ",n+=e+"=",n+="'"+t[o]+"' ";return n+=")"}function s(t,e,n){var i=ContivGlobals.VISUALIZATION_ENDPOINT;i+="influx/query";var r={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+a(t,"EndpointIP")+" AND "+a(e,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+a(t,"ProviderIP")+" AND "+a(e,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return o(i,r)}function l(t,e){var n=ContivGlobals.VISUALIZATION_ENDPOINT;n+="influx/query";var i={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(t,"EndpointIP")+" AND "+a(e,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(t,"ProviderIP")+" AND "+a(e,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return o(n,i)}return{getGraphData:i,getStructureData:r,getEdgeData:s,getOldEdgeData:l}}]),angular.module("contiv.volumes").config(["$stateProvider",function(t){t.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(t,e,n,o,i){function r(){t.go("contiv.menu.volumes.list")}function a(){r()}function s(){o.get().then(function(t){d.policies=t})}function l(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),l(),n.create(d.newVolume).then(function(t){i.stopLoader(d),r()},function(t){i.stopLoader(d),i.showServerError(d,t)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=a,s(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(t){t.state("contiv.menu.volumes.copy",{url:"/copy/",params:{snapshot:null,policy:null,volume:null},controller:"VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl",templateUrl:"volumes/volumesnapshotcopy.html"})}]).controller("VolumeSnapshotCopyCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","CRUDHelperService",function(t,e,n,o,i,r,a){function s(){t.go("contiv.menu.volumes.details",{key:e.policy+"/"+e.volume})}function l(){t.go("contiv.menu.volumes.details",{key:e.policy+"/"+u.newvolume})}function c(){if(u.form.$valid){a.hideServerError(u),a.startLoader(u);var t={};t.policy=e.policy,t.name=e.volume,r.copy(t,e.snapshot,u.newvolume).then(function(t){a.stopLoader(u),l()},function(t){a.stopLoader(u),a.showServerError(u,t)})}}var u=this;u.policy=e.policy,u.volume=e.volume,u.snapshot=e.snapshot,u.copySnapshot=c,u.cancelCopy=s}]),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,
