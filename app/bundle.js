
function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o),this.inspectStats={}}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy/",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","$stateParams","ApplicationGroupsModel","NetworksModel","PoliciesModel","NetprofilesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l,a,s){function c(){e.go("contiv.menu.applicationgroups.list")}function u(){c()}function d(){n.get().then(function(e){h.networks=_.filter(e,{tenantName:"default"})})}function p(){i.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function v(){a.addIsolationPolicy(h)}function m(e){a.removeIsolationPolicy(h,e)}function f(){h.form.$valid&&(s.hideServerError(h),s.startLoader(h),h.applicationGroup.networkName=h.selectedNetwork.networkName,h.applicationGroup.netProfile=h.selectedNetprofile.profileName,h.applicationGroup.key=o.generateKey(h.applicationGroup),o.create(h.applicationGroup).then(function(e){s.stopLoader(h),c()},function(e){s.stopLoader(h),s.showServerError(h,e)}))}function g(){s.stopLoader(h),s.hideServerError(h),h.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var h=this;h.networks=[],h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.selectedNetprofile={},h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,d(),p(),h.createApplicationGroup=f,h.cancelCreating=u,h.addIsolationPolicy=v,h.removeIsolationPolicy=m,g()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","NetprofilesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l,a){function s(){e.is("contiv.menu.applicationgroups.edit")?E.mode="edit":E.mode="details"}function c(){e.go("contiv.menu.applicationgroups.list")}function u(){e.go("contiv.menu.applicationgroups.details",{key:E.applicationGroup.key})}function d(){u()}function p(){E.applicationGroup.policies.forEach(function(e){r.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(E.incomingRules,e)}),r.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(E.outgoingRules,e)})})}function v(){a.hideServerError(E),a.startLoader(E),o["delete"](E.applicationGroup).then(function(e){a.stopLoader(E),c()},function(e){a.stopLoader(E),a.showServerError(E,e)})}function m(){n.get().then(function(e){E.isolationPolicies=_.filter(e,{tenantName:"default"})})}function f(){l.addIsolationPolicy(E)}function g(e){l.removeIsolationPolicy(E,e)}function h(){a.hideServerError(E),a.startLoader(E),E.applicationGroup.netProfile=E.selectedNetprofile.profileName,o.save(E.applicationGroup).then(function(e){a.stopLoader(E),u()},function(e){a.stopLoader(E),a.showServerError(E,e)})}var E=this;E.isolationPolicies=[],E.applicationGroup={},E.selectedNetwork={},E.selectedPolicy={},E.selectedPolicies=[],E.selectedNetprofile={},E.incomingRules=[],E.outgoingRules=[],E.isolationPoliciesVisible=!1,a.stopLoader(E),a.hideServerError(E),o.getModelByKey(t.key).then(function(e){E.applicationGroup=e,void 0===E.applicationGroup.policies&&(E.applicationGroup.policies=[]),p()}),m(),E.saveApplicationGroup=h,E.cancelEditing=d,E.addIsolationPolicy=f,E.removeIsolationPolicy=g,E.deleteApplicationGroup=v,s()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.applicationgroups").controller("NetprofileCtrl",["$scope","NetprofilesModel",function(e,t){function o(){t.get().then(function(t){e.netProfiles=_.filter(t,{tenantName:"default"})})}o()}]).directive("ctvNetprofiles",function(){return{restrict:"E",scope:{type:"@",netprofile:"="},controller:"NetprofileCtrl",templateUrl:"applicationgroups/netprofiles.html"}}),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,a){function s(e){o.get(e).then(function(e){c.nodes=e.length}),n.get(e).then(function(e){c.networks=e.length}),i.get(e).then(function(e){c.volumes=e.length}),r.get(e).then(function(e){c.groups=e.length}),l.get(e).then(function(e){c.networkpolicies=e.length}),a.get(e).then(function(e){c.storagepolicies=e.length})}var c=this;c.nodes=0,c.networks=0,c.volumes=0,c.groups=0,c.networkpolicies=0,c.storagepolicies=0,s(!1);var u=t(function(){s(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").directive("ctvBandwidth",function(){return{restrict:"E",scope:{bandwidthPolicy:"=",mode:"@"},link:function(e){if(""!=e.bandwidthPolicy.bandwidth){var t=e.bandwidthPolicy.bandwidth.split(" ");e.bandwidthPolicy.bandwidthNumber=Number(t[0]),e.bandwidthPolicy.bandwidthUnit=t[1]}},templateUrl:"network_policies/bandwidth.html"}}),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",controller:"BandwidthPolicyCreateCtrl as bandwidthPolicyCreateCtrl",templateUrl:"network_policies/bandwidthpolicycreate.html"})}]).controller("BandwidthPolicyCreateCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networkpolicies.bandwidth.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newPolicy.key=o.generateKey(s.newPolicy),s.newPolicy.bandwidth=s.newPolicy.bandwidthNumber+" "+s.newPolicy.bandwidthUnit,o.create(s.newPolicy).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function a(){n.stopLoader(s),n.hideServerError(s),s.newPolicy={profileName:"",tenantName:"default",bandwidth:"",DSCP:""}}var s=this;s.createPolicy=l,s.cancelCreating=r,a()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).controller("BandwidthPolicyDetailsCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.networkpolicies.bandwidth.edit")?u.mode="edit":u.mode="details"}function r(){n.hideServerError(u),n.startLoader(u),o.deleteUsingKey(u.policy.key,"name").then(function(e){n.stopLoader(u),l()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function l(){e.go("contiv.menu.networkpolicies.bandwidth.list")}function a(){e.go("contiv.menu.networkpolicies.bandwidth.details",{key:u.policy.key})}function s(){a()}function c(){u.form.$valid&&(n.hideServerError(u),n.startLoader(u),u.policy.bandwidth=u.policy.bandwidthNumber+" "+u.policy.bandwidthUnit,o.save(u.policy).then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)}))}var u=this;u.bandwidthProfiles=[],o.getModelByKey(t.key).then(function(e){u.policy=e}),n.stopLoader(u),n.hideServerError(u),i(),u.deletePolicy=r,u.savePolicy=c,u.cancelEditing=s}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.list",{url:"/list",controller:"BandwidthPolicyListCtrl as bandwidthPolicyListCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"})}]).controller("BandwidthPolicyListCtrl",["$scope","$interval","$filter","NetprofilesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"profileName")},function(e){i.stopLoader(l)})}var l=this;r(!0);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){a.form.$valid&&(o.hideServerError(a),o.startLoader(a),a.newPolicy.key=t.generateKey(a.newPolicy),t.create(a.newPolicy).then(function(e){o.stopLoader(a),n()},function(e){o.stopLoader(a),o.showServerError(a,e)}))}function l(){o.stopLoader(a),o.hideServerError(a),a.newPolicy={policyName:"",tenantName:"default"}}var a=this;a.createPolicy=r,a.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.networkpolicies.isolation.list")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:k.policy.key})}function c(){s()}function u(){s()}function d(){l.hideServerError(k),l.startLoader(k),o["delete"](k.policy).then(function(e){l.stopLoader(k),a()},function(e){l.stopLoader(k),l.showServerError(k,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?k.mode="edit":k.mode="details"}function v(){k.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:k.policy.policyName},k.newIncomingSelectedApplicationGroup="",k.disableIncomingNetworkSelection=!1,k.disableIncomingApplicationGroupSelection=!1}function m(){k.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:k.policy.policyName},k.newOutgoingSelectedApplicationGroup="",k.disableOutgoingNetworkSelection=!1,k.disableOutgoingApplicationGroupSelection=!1}function f(){i.get().then(function(e){k.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){k.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=k.newOutgoingSelectedApplicationGroup?(k.newOutgoingRule.toEndpointGroup=k.newOutgoingSelectedApplicationGroup.groupName,k.newOutgoingRule.toNetwork="",k.disableOutgoingNetworkSelection=!0):(k.newOutgoingRule.toEndpointGroup="",k.disableOutgoingNetworkSelection=!1)}function E(){null!=k.newIncomingSelectedApplicationGroup?(k.newIncomingRule.fromEndpointGroup=k.newIncomingSelectedApplicationGroup.groupName,k.newIncomingRule.fromNetwork="",k.disableIncomingNetworkSelection=!0):(k.newIncomingRule.fromEndpointGroup="",k.disableIncomingNetworkSelection=!1)}function N(){null!=k.newOutgoingRule.toNetwork?(k.newOutgoingRule.ToEndpointGroup="",k.disableOutgoingApplicationGroupSelection=!0):k.disableOutgoingApplicationGroupSelection=!1}function C(){null!=k.newIncomingRule.fromNetwork?(k.newIncomingRule.fromEndpointGroup="",k.disableIncomingApplicationGroupSelection=!0):k.disableIncomingApplicationGroupSelection=!1}function S(e){e.ruleId=(k.incomingRules.length+k.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function y(){l.hideServerError(k),l.startLoader(k),S(k.newIncomingRule),k.newIncomingRule.key=n.generateKey(k.newIncomingRule),n.create(k.newIncomingRule).then(function(e){l.stopLoader(k),k.incomingRules.push(e),v()},function(e){l.stopLoader(k),l.showServerError(k,e)})}function w(){l.hideServerError(k),l.startLoader(k),S(k.newOutgoingRule),k.newOutgoingRule.key=n.generateKey(k.newOutgoingRule),n.create(k.newOutgoingRule).then(function(e){l.stopLoader(k),k.outgoingRules.push(e),m()},function(e){l.stopLoader(k),l.showServerError(k,e)})}function P(e){l.hideServerError(k),l.startLoader(k),n.deleteUsingKey(e).then(function(t){l.stopLoader(k),_.remove(k.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(k),l.showServerError(k,e)})}function b(e){l.hideServerError(k),l.startLoader(k),n.deleteUsingKey(e).then(function(t){l.stopLoader(k),_.remove(k.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(k),l.showServerError(k,e)})}var k=this;k.networks=[],k.applicationGroups=[],k.disableOutgoingNetworkSelection=!1,k.disableIncomingNetworkSelection=!1,k.disableOutgoingApplicationGroupSelection=!1,k.disableIncomingApplicationGroupSelection=!1,k.newIncomingSelectedApplicationGroup="",k.newOutgoingSelectedApplicationGroup="",l.stopLoader(k),l.hideServerError(k),o.getModelByKey(t.key).then(function(e){k.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){k.incomingRules=e,v()}),n.getOutgoingRules(e.policyName,"default").then(function(e){k.outgoingRules=e,m()})}),f(),g(),k.deletePolicy=d,k.deleteIncomingRule=P,k.deleteOutgoingRule=b,k.addIncomingRule=y,k.addOutgoingRule=w,k.doneEditing=u,k.cancelEditing=c,k.onChangeOutgoingApplicationGroupSelection=h,k.onChangeIncomingApplicationGroupSelection=E,k.onChangeOutgoingNetworkSelection=N,k.onChangeIncomingNetworkSelection=C,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function a(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=l,s.cancelCreating=r,a()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"}).state("contiv.menu.networks.details.info",{url:"/info",templateUrl:"networks/networkinfo.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,a){function s(){e.go("contiv.menu.networks.list")}function c(){a.hideServerError(d),a.startLoader(d),r["delete"](d.network).then(function(e){a.stopLoader(d),s()},function(e){a.stopLoader(d),a.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;a.stopLoader(d),a.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=c;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details.stats",{url:"/stats",controller:"NetworkStatsCtrl as networkStatsCtrl",templateUrl:"networks/networkstats.html"})}]).controller("NetworkStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","InspectService",function(e,t,o,n,i,r,l){function a(e){r.getInspectByKey(t.key,ContivGlobals.NETWORKS_INSPECT_ENDPOINT,e).then(function(e){s.networkInspectStats=e.Oper;var t=i("orderBy")(e.Oper.endpoints,"name"),o=l.buildEndPoints(t);l.checkContainerChanged(s.containerDetails,o)&&(s.endpoints=t,s.containerDetails=o)})}var s=this;a(!1);var c;angular.isDefined(c)||(c=n(function(){a(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(){var o=t.defer(),n=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}return{getActiveLogs:o,getLastLogs:n}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getActiveLogs().then(function(e){i.activeLogs=e},function(e){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){r()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.nodeOpsObj.nodes=[t.key],i.cleanupExtraVars(s),i.createExtraVars(s),o.commission(s.nodeOpsObj).then(function(e){n.stopLoader(s),r()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}var s=this;s.nodeOpsObj={},s.extra_vars={},s.ansibleVariables=[],s.envVariables=[],i.getSettings(s),s.cancelCommissioningNode=l,s.commission=a,n.stopLoader(s),n.hideServerError(s)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){c.showCommissionButton=!1,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){c.showCommissionButton=!1,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1})}function a(){switch(c.node.inventory_state.status){case"Unallocated":c.showCommissionButton=!0,c.commissionButtonEnabled=!0,c.upgradeButtonEnabled=!1;break;case"Decommissioned":c.showCommissionButton=!0,c.commissionButtonEnabled=!0,c.upgradeButtonEnabled=!1;break;case"Provisioning":c.showCommissionButton=!0,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1;break;case"Allocated":c.showCommissionButton=!1,c.commissionButtonEnabled=!0,c.upgradeButtonEnabled=!0;break;case"Cancelled":c.showCommissionButton=!1,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1;break;case"Maintenance":c.showCommissionButton=!0,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1;break;default:c.showCommissionButton=!0,c.commissionButtonEnabled=!1,c.upgradeButtonEnabled=!1}}function s(e){i.getModelByKey(t.key,e).then(function(e){c.node=e,a()})}var c=this;c.decommission=r,c.upgrade=l,s(!1);var u;angular.isDefined(u)||(u=n(function(){s(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.list")}function l(){r()}function a(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),s(),i.createExtraVars(c),o.discover(c.nodeOpsObj).then(function(e){n.stopLoader(c),r()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=a,c.cancelDiscoveringNode=l,n.stopLoader(c),n.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",
template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getLastLogs().then(function(e){i.lastLogs=e},function(e){})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.organizations.list")}function r(){i()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newOrganization.key=s.newOrganization.tenantName,o.create(s.newOrganization).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function a(){n.stopLoader(s),n.hideServerError(s),s.newOrganization={tenantName:""}}var s=this;s.createOrganization=l,s.cancelCreating=r,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.organizations.list")}function s(){l.hideServerError(c),l.startLoader(c),r["delete"](c.organization).then(function(e){l.stopLoader(c),a()},function(e){l.stopLoader(c),l.showServerError(c,e)})}var c=this;l.stopLoader(c),l.hideServerError(c),r.getModelByKey(t.key).then(function(e){c.organization=e}),c.deleteOrganization=s}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.organizations=o("orderBy")(e,"tenantName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function a(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function c(){s(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=c,d.cancelCreating=l,a(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.details.info",{url:"/info",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"}).state("contiv.menu.servicelbs.details.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.details.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details.info",{key:p.servicelb.key})}function a(){l()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function c(){n.hideServerError(p),n.startLoader(p);var e=p.servicelb.selectors;d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(t){p.servicelb.selectors=e,u(),n.stopLoader(p),n.showServerError(p,t)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){p.servicelb.selectors=[],angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=c,p.cancelEditing=a,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details.stats",{url:"/stats",controller:"ServicelbStatsCtrl as servicelbStatsCtrl",templateUrl:"service_lbs/servicelbstats.html"})}]).controller("ServicelbStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","ServicelbsModel","InspectService",function(e,t,o,n,i,r,l){function a(e){r.getInspectByKey(t.key,ContivGlobals.SERVICELBS_INSPECT_ENDPOINT,e).then(function(e){s.servicelbInspectStats=e.Oper;var t=i("orderBy")(e.Oper.providers,"name"),o=l.buildEndPoints(t);l.checkContainerChanged(s.providerDetails,o)&&(s.providers=t,s.providerDetails=o)})}var s=this;a(!1);var c;angular.isDefined(c)||(c=n(function(){a(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(e,t,o){function n(){i.form.$valid&&(t.hideServerError(i),t.startLoader(i),i.nodeOpsObj.nodes=[e.key],o.cleanupExtraVars(i),o.createExtraVars(i),o.updateSettings(i.nodeOpsObj).then(function(e){t.stopLoader(i)},function(e){t.stopLoader(i),t.showServerError(i,e)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],o.getSettings(i),i.updateClusterSettings=n,t.stopLoader(i),t.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.networks",{url:"/networks",controller:"NetworkSettingCtrl as networkSettingCtrl",templateUrl:"settings/networksettings.html"})}]).controller("NetworkSettingCtrl",["CRUDHelperService","NetworkService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;i.vlanPattern=ContivGlobals.VLAN_REGEX,i.vxlanPattern=ContivGlobals.VXLAN_REGEX,n(),i.updateNetworkSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function l(){c.filesystemcmds.forEach(function(e){c.newStoragePolicy.filesystems[e.name]=e.value})}function a(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),l(),o.create(c.newStoragePolicy).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){n.stopLoader(c),n.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=a,c.cancelCreating=r,c.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,l,a){function s(){e.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function c(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){a.hideServerError(g),a.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(e){a.stopLoader(g),c()},function(e){a.stopLoader(g),a.showServerError(g,e)})}function v(){angular.forEach(g.policy.filesystems,function(e,t){this.push({name:t,value:e})},g.filesystemcmds)}function m(){g.filesystemcmds.forEach(function(e){g.policy.filesystems[e.name]=e.value})}function f(){g.form.$valid&&(a.hideServerError(g),a.startLoader(g),m(),r.save(g.policy).then(function(e){a.stopLoader(g),u()},function(e){a.stopLoader(g),a.showServerError(g,e)}))}var g=this;g.filesystemcmds=[],a.stopLoader(g),a.hideServerError(g),r.getModelByKey(t.key,!1,"name").then(function(e){g.policy=e,v()}),g.deletePolicy=p,g.savePolicy=f,g.cancelEditing=d,s();var h;angular.isDefined(h)||(h=n(function(){},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){r()}function a(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=l,a(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.volumes.list")}function s(){r["delete"](v.volume).then(function(e){a()})}function c(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,u(),d()})}function u(){l.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function d(){l.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function p(e,t){r.copy(model,e,t).then(function(e){},function(e){})}var v=this;v.deleteVolume=s,v.copySnapshot=p,c(!1);var m;angular.isDefined(m)||(m=n(function(){c(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(m)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n}}]),angular.module("contiv.directives").directive("ctvAccordion",function(){return{restrict:"E",transclude:!0,scope:{items:"="},link:function(e,t){"function"==typeof t.find(".ui.accordion").accordion&&t.find(".ui.accordion").accordion()},templateUrl:"components/directives/accordion.html"}}),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(c.searchText=i,(void 0===n||0>n)&&(n=0),c.pageNo=n,void 0!==o.items){var r=e(o.items,c.searchText),l=Math.ceil(r.length/c.size);0==l&&(l=1),c.chunks=[];for(var a=0;l>a;a++)c.chunks.push({selected:!1,pageNo:a});if(n>=c.chunks.length&&(c.pageNo=0),c.chunks[c.pageNo].selected=!0,c.chunks.length>5){var s,u;s=c.pageNo-2,u=c.pageNo+3,0>s&&(u-=s,s=0),u>c.chunks.length&&(s-=u-c.chunks.length,u=c.chunks.length),o.paginationMenu.chunks=c.chunks.slice(s,u)}else o.paginationMenu.chunks=c.chunks;c.filteredItems=t(r,c.size,c.pageNo*c.size),o.filtereditems=c.filteredItems}return!1}function l(){var e;return e=c.pageNo<=0?0:c.pageNo-1,r(e)}function a(){var e;return e=c.pageNo+1,e>c.chunks.length-1&&(e=c.chunks.length-1),r(e)}function s(e){o.paginationMenu=e}var c=this;c.chunks=[],c.pageNo=0,c.size=parseInt(o.size,10),isNaN(c.size)&&(c.size=12),c.showChunk=r,c.showNextChunk=a,c.showPrevChunk=l,c.addPaginationMenu=s}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},Collection.prototype.getInspectByKey=function(e,t,o){var n=this,i=n.$q.defer();return e in n.inspectStats&&0==o?i.resolve(n.inspectStats[e]):n.$http.get(t+e+"/").then(function(t){var o=n.extract(t);n.inspectStats[e]=o,i.resolve(o)},function(e){i.reject(e)}),i.promise},angular.module("contiv.models").factory("NetprofilesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.NETPROFILES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.profileName},o}]),angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){function o(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}o.prototype=Object.create(BaseCollection.prototype),o.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},o.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},o.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("OrganizationsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.ORGANIZATIONS_ENDPOINT)}]),angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,l={volume:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,l).then(function(e){i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}}),angular.module("contiv.utils").factory("InspectService",function(){function e(e){var t={};for(var o in e){var n=[];for(var i in e[o]){var r={};switch(r.name=i,r.format="none",r.type="string",i){case"ipAddress":r.value=e[o][i].filter(function(e){return e.length>0}).join();break;case"labels":r.value=e[o][i].replace(/(map\[|\])/gi,"").replace(/(:)/gi,"=").split(" ").filter(function(e){return e.length>0}),r.format="label",r.type="array";break;default:r.value=e[o][i]}n.push(r)}t[e[o].name]=n}return t}function t(e,t){if(void 0==e)return!0;if(void 0!=e&&void 0!=t){if(Object.keys(e).length!=Object.keys(t).length)return!0;for(var o in t)if(!o in e)return!0;return!1}}return{buildEndPoints:e,checkContainerChanged:t}}),angular.module("contiv.utils").factory("NetworkService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NETWORK_SETTINGS_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data[0])},function(e){o.reject(e.data)}),o.promise}function n(t){return e.post(ContivGlobals.NETWORK_SETTINGS_ENDPOINT+"global/",t)}return{getSettings:o,updateSettings:n}}]),angular.module("contiv.utils").factory("NodesService",["$http","$q",function(e,t){function o(o){var r=t.defer(),l=ContivGlobals.NODES_SETTINGS_GET_ENDPOINT;return e.get(l).then(function(e){r.resolve(e.data),o.setting=e.data;var t=o.setting.extra_vars,l=t[s.SCHED_PROVIDER],a=t[s.CONTIV_NET_MODE];t[s.CONTROL_INTERFACE]&&(o.extra_vars[s.CONTROL_INTERFACE]=t[s.CONTROL_INTERFACE]),t[s.DATA_INTERFACE]&&(o.extra_vars[s.DATA_INTERFACE]=t[s.DATA_INTERFACE]),t[s.VIP_ADDR]&&(o.extra_vars[s.VIP_ADDR]=t[s.VIP_ADDR]),l&&(o.extra_vars[s.SCHED_PROVIDER]=l,"ucp-swarm"===l&&(o.extra_vars[s.UCP_BOOTSTRAP_NODE]=t[s.UCP_BOOTSTRAP_NODE])),a&&(o.extra_vars[s.CONTIV_NET_MODE]=a,"standalone"===a?o.extra_vars[s.FWD_MODE]=t[s.FWD_MODE]:"aci"===a&&(o.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]=t[s.APIC_CONTR_UNRESTRICT_MODE],o.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN]=t[s.APIC_EPG_BRIDGE_DOMAIN],o.extra_vars[s.APIC_LEAF_NODES]=t[s.APIC_LEAF_NODES],o.extra_vars[s.APIC_PASSWORD]=t[s.APIC_PASSWORD],o.extra_vars[s.APIC_PHYS_DOMAIN]=t[s.APIC_PHYS_DOMAIN],o.extra_vars[s.APIC_URL]=t[s.APIC_URL],o.extra_vars[s.APIC_USERNAME]=t[s.APIC_USERNAME])),t[s.CLUSTER_NAME]&&(o.extra_vars[s.CLUSTER_NAME]=t[s.CLUSTER_NAME]),n(t[s.ENV],o.envVariables),i(t,o.ansibleVariables)},function(e){r.reject(e.data)}),r.promise}function n(e,t){var o;for(o in e)t.push({name:o,value:e[o]})}function i(e,t){var o,n=[s.APIC_CONTR_UNRESTRICT_MODE,s.APIC_EPG_BRIDGE_DOMAIN,s.APIC_LEAF_NODES,s.APIC_PASSWORD,s.APIC_PHYS_DOMAIN,s.APIC_URL,s.APIC_USERNAME,s.CONTIV_NET_MODE,s.CONTROL_INTERFACE,s.ENV,s.FWD_MODE,s.DATA_INTERFACE,s.SCHED_PROVIDER,s.VIP_ADDR,s.UCP_BOOTSTRAP_NODE,s.CLUSTER_NAME];for(o in e)-1===n.indexOf(o)&&t.push({name:o,value:e[o]})}function r(t){return e.post(ContivGlobals.NODES_SETTINGS_SET_ENDPOINT,t,{headers:{"Content-Type":"application/json"}})}function l(e){e.ansibleVariables.forEach(function(t){e.extra_vars[t.name]=t.value});var t={};e.envVariables.forEach(function(e){t[e.name]=e.value}),e.extra_vars[s.ENV]=t,e.nodeOpsObj.extra_vars=JSON.stringify(e.extra_vars)}function a(e){"aci"==e.extra_vars[s.CONTIV_NET_MODE]?delete e.extra_vars[s.FWD_MODE]:(delete e.extra_vars[s.APIC_URL],delete e.extra_vars[s.APIC_USERNAME],delete e.extra_vars[s.APIC_PASSWORD],delete e.extra_vars[s.APIC_LEAF_NODES],delete e.extra_vars[s.APIC_PHYS_DOMAIN],delete e.extra_vars[s.APIC_EPG_BRIDGE_DOMAIN],delete e.extra_vars[s.APIC_CONTR_UNRESTRICT_MODE]),"native-swarm"==e.extra_vars[s.SCHED_PROVIDER]&&delete e.extra_vars[s.UCP_BOOTSTRAP_NODE]}var s={
APIC_CONTR_UNRESTRICT_MODE:"apic_contracts_unrestricted_mode",APIC_EPG_BRIDGE_DOMAIN:"apic_epg_bridge_domain",APIC_LEAF_NODES:"apic_leaf_nodes",APIC_PASSWORD:"apic_password",APIC_PHYS_DOMAIN:"apic_phys_domain",APIC_URL:"apic_url",APIC_USERNAME:"apic_username",CONTIV_NET_MODE:"contiv_network_mode",CONTROL_INTERFACE:"control_interface",ENV:"env",FWD_MODE:"fwd_mode",DATA_INTERFACE:"netplugin_if",SCHED_PROVIDER:"scheduler_provider",VIP_ADDR:"service_vip",UCP_BOOTSTRAP_NODE:"ucp_bootstrap_node_name",CLUSTER_NAME:"cluster_name"};return{getSettings:o,createEnvVariables:n,createAnsibleVariables:i,updateSettings:r,createExtraVars:l,cleanupExtraVars:a}}]),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,
