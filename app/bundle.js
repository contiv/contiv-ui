function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o)}function NodesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy/",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",LAST_JOB_ENDPOINT:"/info/job/last",ACTIVE_JOB_ENDPOINT:"/info/job/active",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","ApplicationGroupsModel","NetworksModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.applicationgroups.list")}function c(){a()}function s(){o.get().then(function(e){f.networks=_.filter(e,{tenantName:"default"})})}function u(){n.get().then(function(e){f.isolationPolicies=_.filter(e,{tenantName:"default"})})}function d(){r.addIsolationPolicy(f)}function p(e){r.removeIsolationPolicy(f,e)}function v(){f.form.$valid&&(l.hideServerError(f),l.startLoader(f),f.applicationGroup.networkName=f.selectedNetwork.networkName,f.applicationGroup.key=t.generateKey(f.applicationGroup),t.create(f.applicationGroup).then(function(e){l.stopLoader(f),a()},function(e){l.stopLoader(f),l.showServerError(f,e)}))}function m(){l.stopLoader(f),l.hideServerError(f),f.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var f=this;f.networks=[],f.isolationPolicies=[],f.applicationGroup={},f.selectedNetwork={},f.selectedPolicy={},f.selectedPolicies=[],f.incomingRules=[],f.outgoingRules=[],f.isolationPoliciesVisible=!1,s(),u(),f.createApplicationGroup=v,f.cancelCreating=c,f.addIsolationPolicy=d,f.removeIsolationPolicy=p,m()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.is("contiv.menu.applicationgroups.edit")?h.mode="edit":h.mode="details"}function c(){e.go("contiv.menu.applicationgroups.list")}function s(){e.go("contiv.menu.applicationgroups.details",{key:h.applicationGroup.key})}function u(){s()}function d(){h.applicationGroup.policies.forEach(function(e){i.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(h.incomingRules,e)}),i.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(h.outgoingRules,e)})})}function p(){l.hideServerError(h),l.startLoader(h),o["delete"](h.applicationGroup).then(function(e){l.stopLoader(h),c()},function(e){l.stopLoader(h),l.showServerError(h,e)})}function v(){n.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function m(){r.addIsolationPolicy(h)}function f(e){r.removeIsolationPolicy(h,e)}function g(){l.hideServerError(h),l.startLoader(h),o.save(h.applicationGroup).then(function(e){l.stopLoader(h),s()},function(e){l.stopLoader(h),l.showServerError(h,e)})}var h=this;h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,l.stopLoader(h),l.hideServerError(h),o.getModelByKey(t.key).then(function(e){h.applicationGroup=e,void 0===h.applicationGroup.policies&&(h.applicationGroup.policies=[]),d()}),v(),h.saveApplicationGroup=g,h.cancelEditing=u,h.addIsolationPolicy=m,h.removeIsolationPolicy=f,h.deleteApplicationGroup=p,a()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,a){function c(e){o.get(e).then(function(e){s.nodes=e.length}),n.get(e).then(function(e){s.networks=e.length}),i.get(e).then(function(e){s.volumes=e.length}),r.get(e).then(function(e){s.groups=e.length}),l.get(e).then(function(e){s.networkpolicies=e.length}),a.get(e).then(function(e){s.storagepolicies=e.length})}var s=this;s.nodes=0,s.networks=0,s.volumes=0,s.groups=0,s.networkpolicies=0,s.storagepolicies=0,c(!1);var u=t(function(){c(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),c.newNetwork.key=c.newNetwork.tenantName+":"+c.newNetwork.networkName,o.create(c.newNetwork).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function a(){n.stopLoader(c),n.hideServerError(c),c.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var c=this;c.cidrPattern=ContivGlobals.CIDR_REGEX,c.createNetwork=l,c.cancelCreating=r,a()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,a){function c(){e.go("contiv.menu.networks.list")}function s(){a.hideServerError(d),a.startLoader(d),r["delete"](d.network).then(function(e){a.stopLoader(d),c()},function(e){a.stopLoader(d),a.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;a.stopLoader(d),a.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=s;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){a.form.$valid&&(o.hideServerError(a),o.startLoader(a),a.newPolicy.key=t.generateKey(a.newPolicy),t.create(a.newPolicy).then(function(e){o.stopLoader(a),n()},function(e){o.stopLoader(a),o.showServerError(a,e)}))}function l(){o.stopLoader(a),o.hideServerError(a),a.newPolicy={policyName:"",tenantName:"default"}}var a=this;a.createPolicy=r,a.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.networkpolicies.isolation.list")}function c(){e.go("contiv.menu.networkpolicies.isolation.details",{key:P.policy.key})}function s(){c()}function u(){c()}function d(){l.hideServerError(P),l.startLoader(P),o["delete"](P.policy).then(function(e){l.stopLoader(P),a()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?P.mode="edit":P.mode="details"}function v(){P.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:P.policy.policyName},P.newIncomingSelectedApplicationGroup="",P.disableIncomingNetworkSelection=!1,P.disableIncomingApplicationGroupSelection=!1}function m(){P.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:P.policy.policyName},P.newOutgoingSelectedApplicationGroup="",P.disableOutgoingNetworkSelection=!1,P.disableOutgoingApplicationGroupSelection=!1}function f(){i.get().then(function(e){P.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){P.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=P.newOutgoingSelectedApplicationGroup?(P.newOutgoingRule.toEndpointGroup=P.newOutgoingSelectedApplicationGroup.groupName,P.newOutgoingRule.toNetwork="",P.disableOutgoingNetworkSelection=!0):(P.newOutgoingRule.toEndpointGroup="",P.disableOutgoingNetworkSelection=!1)}function y(){null!=P.newIncomingSelectedApplicationGroup?(P.newIncomingRule.fromEndpointGroup=P.newIncomingSelectedApplicationGroup.groupName,P.newIncomingRule.fromNetwork="",P.disableIncomingNetworkSelection=!0):(P.newIncomingRule.fromEndpointGroup="",P.disableIncomingNetworkSelection=!1)}function C(){null!=P.newOutgoingRule.toNetwork?(P.newOutgoingRule.ToEndpointGroup="",P.disableOutgoingApplicationGroupSelection=!0):P.disableOutgoingApplicationGroupSelection=!1}function N(){null!=P.newIncomingRule.fromNetwork?(P.newIncomingRule.fromEndpointGroup="",P.disableIncomingApplicationGroupSelection=!0):P.disableIncomingApplicationGroupSelection=!1}function w(e){e.ruleId=(P.incomingRules.length+P.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function E(){l.hideServerError(P),l.startLoader(P),w(P.newIncomingRule),P.newIncomingRule.key=n.generateKey(P.newIncomingRule),n.create(P.newIncomingRule).then(function(e){l.stopLoader(P),P.incomingRules.push(e),v()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function S(){l.hideServerError(P),l.startLoader(P),w(P.newOutgoingRule),P.newOutgoingRule.key=n.generateKey(P.newOutgoingRule),n.create(P.newOutgoingRule).then(function(e){l.stopLoader(P),P.outgoingRules.push(e),m()},function(e){l.stopLoader(P),l.showServerError(P,e)})}function k(e){l.hideServerError(P),l.startLoader(P),n.deleteUsingKey(e).then(function(t){l.stopLoader(P),_.remove(P.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(P),l.showServerError(P,e)})}function b(e){l.hideServerError(P),l.startLoader(P),n.deleteUsingKey(e).then(function(t){l.stopLoader(P),_.remove(P.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(P),l.showServerError(P,e)})}var P=this;P.networks=[],P.applicationGroups=[],P.disableOutgoingNetworkSelection=!1,P.disableIncomingNetworkSelection=!1,P.disableOutgoingApplicationGroupSelection=!1,P.disableIncomingApplicationGroupSelection=!1,P.newIncomingSelectedApplicationGroup="",P.newOutgoingSelectedApplicationGroup="",l.stopLoader(P),l.hideServerError(P),o.getModelByKey(t.key).then(function(e){P.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){P.incomingRules=e,v()}),n.getOutgoingRules(e.policyName,"default").then(function(e){P.outgoingRules=e,m()})}),f(),g(),P.deletePolicy=d,P.deleteIncomingRule=k,P.deleteOutgoingRule=b,P.addIncomingRule=E,P.addOutgoingRule=S,P.doneEditing=u,P.cancelEditing=s,P.onChangeOutgoingApplicationGroupSelection=h,P.onChangeIncomingApplicationGroupSelection=y,P.onChangeOutgoingNetworkSelection=C,P.onChangeIncomingNetworkSelection=N,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"}).state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.nodes.commission")?m.mode="commission":m.mode="discover"}function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){e.go("contiv.menu.nodes.list")}function a(){r()}function c(){l()}function s(){m.ansibleVariables.forEach(function(e){m.extra_vars[e.name]=e.value});var e={};m.envVariables.forEach(function(t){e[t.name]=t.value}),m.extra_vars.env=e,m.nodeOpsObj.extra_vars=JSON.stringify(m.extra_vars)}function u(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),m.nodeOpsObj.nodes=[t.key],p(),s(),o.commission(m.nodeOpsObj).then(function(e){n.stopLoader(m),r()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function d(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),v(),s(),o.discover(m.nodeOpsObj).then(function(e){n.stopLoader(m),l()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function p(){"aci"==m.extra_vars.contiv_network_mode?delete m.extra_vars.fwd_mode:(delete m.extra_vars.apic_url,delete m.extra_vars.apic_username,delete m.extra_vars.apic_password,delete m.extra_vars.apic_leaf_nodes,delete m.extra_vars.apic_phys_domain,delete m.extra_vars.apic_epg_bridge_domain,delete m.extra_vars.apic_contracts_unrestricted_mode),"native-swarm"==m.extra_vars.scheduler_provider&&delete m.extra_vars.ucp_bootstrap_node_name}function v(){m.nodeOpsObj.addrs=_.words(m.nodeIPAddr,/[^, ]+/g)}var m=this;m.nodeOpsObj={},m.extra_vars={},m.ansibleVariables=[],m.envVariables=[],m.nodeIPAddr="",m.cancelCommissioningNode=a,m.commission=u,m.discover=d,m.cancelDiscoveringNode=c,i(),n.stopLoader(m),n.hideServerError(m)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1})}function a(){switch(s.node.inventory_state.status){case"Unallocated":s.showCommissionButton=!0,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!1;break;case"Decommissioned":s.showCommissionButton=!0,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!1;break;case"Provisioning":s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;case"Allocated":s.showCommissionButton=!1,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!0;break;case"Cancelled":s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;case"Maintenance":s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;default:s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1}}function c(e){i.getModelByKey(t.key,e).then(function(e){s.node=e,a()})}var s=this;s.decommission=r,s.upgrade=l,c(!1);var u;angular.isDefined(u)||(u=n(function(){c(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService","NodeService",function(e,t,o,n,i,r){function l(e){n.get(e).then(function(e){i.stopLoader(u),u.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(u)})}function a(e){n.get(e).then(function(e){c(),s()})}function c(){r.getActiveLogs(u.nodes).then(function(e){u.activeLogs=e},function(e){})}function s(){r.getLastLogs(u.nodes).then(function(e){u.lastLogs=e},function(e){})}var u=this;u.getActiveLogs=c,u.getLastLogs=s,l(!1),a(!1);var d;angular.isDefined(d)||(d=t(function(){l(!0),a(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(d)})}]),angular.module("contiv.nodes").factory("NodeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.ACTIVE_JOB_ENDPOINT;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.LAST_JOB_ENDPOINT;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getActiveLogs:o,getLastLogs:n}}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.organizations.list")}function r(){i()}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),c.newOrganization.key=c.newOrganization.tenantName,o.create(c.newOrganization).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function a(){n.stopLoader(c),n.hideServerError(c),c.newOrganization={tenantName:""}}var c=this;c.createOrganization=l,c.cancelCreating=r,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.organizations.list")}function c(){l.hideServerError(s),l.startLoader(s),r["delete"](s.organization).then(function(e){l.stopLoader(s),a()},function(e){l.stopLoader(s),l.showServerError(s,e)})}var s=this;l.stopLoader(s),l.hideServerError(s),r.getModelByKey(t.key).then(function(e){s.organization=e}),s.deleteOrganization=c}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.organizations=o("orderBy")(e,"tenantName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function a(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function c(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function s(){c(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=s,d.cancelCreating=l,a(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details",{key:p.servicelb.key})}function a(){l()}function c(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function s(){n.hideServerError(p),n.startLoader(p),d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){p.servicelb.selectors=[],angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=s,p.cancelEditing=a,p.deleteServicelb=c,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),
o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function l(){s.filesystemcmds.forEach(function(e){s.newStoragePolicy.filesystems[e.name]=e.value})}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),l(),o.create(s.newStoragePolicy).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function c(){n.stopLoader(s),n.hideServerError(s),s.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"10MB",filesystem:"ext4"},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":1e3,"read-iops":1e3,"write-bps":1e8,"read-bps":1e8}},filesystems:{}}}var s=this;s.createPolicy=a,s.cancelCreating=r,s.filesystemcmds=[],c()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,l,a){function c(){e.is("contiv.menu.storagepolicies.edit")?g.mode="edit":g.mode="details"}function s(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:g.policy.name})}function d(){u()}function p(){a.hideServerError(g),a.startLoader(g),r.deleteUsingKey(g.policy.name,"name").then(function(e){a.stopLoader(g),s()},function(e){a.stopLoader(g),a.showServerError(g,e)})}function v(){angular.forEach(g.policy.filesystems,function(e,t){this.push({name:t,value:e})},g.filesystemcmds)}function m(){g.filesystemcmds.forEach(function(e){g.policy.filesystems[e.name]=e.value})}function f(){g.form.$valid&&(a.hideServerError(g),a.startLoader(g),m(),r.save(g.policy).then(function(e){a.stopLoader(g),u()},function(e){a.stopLoader(g),a.showServerError(g,e)}))}var g=this;g.filesystemcmds=[],a.stopLoader(g),a.hideServerError(g),r.getModelByKey(t.key,!1,"name").then(function(e){g.policy=e,v()}),g.deletePolicy=p,g.savePolicy=f,g.cancelEditing=d,c();var h;angular.isDefined(h)||(h=n(function(){},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){r()}function a(){n.get().then(function(e){d.policies=e})}function c(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function s(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),c(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=s,d.cancelCreating=l,a(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService",function(e,t,o,n,i,r,l){function a(){e.go("contiv.menu.volumes.list")}function c(){r["delete"](v.volume).then(function(e){a()})}function s(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,u(),d()})}function u(){l.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function d(){l.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function p(e,t){r.copy(model,e,t).then(function(e){},function(e){})}var v=this;v.deleteVolume=c,v.copySnapshot=p,s(!1);var m;angular.isDefined(m)||(m=n(function(){s(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(m)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var a;angular.isDefined(a)||(a=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n}}]),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(s.searchText=i,(void 0===n||0>n)&&(n=0),s.pageNo=n,void 0!==o.items){var r=e(o.items,s.searchText),l=Math.ceil(r.length/s.size);0==l&&(l=1),s.chunks=[];for(var a=0;l>a;a++)s.chunks.push({selected:!1,pageNo:a});if(n>=s.chunks.length&&(s.pageNo=0),s.chunks[s.pageNo].selected=!0,s.chunks.length>5){var c,u;c=s.pageNo-2,u=s.pageNo+3,0>c&&(u-=c,c=0),u>s.chunks.length&&(c-=u-s.chunks.length,u=s.chunks.length),o.paginationMenu.chunks=s.chunks.slice(c,u)}else o.paginationMenu.chunks=s.chunks;s.filteredItems=t(r,s.size,s.pageNo*s.size),o.filtereditems=s.filteredItems}return!1}function l(){var e;return e=s.pageNo<=0?0:s.pageNo-1,r(e)}function a(){var e;return e=s.pageNo+1,e>s.chunks.length-1&&(e=s.chunks.length-1),r(e)}function c(e){o.paginationMenu=e}var s=this;s.chunks=[],s.pageNo=0,s.size=parseInt(o.size,10),isNaN(s.size)&&(s.size=12),s.showChunk=r,s.showNextChunk=a,s.showPrevChunk=l,s.addPaginationMenu=c}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t,o){function n(){return _.find(i.models,function(t){return t[o]==e})}var i=this;void 0===t&&(t=!1),void 0===o&&(o="key");var r=i.$q.defer();return!t&&i.models.length>0?r.resolve(n()):i.get(t).then(function(){r.resolve(n())}),r.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e,t){var o=this,n=o.$q.defer();return void 0===t&&(t=o.url+e.key+"/"),o.$http.post(t,e).then(function(t){var i=o.extract(t);void 0!==i&&""!==i||(i=e),o.models.push(i),n.resolve(o.extract(t))},function(e){n.reject(o.extract(e))}),n.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e,t,o){var n=this;void 0===t&&(t="key");var i=n.$q.defer();return void 0===o&&(o=n.url+e+"/"),n.$http["delete"](o).then(function(o){_.remove(n.models,function(o){return o[t]==e}),i.resolve(n.extract(o))},function(e){i.reject(n.extract(e))}),i.promise},angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){var o=new NodesCollection(e,t);return o}]),NodesCollection.prototype=Object.create(BaseCollection.prototype),NodesCollection.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},NodesCollection.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},angular.module("contiv.models").factory("OrganizationsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.ORGANIZATIONS_ENDPOINT)}]),angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.STORAGEPOLICIES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype.create=function(e){var t=this,o=t.url+e.name;return Collection.prototype.create.call(t,e,o)},o.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.name;return t.$http.post(n,e).then(function(n){_.remove(t.models,function(t){return t.name==e.name}),t.models.push(e),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise};var n=new o(e,t);return n}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){function o(e,t){Collection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}o.prototype=Object.create(Collection.prototype),o.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.VOLUMES_DELETE_ENDPOINT;e.volume=e.name;var i={data:e};return t.$http["delete"](n,i).then(function(n){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.policy}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},o.prototype.create=function(e){var t=this,o=ContivGlobals.VOLUMES_CREATE_ENDPOINT;return Collection.prototype.create.call(t,e,o)},o.prototype.copy=function(e,t,o){var n=this,i=n.$q.defer(),r=ContivGlobals.VOLUMES_COPYSNAPSHOTS_ENDPOINT,l={volume:e.name,policy:e.policy,Options:{target:o,snapshot:t}};return n.$http.post(r,l).then(function(e){i.resolve(n.extract(e))},function(e){i.reject(n.extract(e))}),i.promise};var n=new o(e,t);return n}]),angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}});
//# sourceMappingURL=data:application/json;base64,
