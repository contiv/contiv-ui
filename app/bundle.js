<<<<<<< e835aaa173f4b1c8dc589209ad8e2f0097a61830
<<<<<<< 145a88c49ed1fc3a982d61cd09a96d3bf9f4a929
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(e,t){var n=function(){function n(e,t){_classCallCheck(this,n),this.nodes=e,this.links=t}return _createClass(n,[{key:"updateNodes",value:function(e){this.nodes=e}},{key:"updateLinks",value:function(e){this.links=e}},{key:"nodeIdToName",value:function(e){for(var t=this.nodes,n=0;n<t.length;n++)if(t[n].id==e)return t[n].name}},{key:"processNodeData",value:function(t){var n=[];return _.forEach(t,function(t){var o=new e.Node(null,null,t.id,t.text,null);n.push(o)}),n}},{key:"processLinkData",value:function(e,n){function o(e,t){for(var n=0;n<t.length;n++)if(e==t[n].id)return t[n]}for(var i=[],r=0;r<e.length;r++)if(e[r].source!=e[r].target){var a=o(e[r].source,n),s=o(e[r].target,n);if(null==a||null==s)continue;var l=new t.Link(a,s);i.push(l)}return i}}]),n}();return{DataSource:n}}]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}();angular.module("contiv.utils",[]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(e,t,n){var o=function(e){function o(e,t,n,i,r,a){_classCallCheck(this,o);var s=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this,e,t));return s.children_struct=n,s.ancestors_struct=i,s.labels=r,s.selectors=a,s}return _inherits(o,e),_createClass(o,[{key:"hasChild",value:function(e){return null!=this.children_struct[e]}},{key:"setAncestors",value:function(){var e=this,t=!1;_.forEach(e.nodes,function(n){n.ancestors=e.ancestors_struct[n.id]||[],_.isEmpty(n.ancestors)===!1?n.parent=n.ancestors[0]:0==_.includes(e.children_struct.topLevel,n.id)&&(n.ancestors.push("client"),e.ancestors_struct[n.id]=["client"],t===!1&&(t=!0,e.children_struct.topLevel.push("client"),e.children_struct.client=[]),e.children_struct.client.push(n.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(e){for(var t=this.nodes,n={},o=0;o<t.length;o++){var i=t[o];if(null===i.ancestors)n[i.id]=i.name;else for(var r=0;r<e.length;r++)if(i.ancestors.indexOf(e[r])>-1){n[i.id]=e[r];break}}for(var a=this.links,s=[],o=0;o<a.length;o++){var l=[];l.source=n[a[o].source]||a[o].source,l.target=n[a[o].target]||a[o].target,l.weight=a[o].weight,s.push(l)}for(var c=[],o=0;o<e.length;o++){var u=[];u.id=e[o],u.text=this.nodeIdToName(e[o])||e[o],u.ancestors=this.ancestors_struct[e[o]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:s}}},{key:"processNodeData",value:function(e){var n=[];return _.forEach(e,function(e){var o=new t.Node(null,null,e.id,e.text,null,e.parent,e.ancestors,null,null);n.push(o)}),n}},{key:"processLinkData",value:function(e,t){function o(e,t){for(var n=0;n<t.length;n++)if(e==t[n].id)return t[n]}for(var i=[],r={},a=0;a<e.length;a++)if(e[a].source!=e[a].target){var s=o(e[a].source,t),l=o(e[a].target,t),c=e[a].weight;if(null==s||null==l)continue;if(void 0===r[s.id+"-"+l.id]){var u=new n.Link(s,l,c);r[s.id+"-"+l.id]=u,i.push(u)}else{var d=r[s.id+"-"+l.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return i}}]),o}(e.DataSource);return{DataSource:o}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(e){var t=function(){function t(n,o,i){_classCallCheck(this,t);var r=this;r.nodes=o||[],r.links=i||[],r.defaultNodePolicies=[],r.defaultPathPolicies=[],r.svgPolicy=new e.Policy,r.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},r.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},n.on("mouseover",function(e){r.svgPolicy.mouseover.call(this,e)}).on("dblclick",function(e){r.svgPolicy.dblclick.call(this,e)}).on("contextmenu",function(e){r.svgPolicy.contextmenu.call(this,e)}).on("mouseout",function(e){r.svgPolicy.mouseout.call(this,e)}).on("mousedown",function(e){r.svgPolicy.mousedown.call(this,e)}).on("mouseup",function(e){r.svgPolicy.mouseup.call(this,e)});var a=n.append("svg:defs");a.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),a.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),r.svg=n,r.svgG=n.append("g").classed(r.consts.graphClass,!0);var s=r.svgG;r.paths=s.append("g").selectAll("g"),r.circles=s.append("g").selectAll("g"),r.initNodes(),r.initLinks(),r.setPositions();var l=function(){r.onWindowResize(n)};r.bindings={resize:l},$(window).resize(l)}return _createClass(t,[{key:"destroy",value:function(){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy()}),_(e.defaultPathPolicies).forEach(function(e){e.destroy()}),e.svgPolicy.destroy();for(var t in e.bindings)$(window).off(t,e.bindings[t])}},{key:"initNodes",value:function(){var e=this;_.forEach(e.nodes,function(t){t.initialize(e)})}},{key:"initLinks",value:function(){var e=this;_.forEach(e.links,function(t){t.initialize(e)})}},{key:"findNodeById",value:function(e){for(var t=this,n=0;n<t.nodes.length;n++)if(e===t.nodes[n].id)return t.nodes[n]}},{key:"findD3Node",value:function(e){var t,n=this;return n.circles.each(function(n){n.id===e&&(t=d3.select(this))}),t}},{key:"installDragPolicy",value:function(e){this.drag=e}},{key:"installSvgPolicy",value:function(e){this.svgPolicy=e}},{key:"installDefaultNodePolicy",value:function(e){var t=this;t.defaultNodePolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultNodePolicy",value:function(e){var t;t="string"==typeof e?e:e.policyName,_(thisGraph.defaultNodePolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),thisGraph.defaultNodePolicies.splice(n,1))})}},{key:"getNodePolicy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t,n){return t.policyName===e?t:void 0})}},{key:"installDefaultPathPolicy",value:function(e){var t=this;t.defaultPathPolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultPathPolicy",value:function(e){var t,n=this;t="string"==typeof e?e:e.policyName,_(n.defaultPathPolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),n.defaultPathPolicies.splice(o,1))})}},{key:"pathPolicyEvent",value:function(e,t,n){var o=this;_(o.defaultPathPolicies).forEach(function(o){o[e](t,n)})}},{key:"nodePolicyEvent",value:function(e,t,n){var o=this;_.forEach(o.defaultNodePolicies,function(o){o[e](t,n)})}},{key:"installZoomPolicy",value:function(e){this.dragSvg=e,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(e){}},{key:"insertTitleLinebreaks",value:function(e,t){for(var n=this,o=t.split(/\s+/g),i=o.length,r=e.append("text").attr("class",n.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(i-1)),a=0;a<o.length;a++){var s=r.append("tspan").text(o[a]);a>0&&s.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(e){var t=this,n=t.links.filter(function(t){return t.source===e||t.target===e});n.map(function(e){t.links.splice(t.links.indexOf(e),1)})}},{key:"addNode",value:function(e){var t=this;t.nodes.push(e),e.initialize(t),t.updateGraph()}},{key:"removeNode",value:function(e){var t=this;t.nodes.splice(t.nodes.indexOf(e),1),t.spliceLinksForNode(e),t.updateGraph()}},{key:"addLink",value:function(e){var t=this;t.links.push(e),e.initialize(t),t.updateGraph()}},{key:"removeLink",value:function(e){var t=this;t.links.splice(t.links.indexOf(e),1),e.initialize(t),t.updateGraph()}},{key:"updateExistingPaths",value:function(e){e.each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewPaths",value:function(e){var t=this;t.initLinks(),e.each(function(e){e.newPathAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.pathPolicyEvent("mouseover",d3.select(this),e):t.pathPolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.pathPolicyEvent("dblclick",d3.select(this),e):t.pathPolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.pathPolicyEvent("contextmenu",d3.select(this),e):t.pathPolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.pathPolicyEvent("mouseout",d3.select(this),e):t.pathPolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.pathPolicyEvent("mousedown",d3.select(this),e):t.pathPolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.pathPolicyEvent("mouseup",d3.select(this),e):t.pathPolicyEvent("mouseup",d3.select(this),e)}).call(t.drag)}},{key:"updateExistingNodes",value:function(){var e=this;e.circles=this.circles.data(e.nodes,function(e){return e.id}).each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewNodes",value:function(e){var t=this;e.each(function(e){null==e.graph&&e.initialize(t),e.newNodeAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.nodePolicyEvent("mouseover",d3.select(this),e):t.nodePolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.nodePolicyEvent("dblclick",d3.select(this),e):t.nodePolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.nodePolicyEvent("contextmenu",d3.select(this),e):t.nodePolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.nodePolicyEvent("mouseout",d3.select(this),e):t.nodePolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.nodePolicyEvent("mousedown",d3.select(this),e):t.nodePolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.nodePolicyEvent("mouseup",d3.select(this),e):t.nodePolicyEvent("mouseup",d3.select(this),e)}).call(t.drag),e.append("circle").attr("r",function(e){return String(e.radius)}),e.each(function(e){t.insertTitleLinebreaks(d3.select(this),e.text)})}},{key:"d3ForceCollide",value:function(e){var t=this,n=t.consts,o=t.nodes,i=d3.geom.quadtree(o);return function(t){var o=t.radius+n.maxRadius+n.padding,r=t.x-o,a=t.x+o,s=t.y-o,l=t.y+o;i.visit(function(o,i,c,u,d){if(o.point&&o.point!==t){var v=t.x-o.point.x,f=t.y-o.point.y,p=Math.sqrt(v*v+f*f),h=t.radius+o.point.radius+n.padding;h>p&&(p=(p-h)/p*e,t.x-=v*=p,t.y-=f*=p,o.point.x+=v,o.point.y+=f)}return i>a||r>u||c>l||s>d})}}},{key:"d3ForceTick",value:function(e,t,n){for(var o=this,i=o.consts,r=i.displayOffset,a=o.nodes,s=d3.geom.quadtree(o.nodes),l=0,c=a.length;++l<c;)s.visit(this.d3ForceCollide(a[l]));o.circles.each(this.d3ForceCollide(.5)).attr("cx",function(e){return e.x=Math.max(e.radius+r,Math.min(t-r-e.radius,e.x))}).attr("cy",function(e){return e.y=Math.max(e.radius+r,Math.min(n-r-e.radius,e.y))}),o.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceStart",value:function(){var e=this;e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this;e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){var e=$("#visualization-graph").width(),t=$("#visualization-graph").height(),n=e,o=t;return{width:n,height:o}}},{key:"setForce",value:function(e){var t=this,n=t.nodes,o=t.links;if(!_.isEmpty(n)){var i=t.d3ForceBounds(),r=d3.layout.force().size([i.width,i.height]).nodes(n).charge(function(e){return-6e3}).links(o);r.linkDistance(i.width/3),r.linkStrength(.2),r.gravity(.2),r.on("tick",function(e){t.d3ForceTick.call(t,e,i.width,i.height)}),r.on("start",function(){t.d3ForceStart.call(t)}),r.on("end",function(){t.d3ForceEnd.call(t)}),r.start();for(var a=0;r.alpha()>.01&&150>a;)r.tick(),a+=1;r.stop(),null!=e&&e()}}},{key:"setPositions",value:function(){for(var e=this,t=e.consts.displayOffset,n=$("#visualization-graph").width(),o=$("#visualization-graph").height(),i=n-2*t,r=o-2*t,a=e.nodes,s=0;s<a.length;s++)a[s].radius=a[s].radius||e.consts.startRadius,null!=a[s].x&&null!=a[s].y||(a[s].x=i/2+a[s].radius+t,a[s].y=r/2+a[s].radius+t)}},{key:"updateGraph",value:function(e){var t=this,n=t.consts,o=t.state;if(!t.state.disableUpdate){this.updateExistingNodes();var i=t.circles.enter().append("g");i.classed(n.circleGClass,!0),t.circles.exit().remove(),0==o.initForce?(t.setForce(function(){t.updateNewNodes.call(t,i)}),o.initForce=!0):this.updateNewNodes(i),t.paths=t.paths.data(t.links,function(e){return String(e.source.id)+"+"+String(e.target.id)});var r=t.paths;this.updateExistingPaths(r);var a=r.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(a),r.exit().remove(),null!=e&&e()}}}]),t}();return{Graph:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(e){var t=function(e){function t(e,n,o,i){_classCallCheck(this,t);var r=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,o)),a=r;a.state.transition=[],a.consts.edge_buffer=200,a.consts.radiusDecay=1,a.consts.containerClass="container",a.dataSource=i;var s=d3.behavior.drag().origin(function(e){return{x:e.x,y:e.y}}).on("dragstart",function(){}).on("drag",function(e){d3.select(this).attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),a.updateGraph()}).on("dragend",function(){});a.drag=s;var l=d3.behavior.zoom().on("zoom",function(){return null!=d3.event.sourceEvent&&d3.event.sourceEvent.ctrlKey?!1:(a.zoomed.call(a),!0)}).on("zoomstart",function(e,t){});return a.dragSvg=l,a.svg.call(l).on("dblclick.zoom",null),r}return _inherits(t,e),_createClass(t,[{key:"zoomed",value:function(e,t){var n=this;if(1!=n.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=e&&null!=t){var o=n.dragSvg;o.scale(t),o.translate(e);var i=function(){o.scale(t),o.translate(e)},r="zoom"+e;return void d3.select("."+this.consts.graphClass).transition(r).delay(100).duration(750).attr("transform","translate("+o.translate()+") scale("+o.scale()+")").each("end",i)}n.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+n.dragSvg.translate()+") scale("+n.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(e){var t=document.getElementsByTagName("body")[0],n=$("#visualization-graph").offset(),o=$("#visualization-graph").width(),i=t.clientHeight;e.attr("width",o).attr("height",i-n.top-20)}},{key:"updateLinkData",value:function(){for(var e=this,t=[],n=0;n<e.nodes.length;n++)t.push(e.nodes[n].id);var o=e.dataSource.getFlowBetweenSet(t),i=o.linkData;e.links=e.dataSource.processLinkData(i,e.nodes),this.initNodes(),this.initLinks(),e.updateGraph()}}]),t}(e.Graph);return{Graph:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("Link",[function(){var e=function(){function e(t,n){_classCallCheck(this,e),this.source=t,this.target=n,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(e,t){e.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var e=this,t=e.target.x-e.source.x,n=e.target.y-e.source.y,o=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+o+","+o+" 0 0,1 "+e.target.x+","+e.target.y}},{key:"installPathPolicy",value:function(e){this.hasPolicy=!0,this.pathPolicies.push(e),e.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(e){var t,n=this;t="string"==typeof e?e:e.policyName,_(n.pathPolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),n.pathPolicies.splice(o,1))}),0===n.pathPolicies.length&&(n.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(e,t,n){_(n.pathPolicies).forEach(function(o){o[e](t,n)})}}]),e}();return{Link:e}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_get=function e(t,n,o){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,n,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(e){var t=function(e){function t(e,n,o){_classCallCheck(this,t);var i=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.weight=o,i.count=1,i}return _inherits(t,e),_createClass(t,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var e,t=this,n=(t.target.x-t.source.x)/2,o=(t.target.y-t.source.y)/2;return e=t.source.x<t.target.x?{my:"top center",at:"center center",target:[n,o],adjust:{y:10}}:{my:"bottom center",at:"center center",target:[n,o],adjust:{y:-10}}}},{key:"initialize",value:function(e){if(0==this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var n=e.state.VisualizerLink;null==n&&(n=e.state.VisualizerLink={},n.maxWeight=null,n.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(e){this.graph.state.VisualizerLink.useAvgWeight=!!e}},{key:"setWeight",value:function(e){this.weight=e}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink;if(t.useAvgWeight){var n=this.weight/this.count;return n}return this.weight}},{key:"updateMaxWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink,n=_.maxBy(e.links,function(e){return null!=e.graph?e.getWeight():0});t.maxWeight=n.getWeight()}},{key:"updateAttr",value:function(e,t){var n=this.graph,o=n.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,o.maxWeight]).range(["#ffb366","#F92606"]);o.colorScale=i,e.style("marker-end","url(#end-arrow)").classed(n.consts.selectedClass,function(e){return e===o.selectedEdge}).attr("d",this.arrowPath.call(t)).transition("existingPathTransition").duration(750).attr("stroke",function(e){var t=i(e.getWeight());return t})}},{key:"newPathAttr",value:function(e,t){var n=this.graph,o=n.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,o.maxWeight]).range(["#ffb366","#F92606"]);e.transition("newPathTransition").duration(750).attrTween("opacity",function(e){return d3.interpolateString(0,1)}).attr("stroke",function(e){var t=i(e.getWeight());return t}).attr("d",this.arrowPath.call(t))}}]),t}(e.Link);return{Link:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("Node",[function(){var e=function(){function e(t,n,o,i,r){_classCallCheck(this,e),this.x=t,this.y=n,this.radius=r,this.id=o,this.text=i,this.radius=r,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.attr("transform",function(e){return"translate("+e.x+","+e.y+")"})}},{key:"newNodeAttr",value:function(e,t){}},{key:"setRadius",value:function(e){this.radius=e}},{key:"installNodePolicy",value:function(e){this.hasPolicy=!0,this.nodePolicies.push(e),e.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(e){var t,n=this;t="string"==typeof e?e:e.policyName,_(n.nodePolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),n.nodePolicies.splice(o,1))}),0===n.nodePolicies.length&&(n.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(e,t,n){_.forEach(this.nodePolicies,function(o){o[e](t,n)})}}]),e}();return{Node:e}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(e){var t=function(e){function t(e,n,o,i,r,a,s,l,c){_classCallCheck(this,t);var u=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,o,i,r));return u.parent=a,u.ancestors=s,null==l?u.xStart=e:u.xStart=l,null==c?u.yStart=n:u.yStart=c,u}return _inherits(t,e),_createClass(t,[{key:"newNodeAttr",value:function(e,t){var n=this.graph;null!=n.consts.containerClass&&null==n.dataSource.children_struct[t.id]&&e.classed(n.consts.containerClass,!0),e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){if(null!=e.xStart&&null!=e.yStart){var t=e.xStart,n=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+n+")","translate("+e.x+","+e.y+")")}return d3.interpolateString("translate("+e.x+","+e.y+")","translate("+e.x+","+e.y+")")})}}]),t}(e.Node);return{Node:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_get=function t(e,n,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:t(r,n,o)}if("value"in i)return i.value;
var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"NodeSelectionPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var n=e.state.NodeSelectionPolicy={};n.selectedNodes=[];var o=e.consts.NodeSelectionPolicy={};o.selectedClass="selected";var i=e.drag;i.on("drag",function(t){var n=e;if(null!=n.consts.NodeSelectionPolicy){var o=n.consts.NodeSelectionPolicy.selectedClass,i=d3.selectAll("."+o);-1==i[0].indexOf(this)&&(i.classed(o,!1),i=d3.select(this),i.classed(o,!0)),i.attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),n.updateGraph()}})}}},{key:"addSelectNode",value:function(e,t){var n=this.graph,o=n.state.NodeSelectionPolicy,i=n.consts.NodeSelectionPolicy;e.classed(i.selectedClass,!0),o.selectedNodes.push(t)}},{key:"removeSelectFromNode",value:function(e,t){var n=this.graph,o=n.state.NodeSelectionPolicy,i=n.consts.NodeSelectionPolicy;n.circles.filter(function(e){return e.id===t.id}).classed(i.selectedClass,!1);var r=o.selectedNodes.indexOf(t);o.selectedNodes.splice(r,1)}},{key:"removeAllSelectedNodes",value:function(){var e=this.graph,t=e.state.NodeSelectionPolicy,n=e.consts.NodeSelectionPolicy;e.circles.classed(n.selectedClass,!1),t.selectedNodes=[]}},{key:"mousedown",value:function(e,t){var n=this.graph,o=n.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?o.selectedNodes.indexOf(t)>-1?this.removeSelectFromNode(e,t):this.addSelectNode(e,t):-1==o.selectedNodes.indexOf(t)&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(e,t){var n=this.graph,o=n.state.NodeSelectionPolicy;d3.event.ctrlKey||o.selectedNodes.length<=1&&this.removeSelectFromNode(e,t)}}]),t}(e.Policy);return{Policy:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"PathChangeViewPolicy"));return n.$state=e,n}return _inherits(t,e),_createClass(t,[{key:"generateList",value:function(e){var t=this,n=[],o=function i(e,n){for(var o=t.graph.dataSource.children_struct[e],r=0;r<o.length;r++){var a=o[r];if(t.graph.dataSource.hasChild(a)===!0){var s=i(a,n);n.concat(s)}else n.push(a)}};return o(e,n),n}},{key:"viewEdge",value:function(e){var t=[],n=[],o=e.source.id,i=e.target.id;t=this.graph.dataSource.hasChild(o)===!0?this.generateList(o):[o],n=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],this.$state.go("contiv.menu.visualization.edge",{sourceName:o,targetName:i,sourceList:t,targetList:n})}},{key:"mousedown",value:function(e,t){this.viewEdge(t)}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.applicationgroups.create",{url:"/create",component:"applicationgroupcreate"}).state("contiv.menu.applicationgroups.details",{url:"/details/:key",component:"applicationgroupdetails"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",component:"applicationgroupdetails"})}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("Policy",[function(){var e=function(){function e(t){_classCallCheck(this,e),this.policyName=t,this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){this.initialized||(this.initialized=!0,this.graph=e)}},{key:"mouseover",value:function(e,t){}},{key:"dblclick",value:function(e,t){}},{key:"contextmenu",value:function(e,t){}},{key:"mouseout",value:function(e,t){}},{key:"mousedown",value:function(e,t){}},{key:"mouseup",value:function(e,t){}},{key:"destroy",value:function(){}}]),e}();return{Policy:e}}]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(e,t,n,o,i,r,a){return{Policy:e.Policy,QTipPolicy:t.Policy,PathChangeViewPolicy:n.Policy,NodeSelectionPolicy:o.Policy,SplitJoinNodePolicy:i.Policy,SplitJoinViewPolicy:r.Policy,SaveStatePolicy:a.Policy}}]),angular.module("contiv.dashboard",["contiv.models"]).config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",component:"dashboard"})}]),angular.module("contiv.login",["contiv.utils"]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_get=function n(e,t,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:n(r,t,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"QTipPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var n=this,o=e.state.QTipPolicy={};o.mousedown=!1,e.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(e){o.mouseup=!1});var i=e.updateNewNodes;e.updateNewNodes=function(t){i.call(e,t),n.updateNewNodes(t)};var r=e.updateNewPaths;e.updateNewPaths=function(t){r.call(e,t),n.updateNewPaths(t)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(e,t){var n=this.graph,o=n.state.QTipPolicy;o.mousedown=!0}},{key:"mouseup",value:function(e,t){var n=this.graph,o=n.state.QTipPolicy;o.mousedown=!1}},{key:"whenQTipAvailable",value:function(e){var t=this,n=500;window.setTimeout(function(){null!=$(document).qtip?e():window.setTimeout(t.whenQTipAvailable(e),n)},n)}},{key:"updateNewNodes",value:function(e){function t(){e.each(function(e){var t,i=this;if(null!=n.dataSource.children_struct[e.id]){t="<b><u>Selectors:</b></u> ";var r=n.dataSource.selectors[e.id],a=!1;for(var s in r)a=!0,t+=s+" : <i>"+r[s]+"</i>,\n ";a===!1&&(t="No Selectors, ")}else{t="<b><u>Labels:</b></u> ";var l=n.dataSource.labels[e.id],a=!1;for(var s in l)a=!0,t+=s+" : <i>"+l[s]+"</i>,\n ";a===!1&&(t="No labels, ")}t=t.slice(0,-2),$(i).qtip({content:{title:e.id,text:t},events:{show:function(){var t=$(i).qtip("api"),r=$("#graphContainer").offset(),a=[r.left+(e.x*n.dragSvg.scale()+n.dragSvg.translate()[0]),r.top+(e.y+e.radius)*n.dragSvg.scale()+n.dragSvg.translate()[1]];return t.set("position.target",a),!o.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var n=this.graph,o=n.state.QTipPolicy;void 0!=$(document).qtip?t():this.whenQTipAvailable(t)}},{key:"updateNewPaths",value:function(e){var t=this.graph,n=t.state.QTipPolicy;void 0!=$(document).qtip&&e.each(function(e){var t=this,o=d3.select(this).node(),i=(o.getPointAtLength(o.getTotalLength()/2),e.qtipHelper()),r="Bytes: "+e.getWeight();$(t).qtip({content:{text:r},events:{show:function(){return!n.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:i.my,at:"center center",target:"mouse",adjust:i.adjust},hide:{event:"mousedown mouseleave"}})})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.menu",[]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"SaveStatePolicy"));return n.savedState=e,n}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){this.graph=e;var t=this;e.destroy=function(){t.graphDestroy.call(e,t.savedState)},e.load=function(n){t.graphLoad.call(e,n)}}},{key:"graphDestroy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy(e)}),_(t.defaultPathPolicies).forEach(function(t){t.destroy(e)});for(var n in t.bindings)$(window).off(n,t.bindings[n])}},{key:"graphLoad",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){null!=t.load&&t.load(e)}),_(t.defaultPathPolicies).forEach(function(t){null!=t.load&&t.load(e)})}}]),t}(e.Policy);return{Policy:t}}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_get=function o(e,t,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:o(r,t,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(e,t){var n=function(e){function n(){_classCallCheck(this,n);var e=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.policyName="SplitJoinNodePolicy",e}return _inherits(n,e),_createClass(n,[{key:"initialize",value:function(e){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinNodePolicy={};t.splitNodes=[]}}},{key:"dblclick",value:function(e,t){var n=this.graph,o=n.state.SplitJoinNodePolicy;d3.event.ctrlKey||(o.selectedNodes.indexOf(t)>-1?this.splitMultipleNodes(o.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(t)))}},{key:"contextmenu",value:function(e,t){var n=this.graph,o=n.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var i=o.selectedNodes;if(i.indexOf(t)>-1)for(var r=0;r<i.length;r++)this.joinNode(i[r]);else this.removeAllSelectedNodes(),this.joinNode(t)}}},{key:"__splitNode",value:function(e){var n=this.graph,o=n.state.SplitJoinNodePolicy,i=e.id,r=n.dataSource.children_struct;if(void 0!==r[i]&&!_.isEmpty(r[i])){n.nodes=_.filter(n.nodes,function(t){return t!=e}),n.spliceLinksForNode(e);for(var a=[],s=0;s<n.nodes.length;s++)a.push(n.nodes[s].id);for(var l=[],s=0;s<r[i].length;s++)a.push(r[i][s]),l.push(r[i][s]);var c=n.dataSource.getFlowBetweenSet(a),u=e.x,d=e.y,v=e.ancestors.slice();v.splice(0,0,e.id);for(var f=e.id,p=[],h=e.radius*n.consts.radiusDecay,g=c.nodeData,s=0;s<g.length;s++)if(l.indexOf(g[s].id)>-1){var m=g[s].id,y=g[s].text,b=new t.Node(null,null,m,y,h,f,v,u,d);b.initialize(n),n.nodes.push(b),p.push(b)}return n.links=n.dataSource.processLinkData(c.linkData,n.nodes),n.initNodes(),n.initLinks(),o.splitNodes.push(e.id),p}}},{key:"splitNode",value:function(e){var t=this.__splitNode(e);null!=t&&this.splitNodeEvent(t)}},{key:"splitMultipleNodes",value:function(e){for(var t=(this.graph,[]),n=0;n<e.length;n++){var o=this.__splitNode(e[n]);t=t.concat(o)}this.splitMultipleNodesEvent(o)}},{key:"splitNodeEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"__joinNode",value:function(e){var n=this.graph,o=n.state.SplitJoinNodePolicy;if(-1!=n.nodes.indexOf(e)){var i=n.dataSource.children_struct,r=e.id;if(!(i.topLevel.indexOf(r)>-1)){for(var a=[],s=[],l=0;l<n.nodes.length;l++)-1==n.nodes[l].ancestors.indexOf(e.parent)?s.push(n.nodes[l].id):a.push(n.nodes[l]);var c=e.parent;s.push(e.parent);var u=e.radius/n.consts.radiusDecay,d=e.x,v=e.y,f=e.ancestors[1],p=e.ancestors.slice(1),h=new t.Node(d,v,c,c,u,f,p);n.nodes.push(h);for(var g=n.dataSource.getFlowBetweenSet(s),l=0;l<a.length;l++){var m=a[l];n.nodes.splice(n.nodes.indexOf(m),1),n.spliceLinksForNode(m)}return n.links=n.dataSource.processLinkData(g.linkData,n.nodes),n.initNodes(),n.initLinks(),o.splitNodes.splice(o.splitNodes.indexOf(h.id),1),h}}}},{key:"joinNode",value:function(e){var t=this.__joinNode(e);null!=t&&this.joinNodeEvent(t)}},{key:"joinMultipleNode",value:function(e){for(var t=[],n=0;n<e.length;n++){var o=this.__joinNode(e[n]);t.push(o)}this.joinMultipleNodesEvent(t)}},{key:"joinNodeEvent",value:function(e){var t=this.graph;t.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(e){var t=this.graph;t.updateGraph()}}]),n}(e.Policy);return{Policy:n}}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.isolation.create",{url:"/create",component:"isolationpolicycreate"}).state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",component:"isolationpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",component:"bandwidthpolicycreate"}).state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",component:"bandwidthpolicydetails"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"})}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]);var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_get=function i(e,t,n){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,t);if(void 0===o){var r=Object.getPrototypeOf(e);return null===r?void 0:i(r,t,n)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(e,t){var n=function(e){function n(){_classCallCheck(this,n);var e=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.policyName="SplitJoinViewPolicy",e}return _inherits(n,e),_createClass(n,[{key:"initialize",value:function(e){if(!this.initialized){_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinViewPolicy={};t.savedStates=[],t.eventHistory=[],t.focusGroups=[],t.foci=[],t.zooms={},t.layout={},t.layoutDefault=null,t.zoomDefault=null,t.nodeIdsToReshow=null,t.backButtonElem=null,t.titleElem=null;var o=e.consts.SplitJoinViewPolicy={};o.boundary=.8,e.d3ForceBounds=this.d3ForceBounds,e.d3ForceTick=this.d3ForceTick,e.d3ForceStart=this.d3ForceStart,e.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(e){var t=this.graph,n=this,o=t.state.SplitJoinViewPolicy;o.backButtonElem=e,o.backButton=function(){o.eventHistory.length>0&&n.undoLastEvent.call(n)}}},{key:"installTitle",value:function(e){var t=this.graph,n=t.state.SplitJoinViewPolicy;n.titleElem=e}},{key:"destroy",value:function(e){null!=e&&this.save(e)}},{key:"save",value:function(e){var t=this.graph,n=t.state.SplitJoinViewPolicy,o=t.nodes,i=t.links,r=null;null!=n.titleElem&&(r=n.titleElem.text());var a=n.focusGroups,s=n.eventHistory,l=n.zooms,c=n.layout,u=n.layoutDefault,d=n.zoomDefault,v={nodes:o,links:i,states:n.savedStates,currTitle:r,focusGroups:a,eventHistory:s,zooms:l,layout:c,layoutDefault:u,zoomDefault:d};e.SplitJoinViewPolicy=v}},{key:"load",value:function(e){var t=this,n=this.graph,o=n.state.SplitJoinViewPolicy;e=e.SplitJoinViewPolicy,o.savedStates=e.states,n.links=e.links,n.nodes=e.nodes;var i=e.currTitle;null!=o.titleElem&&o.titleElem.text(i),o.eventHistory=e.eventHistory,o.focusGroups=e.focusGroups,o.zooms=e.zooms,o.layout=e.layout,o.layoutDefault=e.layoutDefault,o.zoomDefault=e.zoomDefault,null!=o.backButtonElem&&o.eventHistory.length>0&&o.backButtonElem.fadeTo("slow",1);var r=n.dataSource.children_struct;_.forEach(n.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(r[o.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var a;if(0===o.focusGroups.length){a=o.layoutDefault;var s=o.zoomDefault;n.zoomed(s[0],s[1])}else{var s=o.zooms[o.focusGroups];null!=s&&n.zoomed(s[0],s[1]),a=o.layout[o.focusGroups]}_.forEach(n.nodes,function(e){var t=a[e.id];null==t&&console.log(a,e),e.x=t.x,e.y=t.y}),n.state.initForce=!0,n.updateGraph.call(n,function(){t.updateGraphCallback.call(t)})}},{key:"dblclick",value:function(e,t){var o=this.graph,i=o.state.SplitJoinViewPolicy,r=t.id,a=o.dataSource.children_struct;if(void 0!==a[r]&&!_.isEmpty(a[r])){if(i.focusGroups.slice(),0===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[0]],t.id)?i.focusGroups[0]=t.id:1===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[1]],t.id)&&(i.focusGroups[1]=t.id),2===i.focusGroups.length&&i.focusGroups[1]===t.id){var s=[t],l=[],c=a[i.focusGroups[0]];_.forEach(o.nodes,function(e){_.includes(c,e.id)&&(l.push(e.id),s.push(e))})}else{var s=[t],l=[];_.forEach(o.links,function(e){e.source===t&&-1==l.indexOf(e.target.id)?(e.target.SplitJoinViewPolicy={},e.target.SplitJoinViewPolicy.type="connected",l.push(e.target.id),s.push(e.target)):e.target===t&&-1==l.indexOf(e.source.id)&&(e.source.SplitJoinViewPolicy={},e.source.SplitJoinViewPolicy.type="connected",l.push(e.source.id),s.push(e.source))})}o.circles.each(function(e){e.id!==t.id&&o.spliceLinksForNode(e)}),o.updateGraph(),o.state.disableUpdate=!0,o.circles.each(function(e){e.id!==t.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=o.dragSvg.translate(),d=o.dragSvg.scale(),v=parseFloat(o.svg.style("width"))/d/2+u[0],f=parseFloat(o.svg.style("height"))/d/2+u[1];t.xStart=t.x,t.yStart=t.y,t.x=v,t.y=f,e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){var t=e.xStart,n=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+n+")","translate("+e.x+","+e.y+")")});var p=_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"splitNode",this);i.nodeIdsToReshow=l;var h=this;setTimeout(function(){o.nodes=s,p.call(h,t)},750)}}},{key:"updateGraphCallback",value:function(){var e=this.graph,t=e.state.SplitJoinViewPolicy;e.circles.each(function(e){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=e.SplitJoinViewPolicy&&("focus"===e.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===e.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),t.nodeIdsToReshow=null,e.updateGraph()}},{key:"setPositions",value:function(){function e(e,t){return Math.floor(Math.random()*(t-e+1))+e}var t=this.graph,n=this,o=t.consts,i=o.displayOffset,r=t.nodes,a=n.d3ForceBounds.call(t);_.forEach(r,function(t){if(null==t.x||null==t.y){var n=e(t.radius+i,a.width-t.radius-i),o=e(t.radius+i,a.height-t.radius-i);t.x=n,t.y=o}})}},{key:"d3ForceStart",value:function(){var e=this;e.circles.attr("cx",function(t){return null!=t.xStart&&(t.xStart=t.xStart*e.dragSvg.scale()+e.dragSvg.translate()[0]),t.x}).attr("cy",function(t){return null!=t.yStart&&(t.yStart=t.yStart*e.dragSvg.scale()+e.dragSvg.translate()[1]),t.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this,t=e.state,n=t.SplitJoinViewPolicy;if(null==n.layoutDefault){var o={};_.forEach(e.nodes,function(e){o[e.id]={x:e.x,y:e.y}}),n.layoutDefault=o;var i=e.dragSvg.scale(),r=e.dragSvg.translate();n.zoomDefault=[r,i]}e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceTick",value:function(e,t,n){function o(e){return function(o){2===u.length?("focus"===o.SplitJoinViewPolicy.type?o.y+=(u[0]-o.y)*e:o.y+=(u[1]-o.y)*e,o.x+=(t/2-o.x)*e):(o.y+=(n/2-o.y)*e,o.x+=(t/2-o.x)*e)}}var i=this,r=i.state,a=i.consts,s=r.SplitJoinViewPolicy,l=a.displayOffset,c=i.dragSvg.scale(),u=s.foci;i.circles.each(this.d3ForceCollide(.5)).each(o(.2*e.alpha)).attr("cx",function(e){return e.x=Math.max((e.radius+l)/c,Math.min(t+(-l-e.radius)/c,e.x))}).attr("cy",function(e){return null==e.SplitJoinViewPolicy||null==e.SplitJoinViewPolicy?(e.y=Math.max((e.radius+l)/c,Math.min(n+(-l-e.radius)/c,e.y)),e.y):"focus"===e.SplitJoinViewPolicy.type?(e.y=Math.max(e.radius+l,Math.min((n+(-l-e.radius)/c)*a.SplitJoinViewPolicy.boundary,e.y)),e.y):"connected"===e.SplitJoinViewPolicy.type?(e.y=Math.max((n+(l-e.radius)/c)*a.SplitJoinViewPolicy.boundary,Math.min(n+(-l-e.radius)/c,e.y)),e.y):void 0}),i.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){function e(e,n){var o=e*n,i=t.consts.startRadius,r=3.5*i,a=o/(r*r);return a}var t=this,n=t.state,o=t.consts,i=o.SplitJoinViewPolicy,r=n.SplitJoinViewPolicy,a=t.nodes,s=o.displayOffset,l=parseFloat(t.svg.style("width")),c=parseFloat(t.svg.style("height")),u=l,d=c,v=e(u-2*s,d-2*s),f=1;a.length>v?(f=v/a.length,t.zoomed(t.dragSvg.translate(),f),u/=f,d/=f):t.zoomed(t.dragSvg.translate(),f);var p,h=r.focusGroups;if(0===h.length)p=[d/2];else{var g=t.dataSource.children_struct[h[0]];i.boundary=g.length/a.length;var m=d*i.boundary,y=d-m;m<2*t.consts.maxRadius&&(i.boundary=2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),y<2*t.consts.maxRadius&&(i.boundary=1-2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),p=[m/2,m+y/2]}return r.foci=p,{width:u,height:d}}},{key:"splitNodeEvent",value:function(e){var t=this,n=this.graph,o=n.state.SplitJoinViewPolicy,i=n.dataSource.children_struct;_.forEach(e,function(e){e.SplitJoinViewPolicy={},_.includes(i[o.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var r=e[0].parent;if(0!==o.eventHistory.length&&o.eventHistory[o.eventHistory.length-1].id===r?o.eventHistory.pop():o.eventHistory.push({id:r,event:"split"}),null!=o.backButtonElem&&0!==o.eventHistory.length&&o.backButtonElem.fadeTo("slow",1),null!=o.titleElem){var a="";o.focusGroups.length>0&&(a+=o.focusGroups[0]),2===o.focusGroups.length&&(a+=" & "+o.focusGroups[1]),o.titleElem.text(a)}n.state.disableUpdate=!1,t.setLayout()}},{key:"setLayout",value:function(){var e,t=this,n=this.graph,o=n.state.SplitJoinViewPolicy;if(0===o.focusGroups.length){e=o.layoutDefault;var i=o.zoomDefault;n.zoomed(i[0],i[1])}else{var i=o.zooms[o.focusGroups];null!=i&&n.zoomed(i[0],i[1]),e=o.layout[o.focusGroups]}if(null!=e)_.forEach(n.nodes,function(t){var n=e[t.id];null==n&&console.log(e,t),t.x=n.x,t.y=n.y}),n.updateGraph.call(n,function(){t.updateGraphCallback.call(t)});else{n.state.initForce=!1,n.updateGraph(function(){t.updateGraphCallback.call(t)}),o.zooms[o.focusGroups]=[n.dragSvg.translate(),n.dragSvg.scale()];var e={};_.forEach(n.nodes,function(t){e[t.id]={x:t.x,y:t.y}}),o.layout[o.focusGroups]=e}}},{key:"__joinNode",value:function(e){var n=this.graph,o=n.state.SplitJoinNodePolicy,i=n.state.SplitJoinViewPolicy;if(-1!=n.nodes.indexOf(e)){var r=n.dataSource.children_struct,a=e.id;if(!(r.topLevel.indexOf(a)>-1)){for(var s=e.parent,l=[],c=[],u=0;u<n.nodes.length;u++)-1==n.nodes[u].ancestors.indexOf(e.parent)?c.push(n.nodes[u].id):l.push(n.nodes[u]);var d=e.parent;c.push(e.parent);var v=n.dataSource.ancestors_struct,r=n.dataSource.children_struct,f=i.focusGroups.indexOf(s);null!=v[s]?i.focusGroups[f]=v[s]:i.focusGroups.splice(f,1);var p=[];if(1===i.focusGroups.length){var h=v[e.id];h.push(i.focusGroups[0]),h=h.concat(v[i.focusGroups[0]]||[]),_.forEach(r.topLevel,function(e){-1===h.indexOf(e)&&-1==c.indexOf(e)&&p.push(e)}),c=c.concat(p)}else 0===i.focusGroups.length&&(_.forEach(r.topLevel,function(e){-1==c.indexOf(e)&&p.push(e)}),c=c.concat(p));var g=e.radius/n.consts.radiusDecay,m=e.x,y=e.y,s=e.ancestors[1],h=e.ancestors.slice(1),b=new t.Node(m,y,d,d,g,s,h);n.nodes.push(b);for(var u=0;u<l.length;u++){var P=l[u];n.nodes.splice(n.nodes.indexOf(P),1),n.spliceLinksForNode(P)}for(var w=n.dataSource.getFlowBetweenSet(c),k=[],S=w.nodeData,u=0;u<S.length;u++)-1!==p.indexOf(S[u].id)&&k.push(S[u]);var E=n.dataSource.processNodeData(k);_.forEach(E,function(e){e.radius=e.radius||n.consts.startRadius}),n.nodes=n.nodes.concat(E),n.links=n.dataSource.processLinkData(w.linkData,n.nodes),1===i.focusGroups.length?_.forEach(n.links,function(e){-1!==p.indexOf(e.source.id)?i.focusGroups[0]===e.target.parent&&p.splice(p.indexOf(e.source.id),1):-1!==p.indexOf(e.target.id)&&i.focusGroups[0]===e.source.parent&&p.splice(p.indexOf(e.target.id),1)}):p=[];var N=[];if(0!==p.length)for(var u=0;u<n.nodes.length&&(-1===p.indexOf(n.nodes[u].id)||(p.splice(p.indexOf(n.nodes[u].id),1),n.spliceLinksForNode(n.nodes[u]),N.push(n.nodes[u]),0!==p.length));u++);return _.forEach(N,function(e){n.nodes.splice(n.nodes.indexOf(e),1)}),n.initNodes(),n.initLinks(),o.splitNodes.splice(o.splitNodes.indexOf(b.id),1),b}}}},{key:"joinNodeEvent",value:function(e){var t=this.graph,n=this,o=t.state.SplitJoinViewPolicy;0!==o.eventHistory.length&&o.eventHistory[o.eventHistory.length-1].id===e.id?o.eventHistory.pop():o.eventHistory.push({id:e.id,event:"join"});var i=t.dataSource.children_struct;if(_.forEach(t.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(i[o.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"}),null!=o.backButtonElem&&0===o.eventHistory.length&&o.backButtonElem.fadeTo("slow",0),null!=o.titleElem){var r="";o.focusGroups.length>0&&(r+=o.focusGroups[0]),2===o.focusGroups.length&&(r+=" & "+o.focusGroups[1]),o.titleElem.text(r)}n.setLayout()}},{key:"undoLastEvent",value:function(){var e,t=this.graph,o=this,i=t.state.SplitJoinViewPolicy,r=i.eventHistory[i.eventHistory.length-1],a=r.id;if("join"===r.event){e=t.findNodeById(a);var s=t.findD3Node(a);o.dblclick(s,e)}else{var l=t.dataSource.children_struct[a][0];e=t.findNodeById(l),_get(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"joinNode",this).call(o,e)}}}]),n}(e.Policy);return{Policy:n}}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""}).state("contiv.menu.settings.details.networks",{url:"/networks",component:"networksetting"}).state("contiv.menu.settings.details.volumes",{url:"/volumes",component:"volumesetting"})}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(e){e.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.groups=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function n(){e.go("contiv.menu.dashboard",{
username:i.username})}function o(){n()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=o}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function n(){e.go("contiv.login")}var o=this;o.username=t.username,o.logout=n}]),angular.module("contiv.networkpolicies").directive("ctvBandwidth",function(){return{restrict:"E",scope:{bandwidthPolicy:"=",mode:"@"},link:function(e){if(""!=e.bandwidthPolicy.bandwidth){var t=e.bandwidthPolicy.bandwidth.split(" ");e.bandwidthPolicy.bandwidthNumber=Number(t[0]),e.bandwidthPolicy.bandwidthUnit=t[1]}},templateUrl:"network_policies/bandwidth.html"}}),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.bandwidth",{url:"/bandwidth",controller:"BandwidthPolicyListCtrl as bandwidthPolicyListCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"})}]).controller("BandwidthPolicyListCtrl",["$scope","$interval","$filter","NetprofilesModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.policies=n("orderBy")(e,"profileName")},function(e){i.stopLoader(a)})}var a=this;r(!0);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.isolation",{url:"/isolation",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.policies=n("orderBy")(e,"policyName")},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list",{url:"/list","abstract":!0,controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.list.redirection",{url:"/redirection",template:""})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){function t(){e.$current.includes["contiv.menu.networkpolicies.list.isolation"]&&e.go("contiv.menu.networkpolicies.isolation.create"),e.$current.includes["contiv.menu.networkpolicies.list.bandwidth"]&&e.go("contiv.menu.networkpolicies.bandwidth.create")}var n=this;n.createNetworkPolicy=t}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,n,o){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function a(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newNetwork.key=l.newNetwork.tenantName+":"+l.newNetwork.networkName,n.create(l.newNetwork).then(function(e){o.stopLoader(l),i()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function s(){o.stopLoader(l),o.hideServerError(l),l.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var l=this;l.cidrPattern=ContivGlobals.CIDR_REGEX,l.createNetwork=a,l.cancelCreating=r,s()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"}).state("contiv.menu.networks.details.info",{url:"/info",templateUrl:"networks/networkinfo.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,n,o,i,r,a,s){function l(){e.go("contiv.menu.networks.list")}function c(){s.hideServerError(d),s.startLoader(d),r["delete"](d.network).then(function(e){s.stopLoader(d),l()},function(e){s.stopLoader(d),s.showServerError(d,e)})}function u(e){a.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;s.stopLoader(d),s.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=c;var v;angular.isDefined(v)||(v=o(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(v)})}]);var NetworksListCtrl=function(){function e(e,t,n,o){function i(e){n.get(e).then(function(e){o.stopLoader(r),r.networks=e},function(e){o.stopLoader(r)})}var r=this;i(!1);var a;angular.isDefined(a)||(a=t(function(){i(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(a)})}return e.$inject=["$scope","$interval","NetworksModel","CRUDHelperService"],e}();angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",component:"networkList"})}]).component("networkList",{templateUrl:"networks/networklist.html",controller:NetworksListCtrl,controllerAs:"networksListCtrl"}),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details.stats",{url:"/stats",controller:"NetworkStatsCtrl as networkStatsCtrl",templateUrl:"networks/networkstats.html"})}]).controller("NetworkStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","InspectService",function(e,t,n,o,i,r,a){function s(e){r.getInspectByKey(t.key,ContivGlobals.NETWORKS_INSPECT_ENDPOINT,e).then(function(e){if(l.networkInspectStats=e.Oper,l.config=e.Config,void 0!=e.Oper.endpoints){var t=a.buildEndPoints(e.Oper.endpoints);a.checkContainerChanged(l.containerDetails,t)&&(l.endpoints=e.Oper.endpoints,l.containerDetails=t)}else l.endpoints=[],l.containerDetails={}})}var l=this;s(!1);var c;angular.isDefined(c)||(c=o(function(){s(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(c)})}]),angular.module("contiv.nodes").factory("BgpService",["$http","$q",function(e,t){function n(n){var o=t.defer(),i=ContivGlobals.BGPS_ENDPOINT+n.key+"/";return e.get(i).then(function(e){o.resolve(e.data),n.neighbor=e.data,n.neighbors.push({name:n.neighbor.neighbor,value:n.neighbor["neighbor-as"]})},function(e){o.reject(e.data)}),o.promise}function o(t){var n=ContivGlobals.BGPS_ENDPOINT+t.key+"/";return e.post(n,t.neighbor)}function i(n){var o=t.defer(),i=ContivGlobals.BGPS_INSPECT_ENDPOINT+n+"/";return e.get(i).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}return{getBgp:n,updateBgp:o,getBgpInspect:i}}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(e,t){function n(){var n=t.defer(),o=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return e.get(o).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function o(){var n=t.defer(),o=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return e.get(o).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getActiveLogs:n,getLastLogs:o}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(e,t,n){function o(){n.getActiveLogs().then(function(e){i.activeLogs=e},function(e){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;o();var r;angular.isDefined(r)||(r=t(function(){o()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,n,o,i){function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function a(){r()}function s(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.nodeOpsObj.nodes=[t.key],i.cleanupExtraVars(l),i.createExtraVars(l),n.commission(l.nodeOpsObj).then(function(e){o.stopLoader(l),r()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}var l=this;l.nodeOpsObj={},l.extra_vars={},l.ansibleVariables=[],l.envVariables=[],i.getSettings(l),l.cancelCommissioningNode=a,l.commission=s,o.stopLoader(l),o.hideServerError(l)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"}).state("contiv.menu.nodes.details.edit",{url:"/edit",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel","BgpService",function(e,t,n,o,i,r){function a(){var e={nodes:[t.key]};i.decommission(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function s(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function l(){switch(h.node.inventory_state.status){case"Unallocated":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Decommissioned":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Provisioning":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Allocated":h.showCommissionButton=!1,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!0;break;case"Cancelled":h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Maintenance":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;default:h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1}}function c(e){i.getModelByKey(t.key,e).then(function(e){h.node=e,l()})}function u(){e.is("contiv.menu.nodes.details.edit")?h.mode="edit":h.mode="details"}function d(){e.go("contiv.menu.nodes.details.info")}function v(){h.form.$valid&&(h.neighbor.key=t.key,h.neighbors.forEach(function(e){h.neighbor.neighbor=e.name,h.neighbor["neighbor-as"]=e.value}),r.updateBgp(h).then(function(e){h.neighbor=e.config.data,d()},function(e){}))}function f(){r.getBgp(h).then(function(e){h.neighbor=e},function(e){})}function p(){r.getBgpInspect(t.key).then(function(e){h.inspect=e,h.routes=e.Oper.routes,h.filteredroutes=e.Oper.routes},function(e){})}var h=this;h.numberpattern=ContivGlobals.NUMBER_REGEX,h.decommission=a,h.upgrade=s,h.setMode=u,h.updateBgpInfo=v,h.returnToInfo=d,h.neighbors=[],h.neighbor={},h.key=t.key,f(),p(),u(),c(!1);var g;angular.isDefined(g)||(g=o(function(){c(!0)},5e3)),n.$on("$destroy",function(){o.cancel(g)})}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,n,o,i){function r(){e.go("contiv.menu.nodes.list")}function a(){r()}function s(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),l(),i.createExtraVars(c),n.discover(c.nodeOpsObj).then(function(e){o.stopLoader(c),r()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=s,c.cancelDiscoveringNode=a,o.stopLoader(c),o.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(e,t,n){function o(){n.getLastLogs().then(function(e){i.lastLogs=e},function(e){})}var i=this;o();var r;angular.isDefined(r)||(r=t(function(){o()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.nodes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","OrganizationsModel","CRUDHelperService",function(e,t,n){function o(){e.go("contiv.menu.organizations.list")}function i(){o()}function r(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newOrganization.key=s.newOrganization.tenantName,t.create(s.newOrganization).then(function(e){n.stopLoader(s),o()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function a(){n.stopLoader(s),n.hideServerError(s),s.newOrganization={tenantName:""}}var s=this;s.createOrganization=r,s.cancelCreating=i,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,n,o){function i(){e.go("contiv.menu.organizations.list")}function r(){o.hideServerError(a),o.startLoader(a),n["delete"](a.organization).then(function(e){o.stopLoader(a),i()},function(e){o.stopLoader(a),o.showServerError(a,e)})}var a=this;o.stopLoader(a),o.hideServerError(a),n.getModelByKey(t.key).then(function(e){a.organization=e}),a.deleteOrganization=r}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.organizations=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,n,o,i){function r(){e.go("contiv.menu.servicelbs.list")}function a(){r()}function s(){o.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function l(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function c(){l(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,n.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=c,d.cancelCreating=a,s(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",params:{state:null},controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.details.info",{url:"/info",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"}).state("contiv.menu.servicelbs.details.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,n,o){function i(){e.is("contiv.menu.servicelbs.details.edit")?v.mode="edit":v.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function a(){e.go("contiv.menu.servicelbs.details.info",{key:v.servicelb.key,state:"details"})}function s(){a()}function l(){o.hideServerError(v),o.startLoader(v),n["delete"](v.servicelb).then(function(e){o.stopLoader(v),r()},function(e){o.stopLoader(v),o.showServerError(v,e)})}function c(){o.hideServerError(v),o.startLoader(v);var e=v.servicelb.selectors;d(),n.save(v.servicelb).then(function(e){o.stopLoader(v),a()},function(t){v.servicelb.selectors=e,u(),o.stopLoader(v),o.showServerError(v,t)})}function u(){angular.forEach(v.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};v.labelSelectors.push(t)})}function d(){v.servicelb.selectors=[],angular.forEach(v.labelSelectors,function(e){var t=e.name+"="+e.value;v.servicelb.selectors.push(t)})}var v=this;v.labelSelectors=[],o.stopLoader(v),o.hideServerError(v),n.getModelByKey(t.key).then(function(e){v.servicelb=e,u()}),v.saveServicelb=c,v.cancelEditing=s,v.deleteServicelb=l,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.servicelbs=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function n(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function o(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!o(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),n()}},e.remove=function(n){_.remove(e.items,function(e){return t(e,n)})},n()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details.stats",{url:"/stats",controller:"ServicelbStatsCtrl as servicelbStatsCtrl",templateUrl:"service_lbs/servicelbstats.html"})}]).controller("ServicelbStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","ServicelbsModel","InspectService",function(e,t,n,o,i,r,a){function s(e){r.getInspectByKey(t.key,ContivGlobals.SERVICELBS_INSPECT_ENDPOINT,e).then(function(e){if(l.servicelbInspectStats=e.Oper,l.config=e.Config,void 0!=e.Oper.providers){var t=a.buildEndPoints(e.Oper.providers);a.checkContainerChanged(l.providerDetails,t)&&(l.providers=e.Oper.providers,l.providerDetails=t)}else l.providers=[],l.providerDetails={}})}var l=this;s(!1);var c;angular.isDefined(c)||(c=o(function(){s(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(c)})}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(e,t,n){function o(){i.form.$valid&&(t.hideServerError(i),t.startLoader(i),i.nodeOpsObj.nodes=[e.key],n.cleanupExtraVars(i),n.createExtraVars(i),n.updateSettings(i.nodeOpsObj).then(function(e){t.stopLoader(i)},function(e){t.stopLoader(i),t.showServerError(i,e)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],n.getSettings(i),i.updateClusterSettings=o,t.stopLoader(i),t.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,n,o){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function a(){c.filesystemcmds.forEach(function(e){c.newStoragePolicy.filesystems[e.name]=e.value})}function s(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),a(),n.create(c.newStoragePolicy).then(function(e){o.stopLoader(c),i()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=s,c.cancelCreating=r,c.filesystemcmds=[],l()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,n,o,i,r,a,s){function l(){e.is("contiv.menu.storagepolicies.edit")?m.mode="edit":m.mode="details"}function c(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:m.policy.name})}function d(){u()}function v(){s.hideServerError(m),s.startLoader(m),r.deleteUsingKey(m.policy.name,"name").then(function(e){s.stopLoader(m),c()},function(e){s.stopLoader(m),s.showServerError(m,e)})}function f(e){a.get(e).then(function(e){m.volumes=i("orderBy")(_.filter(e,{policy:m.policy.name}),"name")})}function p(){angular.forEach(m.policy.filesystems,function(e,t){this.push({name:t,value:e})},m.filesystemcmds)}function h(){m.filesystemcmds.forEach(function(e){m.policy.filesystems[e.name]=e.value})}function g(){m.form.$valid&&(s.hideServerError(m),s.startLoader(m),h(),r.save(m.policy).then(function(e){s.stopLoader(m),u()},function(e){s.stopLoader(m),s.showServerError(m,e)}))}var m=this;m.filesystemcmds=[],s.stopLoader(m),s.hideServerError(m),r.getModelByKey(t.key,!1,"name").then(function(e){m.policy=e,p(),f(!1)}),m.deletePolicy=v,m.savePolicy=g,m.cancelEditing=d,l();var y;angular.isDefined(y)||(y=o(function(){f(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(y)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.policies=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(e,t,n,o,i,r){var a=o.sourceName,s=o.targetName,l=o.sourceList,c=o.targetList;if(null==l||null==c)return void n.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();e.edgeDataInterval=r(function(){i.getEdgeData(l,c,d.toString()).then(function(t){var n=t.results,o=0;_.forEach(n,function(e){_.isEmpty(e)===!1&&(o+=e.series[0].values[0][1])}),e.sourceName=a,e.targetName=s,e.edgeData=o,e.edgeDataTime=d},function(e){})},3e3),e.$on("$destroy",function(){r.cancel(e.edgeDataInterval)}),i.getOldEdgeData(l,c).then(function(t){var n=t.results,o=[];_.forEach(n,function(e){if(_.isEmpty(e)===!1){var t=e.series[0].values;_.isEmpty(o)?_.forEach(t,function(e){o.push(e[1])}):_.forEach(t,function(e,t){o[t]+=e[1]})}}),e.sourceName=a,e.targetName=s,e.sourceList=l,e.targetList=c,e.oldEdgeData=o},function(e){})}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(e){function t(e,t){function n(){l=new Date;for(var t in c){var o=c[t];o.data.push(e.edgeData||0),o.path.attr("d",v)}u.domain([l-(a-2)*s,l-s]),g.transition().duration(s).ease("linear").call(u.axis),p.transition().duration(s).ease("linear").call(d.axis),m.attr("transform",null).transition().duration(s).ease("linear").attr("transform","translate("+u(l-(a-1)*s)+")").each("end",function(){n()});for(var t in c){var o=c[t];o.data.shift()}}var o=document.getElementsByTagName("body")[0],i=o.clientWidth-400,r=o.clientHeight-400,a=59,s=750,l=new Date(Date.now()-s),c={current:{value:0,color:"orange",data:t.range(a).map(function(t){return e.oldEdgeData[Math.floor(t/10)]||0})}},u=t.time.scale().domain([l-(a-2),l-s]).range([0,i]),d=t.scale.linear().domain([0,t.max(c.current.data,function(e){return e+10})]).range([r,0]),v=t.svg.line().interpolate("basis").x(function(e,t){return u(l-(a-1-t)*s)}).y(function(e){return d(e)}),f=t.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),p=f.append("g").attr("class","y axis").call(d.axis=t.svg.axis().scale(d).orient("left")),h=t.select(".graph").append("svg").attr("class","chart").attr("width",i-50).attr("height",r+50),g=h.append("g").attr("class","x axis").attr("transform","translate(0,"+r+")").call(u.axis=t.svg.axis().scale(u).orient("bottom")),m=h.append("g");for(var y in c){var b=c[y];b.path=m.append("path").data([b.data]).attr("class",y+" group").style("stroke",b.color)}n()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(n){n.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=n.edgeData&&null!=n.oldEdgeData&&!n.initialize){n.initialize=!0;var o=e.d3;t(n,o)}})}}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(e,t,n,o,i,r){function a(e,n,o,i,r,a){if(void 0!==e.nodes&&void 0!==e.links&&void 0!==e.children_struct&&void 0!==e.ancestors_struct){var s=new r.DataSource(e.nodes,e.links,e.children_struct,e.ancestors_struct,e.labels,e.serviceSelectors);s.setAncestors();var l,c,u=s.getTopLevelFlow();l=s.processNodeData(u.nodeData),c=s.processLinkData(u.linkData,l);var d=document.getElementsByTagName("body")[0],v=(d.clientWidth,d.clientHeight),f=n.find("svg"),p=$(f.parent()).offset(),h=$(f.parent()).width(),g=d3.select(f[0]).attr("width",h).attr("height",v-p.top-20);e.visualizationGraph=new o.Graph(g,l,c,s,e.children_struct,e.ancestors_struct),e.visualizationGraph.installDefaultPathPolicy(new i.SaveStatePolicy(a.savedStates)),e.visualizationGraph.installDefaultPathPolicy(new i.PathChangeViewPolicy(t));var m=new i.QTipPolicy;e.visualizationGraph.installDefaultNodePolicy(m),e.visualizationGraph.installDefaultPathPolicy(m);var y=new i.SplitJoinViewPolicy;if(e.visualizationGraph.installDefaultNodePolicy(y),y.installBackButton($("#backButton")),y.installTitle($("#graph-title")),0==_.isEmpty(a.savedStates)){var b=e.visualizationGraph;b.load(a.savedStates)}else e.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(e,t){e.$on("$destroy",function(){$("#visualization-graph").unbind(),e.visualizationGraph.destroy()}),e.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=e.nodes&&null!=e.links&&null!=e.children_struct&&null!=e.ancestors_struct&&(e.initialized?(e.visualizationGraph.dataSource.links=e.links,e.visualizationGraph.updateLinkData()):(e.initialized=!0,a(e,t,n,o,i,r)))})}}}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"
})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(e,t,n,o){var i=function(t){var n=[],o=[],i=[];_.forEach(t.results[0].series,function(e){var t,r=e.tags.EndpointIP,a=e.tags.ProviderIP;0==_.includes(i,r)&&(t={name:r,id:r,parent:null,ancestors:null},n.push(t),i.push(r)),0==_.includes(i,a)&&(t={name:a,id:a,parent:null,ancestors:null},n.push(t),i.push(a));var s={source:r,target:a,weight:e.values[0][2]};o.push(s);var l={source:a,target:r,weight:e.values[0][1]};o.push(l)}),e.nodes=n,e.links=o};n.getGraphData().then(i,function(e){}),e.$on("$destroy",function(){o.cancel(e.graphDataInterval)}),n.getStructureData().then(function(t){e.ancestors_struct=t.ancestors_struct,e.children_struct=t.children_struct,e.labels=t.labels,e.serviceSelectors=t.serviceSelectors},function(e){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(e,t){function n(n,o){var i=t.defer();return e.get(n,o).then(function(e){i.resolve(e.data)},function(e){i.reject(e.data)}),i.promise}function o(n,o){var i=function(e){var t,n,o,r,a,s,l,c="";for(t in e)if(n=e[t],n instanceof Array)for(l=0;l<n.length;++l)a=n[l],o=t+"["+l+"]",s={},s[o]=a,c+=i(s)+"&";else if(n instanceof Object)for(r in n)a=n[r],o=t+"["+r+"]",s={},s[o]=a,c+=i(s)+"&";else void 0!==n&&null!==n&&(c+=encodeURIComponent(t)+"="+encodeURIComponent(n)+"&");return c.length?c.substr(0,c.length-1):c},r=t.defer();return e({url:n,method:"POST",data:o,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(e){return angular.isObject(e)&&"[object File]"!==String(e)?i(e):e}]}).then(function(e){r.resolve(e.data)},function(e){r.reject(e.data)}),r.promise}function i(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;e+="influx/query";var t={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return n(e,t)}function r(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;return e+="services",n(e)}function a(e,t){var n="(";n+=t+"=",n+="'"+e[0]+"' ";for(var o=1;o<e.length;o++)n+="OR ",n+=t+"=",n+="'"+e[o]+"' ";return n+=")"}function s(e,t,n){var i=ContivGlobals.VISUALIZATION_ENDPOINT;i+="influx/query";var r={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return o(i,r)}function l(e,t){var n=ContivGlobals.VISUALIZATION_ENDPOINT;n+="influx/query";var i={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return o(n,i)}return{getGraphData:i,getStructureData:r,getEdgeData:s,getOldEdgeData:l}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,n,o,i){function r(){e.go("contiv.menu.volumes.list")}function a(){r()}function s(){o.get().then(function(e){d.policies=e})}function l(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),l(),n.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=a,s(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService","CRUDHelperService",function(e,t,n,o,i,r,a,s){function l(){e.go("contiv.menu.volumes.list")}function c(){s.hideServerError(p),s.startLoader(p),r["delete"](p.volume).then(function(e){s.stopLoader(p),l()})}function u(e){var n=t.key.split("/"),o={};o.policy=n[0],o.name=n[1],r.getModel(o,e).then(function(e){p.volume=e,d(),v()})}function d(){a.getVolumeUseInfo(p.volume).then(function(e){p.volumeUse=e},function(e){})}function v(){a.getVolumeSnapshots(p.volume).then(function(e){p.snapshots=e},function(e){})}function f(){p.snapshotSuccess=!1,s.hideServerError(p),s.startLoader(p),a.triggerSnapshot(p.volume).then(function(e){s.stopLoader(p),p.snapshotSuccess=!0},function(e){s.stopLoader(p),s.showServerError(p,e)})}var p=this;p.deleteVolume=c,p.triggerVolumeSnapshot=f,u(!1);var h;angular.isDefined(h)||(h=o(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),n.$on("$destroy",function(){o.cancel(h)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,n,o,i){function r(e){o.get(e).then(function(e){i.stopLoader(a),a.volumes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var s;angular.isDefined(s)||(s=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(s)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function n(n){var o=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+n.policy+"/"+n.name;return e.get(i).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function o(n){var o=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+n.policy+"/"+n.name;return e.get(i).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function i(n){var o=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+"take/"+n.policy+"/"+n.name;return e.post(i).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}return{getVolumeUseInfo:n,getVolumeSnapshots:o,triggerSnapshot:i}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.copy",{url:"/copy/",params:{snapshot:null,policy:null,volume:null},controller:"VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl",templateUrl:"volumes/volumesnapshotcopy.html"})}]).controller("VolumeSnapshotCopyCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","CRUDHelperService",function(e,t,n,o,i,r,a){function s(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+t.volume})}function l(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+u.newvolume})}function c(){if(u.form.$valid){a.hideServerError(u),a.startLoader(u);var e={};e.policy=t.policy,e.name=t.volume,r.copy(e,t.snapshot,u.newvolume).then(function(e){a.stopLoader(u),l()},function(e){a.stopLoader(u),a.showServerError(u,e)})}}var u=this;u.policy=t.policy,u.volume=t.volume,u.snapshot=t.snapshot,u.copySnapshot=c,u.cancelCopy=s}]),angular.module("contiv.directives").directive("ctvAccordion",function(){return{restrict:"E",transclude:!0,scope:{items:"="},link:function(e,t){"function"==typeof t.find(".ui.accordion").accordion&&t.find(".ui.accordion").accordion()},templateUrl:"components/directives/accordion.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function n(){e.newItem={name:"",value:""}}function o(e){return""===e.name&&""===e.value}e.add=function(){o(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),n())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},n(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@",defaultsortcolumn:"@"},controller:["$scope","$element","$attrs","$filter",function(n,o,i,r){function a(o,i){if(v.searchText=i,(void 0===o||0>o)&&(o=0),v.pageNo=o,void 0!==n.items){var a=e(n.items,v.searchText);a=r("orderBy")(a,v.sortObj.field,v.sortObj.reverse);var s=Math.ceil(a.length/v.size);0==s&&(s=1),v.chunks=[];for(var l=0;s>l;l++)v.chunks.push({selected:!1,pageNo:l});if(o>=v.chunks.length&&(v.pageNo=0),v.chunks[v.pageNo].selected=!0,v.chunks.length>5){var c,u;c=v.pageNo-2,u=v.pageNo+3,0>c&&(u-=c,c=0),u>v.chunks.length&&(c-=u-v.chunks.length,u=v.chunks.length),n.paginationMenu.chunks=v.chunks.slice(c,u)}else n.paginationMenu.chunks=v.chunks;v.filteredItems=t(a,v.size,v.pageNo*v.size),n.filtereditems=v.filteredItems}return!1}function s(){var e;return e=v.pageNo<=0?0:v.pageNo-1,a(e)}function l(){var e;return e=v.pageNo+1,e>v.chunks.length-1&&(e=v.chunks.length-1),a(e)}function c(e){n.paginationMenu=e}function u(e){return{field:e,reverse:!1,iconDirection:{"angle down icon":!0,"angle up icon":!1}}}function d(e){e==v.sortObj.field?(v.sortObj.field=e,v.sortObj.reverse=!v.sortObj.reverse,v.sortObj.iconDirection={"angle down icon":!v.sortObj.reverse,"angle up icon":v.sortObj.reverse}):v.sortObj=u(e),v.showChunk(v.pageNo,v.searchText),n.$apply()}var v=this;v.chunks=[],v.pageNo=0,v.sortObj=u(n.defaultsortcolumn),v.size=parseInt(n.size,10),isNaN(v.size)&&(v.size=12),v.showChunk=a,v.showNextChunk=l,v.showPrevChunk=s,v.addPaginationMenu=c,v.sort=d}],link:function(e,t,n,o){e.$parent.$watch(n.items,function(){o.showChunk(o.pageNo,o.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,require:"^^ctvTable",scope:{"class":"@",sortfield:"="},link:function(e,t,n,o){e.tablectrl=o,void 0!=e.sortfield&&null!=e.sortfield&&t.bind("click",function(){o.sort(e.sortfield)})},templateUrl:"components/directives/tableheader.html"}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,n,o){e.showChunk=function(){o.showChunk(o.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{colspan:"@"},replace:!0,link:function(e,t,n,o){o.addPaginationMenu(e),o.showChunk(o.pageNo,o.searchText),e.showChunk=function(e){o.showChunk(e,o.searchText)},e.showPrevChunk=o.showPrevChunk,e.showNextChunk=o.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,
=======
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}angular.module("contiv.graph",[]),angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){return{NETWORKS_ENDPOINT:"/netmaster/api/v1/networks/",NETWORKS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/networks/",SERVICELBS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/serviceLBs/",POLICIES_ENDPOINT:"/netmaster/api/v1/policys/",RULES_ENDPOINT:"/netmaster/api/v1/rules/",APPLICATIONGROUPS_ENDPOINT:"/netmaster/api/v1/endpointGroups/",SERVICELBS_ENDPOINT:"/netmaster/api/v1/serviceLBs/",ORGANIZATIONS_ENDPOINT:"/netmaster/api/v1/tenants/",NETWORK_SETTINGS_ENDPOINT:"/netmaster/api/v1/globals/",NETPROFILES_ENDPOINT:"/netmaster/api/v1/netprofiles/",BGPS_ENDPOINT:"/netmaster/api/v1/Bgps/",BGPS_INSPECT_ENDPOINT:"/netmaster/api/v1/inspect/Bgps/",VISUALIZATION_ENDPOINT:"/visualization/",VOLUMES_ENDPOINT:"/volmaster/volumes/",VOLUMES_CREATE_ENDPOINT:"/volmaster/volumes/create/",VOLUMES_DELETE_ENDPOINT:"/volmaster/volumes/remove/",VOLUMES_COPYSNAPSHOTS_ENDPOINT:"/volmaster/volumes/copy",VOLUMES_USES_ENDPOINT:"/volmaster/uses/mounts/",VOLUMES_SNAPSHOTS_ENDPOINT:"/volmaster/snapshots/",STORAGEPOLICIES_ENDPOINT:"/volmaster/policies/",VOLUMES_GLOBAL_ENDPOINT:"/volmaster/global/",NODES_LIST_ENDPOINT:"/info/nodes",NODES_DISCOVER_ENDPOINT:"/discover/nodes",NODES_COMMISSION_ENDPOINT:"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:"/maintenance/nodes",NODES_LAST_JOB_ENDPOINT:"/info/job/last",NODES_ACTIVE_JOB_ENDPOINT:"/info/job/active",NODES_SETTINGS_SET_ENDPOINT:"/globals",NODES_SETTINGS_GET_ENDPOINT:"/info/globals",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$",VLAN_REGEX:"^([0-9]{1,4}?-[0-9]{1,4}?)$",VXLAN_REGEX:"^([0-9]{1,8}?-[0-9]{1,8}?)$",NUMBER_REGEX:"^[0-9]*$"}}(),_createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("DataSource",["Node","Link",function(e,t){var o=function(){function o(e,t){_classCallCheck(this,o),this.nodes=e,this.links=t}return _createClass(o,[{key:"updateNodes",value:function(e){this.nodes=e}},{key:"updateLinks",value:function(e){this.links=e}},{key:"nodeIdToName",value:function(e){for(var t=this.nodes,o=0;o<t.length;o++)if(t[o].id==e)return t[o].name}},{key:"processNodeData",value:function(t){var o=[];return _.forEach(t,function(t){var n=new e.Node(null,null,t.id,t.text,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,o){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r=0;r<e.length;r++)if(e[r].source!=e[r].target){var a=n(e[r].source,o),l=n(e[r].target,o);if(null==a||null==l)continue;var s=new t.Link(a,l);i.push(s)}return i}}]),o}();return{DataSource:o}}]),angular.module("contiv.utils",[]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerDataSource",["DataSource","VisualizerNode","VisualizerLink",function(e,t,o){var n=function(e){function n(e,t,o,i,r,a){_classCallCheck(this,n);var l=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t));return l.children_struct=o,l.ancestors_struct=i,l.labels=r,l.selectors=a,l}return _inherits(n,e),_createClass(n,[{key:"hasChild",value:function(e){return null!=this.children_struct[e]}},{key:"setAncestors",value:function(){var e=this,t=!1;_.forEach(e.nodes,function(o){o.ancestors=e.ancestors_struct[o.id]||[],_.isEmpty(o.ancestors)===!1?o.parent=o.ancestors[0]:0==_.includes(e.children_struct.topLevel,o.id)&&(o.ancestors.push("client"),e.ancestors_struct[o.id]=["client"],t===!1&&(t=!0,e.children_struct.topLevel.push("client"),e.children_struct.client=[]),e.children_struct.client.push(o.id))})}},{key:"getTopLevelFlow",value:function(){return this.getFlowBetweenSet(this.children_struct.topLevel)}},{key:"getFlowBetweenSet",value:function(e){for(var t=this.nodes,o={},n=0;n<t.length;n++){var i=t[n];if(null===i.ancestors)o[i.id]=i.name;else for(var r=0;r<e.length;r++)if(i.ancestors.indexOf(e[r])>-1){o[i.id]=e[r];break}}for(var a=this.links,l=[],n=0;n<a.length;n++){var s=[];s.source=o[a[n].source]||a[n].source,s.target=o[a[n].target]||a[n].target,s.weight=a[n].weight,l.push(s)}for(var c=[],n=0;n<e.length;n++){var u=[];u.id=e[n],u.text=this.nodeIdToName(e[n])||e[n],u.ancestors=this.ancestors_struct[e[n]]||this.ancestors_struct[u.text]||[],_.isEmpty(u.ancestors)===!1?u.parent=u.ancestors[0]:u.parent=null,c.push(u)}return{nodeData:c,linkData:l}}},{key:"processNodeData",value:function(e){var o=[];return _.forEach(e,function(e){var n=new t.Node(null,null,e.id,e.text,null,e.parent,e.ancestors,null,null);o.push(n)}),o}},{key:"processLinkData",value:function(e,t){function n(e,t){for(var o=0;o<t.length;o++)if(e==t[o].id)return t[o]}for(var i=[],r={},a=0;a<e.length;a++)if(e[a].source!=e[a].target){var l=n(e[a].source,t),s=n(e[a].target,t),c=e[a].weight;if(null==l||null==s)continue;if(void 0===r[l.id+"-"+s.id]){var u=new o.Link(l,s,c);r[l.id+"-"+s.id]=u,i.push(u)}else{var d=r[l.id+"-"+s.id];d.setWeight(d.getRawWeight()+c),d.increaseCount()}}return i}}]),n}(e.DataSource);return{DataSource:n}}]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.applicationgroups.list",{url:"/list",component:"applicationGrouplist"})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Graph",["PolicyService",function(e){var t=function(){function t(o,n,i){_classCallCheck(this,t);var r=this;r.nodes=n||[],r.links=i||[],r.defaultNodePolicies=[],r.defaultPathPolicies=[],r.svgPolicy=new e.Policy,r.state={canZoom:!0,canPan:!0,initForce:!1,disableUpdate:!1},r.consts={circleGClass:"conceptG",graphClass:"graph",pathClass:"path",nodeClass:"circle",nodeText:"nodeText",startRadius:50,maxRadius:60,padding:5,displayOffset:60},o.on("mouseover",function(e){r.svgPolicy.mouseover.call(this,e)}).on("dblclick",function(e){r.svgPolicy.dblclick.call(this,e)}).on("contextmenu",function(e){r.svgPolicy.contextmenu.call(this,e)}).on("mouseout",function(e){r.svgPolicy.mouseout.call(this,e)}).on("mousedown",function(e){r.svgPolicy.mousedown.call(this,e)}).on("mouseup",function(e){r.svgPolicy.mouseup.call(this,e)});var a=o.append("svg:defs");a.append("svg:marker").attr("id","end-arrow").attr("viewBox","0 -5 10 10").attr("refX",20).attr("refY",-1).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),a.append("svg:marker").attr("id","mark-end-arrow").attr("viewBox","0 -5 10 10").attr("refX",7).attr("markerWidth",3.5).attr("markerHeight",3.5).attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5"),r.svg=o,r.svgG=o.append("g").classed(r.consts.graphClass,!0);var l=r.svgG;r.paths=l.append("g").selectAll("g"),r.circles=l.append("g").selectAll("g"),r.initNodes(),r.initLinks(),r.setPositions();var s=function(){r.onWindowResize(o)};r.bindings={resize:s},$(window).resize(s)}return _createClass(t,[{key:"destroy",value:function(){var e=this;_(e.defaultNodePolicies).forEach(function(e){e.destroy()}),_(e.defaultPathPolicies).forEach(function(e){e.destroy()}),e.svgPolicy.destroy();for(var t in e.bindings)$(window).off(t,e.bindings[t])}},{key:"initNodes",value:function(){var e=this;_.forEach(e.nodes,function(t){t.initialize(e)})}},{key:"initLinks",value:function(){var e=this;_.forEach(e.links,function(t){t.initialize(e)})}},{key:"findNodeById",value:function(e){for(var t=this,o=0;o<t.nodes.length;o++)if(e===t.nodes[o].id)return t.nodes[o]}},{key:"findD3Node",value:function(e){var t,o=this;return o.circles.each(function(o){o.id===e&&(t=d3.select(this))}),t}},{key:"installDragPolicy",value:function(e){this.drag=e}},{key:"installSvgPolicy",value:function(e){this.svgPolicy=e}},{key:"installDefaultNodePolicy",value:function(e){var t=this;t.defaultNodePolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultNodePolicy",value:function(e){var t;t="string"==typeof e?e:e.policyName,_(thisGraph.defaultNodePolicies).forEach(function(e,o){e.policyName===t&&(e.destroy(),thisGraph.defaultNodePolicies.splice(o,1))})}},{key:"getNodePolicy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t,o){return t.policyName===e?t:void 0})}},{key:"installDefaultPathPolicy",value:function(e){var t=this;t.defaultPathPolicies.push(e),e.initialize(t)}},{key:"uninstallDefaultPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.defaultPathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.defaultPathPolicies.splice(n,1))})}},{key:"pathPolicyEvent",value:function(e,t,o){var n=this;_(n.defaultPathPolicies).forEach(function(n){n[e](t,o)})}},{key:"nodePolicyEvent",value:function(e,t,o){var n=this;_.forEach(n.defaultNodePolicies,function(n){n[e](t,o)})}},{key:"installZoomPolicy",value:function(e){this.dragSvg=e,this.svg.call(this.dragSvg)}},{key:"onWindowResize",value:function(e){}},{key:"insertTitleLinebreaks",value:function(e,t){for(var o=this,n=t.split(/\s+/g),i=n.length,r=e.append("text").attr("class",o.consts.nodeText).attr("text-anchor","middle").attr("dy","-"+7.5*(i-1)),a=0;a<n.length;a++){var l=r.append("tspan").text(n[a]);a>0&&l.attr("x",0).attr("dy","15")}}},{key:"spliceLinksForNode",value:function(e){var t=this,o=t.links.filter(function(t){return t.source===e||t.target===e});o.map(function(e){t.links.splice(t.links.indexOf(e),1)})}},{key:"addNode",value:function(e){var t=this;t.nodes.push(e),e.initialize(t),t.updateGraph()}},{key:"removeNode",value:function(e){var t=this;t.nodes.splice(t.nodes.indexOf(e),1),t.spliceLinksForNode(e),t.updateGraph()}},{key:"addLink",value:function(e){var t=this;t.links.push(e),e.initialize(t),t.updateGraph()}},{key:"removeLink",value:function(e){var t=this;t.links.splice(t.links.indexOf(e),1),e.initialize(t),t.updateGraph()}},{key:"updateExistingPaths",value:function(e){e.each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewPaths",value:function(e){var t=this;t.initLinks(),e.each(function(e){e.newPathAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.pathPolicyEvent("mouseover",d3.select(this),e):t.pathPolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.pathPolicyEvent("dblclick",d3.select(this),e):t.pathPolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.pathPolicyEvent("contextmenu",d3.select(this),e):t.pathPolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.pathPolicyEvent("mouseout",d3.select(this),e):t.pathPolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.pathPolicyEvent("mousedown",d3.select(this),e):t.pathPolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.pathPolicyEvent("mouseup",d3.select(this),e):t.pathPolicyEvent("mouseup",d3.select(this),e)}).call(t.drag)}},{key:"updateExistingNodes",value:function(){var e=this;e.circles=this.circles.data(e.nodes,function(e){return e.id}).each(function(e){e.updateAttr(d3.select(this),e)})}},{key:"updateNewNodes",value:function(e){var t=this;e.each(function(e){null==e.graph&&e.initialize(t),e.newNodeAttr(d3.select(this),e)}),e.on("mouseover",function(e){e.hasPolicy?e.nodePolicyEvent("mouseover",d3.select(this),e):t.nodePolicyEvent("mouseover",d3.select(this),e)}).on("dblclick",function(e){e.hasPolicy?e.nodePolicyEvent("dblclick",d3.select(this),e):t.nodePolicyEvent("dblclick",d3.select(this),e)}).on("contextmenu",function(e){e.hasPolicy?e.nodePolicyEvent("contextmenu",d3.select(this),e):t.nodePolicyEvent("contextmenu",d3.select(this),e)}).on("mouseout",function(e){e.hasPolicy?e.nodePolicyEvent("mouseout",d3.select(this),e):t.nodePolicyEvent("mouseout",d3.select(this),e)}).on("mousedown",function(e){e.hasPolicy?e.nodePolicyEvent("mousedown",d3.select(this),e):t.nodePolicyEvent("mousedown",d3.select(this),e)}).on("mouseup",function(e){e.hasPolicy?e.nodePolicyEvent("mouseup",d3.select(this),e):t.nodePolicyEvent("mouseup",d3.select(this),e)}).call(t.drag),e.append("circle").attr("r",function(e){return String(e.radius)}),e.each(function(e){t.insertTitleLinebreaks(d3.select(this),e.text)})}},{key:"d3ForceCollide",value:function(e){var t=this,o=t.consts,n=t.nodes,i=d3.geom.quadtree(n);return function(t){var n=t.radius+o.maxRadius+o.padding,r=t.x-n,a=t.x+n,l=t.y-n,s=t.y+n;i.visit(function(n,i,c,u,d){if(n.point&&n.point!==t){var p=t.x-n.point.x,f=t.y-n.point.y,v=Math.sqrt(p*p+f*f),h=t.radius+n.point.radius+o.padding;h>v&&(v=(v-h)/v*e,t.x-=p*=v,t.y-=f*=v,n.point.x+=p,n.point.y+=f)}return i>a||r>u||c>s||l>d})}}},{key:"d3ForceTick",value:function(e,t,o){for(var n=this,i=n.consts,r=i.displayOffset,a=n.nodes,l=d3.geom.quadtree(n.nodes),s=0,c=a.length;++s<c;)l.visit(this.d3ForceCollide(a[s]));n.circles.each(this.d3ForceCollide(.5)).attr("cx",function(e){return e.x=Math.max(e.radius+r,Math.min(t-r-e.radius,e.x))}).attr("cy",function(e){return e.y=Math.max(e.radius+r,Math.min(o-r-e.radius,e.y))}),n.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceStart",value:function(){var e=this;e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this;e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){var e=$("#visualization-graph").width(),t=$("#visualization-graph").height(),o=e,n=t;return{width:o,height:n}}},{key:"setForce",value:function(e){var t=this,o=t.nodes,n=t.links;if(!_.isEmpty(o)){var i=t.d3ForceBounds(),r=d3.layout.force().size([i.width,i.height]).nodes(o).charge(function(e){return-6e3}).links(n);r.linkDistance(i.width/3),r.linkStrength(.2),r.gravity(.2),r.on("tick",function(e){t.d3ForceTick.call(t,e,i.width,i.height)}),r.on("start",function(){t.d3ForceStart.call(t)}),r.on("end",function(){t.d3ForceEnd.call(t)}),r.start();for(var a=0;r.alpha()>.01&&150>a;)r.tick(),a+=1;r.stop(),null!=e&&e()}}},{key:"setPositions",value:function(){for(var e=this,t=e.consts.displayOffset,o=$("#visualization-graph").width(),n=$("#visualization-graph").height(),i=o-2*t,r=n-2*t,a=e.nodes,l=0;l<a.length;l++)a[l].radius=a[l].radius||e.consts.startRadius,null!=a[l].x&&null!=a[l].y||(a[l].x=i/2+a[l].radius+t,a[l].y=r/2+a[l].radius+t)}},{key:"updateGraph",value:function(e){var t=this,o=t.consts,n=t.state;if(!t.state.disableUpdate){this.updateExistingNodes();var i=t.circles.enter().append("g");i.classed(o.circleGClass,!0),t.circles.exit().remove(),0==n.initForce?(t.setForce(function(){t.updateNewNodes.call(t,i)}),n.initForce=!0):this.updateNewNodes(i),t.paths=t.paths.data(t.links,function(e){return String(e.source.id)+"+"+String(e.target.id)});var r=t.paths;this.updateExistingPaths(r);var a=r.enter().append("path").style("marker-end","url(#end-arrow)").classed("link",!0);this.updateNewPaths(a),r.exit().remove(),null!=e&&e()}}}]),t}();return{Graph:t}}]),angular.module("contiv.dashboard",["contiv.models"]).config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",component:"dashboard"})}]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.menu",[]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.isolation.create",{url:"/create",component:"isolationpolicycreate"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.bandwidth.create",{url:"/create",component:"bandwidthpolicycreate"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection","abstract":!0,template:"<ui-view/>"})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerGraph",["Graph",function(e){var t=function(e){function t(e,o,n,i){_classCallCheck(this,t);var r=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o,n)),a=r;a.state.transition=[],a.consts.edge_buffer=200,a.consts.radiusDecay=1,a.consts.containerClass="container",a.dataSource=i;var l=d3.behavior.drag().origin(function(e){return{x:e.x,y:e.y}}).on("dragstart",function(){}).on("drag",function(e){d3.select(this).attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),a.updateGraph()}).on("dragend",function(){});a.drag=l;var s=d3.behavior.zoom().on("zoom",function(){return null!=d3.event.sourceEvent&&d3.event.sourceEvent.ctrlKey?!1:(a.zoomed.call(a),!0)}).on("zoomstart",function(e,t){});return a.dragSvg=s,a.svg.call(s).on("dblclick.zoom",null),r}return _inherits(t,e),_createClass(t,[{key:"zoomed",value:function(e,t){var o=this;if(1!=o.state.rightClick){if(this.state.justScaleTransGraph=!0,null!=e&&null!=t){var n=o.dragSvg;n.scale(t),n.translate(e);var i=function(){n.scale(t),n.translate(e)},r="zoom"+e;return void d3.select("."+this.consts.graphClass).transition(r).delay(100).duration(750).attr("transform","translate("+n.translate()+") scale("+n.scale()+")").each("end",i)}o.state.canZoom&&d3.select("."+this.consts.graphClass).attr("transform","translate("+o.dragSvg.translate()+") scale("+o.dragSvg.scale()+")")}}},{key:"onWindowResize",value:function(e){var t=document.getElementsByTagName("body")[0],o=$("#visualization-graph").offset(),n=$("#visualization-graph").width(),i=t.clientHeight;e.attr("width",n).attr("height",i-o.top-20)}},{key:"updateLinkData",value:function(){for(var e=this,t=[],o=0;o<e.nodes.length;o++)t.push(e.nodes[o].id);var n=e.dataSource.getFlowBetweenSet(t),i=n.linkData;e.links=e.dataSource.processLinkData(i,e.nodes),this.initNodes(),this.initLinks(),e.updateGraph()}}]),t}(e.Graph);return{Graph:t}}]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.networks.list",{url:"/list",component:"networkList"})}]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.organizations",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.organizations",{url:"/organizations","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.settings",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.settings",{url:"/global","abstract":!0,template:'<div ui-view class="ui container"/>'}).state("contiv.menu.settings.details",{url:"/settings",templateUrl:"settings/settingsmenu.html"}).state("contiv.menu.settings.details.logs",{url:"/logs",controller:"",templateUrl:""}).state("contiv.menu.settings.details.auth",{url:"/auth",controller:"",templateUrl:""}).state("contiv.menu.settings.details.license",{url:"/license",controller:"",templateUrl:""}).state("contiv.menu.settings.details.policies",{url:"/policies",controller:"",templateUrl:""})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Link",[function(){var e=function(){function e(t,o){_classCallCheck(this,e),this.source=t,this.target=o,this.hasPolicy=!1,this.pathPolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.style("marker-end","url(#end-arrow)").attr("d",arrowPath)}},{key:"newPathAttr",value:function(e,t){e.attr("d",arrowPath)}},{key:"arrowPath",value:function(){var e=this,t=e.target.x-e.source.x,o=e.target.y-e.source.y,n=Math.sqrt(t*t+o*o);return"M"+e.source.x+","+e.source.y+"A"+n+","+n+" 0 0,1 "+e.target.x+","+e.target.y}},{key:"installPathPolicy",value:function(e){this.hasPolicy=!0,this.pathPolicies.push(e),e.initialize(this.graph)}},{key:"uninstallPathPolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.pathPolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.pathPolicies.splice(n,1))}),0===o.pathPolicies.length&&(o.hasPolicy=!1)}},{key:"pathPolicyEvent",value:function(e,t,o){_(o.pathPolicies).forEach(function(n){n[e](t,o)})}}]),e}();return{Link:e}}]),angular.module("contiv.storagepolicies",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function e(t,o,n){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,o);if(void 0===i){var r=Object.getPrototypeOf(t);return null===r?void 0:e(r,o,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("VisualizerLink",["Link",function(e){var t=function(e){function t(e,o,n){_classCallCheck(this,t);var i=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o));return i.weight=n,i.count=1,i}return _inherits(t,e),_createClass(t,[{key:"increaseCount",value:function(){this.count+=1}},{key:"qtipHelper",value:function(){var e,t=this,o=(t.target.x-t.source.x)/2,n=(t.target.y-t.source.y)/2;return e=t.source.x<t.target.x?{my:"top center",at:"center center",target:[o,n],adjust:{y:10}}:{my:"bottom center",at:"center center",target:[o,n],adjust:{y:-10}}}},{key:"initialize",value:function(e){if(0==this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.VisualizerLink;null==o&&(o=e.state.VisualizerLink={},o.maxWeight=null,o.useAvgWeight=!0),this.updateMaxWeight()}}},{key:"setUseAvgWeight",value:function(e){this.graph.state.VisualizerLink.useAvgWeight=!!e}},{key:"setWeight",value:function(e){this.weight=e}},{key:"getRawWeight",value:function(){return this.weight}},{key:"getWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink;if(t.useAvgWeight){var o=this.weight/this.count;return o}return this.weight}},{key:"updateMaxWeight",value:function(){var e=this.graph,t=e.state.VisualizerLink,o=_.maxBy(e.links,function(e){return null!=e.graph?e.getWeight():0});t.maxWeight=o.getWeight()}},{key:"updateAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);n.colorScale=i,e.style("marker-end","url(#end-arrow)").classed(o.consts.selectedClass,function(e){return e===n.selectedEdge}).attr("d",this.arrowPath.call(t)).transition("existingPathTransition").duration(750).attr("stroke",function(e){var t=i(e.getWeight());return t})}},{key:"newPathAttr",value:function(e,t){var o=this.graph,n=o.state.VisualizerLink;
this.updateMaxWeight();var i=d3.scale.linear().domain([0,n.maxWeight]).range(["#ffb366","#F92606"]);e.transition("newPathTransition").duration(750).attrTween("opacity",function(e){return d3.interpolateString(0,1)}).attr("stroke",function(e){var t=i(e.getWeight());return t}).attr("d",this.arrowPath.call(t))}}]),t}(e.Link);return{Link:t}}]),angular.module("contiv.visualization",["contiv.models","contiv.directives","contiv.utils","contiv.graph"]).config(["$stateProvider",function(e){e.state("contiv.menu.visualization",{url:"/visualization","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes","contiv.organizations","contiv.settings","contiv.visualization"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","$stateParams","ApplicationGroupsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.applicationgroups.list")}function a(){r()}function l(){n.get().then(function(e){u.networks=_.filter(e,{tenantName:"default"})})}function s(){u.form.$valid&&(i.hideServerError(u),i.startLoader(u),u.applicationGroup.networkName=u.selectedNetwork.networkName,u.applicationGroup.key=o.generateKey(u.applicationGroup),o.create(u.applicationGroup).then(function(e){i.stopLoader(u),r()},function(e){i.stopLoader(u),i.showServerError(u,e)}))}function c(){i.stopLoader(u),i.hideServerError(u),u.applicationGroup={groupName:"",networkName:"",policies:[],netProfile:"",tenantName:"default"}}var u=this;u.networks=[],u.applicationGroup={},u.selectedNetwork={},u.mode="edit",l(),u.createApplicationGroup=s,u.cancelCreating=a,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.applicationgroups.edit")?u.mode="edit":u.mode="details"}function r(){e.go("contiv.menu.applicationgroups.list")}function a(){e.go("contiv.menu.applicationgroups.details",{key:u.applicationGroup.key})}function l(){a()}function s(){n.hideServerError(u),n.startLoader(u),o["delete"](u.applicationGroup).then(function(e){n.stopLoader(u),r()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function c(){n.hideServerError(u),n.startLoader(u),o.save(u.applicationGroup).then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)})}var u=this;u.applicationGroup={},u.selectedNetwork={},n.stopLoader(u),n.hideServerError(u),o.getModelByKey(t.key).then(function(e){u.applicationGroup=e}),u.saveApplicationGroup=c,u.cancelEditing=l,u.deleteApplicationGroup=s,i()}]),angular.module("contiv.applicationgroups").directive("ctvBandwidthpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","NetprofilesModel",function(e,t){function o(){t.get().then(function(t){e.netProfiles=_.filter(t,{tenantName:"default"}),""!==e.applicationgroup.netProfile&&(e.selectedNetprofile.policy=_.find(e.netProfiles,function(t){return t.profileName===e.applicationgroup.netProfile}))})}e.netProfiles=[],e.selectedNetprofile={policy:{}},e.updateApplicationgroup=function(){null===e.selectedNetprofile.policy?e.applicationgroup.netProfile="":e.applicationgroup.netProfile=e.selectedNetprofile.policy.profileName},o()}],templateUrl:"applicationgroups/bandwidthpolicy.html"}});var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Node",[function(){var e=function(){function e(t,o,n,i,r){_classCallCheck(this,e),this.x=t,this.y=o,this.radius=r,this.id=n,this.text=i,this.radius=r,this.hasPolicy=!1,this.policy=null,this.nodePolicies=[],this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){0==this.initialized&&(this.initialized=!0,this.graph=e)}},{key:"updateAttr",value:function(e,t){e.attr("transform",function(e){return"translate("+e.x+","+e.y+")"})}},{key:"newNodeAttr",value:function(e,t){}},{key:"setRadius",value:function(e){this.radius=e}},{key:"installNodePolicy",value:function(e){this.hasPolicy=!0,this.nodePolicies.push(e),e.initialize(this.graph)}},{key:"uninstallNodePolicy",value:function(e){var t,o=this;t="string"==typeof e?e:e.policyName,_(o.nodePolicies).forEach(function(e,n){e.policyName===t&&(e.destroy(),o.nodePolicies.splice(n,1))}),0===o.nodePolicies.length&&(o.hasPolicy=!1)}},{key:"nodePolicyEvent",value:function(e,t,o){_.forEach(this.nodePolicies,function(n){n[e](t,o)})}}]),e}();return{Node:e}}]),angular.module("contiv.applicationgroups").directive("ctvIsolationpolicy",function(){return{restrict:"E",scope:{mode:"=",applicationgroup:"="},controller:["$scope","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel",function(e,t,o,n,i){function r(){e.applicationgroup.policies.forEach(function(t){i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)})})}function a(){n.get().then(function(t){e.isolationPolicies=_.filter(t,{tenantName:"default"})})}e.incomingRules=[],e.outgoingRules=[],e.selectedPolicy={policy:{}},e.selectedPolicies=[],e.isolationPolicies=[],e.addIsolationPolicy=function(){var t=e.selectedPolicy.policy.policyName;void 0!==t&&0==_.includes(e.selectedPolicies,t)&&(e.selectedPolicies.push(t),i.getIncomingRules(t,"default").then(function(t){Array.prototype.push.apply(e.incomingRules,t)}),i.getOutgoingRules(t,"default").then(function(t){Array.prototype.push.apply(e.outgoingRules,t)}),e.applicationgroup.policies.push(t))},e.removeIsolationPolicy=function(t){_.remove(e.selectedPolicies,function(e){return e===t}),_.remove(e.applicationgroup.policies,function(e){return e===t}),_.remove(e.incomingRules,function(e){return e.policyName===t}),_.remove(e.outgoingRules,function(e){return e.policyName===t})},("details"==e.mode||"edit"==e.mode&&""!=e.applicationgroup.groupName)&&(void 0===e.applicationgroup.policies&&(e.applicationgroup.policies=[]),r()),a()}],templateUrl:"applicationgroups/isolationpolicy.html"}});var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("VisualizerNode",["Node",function(e){var t=function(e){function t(e,o,n,i,r,a,l,s,c){_classCallCheck(this,t);var u=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,o,n,i,r));return u.parent=a,u.ancestors=l,null==s?u.xStart=e:u.xStart=s,null==c?u.yStart=o:u.yStart=c,u}return _inherits(t,e),_createClass(t,[{key:"newNodeAttr",value:function(e,t){var o=this.graph;null!=o.consts.containerClass&&null==o.dataSource.children_struct[t.id]&&e.classed(o.consts.containerClass,!0),e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){if(null!=e.xStart&&null!=e.yStart){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")}return d3.interpolateString("translate("+e.x+","+e.y+")","translate("+e.x+","+e.y+")")})}}]),t}(e.Node);return{Node:t}}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function t(e,o,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,o);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:t(r,o,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("NodeSelectionPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"NodeSelectionPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=e.state.NodeSelectionPolicy={};o.selectedNodes=[];var n=e.consts.NodeSelectionPolicy={};n.selectedClass="selected";var i=e.drag;i.on("drag",function(t){var o=e;if(null!=o.consts.NodeSelectionPolicy){var n=o.consts.NodeSelectionPolicy.selectedClass,i=d3.selectAll("."+n);-1==i[0].indexOf(this)&&(i.classed(n,!1),i=d3.select(this),i.classed(n,!0)),i.attr("transform",function(e,t){return e.x+=d3.event.dx,e.y+=d3.event.dy,"translate("+[e.x,e.y]+")"}),o.updateGraph()}})}}},{key:"addSelectNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;e.classed(i.selectedClass,!0),n.selectedNodes.push(t)}},{key:"removeSelectFromNode",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy,i=o.consts.NodeSelectionPolicy;o.circles.filter(function(e){return e.id===t.id}).classed(i.selectedClass,!1);var r=n.selectedNodes.indexOf(t);n.selectedNodes.splice(r,1)}},{key:"removeAllSelectedNodes",value:function(){var e=this.graph,t=e.state.NodeSelectionPolicy,o=e.consts.NodeSelectionPolicy;e.circles.classed(o.selectedClass,!1),t.selectedNodes=[]}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.stopPropagation(),d3.event.ctrlKey?n.selectedNodes.indexOf(t)>-1?this.removeSelectFromNode(e,t):this.addSelectNode(e,t):-1==n.selectedNodes.indexOf(t)&&this.removeAllSelectedNodes()}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;d3.event.ctrlKey||n.selectedNodes.length<=1&&this.removeSelectFromNode(e,t)}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").directive("ctvBandwidth",function(){return{restrict:"E",scope:{bandwidthPolicy:"=",mode:"@"},link:function(e){if(""!=e.bandwidthPolicy.bandwidth){var t=e.bandwidthPolicy.bandwidth.split(" ");e.bandwidthPolicy.bandwidthNumber=Number(t[0]),e.bandwidthPolicy.bandwidthUnit=t[1]}},templateUrl:"network_policies/bandwidth.html"}}),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.details",{url:"/details/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.bandwidth.edit",{url:"/edit/:key",controller:"BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl",templateUrl:"network_policies/bandwidthpolicydetails.html"})}]).controller("BandwidthPolicyDetailsCtrl",["$state","$stateParams","NetprofilesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.networkpolicies.bandwidth.edit")?u.mode="edit":u.mode="details"}function r(){n.hideServerError(u),n.startLoader(u),o.deleteUsingKey(u.policy.key,"name").then(function(e){n.stopLoader(u),a()},function(e){n.stopLoader(u),n.showServerError(u,e)})}function a(){e.go("contiv.menu.networkpolicies.list.bandwidth")}function l(){e.go("contiv.menu.networkpolicies.bandwidth.details",{key:u.policy.key})}function s(){l()}function c(){u.form.$valid&&(n.hideServerError(u),n.startLoader(u),u.policy.bandwidth=u.policy.bandwidthNumber+" "+u.policy.bandwidthUnit,o.save(u.policy).then(function(e){n.stopLoader(u),l()},function(e){n.stopLoader(u),n.showServerError(u,e)}))}var u=this;u.bandwidthProfiles=[],o.getModelByKey(t.key).then(function(e){u.policy=e}),n.stopLoader(u),n.hideServerError(u),i(),u.deletePolicy=r,u.savePolicy=c,u.cancelEditing=s}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.bandwidth",{url:"/bandwidth",controller:"BandwidthPolicyListCtrl as bandwidthPolicyListCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"})}]).controller("BandwidthPolicyListCtrl",["$scope","$interval","$filter","NetprofilesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"profileName")},function(e){i.stopLoader(a)})}var a=this;r(!0);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("PathChangeViewPolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"PathChangeViewPolicy"));return o.$state=e,o}return _inherits(t,e),_createClass(t,[{key:"generateList",value:function(e){var t=this,o=[],n=function i(e,o){for(var n=t.graph.dataSource.children_struct[e],r=0;r<n.length;r++){var a=n[r];if(t.graph.dataSource.hasChild(a)===!0){var l=i(a,o);o.concat(l)}else o.push(a)}};return n(e,o),o}},{key:"viewEdge",value:function(e){var t=[],o=[],n=e.source.id,i=e.target.id;t=this.graph.dataSource.hasChild(n)===!0?this.generateList(n):[n],o=this.graph.dataSource.hasChild(i)===!0?this.generateList(i):[i],this.$state.go("contiv.menu.visualization.edge",{sourceName:n,targetName:i,sourceList:t,targetList:o})}},{key:"mousedown",value:function(e,t){this.viewEdge(t)}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.networkpolicies.list.isolation")}function s(){e.go("contiv.menu.networkpolicies.isolation.details",{key:D.policy.key})}function c(){s()}function u(){s()}function d(){a.hideServerError(D),a.startLoader(D),o["delete"](D.policy).then(function(e){a.stopLoader(D),l()},function(e){a.stopLoader(D),a.showServerError(D,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?D.mode="edit":D.mode="details"}function f(){D.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIpAddress:"",protocol:"tcp",port:0,direction:"in",tenantName:"default",policyName:D.policy.policyName},D.newIncomingSelectedApplicationGroup="",D.newIncomingSelectedNetwork="",D.disableIncomingNetworkSelection=!1,D.disableIncomingApplicationGroupSelection=!1,D.disableIncomingIPAddressSelection=!1,D.incorrectCIDR=!1,D.validateCIDRFlag=!1}function v(){D.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIpAddress:"",protocol:"tcp",port:0,direction:"out",tenantName:"default",policyName:D.policy.policyName},D.newOutgoingSelectedApplicationGroup="",D.newOutgoingSelectedNetwork="",D.disableOutgoingNetworkSelection=!1,D.disableOutgoingApplicationGroupSelection=!1,D.disableOutgoingIPAddressSelection=!1,D.incorrectCIDR=!1,D.validateCIDRFlag=!1}function h(){i.get().then(function(e){D.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){D.applicationGroups=_.filter(e,{tenantName:"default"})})}function m(){null!=D.newOutgoingSelectedApplicationGroup?(D.newOutgoingRule.toEndpointGroup=D.newOutgoingSelectedApplicationGroup.groupName,D.newOutgoingRule.toNetwork="",D.disableOutgoingNetworkSelection=!0):(D.newOutgoingRule.toEndpointGroup="",D.disableOutgoingNetworkSelection=!1)}function y(){null!=D.newIncomingSelectedApplicationGroup?(D.newIncomingRule.fromEndpointGroup=D.newIncomingSelectedApplicationGroup.groupName,D.newIncomingRule.fromNetwork="",D.disableIncomingNetworkSelection=!0):(D.newIncomingRule.fromEndpointGroup="",D.disableOutgoingApplicationGroupSelection=!1,D.disableIncomingNetworkSelection=!1)}function w(){null!=D.newOutgoingSelectedNetwork?(D.newOutgoingRule.toNetwork=D.newOutgoingSelectedNetwork,D.newOutgoingRule.ToEndpointGroup="",D.disableOutgoingApplicationGroupSelection=!0,D.disableOutgoingIPAddressSelection=!0):(D.newOutgoingRule.toIpAddress="",D.disableOutgoingApplicationGroupSelection=!1,D.disableOutgoingIPAddressSelection=!1)}function b(){null!=D.newIncomingSelectedNetwork?(D.newIncomingRule.fromNetwork=D.newIncomingSelectedNetwork,D.newIncomingRule.fromEndpointGroup="",D.disableIncomingApplicationGroupSelection=!0,D.disableIncomingIPAddressSelection=!0):(D.newIncomingRule.fromNetwork="",D.disableIncomingApplicationGroupSelection=!1,D.disableIncomingIPAddressSelection=!1)}function P(e){e.ruleId=(D.incomingRules.length+D.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function S(){N(D.newIncomingRule.fromIpAddress)&&(a.hideServerError(D),a.startLoader(D),P(D.newIncomingRule),D.newIncomingRule.key=n.generateKey(D.newIncomingRule),n.create(D.newIncomingRule).then(function(e){a.stopLoader(D),D.incomingRules.push(e),f()},function(e){a.stopLoader(D),a.showServerError(D,e)}))}function k(){""==D.newIncomingRule.fromIpAddress?(D.incorrectCIDR=!1,D.disableIncomingNetworkSelection=!1):D.disableIncomingNetworkSelection=!0,D.validateCIDRFlag&&D.incorrectCIDR&&N(D.newIncomingRule.fromIpAddress)}function E(){""==D.newOutgoingRule.toIpAddress?(D.incorrectCIDR=!1,D.disableOutgoingNetworkSelection=!1):D.disableOutgoingNetworkSelection=!0,D.validateCIDRFlag&&D.incorrectCIDR&&N(D.newOutgoingRule.toIpAddress)}function N(e){var t=new RegExp(ContivGlobals.CIDR_REGEX);return""==e?!0:t.test(e)?(D.incorrectCIDR=!1,!0):(D.incorrectCIDR=!0,D.validateCIDRFlag=!0,!1)}function C(){N(D.newOutgoingRule.toIpAddress)&&(a.hideServerError(D),a.startLoader(D),P(D.newOutgoingRule),D.newOutgoingRule.key=n.generateKey(D.newOutgoingRule),n.create(D.newOutgoingRule).then(function(e){a.stopLoader(D),D.outgoingRules.push(e),v()},function(e){a.stopLoader(D),a.showServerError(D,e)}))}function O(e){a.hideServerError(D),a.startLoader(D),n.deleteUsingKey(e).then(function(t){a.stopLoader(D),_.remove(D.incomingRules,function(t){return t.key==e})},function(e){a.stopLoader(D),a.showServerError(D,e)})}function L(e){a.hideServerError(D),a.startLoader(D),n.deleteUsingKey(e).then(function(t){a.stopLoader(D),_.remove(D.outgoingRules,function(t){return t.key==e})},function(e){a.stopLoader(D),a.showServerError(D,e)})}var D=this;D.networks=[],D.applicationGroups=[],D.disableOutgoingNetworkSelection=!1,D.disableIncomingNetworkSelection=!1,D.disableOutgoingApplicationGroupSelection=!1,D.disableIncomingApplicationGroupSelection=!1,D.disableIncomingIPAddressSelection=!1,D.disableOutgoingIPAddressSelection=!1,D.newIncomingSelectedApplicationGroup="",D.newOutgoingSelectedApplicationGroup="",D.newIncomingSelectedNetwork="",D.newOutgoingSelectedNetwork="",D.incorrectCIDR=!1,D.validateCIDRFlag=!1,a.stopLoader(D),a.hideServerError(D),o.getModelByKey(t.key).then(function(e){D.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){D.incomingRules=e,f()}),n.getOutgoingRules(e.policyName,"default").then(function(e){D.outgoingRules=e,v()})}),h(),g(),D.deletePolicy=d,D.deleteIncomingRule=O,D.deleteOutgoingRule=L,D.addIncomingRule=S,D.addOutgoingRule=C,D.doneEditing=u,D.cancelEditing=c,D.onChangeOutgoingApplicationGroupSelection=m,D.onChangeIncomingApplicationGroupSelection=y,D.onChangeOutgoingNetworkSelection=w,D.onChangeIncomingNetworkSelection=b,D.onChangeIncomingIPAddress=k,D.onChangeOutgoingIPAddress=E,p()}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("Policy",[function(){var e=function(){function e(t){_classCallCheck(this,e),this.policyName=t,this.graph=null,this.initialized=!1}return _createClass(e,[{key:"initialize",value:function(e){this.initialized||(this.initialized=!0,this.graph=e)}},{key:"mouseover",value:function(e,t){}},{key:"dblclick",value:function(e,t){}},{key:"contextmenu",value:function(e,t){}},{key:"mouseout",value:function(e,t){}},{key:"mousedown",value:function(e,t){}},{key:"mouseup",value:function(e,t){}},{key:"destroy",value:function(){}}]),e}();return{Policy:e}}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list.isolation",{url:"/isolation",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.graph").factory("PolicyService",["Policy","QTipPolicy","PathChangeViewPolicy","NodeSelectionPolicy","SplitJoinNodePolicy","SplitJoinViewPolicy","SaveStatePolicy",function(e,t,o,n,i,r,a){return{Policy:e.Policy,QTipPolicy:t.Policy,PathChangeViewPolicy:o.Policy,NodeSelectionPolicy:n.Policy,SplitJoinNodePolicy:i.Policy,SplitJoinViewPolicy:r.Policy,SaveStatePolicy:a.Policy}}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.list",{url:"/list","abstract":!0,controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.list.redirection",{url:"/redirection",template:""})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){function t(){e.$current.includes["contiv.menu.networkpolicies.list.isolation"]&&e.go("contiv.menu.networkpolicies.isolation.create"),e.$current.includes["contiv.menu.networkpolicies.list.bandwidth"]&&e.go("contiv.menu.networkpolicies.bandwidth.create")}var o=this;o.createNetworkPolicy=t}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function o(e,t,n){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:o(r,t,n)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(n)};angular.module("contiv.graph").factory("QTipPolicy",["Policy",function(e){var t=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"QTipPolicy"))}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){if(!this.initialized){_get(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"initialize",this).call(this,e);var o=this,n=e.state.QTipPolicy={};n.mousedown=!1,e.consts.QTipPolicy={},$("#visualization-graph").mouseup(function(e){n.mouseup=!1});var i=e.updateNewNodes;e.updateNewNodes=function(t){i.call(e,t),o.updateNewNodes(t)};var r=e.updateNewPaths;e.updateNewPaths=function(t){r.call(e,t),o.updateNewPaths(t)}}}},{key:"destroy",value:function(){$('[id^="qtip"]').remove()}},{key:"mousedown",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!0}},{key:"mouseup",value:function(e,t){var o=this.graph,n=o.state.QTipPolicy;n.mousedown=!1}},{key:"whenQTipAvailable",value:function(e){var t=this,o=500;window.setTimeout(function(){null!=$(document).qtip?e():window.setTimeout(t.whenQTipAvailable(e),o)},o)}},{key:"updateNewNodes",value:function(e){function t(){e.each(function(e){var t,i=this;if(null!=o.dataSource.children_struct[e.id]){t="<b><u>Selectors:</b></u> ";var r=o.dataSource.selectors[e.id],a=!1;for(var l in r)a=!0,t+=l+" : <i>"+r[l]+"</i>,\n ";a===!1&&(t="No Selectors, ")}else{t="<b><u>Labels:</b></u> ";var s=o.dataSource.labels[e.id],a=!1;for(var l in s)a=!0,t+=l+" : <i>"+s[l]+"</i>,\n ";a===!1&&(t="No labels, ")}t=t.slice(0,-2),$(i).qtip({content:{title:e.id,text:t},events:{show:function(){var t=$(i).qtip("api"),r=$("#graphContainer").offset(),a=[r.left+(e.x*o.dragSvg.scale()+o.dragSvg.translate()[0]),r.top+(e.y+e.radius)*o.dragSvg.scale()+o.dragSvg.translate()[1]];return t.set("position.target",a),!n.mousedown}},show:{delay:0,solo:$("#visualization-graph")},style:{classes:"qtip-blue qtip-shadow"},position:{my:"top center",at:"bottom center"},hide:{event:"mousedown mouseleave"}})})}var o=this.graph,n=o.state.QTipPolicy;void 0!=$(document).qtip?t():this.whenQTipAvailable(t)}},{key:"updateNewPaths",value:function(e){var t=this.graph,o=t.state.QTipPolicy;void 0!=$(document).qtip&&e.each(function(e){var t=this,n=d3.select(this).node(),i=(n.getPointAtLength(n.getTotalLength()/2),e.qtipHelper()),r="Bytes: "+e.getWeight();$(t).qtip({content:{text:r},events:{show:function(){return!o.mousedown}},show:{delay:0,solo:$("#graphContainer")},style:{classes:"qtip-blue qtip-shadow"},position:{my:i.my,at:"center center",target:"mouse",adjust:i.adjust},hide:{event:"mousedown mouseleave"}})})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function a(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.newNetwork.key=s.newNetwork.tenantName+":"+s.newNetwork.networkName,o.create(s.newNetwork).then(function(e){n.stopLoader(s),i()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}function l(){n.stopLoader(s),n.hideServerError(s),s.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var s=this;s.cidrPattern=ContivGlobals.CIDR_REGEX,s.createNetwork=a,s.cancelCreating=r,l()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"}).state("contiv.menu.networks.details.info",{url:"/info",templateUrl:"networks/networkinfo.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.networks.list")}function c(){l.hideServerError(d),l.startLoader(d),r["delete"](d.network).then(function(e){l.stopLoader(d),s()},function(e){l.stopLoader(d),l.showServerError(d,e)})}function u(e){a.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;l.stopLoader(d),l.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=c;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details.stats",{url:"/stats",controller:"NetworkStatsCtrl as networkStatsCtrl",templateUrl:"networks/networkstats.html"})}]).controller("NetworkStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.NETWORKS_INSPECT_ENDPOINT,e).then(function(e){if(s.networkInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.endpoints){var t=a.buildEndPoints(e.Oper.endpoints);a.checkContainerChanged(s.containerDetails,t)&&(s.endpoints=e.Oper.endpoints,s.containerDetails=t)}else s.endpoints=[],s.containerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.nodes").factory("BgpService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.BGPS_ENDPOINT+o.key+"/";return e.get(i).then(function(e){n.resolve(e.data),o.neighbor=e.data,o.neighbors.push({name:o.neighbor.neighbor,value:o.neighbor["neighbor-as"]})},function(e){n.reject(e.data)}),n.promise}function n(t){var o=ContivGlobals.BGPS_ENDPOINT+t.key+"/";return e.post(o,t.neighbor)}function i(o){var n=t.defer(),i=ContivGlobals.BGPS_INSPECT_ENDPOINT+o+"/";return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getBgp:o,updateBgp:n,getBgpInspect:i}}]),angular.module("contiv.nodes").directive("ctvLogs",function(){return{restrict:"E",templateUrl:"nodes/logs.html",scope:{log:"=",title:"@"}}}),angular.module("contiv.nodes").factory("LogService",["$http","$q",function(e,t){function o(){var o=t.defer(),n=ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data)},function(e){o.reject(e.data)}),o.promise}function n(){var o=t.defer(),n=ContivGlobals.NODES_LAST_JOB_ENDPOINT;return e.get(n).then(function(e){o.resolve(e.data);
},function(e){o.reject(e.data)}),o.promise}return{getActiveLogs:o,getLastLogs:n}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.activelog",{url:"/activelog",controller:"NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl",template:'<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'})}]).controller("NodeActiveJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getActiveLogs().then(function(e){i.activeLogs=e},function(e){i.activeLogs={desc:"There is currently no active job. Check Last Job for a job that recently finished."}})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function a(){r()}function l(){s.form.$valid&&(n.hideServerError(s),n.startLoader(s),s.nodeOpsObj.nodes=[t.key],i.cleanupExtraVars(s),i.createExtraVars(s),o.commission(s.nodeOpsObj).then(function(e){n.stopLoader(s),r()},function(e){n.stopLoader(s),n.showServerError(s,e)}))}var s=this;s.nodeOpsObj={},s.extra_vars={},s.ansibleVariables=[],s.envVariables=[],i.getSettings(s),s.cancelCommissioningNode=a,s.commission=l,n.stopLoader(s),n.hideServerError(s)}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}();angular.module("contiv.graph").factory("SaveStatePolicy",["Policy",function(e){var t=function(e){function t(e){_classCallCheck(this,t);var o=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"SaveStatePolicy"));return o.savedState=e,o}return _inherits(t,e),_createClass(t,[{key:"initialize",value:function(e){this.graph=e;var t=this;e.destroy=function(){t.graphDestroy.call(e,t.savedState)},e.load=function(o){t.graphLoad.call(e,o)}}},{key:"graphDestroy",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){t.destroy(e)}),_(t.defaultPathPolicies).forEach(function(t){t.destroy(e)});for(var o in t.bindings)$(window).off(o,t.bindings[o])}},{key:"graphLoad",value:function(e){var t=this;_(t.defaultNodePolicies).forEach(function(t){null!=t.load&&t.load(e)}),_(t.defaultPathPolicies).forEach(function(t){null!=t.load&&t.load(e)})}}]),t}(e.Policy);return{Policy:t}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"}).state("contiv.menu.nodes.details.edit",{url:"/edit",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel","BgpService",function(e,t,o,n,i,r){function a(){var e={nodes:[t.key]};i.decommission(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1})}function s(){switch(h.node.inventory_state.status){case"Unallocated":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Decommissioned":h.showCommissionButton=!0,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!1;break;case"Provisioning":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Allocated":h.showCommissionButton=!1,h.commissionButtonEnabled=!0,h.upgradeButtonEnabled=!0;break;case"Cancelled":h.showCommissionButton=!1,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;case"Maintenance":h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1;break;default:h.showCommissionButton=!0,h.commissionButtonEnabled=!1,h.upgradeButtonEnabled=!1}}function c(e){i.getModelByKey(t.key,e).then(function(e){h.node=e,s()})}function u(){e.is("contiv.menu.nodes.details.edit")?h.mode="edit":h.mode="details"}function d(){e.go("contiv.menu.nodes.details.info")}function p(){h.form.$valid&&(h.neighbor.key=t.key,h.neighbors.forEach(function(e){h.neighbor.neighbor=e.name,h.neighbor["neighbor-as"]=e.value}),r.updateBgp(h).then(function(e){h.neighbor=e.config.data,d()},function(e){}))}function f(){r.getBgp(h).then(function(e){h.neighbor=e},function(e){})}function v(){r.getBgpInspect(t.key).then(function(e){h.inspect=e,h.routes=e.Oper.routes,h.filteredroutes=e.Oper.routes},function(e){})}var h=this;h.numberpattern=ContivGlobals.NUMBER_REGEX,h.decommission=a,h.upgrade=l,h.setMode=u,h.updateBgpInfo=p,h.returnToInfo=d,h.neighbors=[],h.neighbor={},h.key=t.key,f(),v(),u(),c(!1);var g;angular.isDefined(g)||(g=n(function(){c(!0)},5e3)),o.$on("$destroy",function(){n.cancel(g)})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function n(e,t,o){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,t);if(void 0===i){var r=Object.getPrototypeOf(e);return null===r?void 0:n(r,t,o)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinNodePolicy",["NodeSelectionPolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return e.policyName="SplitJoinNodePolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinNodePolicy={};t.splitNodes=[]}}},{key:"dblclick",value:function(e,t){var o=this.graph,n=o.state.SplitJoinNodePolicy;d3.event.ctrlKey||(n.selectedNodes.indexOf(t)>-1?this.splitMultipleNodes(n.selectedNodes):(this.removeAllSelectedNodes(),this.splitNode(t)))}},{key:"contextmenu",value:function(e,t){var o=this.graph,n=o.state.NodeSelectionPolicy;if(d3.event.preventDefault(),!d3.event.ctrlKey){var i=n.selectedNodes;if(i.indexOf(t)>-1)for(var r=0;r<i.length;r++)this.joinNode(i[r]);else this.removeAllSelectedNodes(),this.joinNode(t)}}},{key:"__splitNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=e.id,r=o.dataSource.children_struct;if(void 0!==r[i]&&!_.isEmpty(r[i])){o.nodes=_.filter(o.nodes,function(t){return t!=e}),o.spliceLinksForNode(e);for(var a=[],l=0;l<o.nodes.length;l++)a.push(o.nodes[l].id);for(var s=[],l=0;l<r[i].length;l++)a.push(r[i][l]),s.push(r[i][l]);var c=o.dataSource.getFlowBetweenSet(a),u=e.x,d=e.y,p=e.ancestors.slice();p.splice(0,0,e.id);for(var f=e.id,v=[],h=e.radius*o.consts.radiusDecay,g=c.nodeData,l=0;l<g.length;l++)if(s.indexOf(g[l].id)>-1){var m=g[l].id,y=g[l].text,w=new t.Node(null,null,m,y,h,f,p,u,d);w.initialize(o),o.nodes.push(w),v.push(w)}return o.links=o.dataSource.processLinkData(c.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.push(e.id),v}}},{key:"splitNode",value:function(e){var t=this.__splitNode(e);null!=t&&this.splitNodeEvent(t)}},{key:"splitMultipleNodes",value:function(e){for(var t=(this.graph,[]),o=0;o<e.length;o++){var n=this.__splitNode(e[o]);t=t.concat(n)}this.splitMultipleNodesEvent(n)}},{key:"splitNodeEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"splitMultipleNodesEvent",value:function(e){var t=this.graph;t.setPositions(),t.updateGraph()}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy;if(-1!=o.nodes.indexOf(e)){var i=o.dataSource.children_struct,r=e.id;if(!(i.topLevel.indexOf(r)>-1)){for(var a=[],l=[],s=0;s<o.nodes.length;s++)-1==o.nodes[s].ancestors.indexOf(e.parent)?l.push(o.nodes[s].id):a.push(o.nodes[s]);var c=e.parent;l.push(e.parent);var u=e.radius/o.consts.radiusDecay,d=e.x,p=e.y,f=e.ancestors[1],v=e.ancestors.slice(1),h=new t.Node(d,p,c,c,u,f,v);o.nodes.push(h);for(var g=o.dataSource.getFlowBetweenSet(l),s=0;s<a.length;s++){var m=a[s];o.nodes.splice(o.nodes.indexOf(m),1),o.spliceLinksForNode(m)}return o.links=o.dataSource.processLinkData(g.linkData,o.nodes),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(h.id),1),h}}}},{key:"joinNode",value:function(e){var t=this.__joinNode(e);null!=t&&this.joinNodeEvent(t)}},{key:"joinMultipleNode",value:function(e){for(var t=[],o=0;o<e.length;o++){var n=this.__joinNode(e[o]);t.push(n)}this.joinMultipleNodesEvent(t)}},{key:"joinNodeEvent",value:function(e){var t=this.graph;t.updateGraph()}},{key:"joinMultipleNodesEvent",value:function(e){var t=this.graph;t.updateGraph()}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.nodes").directive("ctvNodestatus",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestatus.html"}}).directive("ctvNodestate",function(){return{restrict:"E",scope:{node:"="},templateUrl:"nodes/nodestate.html"}}),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeDiscoverCtrl as nodeDiscoverCtrl",templateUrl:"nodes/nodediscover.html"})}]).controller("NodeDiscoverCtrl",["$state","$stateParams","NodesModel","CRUDHelperService","NodesService",function(e,t,o,n,i){function r(){e.go("contiv.menu.nodes.list")}function a(){r()}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),s(),i.createExtraVars(c),o.discover(c.nodeOpsObj).then(function(e){n.stopLoader(c),r()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){c.nodeOpsObj.addrs=_.words(c.nodeIPAddr,/[^, ]+/g)}var c=this;c.nodeOpsObj={},c.extra_vars={},c.ansibleVariables=[],c.envVariables=[],c.nodeIPAddr="",i.getSettings(c),c.discover=l,c.cancelDiscoveringNode=a,n.stopLoader(c),n.hideServerError(c)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.lastlog",{url:"/lastlog",controller:"NodeLastJobLogsCtrl as nodeLastJobLogsCtrl",template:'<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'})}]).controller("NodeLastJobLogsCtrl",["$scope","$interval","LogService",function(e,t,o){function n(){o.getLastLogs().then(function(e){i.lastLogs=e},function(e){})}var i=this;n();var r;angular.isDefined(r)||(r=t(function(){n()},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(r)})}]);var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),_get=function i(e,t,o){null===e&&(e=Function.prototype);var n=Object.getOwnPropertyDescriptor(e,t);if(void 0===n){var r=Object.getPrototypeOf(e);return null===r?void 0:i(r,t,o)}if("value"in n)return n.value;var a=n.get;if(void 0!==a)return a.call(o)};angular.module("contiv.graph").factory("SplitJoinViewPolicy",["SplitJoinNodePolicy","VisualizerNode",function(e,t){var o=function(e){function o(){_classCallCheck(this,o);var e=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return e.policyName="SplitJoinViewPolicy",e}return _inherits(o,e),_createClass(o,[{key:"initialize",value:function(e){if(!this.initialized){_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"initialize",this).call(this,e);var t=e.state.SplitJoinViewPolicy={};t.savedStates=[],t.eventHistory=[],t.focusGroups=[],t.foci=[],t.zooms={},t.layout={},t.layoutDefault=null,t.zoomDefault=null,t.nodeIdsToReshow=null,t.backButtonElem=null,t.titleElem=null;var n=e.consts.SplitJoinViewPolicy={};n.boundary=.8,e.d3ForceBounds=this.d3ForceBounds,e.d3ForceTick=this.d3ForceTick,e.d3ForceStart=this.d3ForceStart,e.d3ForceEnd=this.d3ForceEnd}}},{key:"installBackButton",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;n.backButtonElem=e,n.backButton=function(){n.eventHistory.length>0&&o.undoLastEvent.call(o)}}},{key:"installTitle",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy;o.titleElem=e}},{key:"destroy",value:function(e){null!=e&&this.save(e)}},{key:"save",value:function(e){var t=this.graph,o=t.state.SplitJoinViewPolicy,n=t.nodes,i=t.links,r=null;null!=o.titleElem&&(r=o.titleElem.text());var a=o.focusGroups,l=o.eventHistory,s=o.zooms,c=o.layout,u=o.layoutDefault,d=o.zoomDefault,p={nodes:n,links:i,states:o.savedStates,currTitle:r,focusGroups:a,eventHistory:l,zooms:s,layout:c,layoutDefault:u,zoomDefault:d};e.SplitJoinViewPolicy=p}},{key:"load",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;e=e.SplitJoinViewPolicy,n.savedStates=e.states,o.links=e.links,o.nodes=e.nodes;var i=e.currTitle;null!=n.titleElem&&n.titleElem.text(i),n.eventHistory=e.eventHistory,n.focusGroups=e.focusGroups,n.zooms=e.zooms,n.layout=e.layout,n.layoutDefault=e.layoutDefault,n.zoomDefault=e.zoomDefault,null!=n.backButtonElem&&n.eventHistory.length>0&&n.backButtonElem.fadeTo("slow",1);var r=o.dataSource.children_struct;_.forEach(o.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(r[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var a;if(0===n.focusGroups.length){a=n.layoutDefault;var l=n.zoomDefault;o.zoomed(l[0],l[1])}else{var l=n.zooms[n.focusGroups];null!=l&&o.zoomed(l[0],l[1]),a=n.layout[n.focusGroups]}_.forEach(o.nodes,function(e){var t=a[e.id];null==t&&console.log(a,e),e.x=t.x,e.y=t.y}),o.state.initForce=!0,o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)})}},{key:"dblclick",value:function(e,t){var n=this.graph,i=n.state.SplitJoinViewPolicy,r=t.id,a=n.dataSource.children_struct;if(void 0!==a[r]&&!_.isEmpty(a[r])){if(i.focusGroups.slice(),0===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[0]],t.id)?i.focusGroups[0]=t.id:1===i.focusGroups.length?i.focusGroups.push(t.id):_.includes(a[i.focusGroups[1]],t.id)&&(i.focusGroups[1]=t.id),2===i.focusGroups.length&&i.focusGroups[1]===t.id){var l=[t],s=[],c=a[i.focusGroups[0]];_.forEach(n.nodes,function(e){_.includes(c,e.id)&&(s.push(e.id),l.push(e))})}else{var l=[t],s=[];_.forEach(n.links,function(e){e.source===t&&-1==s.indexOf(e.target.id)?(e.target.SplitJoinViewPolicy={},e.target.SplitJoinViewPolicy.type="connected",s.push(e.target.id),l.push(e.target)):e.target===t&&-1==s.indexOf(e.source.id)&&(e.source.SplitJoinViewPolicy={},e.source.SplitJoinViewPolicy.type="connected",s.push(e.source.id),l.push(e.source))})}n.circles.each(function(e){e.id!==t.id&&n.spliceLinksForNode(e)}),n.updateGraph(),n.state.disableUpdate=!0,n.circles.each(function(e){e.id!==t.id?d3.select(this).transition().delay(200).duration(400).style("opacity",0):null!=$(this).qtip&&$(this).qtip("disable",!0)});var u=n.dragSvg.translate(),d=n.dragSvg.scale(),p=parseFloat(n.svg.style("width"))/d/2+u[0],f=parseFloat(n.svg.style("height"))/d/2+u[1];t.xStart=t.x,t.yStart=t.y,t.x=p,t.y=f,e.transition("nodePositionTransition").duration(750).attrTween("transform",function(e){var t=e.xStart,o=e.yStart;return e.xStart=e.x,e.yStart=e.y,d3.interpolateString("translate("+t+","+o+")","translate("+e.x+","+e.y+")")});var v=_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"splitNode",this);i.nodeIdsToReshow=s;var h=this;setTimeout(function(){n.nodes=l,v.call(h,t)},750)}}},{key:"updateGraphCallback",value:function(){var e=this.graph,t=e.state.SplitJoinViewPolicy;e.circles.each(function(e){d3.select(this).transition().duration(400).style("opacity",1),d3.select(this).classed("focus",!1),d3.select(this).classed("connected",!1),null!=e.SplitJoinViewPolicy&&("focus"===e.SplitJoinViewPolicy.type?d3.select(this).classed("focus",!0):"connected"===e.SplitJoinViewPolicy.type&&d3.select(this).classed("connected",!0))}),t.nodeIdsToReshow=null,e.updateGraph()}},{key:"setPositions",value:function(){function e(e,t){return Math.floor(Math.random()*(t-e+1))+e}var t=this.graph,o=this,n=t.consts,i=n.displayOffset,r=t.nodes,a=o.d3ForceBounds.call(t);_.forEach(r,function(t){if(null==t.x||null==t.y){var o=e(t.radius+i,a.width-t.radius-i),n=e(t.radius+i,a.height-t.radius-i);t.x=o,t.y=n}})}},{key:"d3ForceStart",value:function(){var e=this;e.circles.attr("cx",function(t){return null!=t.xStart&&(t.xStart=t.xStart*e.dragSvg.scale()+e.dragSvg.translate()[0]),t.x}).attr("cy",function(t){return null!=t.yStart&&(t.yStart=t.yStart*e.dragSvg.scale()+e.dragSvg.translate()[1]),t.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceEnd",value:function(){var e=this,t=e.state,o=t.SplitJoinViewPolicy;if(null==o.layoutDefault){var n={};_.forEach(e.nodes,function(e){n[e.id]={x:e.x,y:e.y}}),o.layoutDefault=n;var i=e.dragSvg.scale(),r=e.dragSvg.translate();o.zoomDefault=[r,i]}e.circles.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),e.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceTick",value:function(e,t,o){function n(e){return function(n){2===u.length?("focus"===n.SplitJoinViewPolicy.type?n.y+=(u[0]-n.y)*e:n.y+=(u[1]-n.y)*e,n.x+=(t/2-n.x)*e):(n.y+=(o/2-n.y)*e,n.x+=(t/2-n.x)*e)}}var i=this,r=i.state,a=i.consts,l=r.SplitJoinViewPolicy,s=a.displayOffset,c=i.dragSvg.scale(),u=l.foci;i.circles.each(this.d3ForceCollide(.5)).each(n(.2*e.alpha)).attr("cx",function(e){return e.x=Math.max((e.radius+s)/c,Math.min(t+(-s-e.radius)/c,e.x))}).attr("cy",function(e){return null==e.SplitJoinViewPolicy||null==e.SplitJoinViewPolicy?(e.y=Math.max((e.radius+s)/c,Math.min(o+(-s-e.radius)/c,e.y)),e.y):"focus"===e.SplitJoinViewPolicy.type?(e.y=Math.max(e.radius+s,Math.min((o+(-s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,e.y)),e.y):"connected"===e.SplitJoinViewPolicy.type?(e.y=Math.max((o+(s-e.radius)/c)*a.SplitJoinViewPolicy.boundary,Math.min(o+(-s-e.radius)/c,e.y)),e.y):void 0}),i.paths.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}},{key:"d3ForceBounds",value:function(){function e(e,o){var n=e*o,i=t.consts.startRadius,r=3.5*i,a=n/(r*r);return a}var t=this,o=t.state,n=t.consts,i=n.SplitJoinViewPolicy,r=o.SplitJoinViewPolicy,a=t.nodes,l=n.displayOffset,s=parseFloat(t.svg.style("width")),c=parseFloat(t.svg.style("height")),u=s,d=c,p=e(u-2*l,d-2*l),f=1;a.length>p?(f=p/a.length,t.zoomed(t.dragSvg.translate(),f),u/=f,d/=f):t.zoomed(t.dragSvg.translate(),f);var v,h=r.focusGroups;if(0===h.length)v=[d/2];else{var g=t.dataSource.children_struct[h[0]];i.boundary=g.length/a.length;var m=d*i.boundary,y=d-m;m<2*t.consts.maxRadius&&(i.boundary=2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),y<2*t.consts.maxRadius&&(i.boundary=1-2.5*t.consts.maxRadius/d,m=d*i.boundary,y=d-m),v=[m/2,m+y/2]}return r.foci=v,{width:u,height:d}}},{key:"splitNodeEvent",value:function(e){var t=this,o=this.graph,n=o.state.SplitJoinViewPolicy,i=o.dataSource.children_struct;_.forEach(e,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"});var r=e[0].parent;if(0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===r?n.eventHistory.pop():n.eventHistory.push({id:r,event:"split"}),null!=n.backButtonElem&&0!==n.eventHistory.length&&n.backButtonElem.fadeTo("slow",1),null!=n.titleElem){var a="";n.focusGroups.length>0&&(a+=n.focusGroups[0]),2===n.focusGroups.length&&(a+=" & "+n.focusGroups[1]),n.titleElem.text(a)}o.state.disableUpdate=!1,t.setLayout()}},{key:"setLayout",value:function(){var e,t=this,o=this.graph,n=o.state.SplitJoinViewPolicy;if(0===n.focusGroups.length){e=n.layoutDefault;var i=n.zoomDefault;o.zoomed(i[0],i[1])}else{var i=n.zooms[n.focusGroups];null!=i&&o.zoomed(i[0],i[1]),e=n.layout[n.focusGroups]}if(null!=e)_.forEach(o.nodes,function(t){var o=e[t.id];null==o&&console.log(e,t),t.x=o.x,t.y=o.y}),o.updateGraph.call(o,function(){t.updateGraphCallback.call(t)});else{o.state.initForce=!1,o.updateGraph(function(){t.updateGraphCallback.call(t)}),n.zooms[n.focusGroups]=[o.dragSvg.translate(),o.dragSvg.scale()];var e={};_.forEach(o.nodes,function(t){e[t.id]={x:t.x,y:t.y}}),n.layout[n.focusGroups]=e}}},{key:"__joinNode",value:function(e){var o=this.graph,n=o.state.SplitJoinNodePolicy,i=o.state.SplitJoinViewPolicy;if(-1!=o.nodes.indexOf(e)){var r=o.dataSource.children_struct,a=e.id;if(!(r.topLevel.indexOf(a)>-1)){for(var l=e.parent,s=[],c=[],u=0;u<o.nodes.length;u++)-1==o.nodes[u].ancestors.indexOf(e.parent)?c.push(o.nodes[u].id):s.push(o.nodes[u]);var d=e.parent;c.push(e.parent);var p=o.dataSource.ancestors_struct,r=o.dataSource.children_struct,f=i.focusGroups.indexOf(l);null!=p[l]?i.focusGroups[f]=p[l]:i.focusGroups.splice(f,1);var v=[];if(1===i.focusGroups.length){var h=p[e.id];h.push(i.focusGroups[0]),h=h.concat(p[i.focusGroups[0]]||[]),_.forEach(r.topLevel,function(e){-1===h.indexOf(e)&&-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v)}else 0===i.focusGroups.length&&(_.forEach(r.topLevel,function(e){-1==c.indexOf(e)&&v.push(e)}),c=c.concat(v));var g=e.radius/o.consts.radiusDecay,m=e.x,y=e.y,l=e.ancestors[1],h=e.ancestors.slice(1),w=new t.Node(m,y,d,d,g,l,h);o.nodes.push(w);for(var u=0;u<s.length;u++){var b=s[u];o.nodes.splice(o.nodes.indexOf(b),1),o.spliceLinksForNode(b)}for(var P=o.dataSource.getFlowBetweenSet(c),S=[],k=P.nodeData,u=0;u<k.length;u++)-1!==v.indexOf(k[u].id)&&S.push(k[u]);var E=o.dataSource.processNodeData(S);_.forEach(E,function(e){e.radius=e.radius||o.consts.startRadius}),o.nodes=o.nodes.concat(E),o.links=o.dataSource.processLinkData(P.linkData,o.nodes),1===i.focusGroups.length?_.forEach(o.links,function(e){-1!==v.indexOf(e.source.id)?i.focusGroups[0]===e.target.parent&&v.splice(v.indexOf(e.source.id),1):-1!==v.indexOf(e.target.id)&&i.focusGroups[0]===e.source.parent&&v.splice(v.indexOf(e.target.id),1)}):v=[];var N=[];if(0!==v.length)for(var u=0;u<o.nodes.length&&(-1===v.indexOf(o.nodes[u].id)||(v.splice(v.indexOf(o.nodes[u].id),1),o.spliceLinksForNode(o.nodes[u]),N.push(o.nodes[u]),0!==v.length));u++);return _.forEach(N,function(e){o.nodes.splice(o.nodes.indexOf(e),1)}),o.initNodes(),o.initLinks(),n.splitNodes.splice(n.splitNodes.indexOf(w.id),1),w}}}},{key:"joinNodeEvent",value:function(e){var t=this.graph,o=this,n=t.state.SplitJoinViewPolicy;0!==n.eventHistory.length&&n.eventHistory[n.eventHistory.length-1].id===e.id?n.eventHistory.pop():n.eventHistory.push({id:e.id,event:"join"});var i=t.dataSource.children_struct;if(_.forEach(t.nodes,function(e){e.SplitJoinViewPolicy={},_.includes(i[n.focusGroups[0]],e.id)?e.SplitJoinViewPolicy.type="focus":e.SplitJoinViewPolicy.type="connected"}),null!=n.backButtonElem&&0===n.eventHistory.length&&n.backButtonElem.fadeTo("slow",0),null!=n.titleElem){var r="";n.focusGroups.length>0&&(r+=n.focusGroups[0]),2===n.focusGroups.length&&(r+=" & "+n.focusGroups[1]),n.titleElem.text(r)}o.setLayout()}},{key:"undoLastEvent",value:function(){var e,t=this.graph,n=this,i=t.state.SplitJoinViewPolicy,r=i.eventHistory[i.eventHistory.length-1],a=r.id;if("join"===r.event){e=t.findNodeById(a);var l=t.findD3Node(a);n.dblclick(l,e)}else{var s=t.dataSource.children_struct[a][0];e=t.findNodeById(s),_get(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"joinNode",this).call(n,e)}}}]),o}(e.Policy);return{Policy:o}}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.nodes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.create",{url:"/create",templateUrl:"organizations/organizationcreate.html",controller:"OrganizationCreateCtrl as organizationCreateCtrl"})}]).controller("OrganizationCreateCtrl",["$state","OrganizationsModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.organizations.list")}function i(){n()}function r(){l.form.$valid&&(o.hideServerError(l),o.startLoader(l),l.newOrganization.key=l.newOrganization.tenantName,t.create(l.newOrganization).then(function(e){o.stopLoader(l),n()},function(e){o.stopLoader(l),o.showServerError(l,e)}))}function a(){o.stopLoader(l),o.hideServerError(l),l.newOrganization={tenantName:""}}var l=this;l.createOrganization=r,l.cancelCreating=i,a()}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.details",{url:"/details/:key",controller:"OrganizationDetailsCtrl as organizationDetailsCtrl",templateUrl:"organizations/organizationdetails.html"})}]).controller("OrganizationDetailsCtrl",["$state","$stateParams","OrganizationsModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.organizations.list")}function r(){n.hideServerError(a),n.startLoader(a),o["delete"](a.organization).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)})}var a=this;n.stopLoader(a),n.hideServerError(a),o.getModelByKey(t.key).then(function(e){a.organization=e}),a.deleteOrganization=r}]),angular.module("contiv.organizations").config(["$stateProvider",function(e){e.state("contiv.menu.organizations.list",{url:"/list",controller:"OrganizationsListCtrl as organizationsListCtrl",templateUrl:"organizations/organizationlist.html"})}]).controller("OrganizationsListCtrl",["$scope","$interval","$filter","OrganizationsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.organizations=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function a(){r()}function l(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function s(){d.servicelb.selectors=[],angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function c(){s(),d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",params:{state:null},controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.details.info",{url:"/info",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"}).state("contiv.menu.servicelbs.details.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbinfo.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.details.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function a(){e.go("contiv.menu.servicelbs.details.info",{key:p.servicelb.key,state:"details"})}function l(){a()}function s(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function c(){n.hideServerError(p),n.startLoader(p);var e=p.servicelb.selectors;d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),a()},function(t){p.servicelb.selectors=e,u(),n.stopLoader(p),n.showServerError(p,t)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){p.servicelb.selectors=[],angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=c,p.cancelEditing=l,p.deleteServicelb=s,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.servicelbs=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details.stats",{url:"/stats",controller:"ServicelbStatsCtrl as servicelbStatsCtrl",templateUrl:"service_lbs/servicelbstats.html"})}]).controller("ServicelbStatsCtrl",["$state","$stateParams","$scope","$interval","$filter","ServicelbsModel","InspectService",function(e,t,o,n,i,r,a){function l(e){r.getInspectByKey(t.key,ContivGlobals.SERVICELBS_INSPECT_ENDPOINT,e).then(function(e){if(s.servicelbInspectStats=e.Oper,s.config=e.Config,void 0!=e.Oper.providers){var t=a.buildEndPoints(e.Oper.providers);
a.checkContainerChanged(s.providerDetails,t)&&(s.providers=e.Oper.providers,s.providerDetails=t)}else s.providers=[],s.providerDetails={}})}var s=this;l(!1);var c;angular.isDefined(c)||(c=n(function(){l(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(c)})}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.cluster",{url:"/cluster",controller:"ClusterSettingCtrl as clusterSettingCtrl",templateUrl:"settings/clustersettings.html"})}]).controller("ClusterSettingCtrl",["$stateParams","CRUDHelperService","NodesService",function(e,t,o){function n(){i.form.$valid&&(t.hideServerError(i),t.startLoader(i),i.nodeOpsObj.nodes=[e.key],o.cleanupExtraVars(i),o.createExtraVars(i),o.updateSettings(i.nodeOpsObj).then(function(e){t.stopLoader(i)},function(e){t.stopLoader(i),t.showServerError(i,e)}))}var i=this;i.nodeOpsObj={},i.extra_vars={},i.ansibleVariables=[],i.envVariables=[],o.getSettings(i),i.updateClusterSettings=n,t.stopLoader(i),t.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.networks",{url:"/networks",controller:"NetworkSettingCtrl as networkSettingCtrl",templateUrl:"settings/networksettings.html"})}]).controller("NetworkSettingCtrl",["CRUDHelperService","NetworkService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t.data)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;i.vlanPattern=ContivGlobals.VLAN_REGEX,i.vxlanPattern=ContivGlobals.VXLAN_REGEX,n(),i.updateNetworkSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.settings").config(["$stateProvider",function(e){e.state("contiv.menu.settings.details.volumes",{url:"/volumes",controller:"VolumeSettingCtrl as volumeSettingCtrl",templateUrl:"settings/volumesettings.html"})}]).controller("VolumeSettingCtrl",["CRUDHelperService","VolumeSettingService",function(e,t){function o(){i.form.$valid&&(e.hideServerError(i),e.startLoader(i),t.updateSettings(i.setting).then(function(t){e.stopLoader(i)},function(t){e.stopLoader(i),e.showServerError(i,t)}))}function n(){t.getSettings().then(function(e){i.setting=e},function(e){})}var i=this;n(),i.updateVolumeSettings=o,e.stopLoader(i),e.hideServerError(i)}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.create",{url:"/create",templateUrl:"storage_policies/storagepolicycreate.html",controller:"StoragePolicyCreateCtrl as storagePolicyCreateCtrl"})}]).controller("StoragePolicyCreateCtrl",["$state","$stateParams","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.storagepolicies.list")}function r(){i()}function a(){c.filesystemcmds.forEach(function(e){c.newStoragePolicy.filesystems[e.name]=e.value})}function l(){c.form.$valid&&(n.hideServerError(c),n.startLoader(c),a(),o.create(c.newStoragePolicy).then(function(e){n.stopLoader(c),i()},function(e){n.stopLoader(c),n.showServerError(c,e)}))}function s(){n.stopLoader(c),n.hideServerError(c),c.newStoragePolicy={name:"",backends:{crud:"ceph",mount:"ceph",snapshot:"ceph"},unlocked:!1,driver:{pool:"rbd"},create:{size:"0",filesystem:""},runtime:{snapshots:!0,snapshot:{frequency:"30m",keep:20},"rate-limit":{"write-iops":0,"read-iops":0,"write-bps":0,"read-bps":0}},filesystems:{}}}var c=this;c.createPolicy=l,c.cancelCreating=r,c.filesystemcmds=[],s()}]),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.details",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"}).state("contiv.menu.storagepolicies.edit",{url:"/details/:key",controller:"StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl",templateUrl:"storage_policies/storagepolicydetails.html"})}]).controller("StoragePolicyDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","StoragePoliciesModel","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.is("contiv.menu.storagepolicies.edit")?m.mode="edit":m.mode="details"}function c(){e.go("contiv.menu.storagepolicies.list")}function u(){e.go("contiv.menu.storagepolicies.details",{key:m.policy.name})}function d(){u()}function p(){l.hideServerError(m),l.startLoader(m),r.deleteUsingKey(m.policy.name,"name").then(function(e){l.stopLoader(m),c()},function(e){l.stopLoader(m),l.showServerError(m,e)})}function f(e){a.get(e).then(function(e){m.volumes=i("orderBy")(_.filter(e,{policy:m.policy.name}),"name")})}function v(){angular.forEach(m.policy.filesystems,function(e,t){this.push({name:t,value:e})},m.filesystemcmds)}function h(){m.filesystemcmds.forEach(function(e){m.policy.filesystems[e.name]=e.value})}function g(){m.form.$valid&&(l.hideServerError(m),l.startLoader(m),h(),r.save(m.policy).then(function(e){l.stopLoader(m),u()},function(e){l.stopLoader(m),l.showServerError(m,e)}))}var m=this;m.filesystemcmds=[],l.stopLoader(m),l.hideServerError(m),r.getModelByKey(t.key,!1,"name").then(function(e){m.policy=e,v(),f(!1)}),m.deletePolicy=p,m.savePolicy=g,m.cancelEditing=d,s();var y;angular.isDefined(y)||(y=n(function(){f(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(y)})}]),angular.module("contiv.storagepolicies").directive("ctvStoragepolicybasicsettings",function(){return{}}).directive("ctvStoragepolicyfilesystemsettings",function(){return{restrict:"E",scope:{policy:"=",filesystemcmds:"="},link:function(e){e.filesystems=["ext4","btrfs"]},templateUrl:"storage_policies/filesystemsettings.html"}}).directive("ctvStoragepolicysnapshotsettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/snapshotsettings.html"}}).directive("ctvStoragepolicyrwopssettings",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/rwopssettings.html"}}).directive("ctvStoragepolicybackenddrivers",function(){return{restrict:"E",scope:{policy:"="},templateUrl:"storage_policies/backenddrivers.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","$filter","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.policies=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.edge",{url:"/edge/{sourceName, targetName, sourceList, targetList}",params:{sourceName:null,targetName:null,sourceList:null,targetList:null},controller:"VisualizationEdgeCtrl as visualizationedgeCtrl",templateUrl:"visualization/visualizationedge.html"})}]).controller("VisualizationEdgeCtrl",["$scope","$http","$state","$stateParams","VisualizationService","$interval",function(e,t,o,n,i,r){var a=n.sourceName,l=n.targetName,s=n.sourceList,c=n.targetList;if(null==s||null==c)return void o.go("contiv.menu.visualization.list");var u=new Date,d=u.getSeconds();e.edgeDataInterval=r(function(){i.getEdgeData(s,c,d.toString()).then(function(t){var o=t.results,n=0;_.forEach(o,function(e){_.isEmpty(e)===!1&&(n+=e.series[0].values[0][1])}),e.sourceName=a,e.targetName=l,e.edgeData=n,e.edgeDataTime=d},function(e){})},3e3),e.$on("$destroy",function(){r.cancel(e.edgeDataInterval)}),i.getOldEdgeData(s,c).then(function(t){var o=t.results,n=[];_.forEach(o,function(e){if(_.isEmpty(e)===!1){var t=e.series[0].values;_.isEmpty(n)?_.forEach(t,function(e){n.push(e[1])}):_.forEach(t,function(e,t){n[t]+=e[1]})}}),e.sourceName=a,e.targetName=l,e.sourceList=s,e.targetList=c,e.oldEdgeData=n},function(e){})}]),angular.module("contiv.visualization").directive("visualizationEdge",["$window",function(e){function t(e,t){function o(){s=new Date;for(var t in c){var n=c[t];n.data.push(e.edgeData||0),n.path.attr("d",p)}u.domain([s-(a-2)*l,s-l]),g.transition().duration(l).ease("linear").call(u.axis),v.transition().duration(l).ease("linear").call(d.axis),m.attr("transform",null).transition().duration(l).ease("linear").attr("transform","translate("+u(s-(a-1)*l)+")").each("end",function(){o()});for(var t in c){var n=c[t];n.data.shift()}}var n=document.getElementsByTagName("body")[0],i=n.clientWidth-400,r=n.clientHeight-400,a=59,l=750,s=new Date(Date.now()-l),c={current:{value:0,color:"orange",data:t.range(a).map(function(t){return e.oldEdgeData[Math.floor(t/10)]||0})}},u=t.time.scale().domain([s-(a-2),s-l]).range([0,i]),d=t.scale.linear().domain([0,t.max(c.current.data,function(e){return e+10})]).range([r,0]),p=t.svg.line().interpolate("basis").x(function(e,t){return u(s-(a-1-t)*l)}).y(function(e){return d(e)}),f=t.select(".graph").append("svg").attr("width",25).style("overflow","visible").style("position","fixed"),v=f.append("g").attr("class","y axis").call(d.axis=t.svg.axis().scale(d).orient("left")),h=t.select(".graph").append("svg").attr("class","chart").attr("width",i-50).attr("height",r+50),g=h.append("g").attr("class","x axis").attr("transform","translate(0,"+r+")").call(u.axis=t.svg.axis().scale(u).orient("bottom")),m=h.append("g");for(var y in c){var w=c[y];w.path=m.append("path").data([w.data]).attr("class",y+" group").style("stroke",w.color)}o()}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationedgetemplate.html",link:function(o){o.$watchGroup(["edgeData","oldEdgeData"],function(){if(null!=o.edgeData&&null!=o.oldEdgeData&&!o.initialize){o.initialize=!0;var n=e.d3;t(o,n)}})}}}]),angular.module("contiv.visualization").service("StateSave",function(){this.savedStates={}}).directive("visualizationGraph",["$window","$state","VisualizerGraph","PolicyService","VisualizerDataSource","StateSave",function(e,t,o,n,i,r){function a(e,o,n,i,r,a){if(void 0!==e.nodes&&void 0!==e.links&&void 0!==e.children_struct&&void 0!==e.ancestors_struct){var l=new r.DataSource(e.nodes,e.links,e.children_struct,e.ancestors_struct,e.labels,e.serviceSelectors);l.setAncestors();var s,c,u=l.getTopLevelFlow();s=l.processNodeData(u.nodeData),c=l.processLinkData(u.linkData,s);var d=document.getElementsByTagName("body")[0],p=(d.clientWidth,d.clientHeight),f=o.find("svg"),v=$(f.parent()).offset(),h=$(f.parent()).width(),g=d3.select(f[0]).attr("width",h).attr("height",p-v.top-20);e.visualizationGraph=new n.Graph(g,s,c,l,e.children_struct,e.ancestors_struct),e.visualizationGraph.installDefaultPathPolicy(new i.SaveStatePolicy(a.savedStates)),e.visualizationGraph.installDefaultPathPolicy(new i.PathChangeViewPolicy(t));var m=new i.QTipPolicy;e.visualizationGraph.installDefaultNodePolicy(m),e.visualizationGraph.installDefaultPathPolicy(m);var y=new i.SplitJoinViewPolicy;if(e.visualizationGraph.installDefaultNodePolicy(y),y.installBackButton($("#backButton")),y.installTitle($("#graph-title")),0==_.isEmpty(a.savedStates)){var w=e.visualizationGraph;w.load(a.savedStates)}else e.visualizationGraph.updateGraph()}}return{restrict:"EA",replace:!1,templateUrl:"visualization/visualizationtemplate.html",link:function(e,t){e.$on("$destroy",function(){$("#visualization-graph").unbind(),e.visualizationGraph.destroy()}),e.$watchGroup(["nodes","links","children_struct","ancestors_struct"],function(){null!=e.nodes&&null!=e.links&&null!=e.children_struct&&null!=e.ancestors_struct&&(e.initialized?(e.visualizationGraph.dataSource.links=e.links,e.visualizationGraph.updateLinkData()):(e.initialized=!0,a(e,t,o,n,i,r)))})}}}]),angular.module("contiv.visualization").config(["$stateProvider",function(e){e.state("contiv.menu.visualization.list",{url:"/list",controller:"VisualizationListCtrl as visualizationListCtrl",templateUrl:"visualization/visualizationlist.html"})}]).controller("VisualizationListCtrl",["$scope","$http","VisualizationService","$interval",function(e,t,o,n){var i=function(t){var o=[],n=[],i=[];_.forEach(t.results[0].series,function(e){var t,r=e.tags.EndpointIP,a=e.tags.ProviderIP;0==_.includes(i,r)&&(t={name:r,id:r,parent:null,ancestors:null},o.push(t),i.push(r)),0==_.includes(i,a)&&(t={name:a,id:a,parent:null,ancestors:null},o.push(t),i.push(a));var l={source:r,target:a,weight:e.values[0][2]};n.push(l);var s={source:a,target:r,weight:e.values[0][1]};n.push(s)}),e.nodes=o,e.links=n};o.getGraphData().then(i,function(e){}),e.$on("$destroy",function(){n.cancel(e.graphDataInterval)}),o.getStructureData().then(function(t){e.ancestors_struct=t.ancestors_struct,e.children_struct=t.children_struct,e.labels=t.labels,e.serviceSelectors=t.serviceSelectors},function(e){})}]),angular.module("contiv.visualization").factory("VisualizationService",["$http","$q",function(e,t){function o(o,n){var i=t.defer();return e.get(o,n).then(function(e){i.resolve(e.data)},function(e){i.reject(e.data)}),i.promise}function n(o,n){var i=function(e){var t,o,n,r,a,l,s,c="";for(t in e)if(o=e[t],o instanceof Array)for(s=0;s<o.length;++s)a=o[s],n=t+"["+s+"]",l={},l[n]=a,c+=i(l)+"&";else if(o instanceof Object)for(r in o)a=o[r],n=t+"["+r+"]",l={},l[n]=a,c+=i(l)+"&";else void 0!==o&&null!==o&&(c+=encodeURIComponent(t)+"="+encodeURIComponent(o)+"&");return c.length?c.substr(0,c.length-1):c},r=t.defer();return e({url:o,method:"POST",data:n,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:[function(e){return angular.isObject(e)&&"[object File]"!==String(e)?i(e):e}]}).then(function(e){r.resolve(e.data)},function(e){r.reject(e.data)}),r.promise}function i(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;e+="influx/query";var t={params:{db:"telegraf",q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"}};return o(e,t)}function r(){var e=ContivGlobals.VISUALIZATION_ENDPOINT;return e+="services",o(e)}function a(e,t){var o="(";o+=t+"=",o+="'"+e[0]+"' ";for(var n=1;n<e.length;n++)o+="OR ",o+=t+"=",o+="'"+e[n]+"' ";return o+=")"}function l(e,t,o){var i=ContivGlobals.VISUALIZATION_ENDPOINT;i+="influx/query";var r={db:"telegraf",q:"SELECT sum(BytesOut) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+"GROUP BY time(20s) LIMIT 1; SELECT sum(BytesIn) from httpjson_svcstats WHERE time > now() - 15s AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+"GROUP BY time(20s) fill(0) LIMIT 1"};return n(i,r)}function s(e,t){var o=ContivGlobals.VISUALIZATION_ENDPOINT;o+="influx/query";var i={db:"telegraf",q:"SELECT sum(BytesOut) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"EndpointIP")+" AND "+a(t,"ProviderIP")+" GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(BytesIn) FROM httpjson_svcstats WHERE time > now() - 1m AND "+a(e,"ProviderIP")+" AND "+a(t,"EndpointIP")+" GROUP BY time(10s) fill(0) LIMIT 6"};return n(o,i)}return{getGraphData:i,getStructureData:r,getEdgeData:l,getOldEdgeData:s}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.create",{url:"/create",templateUrl:"volumes/volumecreate.html",controller:"VolumeCreateCtrl as volumeCreateCtrl"})}]).controller("VolumeCreateCtrl",["$state","$stateParams","VolumesModel","StoragePoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function a(){r()}function l(){n.get().then(function(e){d.policies=e})}function s(){d.newVolume.policy=d.selectedPolicy.name,d.newVolume.backends=d.selectedPolicy.backends,d.newVolume.driver=d.selectedPolicy.driver,d.newVolume.create=d.selectedPolicy.create,d.newVolume.runtime=d.selectedPolicy.runtime}function c(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),s(),o.create(d.newVolume).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.newVolume={name:"",backends:{},driver:{},create:{},runtime:{}}}var d=this;d.filesystems=["ext4","btrfs"],d.createVolume=c,d.cancelCreating=a,l(),u()}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","VolumeService","CRUDHelperService",function(e,t,o,n,i,r,a,l){function s(){e.go("contiv.menu.volumes.list")}function c(){l.hideServerError(v),l.startLoader(v),r["delete"](v.volume).then(function(e){l.stopLoader(v),s()})}function u(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],r.getModel(n,e).then(function(e){v.volume=e,d(),p()})}function d(){a.getVolumeUseInfo(v.volume).then(function(e){v.volumeUse=e},function(e){})}function p(){a.getVolumeSnapshots(v.volume).then(function(e){v.snapshots=e},function(e){})}function f(){v.snapshotSuccess=!1,l.hideServerError(v),l.startLoader(v),a.triggerSnapshot(v.volume).then(function(e){l.stopLoader(v),v.snapshotSuccess=!0},function(e){l.stopLoader(v),l.showServerError(v,e)})}var v=this;v.deleteVolume=c,v.triggerVolumeSnapshot=f,u(!1);var h;angular.isDefined(h)||(h=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(h)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(a),a.volumes=e},function(e){i.stopLoader(a)})}var a=this;r(!1);var l;angular.isDefined(l)||(l=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(l)})}]),angular.module("contiv.volumes").factory("VolumeService",["$http","$q",function(e,t){function o(o){var n=t.defer(),i=ContivGlobals.VOLUMES_USES_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function n(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+o.policy+"/"+o.name;return e.get(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}function i(o){var n=t.defer(),i=ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT+"take/"+o.policy+"/"+o.name;return e.post(i).then(function(e){n.resolve(e.data)},function(e){n.reject(e.data)}),n.promise}return{getVolumeUseInfo:o,getVolumeSnapshots:n,triggerSnapshot:i}}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.copy",{url:"/copy/",params:{snapshot:null,policy:null,volume:null},controller:"VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl",templateUrl:"volumes/volumesnapshotcopy.html"})}]).controller("VolumeSnapshotCopyCtrl",["$state","$stateParams","$scope","$interval","$http","VolumesModel","CRUDHelperService",function(e,t,o,n,i,r,a){function l(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+t.volume})}function s(){e.go("contiv.menu.volumes.details",{key:t.policy+"/"+u.newvolume})}function c(){if(u.form.$valid){a.hideServerError(u),a.startLoader(u);var e={};e.policy=t.policy,e.name=t.volume,r.copy(e,t.snapshot,u.newvolume).then(function(e){a.stopLoader(u),s()},function(e){a.stopLoader(u),a.showServerError(u,e)})}}var u=this;u.policy=t.policy,u.volume=t.volume,u.snapshot=t.snapshot,u.copySnapshot=c,u.cancelCopy=l}]),angular.module("contiv.directives").directive("ctvAccordion",function(){return{restrict:"E",transclude:!0,scope:{items:"="},link:function(e,t){"function"==typeof t.find(".ui.accordion").accordion&&t.find(".ui.accordion").accordion()},templateUrl:"components/directives/accordion.html"}}),angular.module("contiv.directives").directive("ctvCollapsible",function(){return{restrict:"E",scope:{title:"@",collapsed:"@"},transclude:!0,link:function(e){void 0===e.collapsed&&(e.collapsed=!0)},templateUrl:"components/directives/collapsible.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"=",nameheader:"@",valueheader:"@",type:"@",options:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o(),void 0===e.nameheader&&(e.nameheader="Name"),void 0===e.valueheader&&(e.valueheader="Value"),void 0===e.type&&(e.type="text")},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvAcivalid",function(){return{restrict:"E",templateUrl:"components/directives/nodes/acivalid.html",scope:{form:"="}}}),angular.module("contiv.directives").directive("ctvControlinterface",function(){return{restrict:"E",templateUrl:"components/directives/nodes/controlinterface.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvNetworkmode",function(){return{restrict:"E",templateUrl:"components/directives/nodes/networkmode.html",scope:{extravars:"="}}}),angular.module("contiv.directives").directive("ctvScheduler",function(){return{restrict:"E",templateUrl:"components/directives/nodes/scheduler.html",scope:{extravars:"="}}});
//# sourceMappingURL=data:application/json;base64,
>>>>>>> Table directive to angular 2
=======
'use strict';

/**
 * Defining the Graph Module.
 * See DESIGN.md for info on Graph Objects.
 */
angular.module('contiv.graph', []);
angular.module("contiv.directives", []);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The base class the DataSource object.
 * 
 * The DataSource object takes in node and link data from the server, 
 * and provides methods for converting and manipulating the data for
 * the graph object.
 * 
 * To write your own DataSource object, create a new factory that uses the 
 * DataSource you want to inherit as a dependency, and extend 
 * its DataSource class. 
 * Return the class object with DataSource as key.
 * 
 * Node data is expected to be in the following format:
 * {id:node_id, text:node_text}
 * 
 * Link data is expected to be in the following format:
 * {source: sourceNodeId, target: targetNodeId}
 * 
 */
angular.module('contiv.graph').factory('DataSource', ['Node', 'Link', function (Node, Link) {
	var DataSource = function () {
		/**
   * Constructs the object.
   *
   * @param      {Array}   nodes              The node data 
   * @param      {Array}   links              The link data
   */
		function DataSource(nodes, links) {
			_classCallCheck(this, DataSource);

			this.nodes = nodes;
			this.links = links;
		}

		/**
   * Replaces the node data
   *
   * @param      {Node}  nodes   The nodes
   */


		_createClass(DataSource, [{
			key: 'updateNodes',
			value: function updateNodes(nodes) {
				this.nodes = nodes;
			}

			/**
    * Replaces the link data
    *
    * @param      {Link}  links   The links
    */

		}, {
			key: 'updateLinks',
			value: function updateLinks(links) {
				this.links = links;
			}

			/**
    * Returns the Name attribute of the Node with the 
    * matching id
    *
    * @param      {string}  id      The identifier
    * @return     {string}  name of the matching node
    */

		}, {
			key: 'nodeIdToName',
			value: function nodeIdToName(id) {
				var nodes = this.nodes;
				for (var i = 0; i < nodes.length; i++) {
					if (nodes[i].id == id) {
						return nodes[i].name;
					}
				}
			}

			/**
    * process the nodeData to create Node objects
    *
    * @param      {Array}  nodeData  NodeData to convert 
    *                                to node objects
    * @return     {Array}  Node objects
    */

		}, {
			key: 'processNodeData',
			value: function processNodeData(nodeData) {
				var nodes = [];
				_.forEach(nodeData, function (data) {
					var newNode = new Node.Node(null, null, data.id, data.text, null);
					nodes.push(newNode);
				});
				return nodes;
			}

			/**
    * process the linkData
    *
    * @param      {Array}  linkData  The link data
    * @param      {Array}  nodes     The nodes from processNodeData
    * @return     {Array}  Link objects
    */

		}, {
			key: 'processLinkData',
			value: function processLinkData(linkData, nodes) {
				/**
     * Returns the node that matches the id
     *
     * @param      {string} id      The identifier
     * @return     {Node}   The node with the matching id
     */
				function findNodeById(id, nodes) {
					for (var i = 0; i < nodes.length; i++) {
						if (id == nodes[i].id) {
							return nodes[i];
						}
					}
				}

				var links = [];
				//transforming link data
				for (var i = 0; i < linkData.length; i++) {
					if (linkData[i].source != linkData[i].target) {
						var source = findNodeById(linkData[i].source, nodes);
						var target = findNodeById(linkData[i].target, nodes);
						if (source == null || target == null) {
							continue;
						}
						var link = new Link.Link(source, target);
						links.push(link);
					}
				}
				return links;
			}
		}]);

		return DataSource;
	}();

	return {
		DataSource: DataSource
	};
}]);
/**
 * Created by vjain3 on 3/14/16.
 */
angular.module('contiv.models', []);
var ContivGlobals = (function () {
    return {
        //REST endpoints for NETMASTER
        'NETWORKS_ENDPOINT': '/netmaster/api/v1/networks/',
        'NETWORKS_INSPECT_ENDPOINT': '/netmaster/api/v1/inspect/networks/',
        'SERVICELBS_INSPECT_ENDPOINT': '/netmaster/api/v1/inspect/serviceLBs/',
        'POLICIES_ENDPOINT': '/netmaster/api/v1/policys/',
        'RULES_ENDPOINT': '/netmaster/api/v1/rules/',
        'APPLICATIONGROUPS_ENDPOINT': '/netmaster/api/v1/endpointGroups/',
        'SERVICELBS_ENDPOINT': '/netmaster/api/v1/serviceLBs/',
        'ORGANIZATIONS_ENDPOINT': '/netmaster/api/v1/tenants/',
        'NETWORK_SETTINGS_ENDPOINT': '/netmaster/api/v1/globals/',
        'NETPROFILES_ENDPOINT': '/netmaster/api/v1/netprofiles/',
        'BGPS_ENDPOINT': '/netmaster/api/v1/Bgps/',
        'BGPS_INSPECT_ENDPOINT': '/netmaster/api/v1/inspect/Bgps/',
        'VISUALIZATION_ENDPOINT': '/visualization/',
        //REST endpoints for VOLMASTER
        'VOLUMES_ENDPOINT': '/volmaster/volumes/',
        'VOLUMES_CREATE_ENDPOINT': '/volmaster/volumes/create/',
        'VOLUMES_DELETE_ENDPOINT': '/volmaster/volumes/remove/',
        'VOLUMES_COPYSNAPSHOTS_ENDPOINT': '/volmaster/volumes/copy',
        'VOLUMES_USES_ENDPOINT': '/volmaster/uses/mounts/',
        'VOLUMES_SNAPSHOTS_ENDPOINT': '/volmaster/snapshots/',
        'STORAGEPOLICIES_ENDPOINT': '/volmaster/policies/',
        'VOLUMES_GLOBAL_ENDPOINT': '/volmaster/global/',
        //REST endpoints for CLUSTER
        'NODES_LIST_ENDPOINT': '/info/nodes',
        'NODES_DISCOVER_ENDPOINT': '/discover/nodes',
        'NODES_COMMISSION_ENDPOINT': '/commission/nodes',
        'NODES_DECOMMISSION_ENDPOINT': '/decommission/nodes',
        'NODES_MAINTENANCE_ENDPOINT': '/maintenance/nodes',
        'NODES_LAST_JOB_ENDPOINT': '/info/job/last',
        'NODES_ACTIVE_JOB_ENDPOINT': '/info/job/active',
        'NODES_SETTINGS_SET_ENDPOINT': '/globals',
        'NODES_SETTINGS_GET_ENDPOINT': '/info/globals',
        //Refresh interval in milliseconds
        'REFRESH_INTERVAL': 5000,
        //RegEx for validation
        'CIDR_REGEX': '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$',
        'VLAN_REGEX': '^([0-9]{1,4}?-[0-9]{1,4}?)$',
        'VXLAN_REGEX': '^([0-9]{1,8}?-[0-9]{1,8}?)$',
        'NUMBER_REGEX': '^[0-9]*$'
    };
})();
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The DataSource used for the visualization tab.
 * 
 * Node Data from the server is expected to be in the following format:
 * {id: node_id, text: node_text}
 * Parent and Ancestor attributes can be set by calling setAncestors
 * 
 * Link Data from the server is expected to be in the following format:
 * {source: sourceNodeId, target: targetNodeId, weight: linkWeight}
 * 
 */
angular.module('contiv.graph').factory('VisualizerDataSource', ['DataSource', 'VisualizerNode', 'VisualizerLink', function (DataSource, VisualizerNode, VisualizerLink) {
	var VisualizerDataSource = function (_DataSource$DataSourc) {
		_inherits(VisualizerDataSource, _DataSource$DataSourc);

		/**
   * Constructs the object.
   * 
   * Children Struct and ancestors_struct are JSON objects,
   * mapping a node Id to a list of it's children or ancestors.
   * Children Struct is also expected to have a field called
   * topLevel, that maps to a list of all the nodes that don't
   * have any parents.
   *
   * @param      {Array}   nodes              The node data 
   * @param      {Array}   links              The link data
   * @param      {Object}  children_struct    The children structure
   * @param      {Object}  ancestors_struct   The ancestors structure
   * @param      {Array}   labels             The labels
   * @param      {Array}   selectors          The selectors
   */
		function VisualizerDataSource(nodes, links, children_struct, ancestors_struct, labels, selectors) {
			_classCallCheck(this, VisualizerDataSource);

			var _this = _possibleConstructorReturn(this, (VisualizerDataSource.__proto__ || Object.getPrototypeOf(VisualizerDataSource)).call(this, nodes, links));

			_this.children_struct = children_struct;
			_this.ancestors_struct = ancestors_struct;
			_this.labels = labels;
			_this.selectors = selectors;
			return _this;
		}

		/**
   * Determines if it has child.
   *
   * @param      {string}   id      The identifier
   * @return     {boolean}  True if has child, False otherwise.
   */


		_createClass(VisualizerDataSource, [{
			key: 'hasChild',
			value: function hasChild(id) {
				if (this.children_struct[id] == null) {
					return false;
				}
				return true;
			}

			/**
    * Sets the parent and ancestors attribute using 
    * ancestors_struct for all the nodes
    * Also adds any nodes without ancestors, that aren't 
    * toplevel to the client service.
    */

		}, {
			key: 'setAncestors',
			value: function setAncestors() {
				var thisDataSource = this;
				var addedClient = false;
				_.forEach(thisDataSource.nodes, function (node) {
					node.ancestors = thisDataSource.ancestors_struct[node.id] || [];
					if (_.isEmpty(node.ancestors) === false) {
						node.parent = node.ancestors[0];
					} else {
						if (_.includes(thisDataSource.children_struct.topLevel, node.id) == false) {
							//container has no parent
							//adding to client
							node.ancestors.push("client");
							thisDataSource.ancestors_struct[node.id] = ["client"];
							if (addedClient === false) {
								addedClient = true;
								thisDataSource.children_struct.topLevel.push("client");
								thisDataSource.children_struct['client'] = [];
							}
							thisDataSource.children_struct['client'].push(node.id);
						}
					}
				});
			}

			/**
    * Returns the flow between the highest level grouping
    *
    * @return     {Object}  The top level flow.
    */

		}, {
			key: 'getTopLevelFlow',
			value: function getTopLevelFlow() {
				return this.getFlowBetweenSet(this.children_struct.topLevel);
			}

			/**
    * Gets the flow between any set of node levels
    *
    * @param      {Array}  node_names  The node names in the set
    * @return     {Object}  The flow between set.
    */

		}, {
			key: 'getFlowBetweenSet',
			value: function getFlowBetweenSet(node_names) {
				var local_nodes = this.nodes;
				var idMapping = {};
				for (var i = 0; i < local_nodes.length; i++) {
					var node = local_nodes[i];

					//if node is already at its highest level
					if (node.ancestors === null) {
						idMapping[node.id] = node.name;
					} else {
						//check to see which tags are present in the ancestor list
						for (var j = 0; j < node_names.length; j++) {
							if (node.ancestors.indexOf(node_names[j]) > -1) {
								idMapping[node.id] = node_names[j];
								break;
							}
						}
					}
				}
				//modify links
				var links = this.links;
				var linkData = [];

				for (var i = 0; i < links.length; i++) {
					var link = [];
					link.source = idMapping[links[i].source] || links[i].source;
					link.target = idMapping[links[i].target] || links[i].target;
					link.weight = links[i].weight;
					linkData.push(link);
				}

				//creating the nodeData
				var nodeData = [];
				for (var i = 0; i < node_names.length; i++) {
					var node_to_add = [];
					node_to_add.id = node_names[i];
					node_to_add.text = this.nodeIdToName(node_names[i]) || node_names[i];

					node_to_add.ancestors = this.ancestors_struct[node_names[i]] || this.ancestors_struct[node_to_add.text] || [];
					if (_.isEmpty(node_to_add.ancestors) === false) {
						node_to_add.parent = node_to_add.ancestors[0];
					} else {
						node_to_add.parent = null;
					}
					nodeData.push(node_to_add);
				}

				return { nodeData: nodeData, linkData: linkData };
			}

			/**
    * process the nodeData output of getFlowBetweenSet
    *
    * @param      {Array}  nodeData  NodeData to convert 
    *                                to node objects
    * @return     {Array}  Node objects
    */

		}, {
			key: 'processNodeData',
			value: function processNodeData(nodeData) {
				var nodes = [];
				_.forEach(nodeData, function (data) {
					var newNode = new VisualizerNode.Node(null, null, data.id, data.text, null, data.parent, data.ancestors, null, null);
					nodes.push(newNode);
				});
				return nodes;
			}

			/**
    * process the linkData output of getFlowBetweenSet
    *
    * @param      {Array}  linkData  The link data
    * @param      {Array}  nodes     The nodes
    * @return     {Array}  Link objects
    */

		}, {
			key: 'processLinkData',
			value: function processLinkData(linkData, nodes) {
				/**
     * Returns the node that matches the id
     *
     * @param      {string} id      The identifier
     * @return     {Node}   The node with the matching id
     */
				function findNodeById(id, nodes) {
					for (var i = 0; i < nodes.length; i++) {
						if (id == nodes[i].id) {
							return nodes[i];
						}
					}
				}

				var links = [];
				//a mapping from source.id-target.id to the link added
				var added_links = {};
				//transforming link data
				for (var i = 0; i < linkData.length; i++) {
					if (linkData[i].source != linkData[i].target) {
						var source = findNodeById(linkData[i].source, nodes);
						var target = findNodeById(linkData[i].target, nodes);
						var weight = linkData[i].weight;
						//in order to sum all the weights of the links of the sub-nodes,
						//we use added_links to keep track if an link was added
						//if it is, we modify its weight
						if (source == null || target == null) {
							continue;
						}
						if (added_links[source.id + '-' + target.id] === undefined) {
							var link = new VisualizerLink.Link(source, target, weight);
							added_links[source.id + '-' + target.id] = link;
							links.push(link);
						} else {
							var existing_link = added_links[source.id + '-' + target.id];
							existing_link.setWeight(existing_link.getRawWeight() + weight);
							existing_link.increaseCount();
						}
					}
				}
				return links;
			}
		}]);

		return VisualizerDataSource;
	}(DataSource.DataSource);

	return {
		DataSource: VisualizerDataSource
	};
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.utils', []);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The base class the graph object. Any nodes or links that are contained in
 * its nodes or links property will be drawn on updateGraph.
 * Supports policies.
 * 
 * To write your own graph object, create a new factory that uses the graph
 * you want to inherit as a dependency, and extend its graph class. 
 * Return the class object with Graph as key.
 * 
 */
angular.module('contiv.graph').factory('Graph', ['PolicyService', function (PolicyService) {
    var Graph = function () {
        /**
         * constructor for the graph
         *
         * @param      {HTML SVG}  svg     The svg that will 
         *                                 hold the graph
         * @param      {Array}  nodes      List of nodes for the graph
         * @param      {Array}  links      List of links for the graph
         */
        function Graph(svg, nodes, links) {
            _classCallCheck(this, Graph);

            var thisGraph = this;

            thisGraph.nodes = nodes || [];
            thisGraph.links = links || [];

            thisGraph.defaultNodePolicies = [];
            thisGraph.defaultPathPolicies = [];

            thisGraph.svgPolicy = new PolicyService.Policy();

            thisGraph.state = {
                canZoom: true,
                canPan: true,
                initForce: false,
                disableUpdate: false
            };

            thisGraph.consts = {
                circleGClass: "conceptG",
                graphClass: "graph",
                pathClass: "path",
                nodeClass: "circle",
                nodeText: "nodeText",
                startRadius: 50,
                maxRadius: 60,
                padding: 5,
                displayOffset: 60
            };

            svg.on("mouseover", function (d) {
                thisGraph.svgPolicy["mouseover"].call(this, d);
            }).on("dblclick", function (d) {
                thisGraph.svgPolicy["dblclick"].call(this, d);
            }).on("contextmenu", function (d) {
                thisGraph.svgPolicy["contextmenu"].call(this, d);
            }).on("mouseout", function (d) {
                thisGraph.svgPolicy["mouseout"].call(this, d);
            }).on("mousedown", function (d) {
                thisGraph.svgPolicy["mousedown"].call(this, d);
            }).on("mouseup", function (d) {
                thisGraph.svgPolicy["mouseup"].call(this, d);
            });

            // define arrow markers for graph links
            var defs = svg.append('svg:defs');
            defs.append('svg:marker').attr('id', 'end-arrow').attr("viewBox", "0 -5 10 10").attr("refX", 20).attr("refY", -1).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5");

            // define arrow markers for leading arrow
            defs.append('svg:marker').attr('id', 'mark-end-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 7).attr('markerWidth', 3.5).attr('markerHeight', 3.5).attr('orient', 'auto').append('svg:path').attr('d', 'M0,-5L10,0L0,5');

            thisGraph.svg = svg;
            thisGraph.svgG = svg.append("g").classed(thisGraph.consts.graphClass, true);
            var svgG = thisGraph.svgG;

            // svg nodes and links 
            thisGraph.paths = svgG.append("g").selectAll("g");
            thisGraph.circles = svgG.append("g").selectAll("g");
            thisGraph.initNodes();
            thisGraph.initLinks();

            thisGraph.setPositions();
            var resizeFunc = function resizeFunc() {
                thisGraph.onWindowResize(svg);
            };

            thisGraph.bindings = {
                resize: resizeFunc
            };
            $(window).resize(resizeFunc);
        }

        /**
         * calls the destroy method for all policies
         */


        _createClass(Graph, [{
            key: 'destroy',
            value: function destroy() {
                var thisGraph = this;
                _(thisGraph.defaultNodePolicies).forEach(function (policy) {
                    policy.destroy();
                });
                _(thisGraph.defaultPathPolicies).forEach(function (policy) {
                    policy.destroy();
                });
                thisGraph.svgPolicy.destroy();
                for (var key in thisGraph.bindings) {
                    $(window).off(key, thisGraph.bindings[key]);
                }
            }

            /**
             * Runs the init function for all the nodes
             */

        }, {
            key: 'initNodes',
            value: function initNodes() {
                var thisGraph = this;
                _.forEach(thisGraph.nodes, function (node) {
                    node.initialize(thisGraph);
                });
            }

            /**
             * Runs the init function for all the links
             */

        }, {
            key: 'initLinks',
            value: function initLinks() {
                var thisGraph = this;
                _.forEach(thisGraph.links, function (link) {
                    link.initialize(thisGraph);
                });
            }

            /**
             * returns the node matching the id, 
             * or undefined if there is none
             *
             * @param      {Object}  id      The identifier
             * @return     {Node}  { matching node }
             */

        }, {
            key: 'findNodeById',
            value: function findNodeById(id) {
                var thisGraph = this;
                for (var i = 0; i < thisGraph.nodes.length; i++) {
                    if (id === thisGraph.nodes[i].id) {
                        return thisGraph.nodes[i];
                    }
                }
            }
        }, {
            key: 'findD3Node',


            /**
             * Returns the d3Node object that matches the id,
             * or undefined if there is none
             *
             * @param      {string}  id      The identifier
             * @return     {D3Node} The d3 node
             */
            value: function findD3Node(id) {
                var thisGraph = this;
                var d3Node;
                thisGraph.circles.each(function (d) {
                    if (d.id === id) {
                        d3Node = d3.select(this);
                    }
                });
                return d3Node;
            }

            /**
             * Used to install a drag policy that will be called
             * when nodes are dragged
             *
             * @param      {d3.behavior.drag}  d3drag  D3 drag object
             */

        }, {
            key: 'installDragPolicy',
            value: function installDragPolicy(d3drag) {
                this.drag = d3drag;
            }

            /**
             * Used to install a policy that will be called 
             * when there is mouse interactions with the graph's svg
             *
             * @param      {Policy}  policy  The policy to install
             */

        }, {
            key: 'installSvgPolicy',
            value: function installSvgPolicy(policy) {
                this.svgPolicy = policy;
            }

            /**
             * Used to install policies that are called when there is
             * mouse interaction with a node
             *
             * @param      {Policy}  policy  The policy to install
             */

        }, {
            key: 'installDefaultNodePolicy',
            value: function installDefaultNodePolicy(policy) {
                var thisGraph = this;
                thisGraph.defaultNodePolicies.push(policy);
                policy.initialize(thisGraph);
            }

            /**
             * Used to remove an installed policy for nodes
             *
             * @param      {Node}  policyRemove  The policy to remove
             */

        }, {
            key: 'uninstallDefaultNodePolicy',
            value: function uninstallDefaultNodePolicy(policyRemove) {
                var policyRemoveName;
                if (typeof policyRemove === 'string') {
                    policyRemoveName = policyRemove;
                } else {
                    policyRemoveName = policyRemove.policyName;
                }
                _(thisGraph.defaultNodePolicies).forEach(function (policy, index) {
                    if (policy.policyName === policyRemoveName) {
                        policy.destroy();
                        thisGraph.defaultNodePolicies.splice(index, 1);
                    }
                });
            }

            /**
             * Returns the node policy object with the given name
             *
             * @param      {string}  policyName  The policy name
             * @return     {Policy}  policy      The matching policy
             */

        }, {
            key: 'getNodePolicy',
            value: function getNodePolicy(policyName) {
                var thisGraph = this;

                _(thisGraph.defaultNodePolicies).forEach(function (policy, index) {
                    if (policy.policyName === policyName) {
                        return policy;
                    }
                });
            }

            /**
             * Used to install policies that are called when there is a
             * mouse interaction with a path
             *
             * @param      {Policy}  policy  The policy to install
             */

        }, {
            key: 'installDefaultPathPolicy',
            value: function installDefaultPathPolicy(policy) {
                var thisGraph = this;
                thisGraph.defaultPathPolicies.push(policy);
                policy.initialize(thisGraph);
            }

            /**
             * Used to remove an installed policy for links
             *
             * @param      {Policy}  policyRemove  The policy to remove
             */

        }, {
            key: 'uninstallDefaultPathPolicy',
            value: function uninstallDefaultPathPolicy(policyRemove) {
                var policyRemoveName;
                var thisGraph = this;
                if (typeof policyRemove === 'string') {
                    policyRemoveName = policyRemove;
                } else {
                    policyRemoveName = policyRemove.policyName;
                }
                _(thisGraph.defaultPathPolicies).forEach(function (policy, index) {
                    if (policy.policyName === policyRemoveName) {
                        policy.destroy();
                        thisGraph.defaultPathPolicies.splice(index, 1);
                    }
                });
            }

            /**
             * Called when there is a mouse interaction with a path
             * Propogates the event to all installed path policies
             *
             * @param      {string}  event   The event type
             * @param      {d3object}  d3path  The d3 path
             * @param      {Path}  d       The matching Link object
             */

        }, {
            key: 'pathPolicyEvent',
            value: function pathPolicyEvent(event, d3path, d) {
                var thisGraph = this;
                _(thisGraph.defaultPathPolicies).forEach(function (policy) {
                    policy[event](d3path, d);
                });
            }

            /**
             * Called when there is a mouse interaction with a node
             * Propogates the event to all installed node policies
             * 
             * @param      {string}  event   The event type
             * @param      {d3object}  d3node  The d3 node
             * @param      {Path}  d       The matching Node object
             */

        }, {
            key: 'nodePolicyEvent',
            value: function nodePolicyEvent(event, d3node, d) {
                var thisGraph = this;
                _.forEach(thisGraph.defaultNodePolicies, function (policy) {
                    policy[event](d3node, d);
                });
            }

            /**
             * Sets pan and zoom rules for the graph
             *
             * @param      {d3.behavior.zoom}  d3zoom  D3 zoom obj
             */

        }, {
            key: 'installZoomPolicy',
            value: function installZoomPolicy(d3zoom) {
                this.dragSvg = d3zoom;
                this.svg.call(this.dragSvg);
            }

            /**
             * Called when the window is resized
             * Hook for overriding in subclasses
             *
             * @param      {HTML SVG}  svg     The svg that the handler
             *                                 is attached to
             */

        }, {
            key: 'onWindowResize',
            value: function onWindowResize(svg) {}

            /**
             * Inserts line breaks in node text
             *
             * @param      {HTML Elem}  gEl    The elem to add text to
             * @param      {string}  title   The title
             */

        }, {
            key: 'insertTitleLinebreaks',
            value: function insertTitleLinebreaks(gEl, title) {
                var thisGraph = this;
                var words = title.split(/\s+/g),
                    nwords = words.length;
                var el = gEl.append("text").attr('class', thisGraph.consts.nodeText).attr("text-anchor", "middle").attr("dy", "-" + (nwords - 1) * 7.5);

                for (var i = 0; i < words.length; i++) {
                    var tspan = el.append('tspan').text(words[i]);
                    if (i > 0) tspan.attr('x', 0).attr('dy', '15');
                }
            }

            /**
             * Removes all links from the given node
             *
             * @param      {Node}  node    The node
             */

        }, {
            key: 'spliceLinksForNode',
            value: function spliceLinksForNode(node) {
                var thisGraph = this,
                    toSplice = thisGraph.links.filter(function (l) {
                    return l.source === node || l.target === node;
                });
                toSplice.map(function (l) {
                    thisGraph.links.splice(thisGraph.links.indexOf(l), 1);
                });
            }

            /**
             * Adds the node to the graph and updates
             *
             * @param      {Node}  node    The node
             */

        }, {
            key: 'addNode',
            value: function addNode(node) {
                var thisGraph = this;
                thisGraph.nodes.push(node);
                node.initialize(thisGraph);
                thisGraph.updateGraph();
            }
        }, {
            key: 'removeNode',


            /**
             * Removes the node to the graph and updates
             *
             * @param      {Node}  node    The node
             */
            value: function removeNode(node) {
                var thisGraph = this;
                thisGraph.nodes.splice(thisGraph.nodes.indexOf(node), 1);
                thisGraph.spliceLinksForNode(node);

                thisGraph.updateGraph();
            }
        }, {
            key: 'addLink',


            /**
             * Adds the link to the graph and updates
             *
             * @param      {link}  link    The link
             */
            value: function addLink(link) {
                var thisGraph = this;
                thisGraph.links.push(link);
                link.initialize(thisGraph);
                thisGraph.updateGraph();
            }
        }, {
            key: 'removeLink',


            /**
             * Removes the link to the graph and updates
             *
             * @param      {link}  link    The link
             */
            value: function removeLink(link) {
                var thisGraph = this;
                thisGraph.links.splice(thisGraph.links.indexOf(link), 1);
                link.initialize(thisGraph);
                thisGraph.updateGraph();
            }

            /**
             * Called when the graph is updating existing paths
             *
             * @param      {Path}  paths   List of paths
             */

        }, {
            key: 'updateExistingPaths',
            value: function updateExistingPaths(paths) {
                paths.each(function (d) {
                    d.updateAttr(d3.select(this), d);
                });
            }

            /**
             * Called when the graph is adding new paths
             *
             * @param      {Path}  newPaths  List of new paths
             */

        }, {
            key: 'updateNewPaths',
            value: function updateNewPaths(newPaths) {
                var thisGraph = this;

                thisGraph.initLinks();

                newPaths.each(function (d) {
                    d.newPathAttr(d3.select(this), d);
                });

                //if node doesn't have its own policy, use default for the graph
                newPaths.on("mouseover", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("mouseover", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("mouseover", d3.select(this), d);
                    }
                }).on("dblclick", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("dblclick", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("dblclick", d3.select(this), d);
                    }
                }).on("contextmenu", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("contextmenu", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("contextmenu", d3.select(this), d);
                    }
                }).on("mouseout", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("mouseout", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("mouseout", d3.select(this), d);
                    }
                }).on("mousedown", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("mousedown", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("mousedown", d3.select(this), d);
                    }
                }).on("mouseup", function (d) {
                    if (d.hasPolicy) {
                        d.pathPolicyEvent("mouseup", d3.select(this), d);
                    } else {
                        thisGraph.pathPolicyEvent("mouseup", d3.select(this), d);
                    }
                }).call(thisGraph.drag);
            }

            /**
             * Called when the graph is updating existing nodes
             */

        }, {
            key: 'updateExistingNodes',
            value: function updateExistingNodes() {
                var thisGraph = this;
                thisGraph.circles = this.circles.data(thisGraph.nodes, function (d) {
                    return d.id;
                }).each(function (d) {
                    d.updateAttr(d3.select(this), d);
                });
            }

            /**
             * Called when the graph is adding new nodes
             *
             * @param      {Node}  newNodes  List of new nodes
             */

        }, {
            key: 'updateNewNodes',
            value: function updateNewNodes(newNodes) {
                var thisGraph = this;

                newNodes.each(function (d) {
                    if (d.graph == null) {
                        d.initialize(thisGraph);
                    }
                    d.newNodeAttr(d3.select(this), d);
                });

                //if node doesn't have its own policy, use default for the graph
                newNodes.on("mouseover", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("mouseover", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("mouseover", d3.select(this), d);
                    }
                }).on("dblclick", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("dblclick", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("dblclick", d3.select(this), d);
                    }
                }).on("contextmenu", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("contextmenu", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("contextmenu", d3.select(this), d);
                    }
                }).on("mouseout", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("mouseout", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("mouseout", d3.select(this), d);
                    }
                }).on("mousedown", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("mousedown", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("mousedown", d3.select(this), d);
                    }
                }).on("mouseup", function (d) {
                    if (d.hasPolicy) {
                        d.nodePolicyEvent("mouseup", d3.select(this), d);
                    } else {
                        thisGraph.nodePolicyEvent("mouseup", d3.select(this), d);
                    }
                }).call(thisGraph.drag);

                newNodes.append("circle").attr("r", function (d) {
                    return String(d.radius);
                });

                newNodes.each(function (d) {
                    thisGraph.insertTitleLinebreaks(d3.select(this), d.text);
                });
            }

            /**
             * Prevents nodes from colliding
             *
             * @param      {number}  alpha   Affects how much change
             *                               the collision causes
             * @return     {boolean}  {Whether nodes are collided}
             */

        }, {
            key: 'd3ForceCollide',
            value: function d3ForceCollide(alpha) {
                var thisGraph = this,
                    consts = thisGraph.consts;
                var nodes = thisGraph.nodes;
                var quadtree = d3.geom.quadtree(nodes);
                return function (d) {
                    var r = d.radius + consts.maxRadius + consts.padding,
                        nx1 = d.x - r,
                        nx2 = d.x + r,
                        ny1 = d.y - r,
                        ny2 = d.y + r;
                    quadtree.visit(function (quad, x1, y1, x2, y2) {
                        if (quad.point && quad.point !== d) {
                            var x = d.x - quad.point.x,
                                y = d.y - quad.point.y,
                                l = Math.sqrt(x * x + y * y),
                                r = d.radius + quad.point.radius + consts.padding;
                            if (l < r) {
                                l = (l - r) / l * alpha;
                                d.x -= x *= l;
                                d.y -= y *= l;
                                quad.point.x += x;
                                quad.point.y += y;
                            }
                        }
                        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
                    });
                };
            }

            /**
             * Tick of the d3 force simulation
             *
             * @param      {D3tick event}  e    D3tick event
             * @param      {number}  width  The width of the simulation
             * @param      {number}  height The height of the simulation
             */

        }, {
            key: 'd3ForceTick',
            value: function d3ForceTick(e, width, height) {
                var thisGraph = this,
                    consts = thisGraph.consts;

                var offset = consts.displayOffset;
                var nodes = thisGraph.nodes;
                var q = d3.geom.quadtree(thisGraph.nodes),
                    i = 0,
                    n = nodes.length;

                while (++i < n) {
                    q.visit(this.d3ForceCollide(nodes[i]));
                }

                thisGraph.circles.each(this.d3ForceCollide(.5)).attr("cx", function (d) {
                    return d.x = Math.max(d.radius + offset, Math.min(width - offset - d.radius, d.x));
                }).attr("cy", function (d) {
                    return d.y = Math.max(d.radius + offset, Math.min(height - offset - d.radius, d.y));
                });

                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Starts on start of the force simulation
             */

        }, {
            key: 'd3ForceStart',
            value: function d3ForceStart() {
                var thisGraph = this;
                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Called on the end of the force simulation
             */

        }, {
            key: 'd3ForceEnd',
            value: function d3ForceEnd() {
                var thisGraph = this;
                thisGraph.circles.attr('cx', function (d) {
                    return d.x;
                }).attr('cy', function (d) {
                    return d.y;
                });

                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Calculates the width and height bounds for the 
             * force simulation
             *
             * @return     {Object}  width and height as properties 
             */

        }, {
            key: 'd3ForceBounds',
            value: function d3ForceBounds() {
                var svgWidth = $('#visualization-graph').width();
                var svgHeight = $('#visualization-graph').height();

                var width = svgWidth;
                var height = svgHeight;
                return { width: width, height: height };
            }

            /**
             * Does a d3 force simulation
             *
             * @param      {Function}  callback  The callback
             */

        }, {
            key: 'setForce',
            value: function setForce(callback) {
                var thisGraph = this;

                var nodes = thisGraph.nodes;
                var links = thisGraph.links;
                if (_.isEmpty(nodes)) {
                    return;
                }

                var bounds = thisGraph.d3ForceBounds();

                var force = d3.layout.force().size([bounds.width, bounds.height]).nodes(nodes).charge(function (d) {
                    return -6000;
                }).links(links);

                force.linkDistance(bounds.width / 3);
                force.linkStrength(.2);
                force.gravity(.2);

                force.on('tick', function (e) {
                    thisGraph.d3ForceTick.call(thisGraph, e, bounds.width, bounds.height);
                });

                force.on('start', function () {
                    thisGraph.d3ForceStart.call(thisGraph);
                });

                force.on('end', function () {
                    thisGraph.d3ForceEnd.call(thisGraph);
                });

                force.start();
                var k = 0;
                while (force.alpha() > 1e-2 && k < 150) {
                    force.tick();
                    k = k + 1;
                }
                force.stop();

                if (callback != null) {
                    callback();
                }
            }

            /**
             * Sets the positions to be the center of the screen if 
             * not provided
             * also sets the radius of the nodes
             */

        }, {
            key: 'setPositions',
            value: function setPositions() {
                var thisGraph = this;

                var offset = thisGraph.consts.displayOffset;
                var svgWidth = $('#visualization-graph').width();
                var svgHeight = $('#visualization-graph').height();

                var width = svgWidth - 2 * offset;
                var height = svgHeight - 2 * offset;

                var nodes = thisGraph.nodes;

                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].radius = nodes[i].radius || thisGraph.consts.startRadius;
                    if (nodes[i].x == null || nodes[i].y == null) {
                        // nodes[i].xStart = width/2  + nodes[i].radius + offset
                        nodes[i].x = width / 2 + nodes[i].radius + offset;
                        // nodes[i].yStart = height/2 + nodes[i].radius + offset
                        nodes[i].y = height / 2 + nodes[i].radius + offset;
                    }
                }
            }

            /**
             * Called to update the view of the graph when
             * data changes
             *
             * @param      {Function}  callback  The callback
             */

        }, {
            key: 'updateGraph',
            value: function updateGraph(callback) {
                var thisGraph = this,
                    consts = thisGraph.consts,
                    state = thisGraph.state;

                if (thisGraph.state.disableUpdate) {
                    return;
                }

                this.updateExistingNodes();
                var newGs = thisGraph.circles.enter().append("g");

                // console.log('update', newGs);
                newGs.classed(consts.circleGClass, true);

                // this.updateNewNodes(newGs);

                // remove old nodes
                thisGraph.circles.exit().remove();

                if (state.initForce == false) {
                    thisGraph.setForce(function () {
                        thisGraph.updateNewNodes.call(thisGraph, newGs);
                    });
                    state.initForce = true;
                } else {
                    this.updateNewNodes(newGs);
                }

                thisGraph.paths = thisGraph.paths.data(thisGraph.links, function (d) {
                    return String(d.source.id) + "+" + String(d.target.id);
                });
                var paths = thisGraph.paths;
                this.updateExistingPaths(paths);

                var newpaths = paths.enter().append("path").style('marker-end', 'url(#end-arrow)').classed("link", true);
                this.updateNewPaths(newpaths);

                // remove old links
                paths.exit().remove();

                if (callback != null) {
                    callback();
                }
            }
        }]);

        return Graph;
    }();

    return {
        Graph: Graph
    };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.applicationgroups', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.applicationgroups', {
            url: '/applicationgroups',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.applicationgroups.list', {
            url: '/list',
            component: 'applicationGrouplist'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The graph that is used specifically for the visualization tab.
 */
angular.module('contiv.graph').factory('VisualizerGraph', ['Graph', function (Graph) {
    var VisualizerGraph = function (_Graph$Graph) {
        _inherits(VisualizerGraph, _Graph$Graph);

        /**
         * Constructs the object.
         *
         * @param   {HTML SVG}  svg             The svg that will 
               *                                      hold the graph
               * @param   {Array}  nodes   		    List of nodes
               * @param   {Array}  links   		    List of links
         * @param   {DataSource}  dataSource    The data source
         */
        function VisualizerGraph(svg, nodes, links, dataSource) {
            _classCallCheck(this, VisualizerGraph);

            var _this = _possibleConstructorReturn(this, (VisualizerGraph.__proto__ || Object.getPrototypeOf(VisualizerGraph)).call(this, svg, nodes, links));

            var thisGraph = _this;

            //holds current transitions that are occuring
            thisGraph.state.transition = [];
            //Min distance between nodes when spawning randomly
            thisGraph.consts.edge_buffer = 200;
            //Size reduction as you go through levels in nodes
            thisGraph.consts.radiusDecay = 1;
            //Css class for nodes that are containers
            thisGraph.consts.containerClass = 'container';

            //dataSource holds the server data and methods for
            //converting it to data for the graph
            thisGraph.dataSource = dataSource;

            //Drag behavior for nodes
            var drag = d3.behavior.drag().origin(function (d) {
                return { x: d.x, y: d.y };
            }).on("dragstart", function () {}).on("drag", function (args) {
                d3.select(this).attr("transform", function (d, i) {
                    d.x += d3.event.dx;
                    d.y += d3.event.dy;
                    return "translate(" + [d.x, d.y] + ")";
                });
                thisGraph.updateGraph();
            }).on("dragend", function () {});

            thisGraph.drag = drag;

            //Pan and Zoom behavior for the graph
            var zoom = d3.behavior.zoom().on("zoom", function () {
                if (d3.event.sourceEvent != null && d3.event.sourceEvent.ctrlKey) {
                    return false;
                } else {
                    thisGraph.zoomed.call(thisGraph);
                }
                return true;
            }).on("zoomstart", function (d, i) {});
            thisGraph.dragSvg = zoom;
            thisGraph.svg.call(zoom).on("dblclick.zoom", null);
            return _this;
        }

        /**
         * Called with no args when the graph has a zoom action
         * Can also be called with args to force a zoom or pan 
         * event for the graph.
         *
         * @param      {Array}   translate  The amount to translate
         * @param      {number}  scale      The amount to scale
         */


        _createClass(VisualizerGraph, [{
            key: 'zoomed',
            value: function zoomed(translate, scale) {
                var thisGraph = this;
                if (thisGraph.state.rightClick == true) {
                    return;
                }
                this.state.justScaleTransGraph = true;
                if (translate != null && scale != null) {
                    var zoom = thisGraph.dragSvg;
                    zoom.scale(scale);
                    zoom.translate(translate);
                    //creating names to prevent transition conflicts
                    var zoomSetCallback = function zoomSetCallback() {
                        zoom.scale(scale);
                        zoom.translate(translate);
                    };
                    var translate_name = "zoom" + translate;
                    d3.select("." + this.consts.graphClass).transition(translate_name).delay(100).duration(750).attr('transform', 'translate(' + zoom.translate() + ') scale(' + zoom.scale() + ')').each("end", zoomSetCallback);
                    return;
                }
                if (thisGraph.state.canZoom) {
                    d3.select("." + this.consts.graphClass).attr("transform", "translate(" + thisGraph.dragSvg.translate() + ") scale(" + thisGraph.dragSvg.scale() + ")");
                }
            }
        }, {
            key: 'onWindowResize',


            /**
             * Called when the window resizes
             *
             * @param      {HTML SVG}  svg    The svg to resize
             */
            value: function onWindowResize(svg) {
                var bodyEl = document.getElementsByTagName('body')[0];
                var offset = $('#visualization-graph').offset();
                var divWidth = $('#visualization-graph').width();
                var height = bodyEl.clientHeight;
                svg.attr("width", divWidth).attr("height", height - offset.top - 20);
            }
        }, {
            key: 'updateLinkData',


            /**
             * Called when the server sends updated data for the links
             */
            value: function updateLinkData() {
                var thisGraph = this;
                var node_names_set = [];
                for (var i = 0; i < thisGraph.nodes.length; i++) {
                    node_names_set.push(thisGraph.nodes[i].id);
                }
                var retData = thisGraph.dataSource.getFlowBetweenSet(node_names_set);
                var linkData = retData.linkData;
                thisGraph.links = thisGraph.dataSource.processLinkData(linkData, thisGraph.nodes);
                this.initNodes();
                this.initLinks();
                thisGraph.updateGraph();
            }
        }]);

        return VisualizerGraph;
    }(Graph.Graph);

    return {
        Graph: VisualizerGraph
    };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.dashboard', ['contiv.models'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.dashboard', {
            url: '/dashboard',
            component: 'dashboard'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The base class for link objects for the graph.
 * Supports policies.
 * 
 * To write your own link object, create a new factory that uses the link
 * you want to inherit as a dependency, and extend its link class. 
 * Return the class object with Link as key
 * 
 */
angular.module('contiv.graph').factory('Link', [function () {
	var Link = function () {
		/**
   * Constructs the object.
   *
   * @param      {Node}  sourceNode  The source node
   * @param      {Node}  targetNode  The target node
   */
		function Link(sourceNode, targetNode) {
			_classCallCheck(this, Link);

			this.source = sourceNode;
			this.target = targetNode;
			this.hasPolicy = false;
			this.pathPolicies = [];
			this.graph = null;
			this.initialized = false;
		}

		/**
   * Called when a link is added to the graph
   *
   * @param      {Graph}  graph   The graph it is added to
   */


		_createClass(Link, [{
			key: 'initialize',
			value: function initialize(graph) {
				if (this.initialized == false) {
					this.initialized = true;
					this.graph = graph;
				}
			}

			/**
    * Called during the update graph for existing links
    *
    * @param      {D3Object}  d3path  The d3 path
    * @param      {Link}  	   d       Matching Link Object       
    */

		}, {
			key: 'updateAttr',
			value: function updateAttr(d3path, d) {
				d3path.style('marker-end', 'url(#end-arrow)').attr("d", arrowPath);
			}

			/**
    * Called during the first update graph for a link
    *
    * @param      {D3Object}  d3path  The d3 path
    * @param      {Link}  	   d       Matching Link Object       
    */

		}, {
			key: 'newPathAttr',
			value: function newPathAttr(d3path, d) {
				d3path.attr('d', arrowPath);
			}

			/**
    * Calculates the arrow path
    *
    * @return     {string}  The path to draw
    */

		}, {
			key: 'arrowPath',
			value: function arrowPath() {
				var d = this;
				var dx = d.target.x - d.source.x,
				    dy = d.target.y - d.source.y,
				    dr = Math.sqrt(dx * dx + dy * dy);
				return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
			}

			/**
    * Used to install policies that are called when this
    * link has a mouse event
    *
    * @param      {Policy}  policy  The policy to install
    */

		}, {
			key: 'installPathPolicy',
			value: function installPathPolicy(policy) {
				this.hasPolicy = true;
				this.pathPolicies.push(policy);
				policy.initialize(this.graph);
			}

			/**
    * Used to uninstall policy for this link
    *
    * @param      {Policy}  policyRemove  The policy to remove
    */

		}, {
			key: 'uninstallPathPolicy',
			value: function uninstallPathPolicy(policyRemove) {
				var policyRemoveName;
				var thisPath = this;
				if (typeof policyRemove === 'string') {
					policyRemoveName = policyRemove;
				} else {
					policyRemoveName = policyRemove.policyName;
				}
				_(thisPath.pathPolicies).forEach(function (policy, index) {
					if (policy.policyName === policyRemoveName) {
						policy.destroy();
						thisPath.pathPolicies.splice(index, 1);
					}
				});
				if (thisPath.pathPolicies.length === 0) {
					thisPath.hasPolicy = false;
				}
			}

			/**
    * Called when there is a mouse event for this path
    *
    * @param      {string}  event     The mouse event
    * @param      {D3Object}  d3path  The d3 path
    * @param      {Object}  d         The matching link object
    */

		}, {
			key: 'pathPolicyEvent',
			value: function pathPolicyEvent(event, d3path, d) {
				_(d.pathPolicies).forEach(function (policy) {
					policy[event](d3path, d);
				});
			}
		}]);

		return Link;
	}();

	return {
		Link: Link
	};
}]);
/**
 * Created by vjain3 on 5/19/16.
 */
angular.module('contiv.login', ['contiv.utils']);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The link that is used specifically for the visualization tab.
 */
angular.module('contiv.graph').factory('VisualizerLink', ['Link', function (Link) {
	var VisualizerLink = function (_Link$Link) {
		_inherits(VisualizerLink, _Link$Link);

		/**
   * Constructs the object.
   *
   * @param      {Node}  sourceNode  The source node
   * @param      {Node}  targetNode  The target node
   * @param      {number}  weight    The weight of the link
   */
		function VisualizerLink(sourceNode, targetNode, weight) {
			_classCallCheck(this, VisualizerLink);

			var _this = _possibleConstructorReturn(this, (VisualizerLink.__proto__ || Object.getPrototypeOf(VisualizerLink)).call(this, sourceNode, targetNode));

			_this.weight = weight;
			//Count is used to keep track of how many
			//paths to its subnodes there are
			//in order to calculate average traffic
			_this.count = 1;
			return _this;
		}

		/**
   * Increases the count of the link
   * USed to keep track of how many paths to its subnodes
   * there are in order to calculate average traffic
   */


		_createClass(VisualizerLink, [{
			key: 'increaseCount',
			value: function increaseCount() {
				this.count += 1;
			}

			/**
    * Calculates where to place qtip for
    *
    * @return     {Object}  Object with qTip settings
    */

		}, {
			key: 'qtipHelper',
			value: function qtipHelper() {
				var ret;
				var d = this;
				var dx = (d.target.x - d.source.x) / 2,
				    dy = (d.target.y - d.source.y) / 2;
				if (d.source.x < d.target.x) {
					ret = {
						my: 'top center',
						at: 'center center', // at the bottom right of...
						target: [dx, dy],
						adjust: {
							y: 10
						}
					};
				} else {
					ret = {
						my: 'bottom center',
						at: 'center center', // at the bottom right of...
						target: [dx, dy],
						adjust: {
							y: -10
						}
					};
				}
				return ret;
			}

			/**
   * Called when a link is added to the graph
   *
   * @param      {Graph}  graph   The graph it is added to
   */

		}, {
			key: 'initialize',
			value: function initialize(graph) {
				if (this.initialized == false) {
					_get(VisualizerLink.prototype.__proto__ || Object.getPrototypeOf(VisualizerLink.prototype), 'initialize', this).call(this, graph);
					var state = graph.state.VisualizerLink;
					if (state == null) {
						state = graph.state.VisualizerLink = {};
						state.maxWeight = null;
						state.useAvgWeight = true;
					}
					this.updateMaxWeight();
				}
			}

			/**
    * Sets whether the graph should use avg weight
    *
    * @param      {boolean}  val     The value to set to
    */

		}, {
			key: 'setUseAvgWeight',
			value: function setUseAvgWeight(val) {
				this.graph.state.VisualizerLink.useAvgWeight = !!val;
			}

			/**
    * Sets the weight of this link
    *
    * @param      {number}  weight  The weight to set to
    */

		}, {
			key: 'setWeight',
			value: function setWeight(weight) {
				this.weight = weight;
			}

			/**
    * Gets the raw weight.
    *
    * @return     {number}  The raw weight.
    */

		}, {
			key: 'getRawWeight',
			value: function getRawWeight() {
				return this.weight;
			}

			/**
    * Gets the weight value of the link, depending on the
    * useAvgWeigth setting
    *
    * @return     {number}  The weight.
    */

		}, {
			key: 'getWeight',
			value: function getWeight() {
				var thisGraph = this.graph,
				    state = thisGraph.state.VisualizerLink;

				if (state.useAvgWeight) {
					var weight = this.weight / this.count;
					return weight;
				}
				return this.weight;
			}

			/**
    * Updates the max weight of the graph
    */

		}, {
			key: 'updateMaxWeight',
			value: function updateMaxWeight() {
				var thisGraph = this.graph,
				    state = thisGraph.state.VisualizerLink;

				var maxLink = _.maxBy(thisGraph.links, function (l) {
					if (l.graph != null) {
						return l.getWeight();
					}
					return 0;
				});
				state.maxWeight = maxLink.getWeight();
			}

			/**
    * Called during the update graph for existing links
    *
    * @param      {D3Object}  d3path  The d3 path
    * @param      {Link}  	   d       Matching Link Object       
    */

		}, {
			key: 'updateAttr',
			value: function updateAttr(d3path, d) {
				var thisGraph = this.graph,
				    state = thisGraph.state.VisualizerLink;
				this.updateMaxWeight();
				var colorScale = d3.scale.linear().domain([0, state.maxWeight]).range(["#ffb366", "#F92606"]);
				state.colorScale = colorScale;
				d3path.style('marker-end', 'url(#end-arrow)').classed(thisGraph.consts.selectedClass, function (d) {
					return d === state.selectedEdge;
				}).attr("d", this.arrowPath.call(d)).transition("existingPathTransition").duration(750).attr("stroke", function (d) {
					var c = colorScale(d.getWeight());
					return c;
				});
			}

			/**
    * Called during the first update graph for this link
    *
    * @param      {D3Object}  d3path  The d3 path
    * @param      {Link}  	   d       Matching Link Object
    */

		}, {
			key: 'newPathAttr',
			value: function newPathAttr(d3path, d) {
				var thisGraph = this.graph,
				    state = thisGraph.state.VisualizerLink;
				this.updateMaxWeight();
				var colorScale = d3.scale.linear().domain([0, state.maxWeight]).range(["#ffb366", "#F92606"]);

				d3path.transition("newPathTransition").duration(750).attrTween("opacity", function (d) {
					return d3.interpolateString(0, 1);
				}).attr("stroke", function (d) {
					var c = colorScale(d.getWeight());
					return c;
				}).attr('d', this.arrowPath.call(d));
			}
		}]);

		return VisualizerLink;
	}(Link.Link);

	return {
		Link: VisualizerLink
	};
}]);
/**
 * Created by vjain3 on 5/19/16.
 */
angular.module('contiv.menu', []);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The base class for node objects for the graph.
 * Supports policies.
 * 
 * To write your own Node object, create a new factory that uses the node
 * you want to inherit as a dependency, and extend its node class. 
 * Return the class object with Node as key
 * 
 */
angular.module('contiv.graph').factory('Node', [function () {
	var Node = function () {
		/**
   * Constructs the object.
   *
   * @param      {number}  x       x location
   * @param      {number}  y       y location
   * @param      {string}  id      The identifier
   * @param      {string}  text    The text to display
   * @param      {number}  radius  The radius of the node
   */
		function Node(x, y, id, text, radius) {
			_classCallCheck(this, Node);

			this.x = x;
			this.y = y;
			this.radius = radius;
			this.id = id;
			this.text = text;
			this.radius = radius;
			this.hasPolicy = false;
			this.policy = null;
			this.nodePolicies = [];
			this.graph = null;
			this.initialized = false;
		}

		/**
   * Called when a node is added to the graph
   *
   * @param      {Graph}  graph   The graph it is added to
   */


		_createClass(Node, [{
			key: 'initialize',
			value: function initialize(graph) {
				if (this.initialized == false) {
					this.initialized = true;
					this.graph = graph;
				}
			}

			/**
    * Called during the update graph for existing links
    *
    * @param      {D3Object}  d3node  The d3 node
    */

		}, {
			key: 'updateAttr',
			value: function updateAttr(d3node, d) {
				d3node.attr("transform", function (d) {
					return "translate(" + d.x + "," + d.y + ")";
				});
			}

			/**
    * Called during the first update graph for a node
    * Hook for sub classes
    * 
    * @param      {D3Object}  d3node  The d3 node
    * @param      {Node}      d       Matching Node Object
    */

		}, {
			key: 'newNodeAttr',
			value: function newNodeAttr(d3node, d) {}

			/**
    * Sets the radius of the node.
    *
    * @param      {number}  radius  The radius
    */

		}, {
			key: 'setRadius',
			value: function setRadius(radius) {
				this.radius = radius;
			}

			/**
    * Used to install policies that are called when this
    * node has a mouse event
    *
    * @param      {Policy}  policy  The policy to install
    */

		}, {
			key: 'installNodePolicy',
			value: function installNodePolicy(policy) {
				this.hasPolicy = true;
				this.nodePolicies.push(policy);
				policy.initialize(this.graph);
			}

			/**
    * Used to uninstall policy for this node
    *
    * @param      {Policy|string}  policyRemove  The policy to remove
    */

		}, {
			key: 'uninstallNodePolicy',
			value: function uninstallNodePolicy(policyRemove) {
				var policyRemoveName;
				var thisNode = this;
				if (typeof policyRemove === 'string') {
					policyRemoveName = policyRemove;
				} else {
					policyRemoveName = policyRemove.policyName;
				}
				_(thisNode.nodePolicies).forEach(function (policy, index) {
					if (policy.policyName === policyRemoveName) {
						policy.destroy();
						thisNode.nodePolicies.splice(index, 1);
					}
				});
				if (thisNode.nodePolicies.length === 0) {
					thisNode.hasPolicy = false;
				}
			}

			/**
    * Called when there is a mouse event for this node
    *
    * @param      {string}  event     The mouse event
    * @param      {D3Object}  d3node  The d3 node
    * @param      {Object}  d         The matching node object
    */

		}, {
			key: 'nodePolicyEvent',
			value: function nodePolicyEvent(event, d3node, d) {
				_.forEach(this.nodePolicies, function (policy) {
					policy[event](d3node, d);
				});
			}
		}]);

		return Node;
	}();

	return {
		Node: Node
	};
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.networkpolicies', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies', {
            url: '/networkpolicies',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.networkpolicies.isolation', {
            url: '/isolation',
            abstract: true,
            template: '<ui-view/>'
        })
            .state('contiv.menu.networkpolicies.isolation.create', {
            url: '/create',
            component: 'isolationpolicycreate'
        })
            .state('contiv.menu.networkpolicies.bandwidth', {
            url: '/bandwidth',
            abstract: true,
            template: '<ui-view/>'
        })
            .state('contiv.menu.networkpolicies.bandwidth.create', {
            url: '/create',
            component: 'bandwidthpolicycreate'
        })
            .state('contiv.menu.networkpolicies.redirection', {
            url: '/redirection',
            abstract: true,
            template: '<ui-view/>'
        })
            .state('contiv.menu.networkpolicies.list.isolation', {
            url: '/isolation',
            component: 'isolationpolicylist'
        })
            .state('contiv.menu.networkpolicies.list.bandwidth', {
            url: '/bandwidth',
            component: 'bandwidthpolicylist'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The node that is used specifically for the visualization tab.
 */
angular.module('contiv.graph').factory('VisualizerNode', ['Node', function (Node) {
	var VisualizerNode = function (_Node$Node) {
		_inherits(VisualizerNode, _Node$Node);

		/**
   * Constructs the object.
   *
   * @param      {number}  x       	x location
   * @param      {number}  y       	y location
   * @param      {string}  id      	The identifier
   * @param      {string}  text    	The text to display
   * @param      {number}  radius  	The radius of the node
   * @param      {string}  parent     The parent id
   * @param      {Array}   ancestors  Array of ancestors Id
   * @param      {number}  xStart     x loc to start animation
   * @param      {number}  yStart     y loc to start animation
   */
		function VisualizerNode(x, y, id, text, radius, parent, ancestors, xStart, yStart) {
			_classCallCheck(this, VisualizerNode);

			var _this = _possibleConstructorReturn(this, (VisualizerNode.__proto__ || Object.getPrototypeOf(VisualizerNode)).call(this, x, y, id, text, radius));

			_this.parent = parent;
			_this.ancestors = ancestors;
			if (xStart == null) {
				_this.xStart = x;
			} else {
				_this.xStart = xStart;
			}
			if (yStart == null) {
				_this.yStart = y;
			} else {
				_this.yStart = yStart;
			}
			return _this;
		}

		/**
   * Called during the first update graph for a node
   *
   * @param      {D3Object}  d3node  The d3 node
   * @param      {Node}    d         The matching Node
   */


		_createClass(VisualizerNode, [{
			key: 'newNodeAttr',
			value: function newNodeAttr(d3node, d) {
				var thisGraph = this.graph;
				if (thisGraph.consts.containerClass != null && thisGraph.dataSource.children_struct[d.id] == null) {
					d3node.classed(thisGraph.consts.containerClass, true);
				}
				d3node.transition("nodePositionTransition").duration(750).attrTween("transform", function (d) {
					if (d.xStart != null && d.yStart != null) {
						var xStart = d.xStart;
						var yStart = d.yStart;
						d.xStart = d.x;
						d.yStart = d.y;
						return d3.interpolateString("translate(" + xStart + "," + yStart + ")", "translate(" + d.x + "," + d.y + ")");
					}
					return d3.interpolateString("translate(" + d.x + "," + d.y + ")", "translate(" + d.x + "," + d.y + ")");
				});
			}
		}]);

		return VisualizerNode;
	}(Node.Node);

	return {
		Node: VisualizerNode
	};
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.networks', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('contiv.menu.networks', {
            url: '/networks',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.networks.list', {
            url: '/list',
            component: 'networkList'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy is used to add a select node feature.
 * Supports selecting multiple nodes by using the ctrl key.
 */
angular.module('contiv.graph').factory('NodeSelectionPolicy', ['Policy', function (Policy) {
    var NodeSelectionPolicy = function (_Policy$Policy) {
        _inherits(NodeSelectionPolicy, _Policy$Policy);

        /**
         * Constructs the object.
         */
        function NodeSelectionPolicy() {
            _classCallCheck(this, NodeSelectionPolicy);

            return _possibleConstructorReturn(this, (NodeSelectionPolicy.__proto__ || Object.getPrototypeOf(NodeSelectionPolicy)).call(this, "NodeSelectionPolicy"));
        }

        /**
         * Called when policy is installed
         * Overwrites the on drag event of the graph
         * 
         * @param      {Graph}  graph   The graph it is 
        *                              installed on
        */


        _createClass(NodeSelectionPolicy, [{
            key: 'initialize',
            value: function initialize(graph) {
                if (this.initialized) {
                    return;
                }
                _get(NodeSelectionPolicy.prototype.__proto__ || Object.getPrototypeOf(NodeSelectionPolicy.prototype), 'initialize', this).call(this, graph);
                var state = graph.state.NodeSelectionPolicy = {};
                state.selectedNodes = [];
                var consts = graph.consts.NodeSelectionPolicy = {};
                consts.selectedClass = "selected";
                //overwritting graph's node on drag event to support
                //moving multiple nodes at once
                var drag = graph.drag;
                drag.on('drag', function (args) {
                    var thisGraph = graph;
                    if (thisGraph.consts.NodeSelectionPolicy != null) {
                        var selectedClass = thisGraph.consts.NodeSelectionPolicy.selectedClass;
                        var selection = d3.selectAll('.' + selectedClass);

                        if (selection[0].indexOf(this) == -1) {
                            selection.classed(selectedClass, false);
                            selection = d3.select(this);
                            selection.classed(selectedClass, true);
                        }

                        selection.attr("transform", function (d, i) {
                            d.x += d3.event.dx;
                            d.y += d3.event.dy;
                            return "translate(" + [d.x, d.y] + ")";
                        });
                        thisGraph.updateGraph();
                    }
                });
            }

            /**
             * Adds the given node to the array of selected nodes
             *
             * @param      {D3Object}  d3Node    The d3 node
             * @param      {Node}      nodeData  Matching Node object
             */

        }, {
            key: 'addSelectNode',
            value: function addSelectNode(d3Node, nodeData) {
                var thisGraph = this.graph,
                    state = thisGraph.state.NodeSelectionPolicy,
                    consts = thisGraph.consts.NodeSelectionPolicy;

                d3Node.classed(consts.selectedClass, true);
                state.selectedNodes.push(nodeData);
            }

            /**
             * Removes the given node from the array of selected nodes.
             *
             * @param      {D3Object}  d3Node    The d3 node
             * @param      {Node}      nodeData  Matching node object 
             */

        }, {
            key: 'removeSelectFromNode',
            value: function removeSelectFromNode(d3Node, nodeData) {
                var thisGraph = this.graph,
                    state = thisGraph.state.NodeSelectionPolicy,
                    consts = thisGraph.consts.NodeSelectionPolicy;

                thisGraph.circles.filter(function (cd) {
                    return cd.id === nodeData.id;
                }).classed(consts.selectedClass, false);
                var index = state.selectedNodes.indexOf(nodeData);
                state.selectedNodes.splice(index, 1);
            }

            /**
             * Removes all selected nodes.
             */

        }, {
            key: 'removeAllSelectedNodes',
            value: function removeAllSelectedNodes() {
                var thisGraph = this.graph,
                    state = thisGraph.state.NodeSelectionPolicy,
                    consts = thisGraph.consts.NodeSelectionPolicy;

                thisGraph.circles.classed(consts.selectedClass, false);
                state.selectedNodes = [];
            }

            /**
             * On Mousedown, determines whether to change the
             * selected status of the clicked node.
             *
             * @param      {D3Object}  d3node  The d3 node
             * @param      {Node}      d       Matching Node Object       
             */

        }, {
            key: 'mousedown',
            value: function mousedown(d3node, d) {
                var thisGraph = this.graph,
                    state = thisGraph.state.NodeSelectionPolicy;
                d3.event.stopPropagation();
                if (d3.event.ctrlKey) {
                    if (state.selectedNodes.indexOf(d) > -1) {
                        this.removeSelectFromNode(d3node, d);
                    } else {
                        this.addSelectNode(d3node, d);
                    }
                } else if (state.selectedNodes.indexOf(d) == -1) {
                    //if no control key, and clicked not selected node,
                    //remove all of current selection
                    this.removeAllSelectedNodes();
                }
            }

            /**
             * On Mouseup, determines whether to change the
             * selected status of the clicked node.
             *
             * @param      {D3Object}  d3node  The d3 node
             * @param      {Node}      d       Matching Node Object
             */

        }, {
            key: 'mouseup',
            value: function mouseup(d3node, d) {
                var thisGraph = this.graph,
                    state = thisGraph.state.NodeSelectionPolicy;
                if (!d3.event.ctrlKey) {
                    //if length is greater than 1, then we are moving multiple nodes
                    //leave them all highlighted
                    //otherwise we are just moving one node, so unhighlight
                    if (state.selectedNodes.length <= 1) {
                        this.removeSelectFromNode(d3node, d);
                    }
                }
            }
        }]);

        return NodeSelectionPolicy;
    }(Policy.Policy);

    return {
        Policy: NodeSelectionPolicy
    };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.nodes', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes', {
            url: '/nodes',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy changes the view to the timegraph of link data on click.
 */
angular.module('contiv.graph').factory('PathChangeViewPolicy', ['Policy', function (Policy) {
    var PathChangeViewPolicy = function (_Policy$Policy) {
        _inherits(PathChangeViewPolicy, _Policy$Policy);

        /**
         * Called to build policy
         *
         * @param   {Angular State}    $state    Used to change view
         */
        function PathChangeViewPolicy($state) {
            _classCallCheck(this, PathChangeViewPolicy);

            var _this = _possibleConstructorReturn(this, (PathChangeViewPolicy.__proto__ || Object.getPrototypeOf(PathChangeViewPolicy)).call(this, 'PathChangeViewPolicy'));

            _this.$state = $state;
            return _this;
        }

        /**
         * Generates a list of all child containers of the service
         * Can handle nested services.
         *
         * @param      {string}  id      Node ID
         */


        _createClass(PathChangeViewPolicy, [{
            key: 'generateList',
            value: function generateList(id) {
                var thisPolicy = this;
                var retList = [];
                var generateListHelper = function generateListHelper(id, retList) {
                    var nodeIds = thisPolicy.graph.dataSource.children_struct[id];
                    for (var i = 0; i < nodeIds.length; i++) {
                        var childId = nodeIds[i];
                        if (thisPolicy.graph.dataSource.hasChild(childId) === true) {
                            var subRetList = generateListHelper(childId, retList);
                            retList.concat(subRetList);
                        } else {
                            retList.push(childId);
                        }
                    }
                };
                generateListHelper(id, retList);
                return retList;
            }

            /**
             * Used to reroute an edge when clicked
             *
             * @param      {Link}  edge    The clicked edge
             */

        }, {
            key: 'viewEdge',
            value: function viewEdge(edge) {
                var sourceList = [];
                var targetList = [];
                var sourceId = edge.source.id;
                var targetId = edge.target.id;

                if (this.graph.dataSource.hasChild(sourceId) === true) {
                    //Not a container node, need to aggregate
                    sourceList = this.generateList(sourceId);
                } else {
                    sourceList = [sourceId];
                }

                if (this.graph.dataSource.hasChild(targetId) === true) {
                    //Not a container node, need to aggregate
                    targetList = this.generateList(targetId);
                } else {
                    targetList = [targetId];
                }
                this.$state.go('contiv.menu.visualization.edge', { sourceName: sourceId, targetName: targetId,
                    sourceList: sourceList, targetList: targetList });
            }
        }, {
            key: 'mousedown',
            value: function mousedown(d3path, d) {
                this.viewEdge(d);
            }
        }]);

        return PathChangeViewPolicy;
    }(Policy.Policy);

    return {
        Policy: PathChangeViewPolicy
    };
}]);
angular.module('contiv.organizations', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('contiv.menu.organizations', {
            url: '/organizations',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.organizations.list', {
            url: '/list',
            component: 'organizationlist'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base policy class for the graph object
 * 
 * Policies are used to isolate features for a graph.
 * Policies can be installed on nodes, links, or the graph.
 * Each policy has interaction handlers that will be called by the graph
 * if installed. Policies can also modify graph functions (see QTipPolicy).
 * Multiple policies can be installed for a node or link. 
 * 
 * To write your own policy, create a new factory that uses the policy
 * you want to inherit as a dependency, and extend its policy. 
 * Return the class object with Policy as key, and 
 * add the policy to the PolicyService factory.
 * 
 * For saving state or consts for the policy, create a namespace
 * in graph.state and graph.consts.
 * Ex. 
 *      graph.state.myPolicy = {};
 *      graph.consts.myPolicy = {};
 *      
 */
angular.module('contiv.graph').factory('Policy', [function () {
  var Policy = function () {
    /**
     * Constructs the object.
     *
     * @param      {string}  policyName  The policy name
     */
    function Policy(policyName) {
      _classCallCheck(this, Policy);

      this.policyName = policyName;
      this.graph = null;
      this.initialized = false;
    }

    /**
     * Called when the policy is installed.
     * 
     * @param  {Graph}  graph   The Graph that the policy is
     *                          being installed on
     */


    _createClass(Policy, [{
      key: 'initialize',
      value: function initialize(graph) {
        if (this.initialized) {
          return;
        }
        this.initialized = true;
        this.graph = graph;
      }

      /**
       * Handler, meant to be overridden in subclasses
       *
       * @param  {d3 object}    d3obj    The d3object
       * @param  {Node/Link/Graph}  d   The object it was
       *                                installed for.    
       */

    }, {
      key: 'mouseover',
      value: function mouseover(d3obj, d) {}
    }, {
      key: 'dblclick',
      value: function dblclick(d3obj, d) {}
    }, {
      key: 'contextmenu',
      value: function contextmenu(d3obj, d) {}
    }, {
      key: 'mouseout',
      value: function mouseout(d3obj, d) {}
    }, {
      key: 'mousedown',
      value: function mousedown(d3obj, d) {}
    }, {
      key: 'mouseup',
      value: function mouseup(d3obj, d) {}

      /**
       * Will be called when the graph is being destroyed.
       * Used to remove any elements or bindings the policy
       * has added.
       */

    }, {
      key: 'destroy',
      value: function destroy() {}
    }]);

    return Policy;
  }();

  return {
    Policy: Policy
  };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.servicelbs', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.servicelbs', {
            url: '/servicelbs',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.servicelbs.list', {
            url: '/list',
            component: 'servicelbList'
        })
            .state('contiv.menu.servicelbs.details.stats', {
            url: '/stats',
            component: 'servicelbstat'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

/**
 * Contains all the policies.
 * See policy.js for info on how policies work.
 */
angular.module('contiv.graph').factory('PolicyService', ['Policy', 'QTipPolicy', 'PathChangeViewPolicy', 'NodeSelectionPolicy', 'SplitJoinNodePolicy', 'SplitJoinViewPolicy', 'SaveStatePolicy', function (Policy, QTipPolicy, PathChangeViewPolicy, NodeSelectionPolicy, SplitJoinNodePolicy, SplitJoinViewPolicy, SaveStatePolicy) {

    return {
        Policy: Policy.Policy,
        QTipPolicy: QTipPolicy.Policy,
        PathChangeViewPolicy: PathChangeViewPolicy.Policy,
        NodeSelectionPolicy: NodeSelectionPolicy.Policy,
        SplitJoinNodePolicy: SplitJoinNodePolicy.Policy,
        SplitJoinViewPolicy: SplitJoinViewPolicy.Policy,
        SaveStatePolicy: SaveStatePolicy.Policy
    };
}]);
angular.module('contiv.settings', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.settings', {
            url: '/global',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.settings.details', {
            url: '/settings',
            templateUrl: 'settings/settingsmenu.html'
        })
            .state('contiv.menu.settings.details.logs', {
            url: '/logs',
            controller: '',
            templateUrl: ''
        })
            .state('contiv.menu.settings.details.auth', {
            url: '/auth',
            controller: '',
            templateUrl: ''
        })
            .state('contiv.menu.settings.details.license', {
            url: '/license',
            controller: '',
            templateUrl: ''
        })
            .state('contiv.menu.settings.details.policies', {
            url: '/policies',
            controller: '',
            templateUrl: ''
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy adds tooltip functionality to nodes and links.
 * When installing, install on both links and nodes.
 * 
 * Uses the qTip jQuery plugin
 */
angular.module('contiv.graph').factory('QTipPolicy', ['Policy', function (Policy) {
    var QTipPolicy = function (_Policy$Policy) {
        _inherits(QTipPolicy, _Policy$Policy);

        /**
         * Constructs the object.
         */
        function QTipPolicy() {
            _classCallCheck(this, QTipPolicy);

            return _possibleConstructorReturn(this, (QTipPolicy.__proto__ || Object.getPrototypeOf(QTipPolicy)).call(this, "QTipPolicy"));
        }

        /**
         * Called when the policy is installed
         * Modifies the updateNewNodes and 
         * updateNewPaths method of the graph to install qtip
         * onto each node and path.
         *
         * @param      {Graph}  graph   The graph it is 
         *                              installed on
         */


        _createClass(QTipPolicy, [{
            key: 'initialize',
            value: function initialize(graph) {
                if (this.initialized) {
                    return;
                }
                _get(QTipPolicy.prototype.__proto__ || Object.getPrototypeOf(QTipPolicy.prototype), 'initialize', this).call(this, graph);

                var thisPolicy = this;
                var state = graph.state.QTipPolicy = {};

                state.mousedown = false;

                graph.consts.QTipPolicy = {};

                //Tracking mouse click state to make tooltip
                //disappear if the node is being dragged.
                $('#visualization-graph').mouseup(function (e) {
                    state.mouseup = false;
                });

                //override updateNewNodes and updateNewPaths
                //to install qtip
                var graphUpdateNewNodes = graph.updateNewNodes;
                graph.updateNewNodes = function (newNodes) {
                    graphUpdateNewNodes.call(graph, newNodes);
                    thisPolicy.updateNewNodes(newNodes);
                };

                var graphUpdateNewPaths = graph.updateNewPaths;
                graph.updateNewPaths = function (newPaths) {
                    graphUpdateNewPaths.call(graph, newPaths);
                    thisPolicy.updateNewPaths(newPaths);
                };
            }

            /**
             * Removes all qTips from the DOM.
             * Called when the policy is uninstalled or
             * the graph is destroyed.
             */

        }, {
            key: 'destroy',
            value: function destroy() {
                //removing all qtip from DOM
                $('[id^="qtip"]').remove();
            }

            /**
             * Keeping track of mousedown state
             *
             * @param      {d3Object}  d3obj  The d3 pbject
             * @param      {Node/Link}  d     The matching data object
             */

        }, {
            key: 'mousedown',
            value: function mousedown(d3obj, d) {
                var thisGraph = this.graph,
                    state = thisGraph.state.QTipPolicy;
                state.mousedown = true;
            }

            /**
             * Keeping track of mousedown state
             *
             * @param      {d3Object}  d3obj  The d3 pbject
             * @param      {Node/Link}  d     The matching data object
             */

        }, {
            key: 'mouseup',
            value: function mouseup(d3obj, d) {
                var thisGraph = this.graph,
                    state = thisGraph.state.QTipPolicy;
                state.mousedown = false;
            }
        }, {
            key: 'whenQTipAvailable',
            value: function whenQTipAvailable(callback) {
                var thisPolicy = this;
                var interval = 500; // ms
                window.setTimeout(function () {
                    if ($(document).qtip != null) {
                        callback();
                    } else {
                        window.setTimeout(thisPolicy.whenQTipAvailable(callback), interval);
                    }
                }, interval);
            }

            /**
             * Called when New Nodes are added during the
             * update graph function
             *
             * @param      {d3Node}  newNodes  The new nodes that are
             *                                 being added to the graph
             */

        }, {
            key: 'updateNewNodes',
            value: function updateNewNodes(newNodes) {
                var thisGraph = this.graph,
                    state = thisGraph.state.QTipPolicy;

                function attachQTip() {
                    //attaching qtip
                    newNodes.each(function (d) {
                        var thisNode = this;

                        var text;

                        //If node has children, then it is a service
                        if (thisGraph.dataSource.children_struct[d.id] != null) {
                            text = "<b><u>Selectors:</b></u> ";
                            var selectorMap = thisGraph.dataSource.selectors[d.id];
                            var hasKeys = false;
                            for (var key in selectorMap) {
                                hasKeys = true;
                                text += key + " : <i>" + selectorMap[key] + "</i>,\n ";
                            }
                            if (hasKeys === false) {
                                //comma will be removed
                                text = "No Selectors, ";
                            }
                        } else {
                            text = "<b><u>Labels:</b></u> ";
                            var labelsMap = thisGraph.dataSource.labels[d.id];
                            var hasKeys = false;
                            for (var key in labelsMap) {
                                hasKeys = true;
                                text += key + " : <i>" + labelsMap[key] + "</i>,\n ";
                            }
                            if (hasKeys === false) {
                                //comma will be removed
                                text = "No labels, ";
                            }
                        }
                        //remove last comma
                        text = text.slice(0, -2);

                        $(thisNode).qtip({
                            content: {
                                title: d.id,
                                text: text
                            },
                            events: {
                                show: function show() {
                                    var api = $(thisNode).qtip('api');
                                    var offset = $('#graphContainer').offset();
                                    var position = [offset.left + (d.x * thisGraph.dragSvg.scale() + thisGraph.dragSvg.translate()[0]), offset.top + (d.y + d.radius) * thisGraph.dragSvg.scale() + thisGraph.dragSvg.translate()[1]];
                                    api.set('position.target', position);
                                    return !state.mousedown;
                                }
                            },
                            show: {
                                delay: 0,
                                solo: $('#visualization-graph')
                            },
                            style: {
                                classes: 'qtip-blue qtip-shadow'
                            },
                            position: {
                                my: 'top center',
                                at: 'bottom center'
                                // target: position
                            },
                            hide: {
                                event: 'mousedown mouseleave'
                            }
                        });
                    });
                }
                //incase library hasn't loaded yet
                if ($(document).qtip != undefined) {
                    attachQTip();
                } else {
                    this.whenQTipAvailable(attachQTip);
                }
            }

            /**
             * Called when new paths are added during the
             * update graph function
             *
             * @param      {d3Path}  newPaths  The new paths that are
             *                                 being added to the graph
             */

        }, {
            key: 'updateNewPaths',
            value: function updateNewPaths(newPaths) {
                var thisGraph = this.graph,
                    state = thisGraph.state.QTipPolicy;

                //incase library hasn't loaded yet
                if ($(document).qtip != undefined) {
                    //adding qtip
                    newPaths.each(function (d) {
                        var thisPath = this;
                        //getting midpoint of path
                        var pathEl = d3.select(this).node();
                        var midpoint = pathEl.getPointAtLength(pathEl.getTotalLength() / 2);
                        var targetRet = d.qtipHelper();
                        var text = "Bytes: " + d.getWeight();
                        $(thisPath).qtip({
                            content: {
                                text: text
                            },
                            events: {
                                show: function show() {
                                    //if mouse is down, don't let qtip show
                                    return !state.mousedown;
                                }
                            },
                            show: {
                                delay: 0,
                                solo: $('#graphContainer')
                            },
                            style: {
                                classes: 'qtip-blue qtip-shadow'
                            },
                            position: {
                                my: targetRet.my,
                                at: 'center center',
                                target: 'mouse',
                                adjust: targetRet.adjust
                            },
                            hide: {
                                event: 'mousedown mouseleave'
                            }

                        });
                    });
                }
            }
        }]);

        return QTipPolicy;
    }(Policy.Policy);

    return {
        Policy: QTipPolicy
    };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.storagepolicies', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.storagepolicies', {
            url: '/storagepolicies',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.storagepolicies.list', {
            url: '/list',
            component: 'storagepolicylist'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy provides a way for properties to be saved 
 * between view changes
 * 
 * It modifies the destroy function to also pass in an object that
 * will have all its properties saved and will be available 
 * on graph load. When saving variables to the object, namespace with
 * the policy name.
 * 
 * This policy must be loaded first in order for it saved variables 
 * to be loaded when the view comes back to the graph
 */
angular.module('contiv.graph').factory('SaveStatePolicy', ['Policy', function (Policy) {
    var SaveStatePolicy = function (_Policy$Policy) {
        _inherits(SaveStatePolicy, _Policy$Policy);

        /**
         * Takes in the angular service to which it will
         * save it's properties to.
         *
         * @param      {Object}  savedState  Object to save 
         *                                   properties to
         */
        function SaveStatePolicy(savedState) {
            _classCallCheck(this, SaveStatePolicy);

            var _this = _possibleConstructorReturn(this, (SaveStatePolicy.__proto__ || Object.getPrototypeOf(SaveStatePolicy)).call(this, 'SaveStatePolicy'));

            _this.savedState = savedState;
            return _this;
        }

        /**
         * Called when the policy is installed
         * Modifies the destroy method 
         * and adds a load method to the graph
         *
         * @param      {Graph}  graph   The graph it is 
         *                              installed on
         */


        _createClass(SaveStatePolicy, [{
            key: 'initialize',
            value: function initialize(graph) {
                this.graph = graph;
                var thisPolicy = this;
                graph.destroy = function () {
                    thisPolicy.graphDestroy.call(graph, thisPolicy.savedState);
                };

                graph.load = function (savedState) {
                    thisPolicy.graphLoad.call(graph, savedState);
                };
            }

            /**
             * Will override the graph's default destroy, with 
             * this policy's savedState passed in.
             * Called with this as the graph
             *
             * @param      {Object}  savedState  The saved state
             */

        }, {
            key: 'graphDestroy',
            value: function graphDestroy(savedState) {
                var thisGraph = this;
                _(thisGraph.defaultNodePolicies).forEach(function (policy) {
                    policy.destroy(savedState);
                });
                _(thisGraph.defaultPathPolicies).forEach(function (policy) {
                    policy.destroy(savedState);
                });
                for (var key in thisGraph.bindings) {
                    $(window).off(key, thisGraph.bindings[key]);
                }
            }

            /**
             * Will be called with the graph as this
             * Used to have all other policies use the load state
             *
             * @param      {Object}  savedState  The saved state
             */

        }, {
            key: 'graphLoad',
            value: function graphLoad(savedState) {
                var thisGraph = this;
                _(thisGraph.defaultNodePolicies).forEach(function (policy) {
                    if (policy.load != null) {
                        policy.load(savedState);
                    }
                });
                _(thisGraph.defaultPathPolicies).forEach(function (policy) {
                    if (policy.load != null) {
                        policy.load(savedState);
                    }
                });
            }
        }]);

        return SaveStatePolicy;
    }(Policy.Policy);

    return {
        Policy: SaveStatePolicy
    };
}]);


angular.module('contiv.visualization', ['contiv.models', 'contiv.directives', 'contiv.utils', 
	'contiv.graph'])
 .config(['$stateProvider', function ($stateProvider) {
        $stateProvider.state('contiv.menu.visualization', {
            url: '/visualization',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
    }]);

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy is used for splitting a node into its children,
 * and joining them back to their parent.
 * Splits on double click, and joins on right click.
 * If multiple nodes are selected at the time of a split or join event,
 * it will split or join all of them.
 */
angular.module('contiv.graph').factory('SplitJoinNodePolicy', ['NodeSelectionPolicy', 'VisualizerNode', function (NodeSelectionPolicy, VisualizerNode) {
    var SplitJoinNodePolicy = function (_NodeSelectionPolicy$) {
        _inherits(SplitJoinNodePolicy, _NodeSelectionPolicy$);

        /**
         * Constructs the object.
         */
        function SplitJoinNodePolicy() {
            _classCallCheck(this, SplitJoinNodePolicy);

            var _this = _possibleConstructorReturn(this, (SplitJoinNodePolicy.__proto__ || Object.getPrototypeOf(SplitJoinNodePolicy)).call(this));

            _this.policyName = "SplitJoinNodePolicy";
            return _this;
        }

        /**
         * Called when policy is installed
         *
         * @param      {Graph}  graph   The graph
         */


        _createClass(SplitJoinNodePolicy, [{
            key: 'initialize',
            value: function initialize(graph) {
                if (this.initialized) {
                    return;
                }
                _get(SplitJoinNodePolicy.prototype.__proto__ || Object.getPrototypeOf(SplitJoinNodePolicy.prototype), 'initialize', this).call(this, graph);
                var state = graph.state.SplitJoinNodePolicy = {};
                state.splitNodes = [];
            }

            /**
             * Triggering split on double click
             *
             * @param      {D3Object}  d3node  The d3 node
             * @param      {Object}  d      The matching data object
             */

        }, {
            key: 'dblclick',
            value: function dblclick(d3node, d) {
                var thisGraph = this.graph,
                    superState = thisGraph.state.SplitJoinNodePolicy;

                if (!d3.event.ctrlKey) {
                    if (superState.selectedNodes.indexOf(d) > -1) {
                        this.splitMultipleNodes(superState.selectedNodes);
                    } else {
                        this.removeAllSelectedNodes();
                        this.splitNode(d);
                    }
                }
            }

            /**
             * Triggering join on right click
             *
             * @param      {D3Obj}  d3node  The d3 node
             * @param      {Object}  d      The matching data object
             */

        }, {
            key: 'contextmenu',
            value: function contextmenu(d3node, d) {
                var thisGraph = this.graph,
                    superState = thisGraph.state.NodeSelectionPolicy;
                d3.event.preventDefault();
                if (!d3.event.ctrlKey) {
                    //if try to join a highlighted node while multiple nodes are selected,
                    //we join all highlighted nodes
                    var selectedNodes = superState.selectedNodes;
                    if (selectedNodes.indexOf(d) > -1) {
                        for (var i = 0; i < selectedNodes.length; i++) {
                            this.joinNode(selectedNodes[i]);
                        }
                    } else {
                        //if we try to join a node that isn't part of a highlight,
                        //we remove all highlights and then join the clicked node
                        this.removeAllSelectedNodes();
                        this.joinNode(d);
                    }
                }
            }

            /**
             * Splits a node.
             * used to share code between splitNode and splitMultipleNodes
             * while preventing the handlers for them both firing
             * 
             * @param      {Node}  node    The node being split
             * @return     {Array}  The new nodes created by the split
             */

        }, {
            key: '__splitNode',
            value: function __splitNode(node) {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinNodePolicy;
                var name = node.id;
                var children_struct = thisGraph.dataSource.children_struct;
                //if it has no children to split into
                if (children_struct[name] === undefined || _.isEmpty(children_struct[name])) {
                    return;
                }

                //removing the node from the list of nodes
                thisGraph.nodes = _.filter(thisGraph.nodes, function (graphNodes) {
                    return graphNodes != node;
                });
                // console.log(thisGraph.nodes);
                thisGraph.spliceLinksForNode(node);

                //getting all the node id's for finding flow
                var node_names_set = [];
                for (var i = 0; i < thisGraph.nodes.length; i++) {
                    node_names_set.push(thisGraph.nodes[i].id);
                }

                //set of nodes after the split
                var new_nodes = [];
                for (var i = 0; i < children_struct[name].length; i++) {
                    node_names_set.push(children_struct[name][i]);
                    new_nodes.push(children_struct[name][i]);
                }
                var retData = thisGraph.dataSource.getFlowBetweenSet(node_names_set);

                //formatting data for new nodes
                var xLoc = node.x;
                var yLoc = node.y;
                var ancestors = node.ancestors.slice();
                //keeping ordering that first in ancestor list is closest in relationship
                ancestors.splice(0, 0, node.id);
                var parent = node.id;
                var new_node_objs = [];
                var radius = node.radius * thisGraph.consts.radiusDecay;
                var nodeData = retData.nodeData;
                for (var i = 0; i < nodeData.length; i++) {
                    //calculating which of the nodes in retData[0] are new
                    if (new_nodes.indexOf(nodeData[i].id) > -1) {
                        var id = nodeData[i].id;
                        var text = nodeData[i].text;
                        var new_node = new VisualizerNode.Node(null, null, id, text, radius, parent, ancestors, xLoc, yLoc);
                        new_node.initialize(thisGraph);
                        thisGraph.nodes.push(new_node);
                        new_node_objs.push(new_node);
                    }
                }
                thisGraph.links = thisGraph.dataSource.processLinkData(retData.linkData, thisGraph.nodes);
                thisGraph.initNodes();
                thisGraph.initLinks();

                state.splitNodes.push(node.id);
                return new_node_objs;
            }

            /**
             * Splits the give node
             *
             * @param      {Node}  node    The node being split
             */

        }, {
            key: 'splitNode',
            value: function splitNode(node) {
                var res = this.__splitNode(node);
                if (res == null) {
                    return;
                }
                this.splitNodeEvent(res);
            }

            /**
             * Splits all the nodes passed in
             *
             * @param      {Array}  nodes   Array of nodes to be split
             */

        }, {
            key: 'splitMultipleNodes',
            value: function splitMultipleNodes(nodes) {
                var thisGraph = this.graph;
                var resNodes = [];
                for (var i = 0; i < nodes.length; i++) {
                    var res = this.__splitNode(nodes[i]);
                    resNodes = resNodes.concat(res);
                }

                this.splitMultipleNodesEvent(res);
            }

            /**
             * Called after a single node is split
             *
             * @param      {Array}  newNodes  The new nodes
             */

        }, {
            key: 'splitNodeEvent',
            value: function splitNodeEvent(newNodes) {
                var thisGraph = this.graph;
                thisGraph.setPositions();
                thisGraph.updateGraph();
            }

            /**
             * Called after multiple nodes are split at once
             *
             * @param      {Array}  newNodes  The new nodes
             */

        }, {
            key: 'splitMultipleNodesEvent',
            value: function splitMultipleNodesEvent(newNodes) {
                var thisGraph = this.graph;
                thisGraph.setPositions();
                thisGraph.updateGraph();
            }

            /**
             * used to share code between joinNode and joinMultipleNode
             * while preventing both handlers firing
             * 
             * @param      {Node}          node    The node to join
             * @return     {Node}  The new node after the join
             */

        }, {
            key: '__joinNode',
            value: function __joinNode(node) {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinNodePolicy;

                //check that node still exists
                if (thisGraph.nodes.indexOf(node) == -1) {
                    return;
                }

                var children_struct = thisGraph.dataSource.children_struct;
                var name = node.id;
                //if it has no ancestor, nothing to join
                if (children_struct.topLevel.indexOf(name) > -1) {
                    return;
                }

                var to_be_deleted = [];
                var node_names_set = [];
                for (var i = 0; i < thisGraph.nodes.length; i++) {
                    //if node won't be collapsed
                    if (thisGraph.nodes[i].ancestors.indexOf(node.parent) == -1) {
                        node_names_set.push(thisGraph.nodes[i].id);
                    } else {
                        to_be_deleted.push(thisGraph.nodes[i]);
                    }
                }
                var new_node_id = node.parent;
                node_names_set.push(node.parent);

                //formatting data
                var radius = node.radius / thisGraph.consts.radiusDecay;
                var xLoc = node.x;
                var yLoc = node.y;
                var parent = node.ancestors[1];
                var ancestors = node.ancestors.slice(1);
                var new_node = new VisualizerNode.Node(xLoc, yLoc, new_node_id, new_node_id, radius, parent, ancestors);
                thisGraph.nodes.push(new_node);

                var retData = thisGraph.dataSource.getFlowBetweenSet(node_names_set);
                //remove all nodes that will be joined
                for (var i = 0; i < to_be_deleted.length; i++) {
                    var node_to_delete = to_be_deleted[i];
                    thisGraph.nodes.splice(thisGraph.nodes.indexOf(node_to_delete), 1);
                    thisGraph.spliceLinksForNode(node_to_delete);
                }
                thisGraph.links = thisGraph.dataSource.processLinkData(retData.linkData, thisGraph.nodes);
                thisGraph.initNodes();
                thisGraph.initLinks();

                state.splitNodes.splice(state.splitNodes.indexOf(new_node.id), 1);

                return new_node;
            }

            /**
             * Joins the given node
             *
             * @param      {Node}  node    The node to join
             */

        }, {
            key: 'joinNode',
            value: function joinNode(node) {
                var newNode = this.__joinNode(node);
                if (newNode != null) {
                    this.joinNodeEvent(newNode);
                }
            }

            /**
             * Joins all the given nodes
             *
             * @param      {Array}  nodes   The nodes to join
             */

        }, {
            key: 'joinMultipleNode',
            value: function joinMultipleNode(nodes) {
                var new_nodes = [];
                for (var i = 0; i < nodes.length; i++) {
                    var res = this.__joinNode(nodes[i]);
                    new_nodes.push(res);
                }
                this.joinMultipleNodesEvent(new_nodes);
            }

            /**
             * Called after a single node is joined
             *
             * @param      {Node}  newNode  The new node
             */

        }, {
            key: 'joinNodeEvent',
            value: function joinNodeEvent(newNode) {
                var thisGraph = this.graph;
                thisGraph.updateGraph();
            }

            /**
             * Called after multiple nodes are joined
             *
             * @param      {Array}  newNodes  The new nodes
             */

        }, {
            key: 'joinMultipleNodesEvent',
            value: function joinMultipleNodesEvent(newNodes) {
                var thisGraph = this.graph;
                thisGraph.updateGraph();
            }
        }]);

        return SplitJoinNodePolicy;
    }(NodeSelectionPolicy.Policy);

    return {
        Policy: SplitJoinNodePolicy
    };
}]);
/**
 * Created by vjain3 on 5/18/16.
 */
angular.module('contiv.volumes', ['contiv.models', 'contiv.directives', 'contiv.utils'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.volumes', {
            url: '/volumes',
            abstract: true,
            template: '<div ui-view class="ui container"/>'
        })
            .state('contiv.menu.volumes.list', {
            url: '/list',
            component: 'volumelist'
        });
    }]);
//# sourceMappingURL=module.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This policy is used to change the view to focus on splitting and 
 * joining events.
 * Overrides the certain force layout functions of the graph to partition a split
 * into the focused nodes and the connected nodes.
 * 
 * Has save/load methods for the save state policy.
 * Has back button support.
 * Can auto change the title of the graph.
 */
angular.module('contiv.graph').factory('SplitJoinViewPolicy', ['SplitJoinNodePolicy', 'VisualizerNode', function (SplitJoinNodePolicy, VisualizerNode) {
    var SplitJoinViewPolicy = function (_SplitJoinNodePolicy$) {
        _inherits(SplitJoinViewPolicy, _SplitJoinNodePolicy$);

        /**
         * Constructs the object.
         */
        function SplitJoinViewPolicy() {
            _classCallCheck(this, SplitJoinViewPolicy);

            var _this = _possibleConstructorReturn(this, (SplitJoinViewPolicy.__proto__ || Object.getPrototypeOf(SplitJoinViewPolicy)).call(this));

            _this.policyName = "SplitJoinViewPolicy";
            return _this;
        }

        /**
         * Called when policy is installed
         *
         * @param      {Graph}  graph   The graph
         */


        _createClass(SplitJoinViewPolicy, [{
            key: 'initialize',
            value: function initialize(graph) {
                if (this.initialized) {
                    return;
                }
                _get(SplitJoinViewPolicy.prototype.__proto__ || Object.getPrototypeOf(SplitJoinViewPolicy.prototype), 'initialize', this).call(this, graph);
                var state = graph.state.SplitJoinViewPolicy = {};
                state.savedStates = [];
                // state.focusGroup = null;
                state.eventHistory = [];
                state.focusGroups = [];
                state.foci = [];
                state.zooms = {};
                state.layout = {};
                state.layoutDefault = null;
                state.zoomDefault = null;
                state.nodeIdsToReshow = null;
                state.backButtonElem = null;
                state.titleElem = null;

                var consts = graph.consts.SplitJoinViewPolicy = {};
                consts.boundary = 0.8;

                //overriding d3force methods of the graph.
                graph.d3ForceBounds = this.d3ForceBounds;
                graph.d3ForceTick = this.d3ForceTick;
                graph.d3ForceStart = this.d3ForceStart;
                graph.d3ForceEnd = this.d3ForceEnd;
            }

            /**
             * Links the provided element a back button feature
             * Doesn't trigger the on-click event
             * That should be done through angular ng-click.
             *
             * @param      {jQuery}  elem    The jquery selected element
             */

        }, {
            key: 'installBackButton',
            value: function installBackButton(elem) {
                var thisGraph = this.graph,
                    thisPolicy = this,
                    state = thisGraph.state.SplitJoinViewPolicy;

                state.backButtonElem = elem;
                state.backButton = function () {
                    if (state.eventHistory.length > 0) {
                        thisPolicy.undoLastEvent.call(thisPolicy);
                    }
                };
            }

            /**
             * Will allow this policy to change the title of the graph
             * as split and join events occur.
             *
             * @param      {jQuery}  elem    The jquery selected element
             */

        }, {
            key: 'installTitle',
            value: function installTitle(elem) {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                state.titleElem = elem;
            }

            /**
             * Called when the graph is being destroyed
             *
             * @param      {Object}  savedState  Any property on this
             *                                   object will be accessible
             *                                   when the view reloads
             */

        }, {
            key: 'destroy',
            value: function destroy(savedState) {
                //Only if the save state policy is installed
                if (savedState != null) {
                    this.save(savedState);
                }
            }

            /**
             * Will save the current state, and all history.
             *
             * @param      {Object}  savedState  Any property on this
             *                                   object will be accessible
             *                                   when the view reloads
             */

        }, {
            key: 'save',
            value: function save(savedState) {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                var nodes = thisGraph.nodes;
                var links = thisGraph.links;
                var currTitle = null;
                if (state.titleElem != null) {
                    currTitle = state.titleElem.text();
                }
                var focusGroups = state.focusGroups;
                var eventHistory = state.eventHistory;
                var zooms = state.zooms;
                var layout = state.layout;

                var layoutDefault = state.layoutDefault;
                var zoomDefault = state.zoomDefault;
                var ret = { nodes: nodes, links: links,
                    states: state.savedStates, currTitle: currTitle,
                    focusGroups: focusGroups,
                    eventHistory: eventHistory, zooms: zooms,
                    layout: layout, layoutDefault: layoutDefault,
                    zoomDefault: zoomDefault };
                savedState.SplitJoinViewPolicy = ret;
            }

            /**
             * Will be called when the graph is reloaded, assuming
             * save state policy is installed
             *
             * @param      {Object}  loadState  Contains all the saved
             *                                  variables
             */

        }, {
            key: 'load',
            value: function load(loadState) {
                var thisPolicy = this;
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                loadState = loadState.SplitJoinViewPolicy;
                state.savedStates = loadState.states;
                thisGraph.links = loadState.links;
                thisGraph.nodes = loadState.nodes;

                var currTitle = loadState.currTitle;
                if (state.titleElem != null) {
                    state.titleElem.text(currTitle);
                }
                state.eventHistory = loadState.eventHistory;
                state.focusGroups = loadState.focusGroups;
                state.zooms = loadState.zooms;
                state.layout = loadState.layout;
                state.layoutDefault = loadState.layoutDefault;
                state.zoomDefault = loadState.zoomDefault;

                if (state.backButtonElem != null) {
                    if (state.eventHistory.length > 0) {
                        state.backButtonElem.fadeTo('slow', 1);
                    }
                }

                var children_struct = thisGraph.dataSource.children_struct;

                _.forEach(thisGraph.nodes, function (d) {
                    d.SplitJoinViewPolicy = {};
                    if (_.includes(children_struct[state.focusGroups[0]], d.id)) {
                        d.SplitJoinViewPolicy.type = "focus";
                    } else {
                        d.SplitJoinViewPolicy.type = "connected";
                    }
                });

                //loading a previous layout
                var layout;
                if (state.focusGroups.length === 0) {
                    layout = state.layoutDefault;
                    var zoom = state.zoomDefault;
                    thisGraph.zoomed(zoom[0], zoom[1]);
                } else {
                    var zoom = state.zooms[state.focusGroups];
                    if (zoom != null) {
                        thisGraph.zoomed(zoom[0], zoom[1]);
                    }
                    layout = state.layout[state.focusGroups];
                }

                //layout can't be null
                _.forEach(thisGraph.nodes, function (n) {
                    var pos = layout[n.id];
                    if (pos == null) {
                        console.log(layout, n);
                    }
                    n.x = pos.x;
                    n.y = pos.y;
                });
                thisGraph.state.initForce = true;
                thisGraph.updateGraph.call(thisGraph, function () {
                    thisPolicy.updateGraphCallback.call(thisPolicy);
                });
            }

            /**
             * Triggering split on double click
             * 
             * Focus group stores the node that is about to be split.
             * 
             * When focus group has length 0, the first split 
             * will just be pushed on.
             * The node will be split and pushed to the top half 
             * of the screen, and the bottom half will contain any
             * nodes it has connections to.
             * 
             * When a focus group length is >= 1, if the node to be
             * split is a focus node, it will replace focusGroups[0] and
             * the top half will be its children, and bottom half will
             * be the nodes it has connections to.
             * 
             * If the split is in the bottom half, then the bottom half
             * will display it's children and will only show connections between
             * the two groups, and will replace focusGroups[1].
             * 
             * @param      {D3Obj}   d3node  The d3 node
             * @param      {Object}  d       The matching data object
             */

        }, {
            key: 'dblclick',
            value: function dblclick(d3node, d) {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                //check if can split
                var name = d.id;
                var children_struct = thisGraph.dataSource.children_struct;
                if (children_struct[name] === undefined || _.isEmpty(children_struct[name])) {
                    return;
                }

                state.focusGroups.slice();

                if (state.focusGroups.length === 0) {
                    //toplevel split
                    state.focusGroups.push(d.id);
                } else if (_.includes(children_struct[state.focusGroups[0]], d.id)) {
                    //splitting a focus node
                    state.focusGroups[0] = d.id;
                } else if (state.focusGroups.length === 1) {
                    //splitting a
                    //connected node
                    state.focusGroups.push(d.id);
                } else if (_.includes(children_struct[state.focusGroups[1]], d.id)) {
                    //splitting a
                    //connected node
                    state.focusGroups[1] = d.id;
                }

                if (state.focusGroups.length === 2 && state.focusGroups[1] === d.id) {
                    //Splitting a connected node, keep all focus nodes
                    var nodesToKeep = [d];
                    var nodeIdsToReshow = [];
                    var groupOneNodes = children_struct[state.focusGroups[0]];
                    _.forEach(thisGraph.nodes, function (node) {
                        if (_.includes(groupOneNodes, node.id)) {
                            nodeIdsToReshow.push(node.id);
                            nodesToKeep.push(node);
                        }
                    });
                } else {
                    //Make split nodes the focus and keep nodes that are connected
                    var nodesToKeep = [d];
                    var nodeIdsToReshow = [];
                    _.forEach(thisGraph.links, function (link) {
                        if (link.source === d && nodeIdsToReshow.indexOf(link.target.id) == -1) {
                            link.target.SplitJoinViewPolicy = {};
                            link.target.SplitJoinViewPolicy.type = "connected";
                            nodeIdsToReshow.push(link.target.id);
                            nodesToKeep.push(link.target);
                        } else if (link.target === d && nodeIdsToReshow.indexOf(link.source.id) == -1) {
                            link.source.SplitJoinViewPolicy = {};
                            link.source.SplitJoinViewPolicy.type = "connected";
                            nodeIdsToReshow.push(link.source.id);
                            nodesToKeep.push(link.source);
                        }
                    });
                }

                //Removing links from the node to be split
                thisGraph.circles.each(function (node) {
                    if (node.id !== d.id) {
                        thisGraph.spliceLinksForNode(node);
                    }
                });
                thisGraph.updateGraph();

                //disabling update graph to prevent new data from
                //redrawing links while there are animations going on
                thisGraph.state.disableUpdate = true;
                thisGraph.circles.each(function (node) {
                    if (node.id !== d.id) {
                        d3.select(this).transition().delay(200).duration(400).style("opacity", 0);
                    } else {
                        //disabling qtip if installed
                        if ($(this).qtip != null) {
                            $(this).qtip('disable', true);
                        }
                    }
                });

                var translate = thisGraph.dragSvg.translate();
                var scale = thisGraph.dragSvg.scale();
                var xLoc = parseFloat(thisGraph.svg.style("width")) / scale / 2 + translate[0];
                var yLoc = parseFloat(thisGraph.svg.style("height")) / scale / 2 + translate[1];
                d.xStart = d.x;
                d.yStart = d.y;
                d.x = xLoc;
                d.y = yLoc;
                d3node.transition("nodePositionTransition").duration(750).attrTween("transform", function (d) {
                    var xStart = d.xStart;
                    var yStart = d.yStart;
                    d.xStart = d.x;
                    d.yStart = d.y;
                    return d3.interpolateString("translate(" + xStart + "," + yStart + ")", "translate(" + d.x + "," + d.y + ")");
                });

                var splitNodeFunc = _get(SplitJoinViewPolicy.prototype.__proto__ || Object.getPrototypeOf(SplitJoinViewPolicy.prototype), 'splitNode', this);
                state.nodeIdsToReshow = nodeIdsToReshow;
                //waiting for node transition
                var thisPolicy = this;
                setTimeout(function () {
                    thisGraph.nodes = nodesToKeep;
                    splitNodeFunc.call(thisPolicy, d);
                }, 750);
            }

            /**
             * To be called after the graph is split.
             * Brings all nodes back into view and sets their attributes
             */

        }, {
            key: 'updateGraphCallback',
            value: function updateGraphCallback() {
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                thisGraph.circles.each(function (node) {
                    d3.select(this).transition().duration(400).style("opacity", 1);
                    d3.select(this).classed("focus", false);
                    d3.select(this).classed("connected", false);

                    if (node.SplitJoinViewPolicy != null) {
                        if (node.SplitJoinViewPolicy.type === "focus") {
                            d3.select(this).classed("focus", true);
                        } else if (node.SplitJoinViewPolicy.type === "connected") {
                            d3.select(this).classed("connected", true);
                        }
                    }
                });

                state.nodeIdsToReshow = null;

                thisGraph.updateGraph();
            }

            /**
             * Randomly sets the positions of any unset node
             */

        }, {
            key: 'setPositions',
            value: function setPositions() {
                var thisGraph = this.graph,
                    thisPolicy = this,
                    graphConsts = thisGraph.consts;

                var offset = graphConsts.displayOffset;
                var nodes = thisGraph.nodes;
                var ret = thisPolicy.d3ForceBounds.call(thisGraph);

                function getRandomInt(min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                }

                _.forEach(nodes, function (node) {
                    if (node.x == null || node.y == null) {
                        var x = getRandomInt(node.radius + offset, ret.width - node.radius - offset);
                        var y = getRandomInt(node.radius + offset, ret.height - node.radius - offset);
                        node.x = x;
                        node.y = y;
                    }
                });
            }

            /**
             * Called on the start of the d3 force simulation
             * Will override the method of the graph
             * "this" points to the graph
             */

        }, {
            key: 'd3ForceStart',
            value: function d3ForceStart() {
                var thisGraph = this;
                thisGraph.circles.attr('cx', function (d) {
                    if (d.xStart != null) {
                        d.xStart = d.xStart * thisGraph.dragSvg.scale() + thisGraph.dragSvg.translate()[0];
                    }
                    return d.x;
                }).attr('cy', function (d) {
                    if (d.yStart != null) {
                        d.yStart = d.yStart * thisGraph.dragSvg.scale() + thisGraph.dragSvg.translate()[1];
                    }
                    return d.y;
                });

                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Called on the start of the d3 force simulation
             * Will override the method of the graph
             * "this" points to the graph
             */

        }, {
            key: 'd3ForceEnd',
            value: function d3ForceEnd() {
                var thisGraph = this,
                    state = thisGraph.state,
                    statePolicy = state.SplitJoinViewPolicy;
                if (statePolicy.layoutDefault == null) {
                    var defaultLayout = {};
                    _.forEach(thisGraph.nodes, function (n) {
                        defaultLayout[n.id] = { x: n.x, y: n.y };
                    });
                    statePolicy.layoutDefault = defaultLayout;
                    var scale = thisGraph.dragSvg.scale();
                    var translate = thisGraph.dragSvg.translate();
                    statePolicy.zoomDefault = [translate, scale];
                }

                thisGraph.circles.attr('cx', function (d) {
                    return d.x;
                }).attr('cy', function (d) {
                    return d.y;
                });

                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Will be called during D3 force simulations
             * by the graph, so "this" will point to the graph object
             *
             * @param      {number}  width   D3 Layout Width
             * @param      {number}  height  D3 Layout Height
             */

        }, {
            key: 'd3ForceTick',
            value: function d3ForceTick(e, width, height) {
                var thisGraph = this,
                    state = thisGraph.state,
                    consts = thisGraph.consts,
                    statePolicy = state.SplitJoinViewPolicy;

                var offset = consts.displayOffset;
                var scale = thisGraph.dragSvg.scale();

                // Move nodes toward cluster focus.
                var foci = statePolicy.foci;
                function gravity(alpha) {
                    return function (d) {
                        if (foci.length === 2) {
                            if (d.SplitJoinViewPolicy.type === "focus") {
                                d.y += (foci[0] - d.y) * alpha;
                            } else {
                                d.y += (foci[1] - d.y) * alpha;
                            }
                            d.x += (width / 2 - d.x) * alpha;
                        } else {
                            d.y += (height / 2 - d.y) * alpha;
                            d.x += (width / 2 - d.x) * alpha;
                        }
                    };
                }

                // Make sure nodes are within bounds
                thisGraph.circles.each(this.d3ForceCollide(.5)).each(gravity(.2 * e.alpha)).attr("cx", function (d) {
                    return d.x = Math.max((d.radius + offset) / scale, Math.min(width + (-offset - d.radius) / scale, d.x));
                }).attr("cy", function (d) {
                    if (d.SplitJoinViewPolicy == null || d.SplitJoinViewPolicy == null) {
                        d.y = Math.max((d.radius + offset) / scale, Math.min(height + (-offset - d.radius) / scale, d.y));
                        return d.y;
                    } else if (d.SplitJoinViewPolicy.type === "focus") {
                        d.y = Math.max(d.radius + offset, Math.min((height + (-offset - d.radius) / scale) * consts.SplitJoinViewPolicy.boundary, d.y));
                        return d.y;
                    } else if (d.SplitJoinViewPolicy.type === "connected") {
                        d.y = Math.max((height + (offset - d.radius) / scale) * consts.SplitJoinViewPolicy.boundary, Math.min(height + (-offset - d.radius) / scale, d.y));
                        return d.y;
                    }
                });

                thisGraph.paths.attr('x1', function (d) {
                    return d.source.x;
                }).attr('y1', function (d) {
                    return d.source.y;
                }).attr('x2', function (d) {
                    return d.target.x;
                }).attr('y2', function (d) {
                    return d.target.y;
                });
            }

            /**
             * Calculates the boundaries of the simulation
             * 
             * Will be called during D3 force simulations
             * by the graph, so "this" will point to the graph object
             * 
             * @return     {Object}          Returns an object
             *                               that has the width
             *                               and height as 
             *                               properties 
             */

        }, {
            key: 'd3ForceBounds',
            value: function d3ForceBounds() {
                var thisGraph = this,
                    state = thisGraph.state,
                    consts = thisGraph.consts,
                    constsPolicy = consts.SplitJoinViewPolicy,
                    statePolicy = state.SplitJoinViewPolicy;
                var nodes = thisGraph.nodes;
                function calcMaxNodes(width, height) {
                    var area = width * height;
                    var radius = thisGraph.consts.startRadius;
                    //treating them as a square for approx
                    var length = radius * 3.5;
                    var amount = area / (length * length);
                    return amount;
                }
                //The offset is the buffer from the edges
                //Original Width and Height are given to the force layout
                //so that it is centered, but nodes will be forced to be
                //within the offset bounds
                var offset = consts.displayOffset;
                var svgWidth = parseFloat(thisGraph.svg.style("width"));
                var svgHeight = parseFloat(thisGraph.svg.style("height"));

                var width = svgWidth;
                var height = svgHeight;

                var amount = calcMaxNodes(width - 2 * offset, height - 2 * offset);
                var scale = 1;
                if (nodes.length > amount) {
                    scale = amount / nodes.length;
                    thisGraph.zoomed(thisGraph.dragSvg.translate(), scale);
                    width /= scale;
                    height /= scale;
                } else {
                    thisGraph.zoomed(thisGraph.dragSvg.translate(), scale);
                }

                //calculating foci for simulation
                var focusGroups = statePolicy.focusGroups;
                var foci;
                if (focusGroups.length === 0) {
                    foci = [height / 2];
                } else {
                    //setting foci height position based on percentage
                    var focusNodes = thisGraph.dataSource.children_struct[focusGroups[0]];
                    constsPolicy.boundary = focusNodes.length / nodes.length;
                    var top = height * constsPolicy.boundary;
                    var bot = height - top;
                    if (top < 2 * thisGraph.consts.maxRadius) {
                        constsPolicy.boundary = 2.5 * thisGraph.consts.maxRadius / height;
                        top = height * constsPolicy.boundary;
                        bot = height - top;
                    }
                    if (bot < 2 * thisGraph.consts.maxRadius) {
                        constsPolicy.boundary = 1 - 2.5 * thisGraph.consts.maxRadius / height;
                        top = height * constsPolicy.boundary;
                        bot = height - top;
                    }
                    foci = [top / 2, top + bot / 2];
                }
                statePolicy.foci = foci;
                return { width: width, height: height };
            }

            /**
             * Called after a single node is split
             * 
             * @param      {Array}  newNodes  The new nodes
             */

        }, {
            key: 'splitNodeEvent',
            value: function splitNodeEvent(newNodes) {
                var thisPolicy = this;
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;

                var children_struct = thisGraph.dataSource.children_struct;
                _.forEach(newNodes, function (d) {
                    d.SplitJoinViewPolicy = {};
                    if (_.includes(children_struct[state.focusGroups[0]], d.id)) {
                        d.SplitJoinViewPolicy.type = "focus";
                    } else {
                        d.SplitJoinViewPolicy.type = "connected";
                    }
                });

                var title = newNodes[0].parent;
                // state.focusGroup = title;

                //if the last event has the same id, it must be the
                //oppposite of this event, so we remove that event from
                //the event stack.
                //Otherwise, we add the event ot the stack
                if (state.eventHistory.length !== 0 && state.eventHistory[state.eventHistory.length - 1].id === title) {
                    state.eventHistory.pop();
                } else {
                    state.eventHistory.push({ id: title, event: 'split' });
                }

                if (state.backButtonElem != null && state.eventHistory.length !== 0) {
                    state.backButtonElem.fadeTo('slow', 1);
                }

                if (state.titleElem != null) {
                    var text = "";
                    if (state.focusGroups.length > 0) {
                        text += state.focusGroups[0];
                    }
                    if (state.focusGroups.length === 2) {
                        text += ' & ' + state.focusGroups[1];
                    }
                    state.titleElem.text(text);
                }

                //re-enable graph update
                thisGraph.state.disableUpdate = false;
                thisPolicy.setLayout();
            }

            /**
             * Sets the layout of the nodes. 
             * If there is a previous layout, it will be loaded.
             * Else, it will run a D3 Force simulation and create one.
             */

        }, {
            key: 'setLayout',
            value: function setLayout() {
                var thisPolicy = this;
                var thisGraph = this.graph,
                    state = thisGraph.state.SplitJoinViewPolicy;
                var layout;
                if (state.focusGroups.length === 0) {
                    layout = state.layoutDefault;
                    var zoom = state.zoomDefault;
                    thisGraph.zoomed(zoom[0], zoom[1]);
                } else {
                    var zoom = state.zooms[state.focusGroups];
                    if (zoom != null) {
                        thisGraph.zoomed(zoom[0], zoom[1]);
                    }
                    layout = state.layout[state.focusGroups];
                }

                if (layout != null) {
                    _.forEach(thisGraph.nodes, function (n) {
                        var pos = layout[n.id];
                        if (pos == null) {
                            console.log(layout, n);
                        }
                        n.x = pos.x;
                        n.y = pos.y;
                    });
                    thisGraph.updateGraph.call(thisGraph, function () {
                        thisPolicy.updateGraphCallback.call(thisPolicy);
                    });
                } else {
                    //Need to run a force simulation as this layout
                    //hasn't been done before
                    thisGraph.state.initForce = false;
                    // thisPolicy.setPositions();
                    thisGraph.updateGraph(function () {
                        thisPolicy.updateGraphCallback.call(thisPolicy);
                    });
                    state.zooms[state.focusGroups] = [thisGraph.dragSvg.translate(), thisGraph.dragSvg.scale()];
                    var layout = {};
                    _.forEach(thisGraph.nodes, function (n) {
                        layout[n.id] = { x: n.x, y: n.y };
                    });
                    state.layout[state.focusGroups] = layout;
                }
            }

            /**
             * Overriding from super class so that we can have
             * top level nodes reappear when they are hidden
             * due to there being two focus groups.
             * 
             * @param      {Node}          node    The node to join
             * @return     {Node}  The new node after the join
             */

        }, {
            key: '__joinNode',
            value: function __joinNode(node) {
                var thisGraph = this.graph,
                    stateSuper = thisGraph.state.SplitJoinNodePolicy,
                    state = thisGraph.state.SplitJoinViewPolicy;

                //check that node still exists
                if (thisGraph.nodes.indexOf(node) == -1) {
                    return;
                }

                var children_struct = thisGraph.dataSource.children_struct;
                var name = node.id;
                //if it has no ancestor, nothing to join
                if (children_struct.topLevel.indexOf(name) > -1) {
                    return;
                }

                var parent = node.parent;
                var to_be_deleted = [];
                var nodeNameSet = [];
                for (var i = 0; i < thisGraph.nodes.length; i++) {
                    //if node won't be collapsed
                    if (thisGraph.nodes[i].ancestors.indexOf(node.parent) == -1) {
                        nodeNameSet.push(thisGraph.nodes[i].id);
                    } else {
                        to_be_deleted.push(thisGraph.nodes[i]);
                    }
                }
                var new_node_id = node.parent;
                nodeNameSet.push(node.parent);

                var ancestors_struct = thisGraph.dataSource.ancestors_struct;
                var children_struct = thisGraph.dataSource.children_struct;
                // - setting focusGroups -
                //either replacing one of the groups,
                //or joining back into a top level, so there is only
                //one focus
                var index = state.focusGroups.indexOf(parent);
                if (ancestors_struct[parent] != null) {
                    state.focusGroups[index] = ancestors_struct[parent];
                } else {
                    state.focusGroups.splice(index, 1);
                }

                //nameToAdd are top level nodes that are to be added
                //to the graph.
                var nameToAdd = [];
                //will only need to add a top level node if there is
                //only one focus
                if (state.focusGroups.length === 1) {
                    //Add only thost that aren't an ancestor of the node
                    //to join, the focus group or an ancestor of it,
                    //and aren't already in nodeNameSet.
                    //get flow between top level as long as
                    //the top level isn't an ancestor of the
                    //focus group, and isn't already part of the
                    //node set;
                    var ancestors = ancestors_struct[node.id];
                    ancestors.push(state.focusGroups[0]);
                    //the or empty array is to prevent concatenating a null
                    //or undefined value
                    ancestors = ancestors.concat(ancestors_struct[state.focusGroups[0]] || []);
                    _.forEach(children_struct.topLevel, function (n) {
                        if (ancestors.indexOf(n) === -1 && nodeNameSet.indexOf(n) == -1) {
                            nameToAdd.push(n);
                        }
                    });
                    nodeNameSet = nodeNameSet.concat(nameToAdd);
                } else if (state.focusGroups.length === 0) {
                    //no focus groups means we are at top level
                    //Should add any top level nodes that aren't
                    //already there
                    _.forEach(children_struct.topLevel, function (n) {
                        if (nodeNameSet.indexOf(n) == -1) {
                            nameToAdd.push(n);
                        }
                    });
                    nodeNameSet = nodeNameSet.concat(nameToAdd);
                }

                //formatting data
                var radius = node.radius / thisGraph.consts.radiusDecay;
                var xLoc = node.x;
                var yLoc = node.y;
                var parent = node.ancestors[1];
                var ancestors = node.ancestors.slice(1);
                var newNode = new VisualizerNode.Node(xLoc, yLoc, new_node_id, new_node_id, radius, parent, ancestors);
                thisGraph.nodes.push(newNode);

                //remove all nodes that will be joined
                for (var i = 0; i < to_be_deleted.length; i++) {
                    var node_to_delete = to_be_deleted[i];
                    thisGraph.nodes.splice(thisGraph.nodes.indexOf(node_to_delete), 1);
                    thisGraph.spliceLinksForNode(node_to_delete);
                }

                var retData = thisGraph.dataSource.getFlowBetweenSet(nodeNameSet);
                //holds the nodeData which will be processed
                var nodesToProcess = [];
                //finding the node data that corresponds to the top level
                //nodes to add - nameToAdd.
                var nodeData = retData.nodeData;
                for (var i = 0; i < nodeData.length; i++) {
                    if (nameToAdd.indexOf(nodeData[i].id) !== -1) {
                        nodesToProcess.push(nodeData[i]);
                    }
                }

                //The top level nodes that are added
                var newNodes = thisGraph.dataSource.processNodeData(nodesToProcess);
                _.forEach(newNodes, function (n) {
                    n.radius = n.radius || thisGraph.consts.startRadius;
                });
                thisGraph.nodes = thisGraph.nodes.concat(newNodes);

                thisGraph.links = thisGraph.dataSource.processLinkData(retData.linkData, thisGraph.nodes);
                //Only keep top level nodes that have connections to
                //the current focus group
                //we remove the node name from nameToAdd if we are
                //keeping it
                if (state.focusGroups.length === 1) {
                    _.forEach(thisGraph.links, function (l) {
                        //checking if there exists a link touching each of nameToAdd
                        if (nameToAdd.indexOf(l.source.id) !== -1) {
                            if (state.focusGroups[0] === l.target.parent) {
                                nameToAdd.splice(nameToAdd.indexOf(l.source.id), 1);
                            }
                        } else if (nameToAdd.indexOf(l.target.id) !== -1) {
                            if (state.focusGroups[0] === l.source.parent) {
                                nameToAdd.splice(nameToAdd.indexOf(l.target.id), 1);
                            }
                        }
                    });
                } else {
                    //We want to keep them all
                    //since any left in nameToAdd will be removed,
                    //we reset nameToAdd here.
                    nameToAdd = [];
                }

                //whatever is remaining in nameToAdd isn't connected
                //to the focus group, so we should remove it.
                var nodeToRemove = [];
                if (nameToAdd.length !== 0) {
                    for (var i = 0; i < thisGraph.nodes.length; i++) {
                        if (nameToAdd.indexOf(thisGraph.nodes[i].id) !== -1) {
                            nameToAdd.splice(nameToAdd.indexOf(thisGraph.nodes[i].id), 1);
                            thisGraph.spliceLinksForNode(thisGraph.nodes[i]);
                            nodeToRemove.push(thisGraph.nodes[i]);
                            if (nameToAdd.length === 0) {
                                break;
                            }
                        }
                    }
                }
                _.forEach(nodeToRemove, function (n) {
                    thisGraph.nodes.splice(thisGraph.nodes.indexOf(n), 1);
                });

                thisGraph.initNodes();
                thisGraph.initLinks();

                stateSuper.splitNodes.splice(stateSuper.splitNodes.indexOf(newNode.id), 1);

                return newNode;
            }

            /**
             * Called after a single node is joined
             * 
             * If the focus group has been seen before, it will
             * load that layout. Otherwise, it will run a d3 force
             * simulation to generate one.
             *
             * @param      {Node}  newNode  The new node
             */

        }, {
            key: 'joinNodeEvent',
            value: function joinNodeEvent(newNode) {
                var thisGraph = this.graph,
                    thisPolicy = this,
                    state = thisGraph.state.SplitJoinViewPolicy;

                //if the last event has the same id, it must be the
                //oppposite of this event, so we remove that event from
                //the event stack.
                //Otherwise, we add the event to the stack
                if (state.eventHistory.length !== 0 && state.eventHistory[state.eventHistory.length - 1].id === newNode.id) {
                    state.eventHistory.pop();
                } else {
                    state.eventHistory.push({ id: newNode.id, event: 'join' });
                }

                var children_struct = thisGraph.dataSource.children_struct;

                _.forEach(thisGraph.nodes, function (d) {
                    d.SplitJoinViewPolicy = {};
                    if (_.includes(children_struct[state.focusGroups[0]], d.id)) {
                        d.SplitJoinViewPolicy.type = "focus";
                    } else {
                        d.SplitJoinViewPolicy.type = "connected";
                    }
                });

                //setting back button
                if (state.backButtonElem != null && state.eventHistory.length === 0) {
                    state.backButtonElem.fadeTo('slow', 0);
                }

                //setting title
                if (state.titleElem != null) {
                    var text = "";
                    if (state.focusGroups.length > 0) {
                        text += state.focusGroups[0];
                    }
                    if (state.focusGroups.length === 2) {
                        text += ' & ' + state.focusGroups[1];
                    }
                    state.titleElem.text(text);
                }
                thisPolicy.setLayout();
            }

            /**
             * Undoes the last split or join event.
             * Meant to be called by the back button.
             */

        }, {
            key: 'undoLastEvent',
            value: function undoLastEvent() {
                var thisGraph = this.graph,
                    thisPolicy = this,
                    state = thisGraph.state.SplitJoinViewPolicy;

                var last = state.eventHistory[state.eventHistory.length - 1];
                var id = last.id;
                var node;
                if (last.event === 'join') {
                    node = thisGraph.findNodeById(id);
                    var d3node = thisGraph.findD3Node(id);
                    thisPolicy.dblclick(d3node, node);
                } else {
                    var nodeId = thisGraph.dataSource.children_struct[id][0];
                    node = thisGraph.findNodeById(nodeId);
                    _get(SplitJoinViewPolicy.prototype.__proto__ || Object.getPrototypeOf(SplitJoinViewPolicy.prototype), 'joinNode', this).call(thisPolicy, node);
                }
            }
        }]);

        return SplitJoinViewPolicy;
    }(SplitJoinNodePolicy.Policy);

    return {
        Policy: SplitJoinViewPolicy
    };
}]);
'use strict';
// Declare app level module which depends on views, and components
angular.module('contivApp', [
    'ui.router',
    'contiv.login',
    'contiv.menu',
    'contiv.dashboard',
    'contiv.applicationgroups',
    'contiv.networks',
    'contiv.networkpolicies',
    'contiv.storagepolicies',
    'contiv.servicelbs',
    'contiv.volumes',
    'contiv.nodes',
    'contiv.organizations',
    'contiv.settings',
    'contiv.visualization'
])
    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('contiv', {
            url: '',
            abstract: true,
            template: '<div ui-view class="ui fluid container"/>'
        });
        $urlRouterProvider.otherwise('/');
    }]);
//# sourceMappingURL=app.js.map
/**
 * Created by vjain3 on 3/11/16.
 */
/**
 * Created by vjain3 on 3/10/16.
 */
angular.module('contiv.applicationgroups')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.applicationgroups.create', {
            url: '/create',
            controller: 'ApplicationGroupCreateCtrl as applicationGroupCreateCtrl',
            templateUrl: 'applicationgroups/applicationgroupcreate.html'
        });
    }])
    .controller('ApplicationGroupCreateCtrl', [
    '$state',
    '$stateParams',
    'ApplicationGroupsModel',
    'NetworksModel',
    'CRUDHelperService',
    function ($state, $stateParams, ApplicationGroupsModel, NetworksModel, CRUDHelperService) {
        var applicationGroupCreateCtrl = this;
        applicationGroupCreateCtrl.networks = [];
        applicationGroupCreateCtrl.applicationGroup = {};
        applicationGroupCreateCtrl.selectedNetwork = {};
        applicationGroupCreateCtrl.mode = "edit";
        function returnToApplicationGroup() {
            $state.go('contiv.menu.applicationgroups.list');
        }
        function cancelCreating() {
            returnToApplicationGroup();
        }
        /**
         * Get networks for the given tenant.
         */
        function getNetworks() {
            NetworksModel.get().then(function (result) {
                applicationGroupCreateCtrl.networks = _.filter(result, {
                    'tenantName': 'default' //TODO: Remove hardcoded tenant.
                });
            });
        }
        function createApplicationGroup() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (applicationGroupCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(applicationGroupCreateCtrl);
                CRUDHelperService.startLoader(applicationGroupCreateCtrl);
                applicationGroupCreateCtrl.applicationGroup.networkName =
                    applicationGroupCreateCtrl.selectedNetwork.networkName;
                applicationGroupCreateCtrl.applicationGroup.key =
                    ApplicationGroupsModel.generateKey(applicationGroupCreateCtrl.applicationGroup);
                /**
                 * applicationGroup consist of Group Name, Network Name, Isolation Policies, Bandwidth Policy
                 */
                ApplicationGroupsModel.create(applicationGroupCreateCtrl.applicationGroup).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(applicationGroupCreateCtrl);
                    returnToApplicationGroup();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(applicationGroupCreateCtrl);
                    CRUDHelperService.showServerError(applicationGroupCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(applicationGroupCreateCtrl);
            CRUDHelperService.hideServerError(applicationGroupCreateCtrl);
            applicationGroupCreateCtrl.applicationGroup = {
                groupName: '',
                networkName: '',
                policies: [],
                netProfile: '',
                tenantName: 'default' //TODO: Remove hardcoded tenant.
            };
        }
        getNetworks();
        applicationGroupCreateCtrl.createApplicationGroup = createApplicationGroup;
        applicationGroupCreateCtrl.cancelCreating = cancelCreating;
        resetForm();
    }]);
//# sourceMappingURL=applicationgroupcreatectrl.js.map
/**
* Created by vjain3 on 3/15/16.
*/
angular.module('contiv.applicationgroups')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.applicationgroups.details', {
            url: '/details/:key',
            controller: 'ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl',
            templateUrl: 'applicationgroups/applicationgroupdetails.html'
        })
            .state('contiv.menu.applicationgroups.edit', {
            url: '/edit/:key',
            controller: 'ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl',
            templateUrl: 'applicationgroups/applicationgroupdetails.html'
        });
    }])
    .controller('ApplicationGroupDetailsCtrl', [
    '$state',
    '$stateParams',
    'ApplicationGroupsModel',
    'CRUDHelperService',
    function ($state, $stateParams, ApplicationGroupsModel, CRUDHelperService) {
        var applicationGroupDetailsCtrl = this;
        applicationGroupDetailsCtrl.applicationGroup = {};
        applicationGroupDetailsCtrl.selectedNetwork = {};
        /**
         * To show edit or details screen based on the route
         */
        function setMode() {
            if ($state.is('contiv.menu.applicationgroups.edit')) {
                applicationGroupDetailsCtrl.mode = 'edit';
            }
            else {
                applicationGroupDetailsCtrl.mode = 'details';
            }
        }
        function returnToApplicationGroup() {
            $state.go('contiv.menu.applicationgroups.list');
        }
        function returnToApplicationGroupDetails() {
            $state.go('contiv.menu.applicationgroups.details', { 'key': applicationGroupDetailsCtrl.applicationGroup.key });
        }
        function cancelEditing() {
            returnToApplicationGroupDetails();
        }
        function deleteApplicationGroup() {
            CRUDHelperService.hideServerError(applicationGroupDetailsCtrl);
            CRUDHelperService.startLoader(applicationGroupDetailsCtrl);
            ApplicationGroupsModel.delete(applicationGroupDetailsCtrl.applicationGroup).then(function successCallback(result) {
                CRUDHelperService.stopLoader(applicationGroupDetailsCtrl);
                returnToApplicationGroup();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(applicationGroupDetailsCtrl);
                CRUDHelperService.showServerError(applicationGroupDetailsCtrl, result);
            });
        }
        function saveApplicationGroup() {
            CRUDHelperService.hideServerError(applicationGroupDetailsCtrl);
            CRUDHelperService.startLoader(applicationGroupDetailsCtrl);
            ApplicationGroupsModel.save(applicationGroupDetailsCtrl.applicationGroup).then(function successCallback(result) {
                CRUDHelperService.stopLoader(applicationGroupDetailsCtrl);
                returnToApplicationGroupDetails();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(applicationGroupDetailsCtrl);
                CRUDHelperService.showServerError(applicationGroupDetailsCtrl, result);
            });
        }
        CRUDHelperService.stopLoader(applicationGroupDetailsCtrl);
        CRUDHelperService.hideServerError(applicationGroupDetailsCtrl);
        ApplicationGroupsModel.getModelByKey($stateParams.key)
            .then(function (group) {
            applicationGroupDetailsCtrl.applicationGroup = group;
        });
        applicationGroupDetailsCtrl.saveApplicationGroup = saveApplicationGroup;
        applicationGroupDetailsCtrl.cancelEditing = cancelEditing;
        applicationGroupDetailsCtrl.deleteApplicationGroup = deleteApplicationGroup;
        setMode();
    }]);
//# sourceMappingURL=applicationgroupdetailsctrl.js.map
/**
 * Created by hardik gandhi on 6/28/16.
 */
angular.module("contiv.applicationgroups")
    .directive("ctvBandwidthpolicy", function () {
    return {
        restrict: 'E',
        scope: {
            mode: "=",
            applicationgroup: '='
        },
        controller: [
            '$scope',
            'NetprofilesModel',
            function ($scope, NetprofilesModel) {
                $scope.netProfiles = [];
                $scope.selectedNetprofile = {
                    policy: {}
                };
                /**
                 * Get profiles for the given tenant.
                 */
                function getNetprofiles() {
                    NetprofilesModel.get().then(function (result) {
                        $scope.netProfiles = _.filter(result, {
                            'tenantName': 'default' //TODO: Remove hardcoded tenant.
                        });
                        if ($scope.applicationgroup.netProfile !== '') {
                            $scope.selectedNetprofile.policy = _.find($scope.netProfiles, function (policy) {
                                return policy.profileName === $scope.applicationgroup.netProfile;
                            });
                        }
                    });
                }
                /**
                 * Assign profileName to applicationgroup whichever user has given
                 */
                $scope.updateApplicationgroup = function () {
                    if ($scope.selectedNetprofile.policy === null) {
                        $scope.applicationgroup.netProfile = '';
                    }
                    else {
                        $scope.applicationgroup.netProfile = $scope.selectedNetprofile.policy.profileName;
                    }
                };
                getNetprofiles();
            }],
        templateUrl: 'applicationgroups/bandwidthpolicy.html'
    };
});
//# sourceMappingURL=bandwidthpolicydirective.js.map
/**
 * Created by hardik gandhi on 7/8/16.
 */
angular.module("contiv.applicationgroups")
    .directive("ctvIsolationpolicy", function () {
    return {
        restrict: 'E',
        scope: {
            mode: '=',
            applicationgroup: '='
        },
        controller: [
            '$scope',
            '$stateParams',
            'ApplicationGroupsModel',
            'PoliciesModel',
            'RulesModel',
            function ($scope, $stateParams, ApplicationGroupsModel, PoliciesModel, RulesModel) {
                $scope.incomingRules = [];
                $scope.outgoingRules = [];
                $scope.selectedPolicy = {
                    policy: {}
                };
                $scope.selectedPolicies = []; // To Store policies selected by user to display
                $scope.isolationPolicies = []; // To Get all isolation policies of tenant
                /**
                 * Get incoming and outgoing rules for each policy present in applicationgroup
                 */
                function getRules() {
                    $scope.applicationgroup.policies.forEach(function (policy) {
                        //To display rules of selected policies
                        RulesModel.getIncomingRules(policy, 'default')
                            .then(function (rules) {
                            Array.prototype.push.apply($scope.incomingRules, rules);
                        });
                        RulesModel.getOutgoingRules(policy, 'default')
                            .then(function (rules) {
                            Array.prototype.push.apply($scope.outgoingRules, rules);
                        });
                    });
                }
                /**
                 * Get policies for the given tenant.
                 */
                function getIsolationPolicies() {
                    PoliciesModel.get().then(function (result) {
                        $scope.isolationPolicies = _.filter(result, {
                            'tenantName': 'default' //TODO: Remove hardcoded tenant.
                        });
                    });
                }
                /**
                 * Add policy to application group
                 */
                $scope.addIsolationPolicy = function () {
                    var currentPolicyName = $scope.selectedPolicy.policy.policyName;
                    if (currentPolicyName !== undefined && _.includes($scope.selectedPolicies, currentPolicyName) == false) {
                        //To display selected policies
                        $scope.selectedPolicies.push(currentPolicyName);
                        //To display rules of selected policies
                        RulesModel.getIncomingRules(currentPolicyName, 'default')
                            .then(function (rules) {
                            Array.prototype.push.apply($scope.incomingRules, rules);
                        });
                        RulesModel.getOutgoingRules(currentPolicyName, 'default')
                            .then(function (rules) {
                            Array.prototype.push.apply($scope.outgoingRules, rules);
                        });
                        //To be added to application group and saved to the server
                        $scope.applicationgroup.policies
                            .push(currentPolicyName);
                    }
                };
                /**
                 * Remove policy from application group
                 */
                $scope.removeIsolationPolicy = function (policyName) {
                    _.remove($scope.selectedPolicies, function (policy) {
                        return policy === policyName;
                    });
                    _.remove($scope.applicationgroup.policies, function (policy) {
                        return policy === policyName;
                    });
                    _.remove($scope.incomingRules, function (rule) {
                        return rule.policyName === policyName;
                    });
                    _.remove($scope.outgoingRules, function (rule) {
                        return rule.policyName === policyName;
                    });
                };
                /**
                 *  To check 'details' or 'edit' mode (not create mode)
                 */
                if ($scope.mode == 'details' || ($scope.mode == 'edit' && $scope.applicationgroup.groupName != "")) {
                    //Application Groups might not have any policies associated with them so define an empty array
                    if ($scope.applicationgroup.policies === undefined) {
                        $scope.applicationgroup.policies = [];
                    }
                    getRules();
                }
                getIsolationPolicies();
            }],
        templateUrl: 'applicationgroups/isolationpolicy.html'
    };
});
//# sourceMappingURL=isolationpolicydirective.js.map
/**
 * Created by vjain3 on 5/19/16.
 */
angular.module('contiv.login')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.login', {
            url: '/',
            templateUrl: 'login/login.html',
            controller: 'LoginCtrl as loginCtrl'
        });
    }])
    .controller('LoginCtrl', ['$state', 'CRUDHelperService',
    function ($state, CRUDHelperService) {
        var loginCtrl = this;
        function returnToDashboard() {
            $state.go('contiv.menu.dashboard', { username: loginCtrl.username });
        }
        function login() {
            returnToDashboard();
        }
        CRUDHelperService.stopLoader(loginCtrl);
        CRUDHelperService.hideServerError(loginCtrl);
        loginCtrl.login = login;
    }]);
//# sourceMappingURL=loginctrl.js.map
/**
 * Created by vjain3 on 5/19/16.
 */
angular.module('contiv.menu')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu', {
            url: '/m',
            templateUrl: 'menu/menu.html',
            controller: 'MenuCtrl as menuCtrl',
            params: { username: null }
        });
    }])
    .controller('MenuCtrl', ['$state', '$stateParams', function ($state, $stateParams) {
        var menuCtrl = this;
        function logout() {
            $state.go('contiv.login');
        }
        menuCtrl.username = $stateParams.username;
        menuCtrl.logout = logout;
    }]);
//# sourceMappingURL=menuCtrl.js.map
/**
 * Created by hardik gandhi on 6/24/16.
 */
angular.module("contiv.networkpolicies")
    .directive("ctvBandwidth", function () {
    return {
        restrict: 'E',
        scope: {
            bandwidthPolicy: '=',
            mode: "@"
        },
        link: function (scope) {
            if (scope.bandwidthPolicy.bandwidth != '') {
                var bandwidthArray = scope.bandwidthPolicy.bandwidth.split(' ');
                scope.bandwidthPolicy.bandwidthNumber = Number(bandwidthArray[0]);
                scope.bandwidthPolicy.bandwidthUnit = bandwidthArray[1];
            }
        },
        templateUrl: 'network_policies/bandwidth.html'
    };
});
//# sourceMappingURL=bandwidthdirective.js.map
/**
 * Created by hardik gandhi on 6/16/16.
 */
angular.module('contiv.networkpolicies')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies.bandwidth.details', {
            url: '/details/:key',
            controller: 'BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl',
            templateUrl: 'network_policies/bandwidthpolicydetails.html'
        });
    }])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies.bandwidth.edit', {
            url: '/edit/:key',
            controller: 'BandwidthPolicyDetailsCtrl as bandwidthPolicyDetailsCtrl',
            templateUrl: 'network_policies/bandwidthpolicydetails.html'
        });
    }])
    .controller('BandwidthPolicyDetailsCtrl', [
    '$state',
    '$stateParams',
    'NetprofilesModel',
    'CRUDHelperService',
    function ($state, $stateParams, NetprofilesModel, CRUDHelperService) {
        var bandwidthPolicyDetailsCtrl = this;
        bandwidthPolicyDetailsCtrl.bandwidthProfiles = [];
        /* Get particular Profile for based on key*/
        NetprofilesModel.getModelByKey($stateParams.key)
            .then(function (policy) {
            bandwidthPolicyDetailsCtrl.policy = policy;
        });
        /**
         * To show edit or details screen based on the route
         */
        function setMode() {
            if ($state.is('contiv.menu.networkpolicies.bandwidth.edit')) {
                bandwidthPolicyDetailsCtrl.mode = 'edit';
            }
            else {
                bandwidthPolicyDetailsCtrl.mode = 'details';
            }
        }
        function deletePolicy() {
            CRUDHelperService.hideServerError(bandwidthPolicyDetailsCtrl);
            CRUDHelperService.startLoader(bandwidthPolicyDetailsCtrl);
            NetprofilesModel.deleteUsingKey(bandwidthPolicyDetailsCtrl.policy.key, 'name').then(function successCallback(result) {
                CRUDHelperService.stopLoader(bandwidthPolicyDetailsCtrl);
                returnToPolicies();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(bandwidthPolicyDetailsCtrl);
                CRUDHelperService.showServerError(bandwidthPolicyDetailsCtrl, result);
            });
        }
        function returnToPolicies() {
            $state.go('contiv.menu.networkpolicies.list.bandwidth');
        }
        function returnToPolicyDetails() {
            $state.go('contiv.menu.networkpolicies.bandwidth.details', { 'key': bandwidthPolicyDetailsCtrl.policy.key });
        }
        function cancelEditing() {
            returnToPolicyDetails();
        }
        function savePolicy() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (bandwidthPolicyDetailsCtrl.form.$valid) {
                CRUDHelperService.hideServerError(bandwidthPolicyDetailsCtrl);
                CRUDHelperService.startLoader(bandwidthPolicyDetailsCtrl);
                bandwidthPolicyDetailsCtrl.policy.bandwidth = bandwidthPolicyDetailsCtrl.policy.bandwidthNumber + " " + bandwidthPolicyDetailsCtrl.policy.bandwidthUnit;
                NetprofilesModel.save(bandwidthPolicyDetailsCtrl.policy).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(bandwidthPolicyDetailsCtrl);
                    returnToPolicyDetails();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(bandwidthPolicyDetailsCtrl);
                    CRUDHelperService.showServerError(bandwidthPolicyDetailsCtrl, result);
                });
            }
        }
        CRUDHelperService.stopLoader(bandwidthPolicyDetailsCtrl);
        CRUDHelperService.hideServerError(bandwidthPolicyDetailsCtrl);
        setMode();
        bandwidthPolicyDetailsCtrl.deletePolicy = deletePolicy;
        bandwidthPolicyDetailsCtrl.savePolicy = savePolicy;
        bandwidthPolicyDetailsCtrl.cancelEditing = cancelEditing;
    }]);
//# sourceMappingURL=bandwidthpolicydetailsctrl.js.map
/**
 * Created by vjain3 on 3/8/16.
 */
angular.module('contiv.networkpolicies')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies.isolation.details', {
            url: '/details/:key',
            controller: 'IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl',
            templateUrl: 'network_policies/isolationpolicydetails.html'
        });
    }])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies.isolation.edit', {
            url: '/edit/:key',
            controller: 'IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl',
            templateUrl: 'network_policies/isolationpolicydetails.html'
        });
    }])
    .controller('IsolationPolicyDetailsCtrl', [
    '$state',
    '$stateParams',
    'PoliciesModel',
    'RulesModel',
    'NetworksModel',
    'ApplicationGroupsModel',
    'CRUDHelperService',
    function ($state, $stateParams, PoliciesModel, RulesModel, NetworksModel, ApplicationGroupsModel, CRUDHelperService) {
        var isolationPolicyDetailsCtrl = this;
        isolationPolicyDetailsCtrl.networks = [];
        isolationPolicyDetailsCtrl.applicationGroups = [];
        isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = false;
        isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = false;
        isolationPolicyDetailsCtrl.disableOutgoingApplicationGroupSelection = false;
        isolationPolicyDetailsCtrl.disableIncomingApplicationGroupSelection = false;
        isolationPolicyDetailsCtrl.disableIncomingIPAddressSelection = false;
        isolationPolicyDetailsCtrl.disableOutgoingIPAddressSelection = false;
        isolationPolicyDetailsCtrl.newIncomingSelectedApplicationGroup = '';
        isolationPolicyDetailsCtrl.newOutgoingSelectedApplicationGroup = '';
        isolationPolicyDetailsCtrl.newIncomingSelectedNetwork = '';
        isolationPolicyDetailsCtrl.newOutgoingSelectedNetwork = '';
        isolationPolicyDetailsCtrl.incorrectCIDR = false;
        isolationPolicyDetailsCtrl.validateCIDRFlag = false;
        function returnToPolicies() {
            $state.go('contiv.menu.networkpolicies.list.isolation');
        }
        function returnToPolicyDetails() {
            $state.go('contiv.menu.networkpolicies.isolation.details', { key: isolationPolicyDetailsCtrl.policy.key });
        }
        function cancelEditing() {
            returnToPolicyDetails();
        }
        /**
         * Go back to policy details after done editing
         */
        function doneEditing() {
            returnToPolicyDetails();
        }
        function deletePolicy() {
            CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
            CRUDHelperService.startLoader(isolationPolicyDetailsCtrl);
            PoliciesModel.delete(isolationPolicyDetailsCtrl.policy).then(function successCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                returnToPolicies();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                CRUDHelperService.showServerError(isolationPolicyDetailsCtrl, result);
            });
        }
        /**
         * To show edit or details screen based on the route
         */
        function setMode() {
            if ($state.is('contiv.menu.networkpolicies.isolation.edit')) {
                isolationPolicyDetailsCtrl.mode = 'edit';
            }
            else {
                isolationPolicyDetailsCtrl.mode = 'details';
            }
        }
        function resetNewIncomingRule() {
            //Rule object to be created on server
            isolationPolicyDetailsCtrl.newIncomingRule = {
                ruleId: '',
                priority: 1,
                action: 'allow',
                fromEndpointGroup: '',
                fromNetwork: '',
                fromIpAddress: '',
                protocol: 'tcp',
                port: 0,
                direction: 'in',
                tenantName: 'default',
                policyName: isolationPolicyDetailsCtrl.policy.policyName
            };
            isolationPolicyDetailsCtrl.newIncomingSelectedApplicationGroup = '';
            isolationPolicyDetailsCtrl.newIncomingSelectedNetwork = '';
            isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = false;
            isolationPolicyDetailsCtrl.disableIncomingApplicationGroupSelection = false;
            isolationPolicyDetailsCtrl.disableIncomingIPAddressSelection = false;
            isolationPolicyDetailsCtrl.incorrectCIDR = false;
            isolationPolicyDetailsCtrl.validateCIDRFlag = false;
        }
        function resetNewOutgoingRule() {
            //Rule object to be created on server
            isolationPolicyDetailsCtrl.newOutgoingRule = {
                ruleId: '',
                priority: 1,
                action: 'allow',
                toEndpointGroup: '',
                toNetwork: '',
                toIpAddress: '',
                protocol: 'tcp',
                port: 0,
                direction: 'out',
                tenantName: 'default',
                policyName: isolationPolicyDetailsCtrl.policy.policyName
            };
            isolationPolicyDetailsCtrl.newOutgoingSelectedApplicationGroup = '';
            isolationPolicyDetailsCtrl.newOutgoingSelectedNetwork = '';
            isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = false;
            isolationPolicyDetailsCtrl.disableOutgoingApplicationGroupSelection = false;
            isolationPolicyDetailsCtrl.disableOutgoingIPAddressSelection = false;
            isolationPolicyDetailsCtrl.incorrectCIDR = false;
            isolationPolicyDetailsCtrl.validateCIDRFlag = false;
        }
        /**
         * Get network names for the given tenant.
         */
        function getNetworks() {
            NetworksModel.get().then(function (result) {
                //_.filter() returns a new array
                isolationPolicyDetailsCtrl.networks = _.filter(result, {
                    'tenantName': 'default' //TODO: Remove hardcoded tenant.
                });
            });
        }
        /**
         * Get application group names for the given tenant.
         */
        function getApplicationGroups() {
            ApplicationGroupsModel.get()
                .then(function (result) {
                //_.filter() returns a new array
                isolationPolicyDetailsCtrl.applicationGroups = _.filter(result, {
                    'tenantName': 'default' //TODO: Remove hardcoded tenant.
                });
            });
        }
        /**
         * Event handler to disable network selection box once application group is selected while creating a new
         * rule.
         */
        function onChangeOutgoingApplicationGroupSelection() {
            if (isolationPolicyDetailsCtrl.newOutgoingSelectedApplicationGroup != null) {
                //If application group has been selected
                isolationPolicyDetailsCtrl.newOutgoingRule.toEndpointGroup =
                    isolationPolicyDetailsCtrl.newOutgoingSelectedApplicationGroup.groupName;
                isolationPolicyDetailsCtrl.newOutgoingRule.toNetwork = '';
                isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = true;
            }
            else {
                //When 'none' is selected
                isolationPolicyDetailsCtrl.newOutgoingRule.toEndpointGroup = '';
                isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = false;
            }
        }
        /**
         * Event handler to disable network selection box once application group is selected while creating a new
         * rule.
         */
        function onChangeIncomingApplicationGroupSelection() {
            if (isolationPolicyDetailsCtrl.newIncomingSelectedApplicationGroup != null) {
                //If application group has been selected
                isolationPolicyDetailsCtrl.newIncomingRule.fromEndpointGroup =
                    isolationPolicyDetailsCtrl.newIncomingSelectedApplicationGroup.groupName;
                isolationPolicyDetailsCtrl.newIncomingRule.fromNetwork = '';
                isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = true;
            }
            else {
                //When 'none' is selected
                isolationPolicyDetailsCtrl.newIncomingRule.fromEndpointGroup = '';
                isolationPolicyDetailsCtrl.disableOutgoingApplicationGroupSelection = false;
                isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = false;
            }
        }
        /**
         * Event handler to disable application group selection box once network is selected while creating a new
         * rule.
         */
        function onChangeOutgoingNetworkSelection() {
            if (isolationPolicyDetailsCtrl.newOutgoingSelectedNetwork != null) {
                //If network has been selected
                isolationPolicyDetailsCtrl.newOutgoingRule.toNetwork =
                    isolationPolicyDetailsCtrl.newOutgoingSelectedNetwork;
                isolationPolicyDetailsCtrl.newOutgoingRule.ToEndpointGroup = '';
                isolationPolicyDetailsCtrl.disableOutgoingApplicationGroupSelection = true;
                isolationPolicyDetailsCtrl.disableOutgoingIPAddressSelection = true;
            }
            else {
                isolationPolicyDetailsCtrl.newOutgoingRule.toIpAddress = '';
                isolationPolicyDetailsCtrl.disableOutgoingApplicationGroupSelection = false;
                isolationPolicyDetailsCtrl.disableOutgoingIPAddressSelection = false;
            }
        }
        /**
         * Event handler to disable application group selection box once network is selected while creating a new
         * rule.
         */
        function onChangeIncomingNetworkSelection() {
            if (isolationPolicyDetailsCtrl.newIncomingSelectedNetwork != null) {
                //If network has been selected
                isolationPolicyDetailsCtrl.newIncomingRule.fromNetwork =
                    isolationPolicyDetailsCtrl.newIncomingSelectedNetwork;
                isolationPolicyDetailsCtrl.newIncomingRule.fromEndpointGroup = '';
                isolationPolicyDetailsCtrl.disableIncomingApplicationGroupSelection = true;
                isolationPolicyDetailsCtrl.disableIncomingIPAddressSelection = true;
            }
            else {
                isolationPolicyDetailsCtrl.newIncomingRule.fromNetwork = '';
                isolationPolicyDetailsCtrl.disableIncomingApplicationGroupSelection = false;
                isolationPolicyDetailsCtrl.disableIncomingIPAddressSelection = false;
            }
        }
        /**
         * Generates rule id
         * TODO Make it cryptographically stronger once we have multiple users updating same policy
         */
        function generateRuleId(rule) {
            rule.ruleId =
                (isolationPolicyDetailsCtrl.incomingRules.length + isolationPolicyDetailsCtrl.outgoingRules.length + 1).toString() + '-' +
                    Date.now().toString();
        }
        /**
         * Rule is saved to server
         */
        function addIncomingRule() {
            if (validateCIDR(isolationPolicyDetailsCtrl.newIncomingRule.fromIpAddress)) {
                CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
                CRUDHelperService.startLoader(isolationPolicyDetailsCtrl);
                generateRuleId(isolationPolicyDetailsCtrl.newIncomingRule);
                isolationPolicyDetailsCtrl.newIncomingRule.key = RulesModel.generateKey(isolationPolicyDetailsCtrl.newIncomingRule);
                RulesModel.create(isolationPolicyDetailsCtrl.newIncomingRule).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                    isolationPolicyDetailsCtrl.incomingRules.push(result);
                    resetNewIncomingRule();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                    CRUDHelperService.showServerError(isolationPolicyDetailsCtrl, result);
                });
            }
        }
        function onChangeIncomingIPAddress() {
            if (isolationPolicyDetailsCtrl.newIncomingRule.fromIpAddress == '') {
                isolationPolicyDetailsCtrl.incorrectCIDR = false;
                isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = false;
            }
            else {
                isolationPolicyDetailsCtrl.disableIncomingNetworkSelection = true;
            }
            if (isolationPolicyDetailsCtrl.validateCIDRFlag &&
                isolationPolicyDetailsCtrl.incorrectCIDR) {
                validateCIDR(isolationPolicyDetailsCtrl.newIncomingRule.fromIpAddress);
            }
        }
        function onChangeOutgoingIPAddress() {
            if (isolationPolicyDetailsCtrl.newOutgoingRule.toIpAddress == '') {
                isolationPolicyDetailsCtrl.incorrectCIDR = false;
                isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = false;
            }
            else {
                isolationPolicyDetailsCtrl.disableOutgoingNetworkSelection = true;
            }
            if (isolationPolicyDetailsCtrl.validateCIDRFlag &&
                isolationPolicyDetailsCtrl.incorrectCIDR) {
                validateCIDR(isolationPolicyDetailsCtrl.newOutgoingRule.toIpAddress);
            }
        }
        function validateCIDR(ipaddress) {
            var cidrPattern = new RegExp(ContivGlobals.CIDR_REGEX);
            if (ipaddress == '') {
                return true;
            }
            if (cidrPattern.test(ipaddress)) {
                isolationPolicyDetailsCtrl.incorrectCIDR = false;
                return true;
            }
            isolationPolicyDetailsCtrl.incorrectCIDR = true;
            isolationPolicyDetailsCtrl.validateCIDRFlag = true;
            return false;
        }
        /**
         * Rule is saved to server
         */
        function addOutgoingRule() {
            if (validateCIDR(isolationPolicyDetailsCtrl.newOutgoingRule.toIpAddress)) {
                CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
                CRUDHelperService.startLoader(isolationPolicyDetailsCtrl);
                generateRuleId(isolationPolicyDetailsCtrl.newOutgoingRule);
                isolationPolicyDetailsCtrl.newOutgoingRule.key = RulesModel.generateKey(isolationPolicyDetailsCtrl.newOutgoingRule);
                RulesModel.create(isolationPolicyDetailsCtrl.newOutgoingRule).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                    isolationPolicyDetailsCtrl.outgoingRules.push(result);
                    resetNewOutgoingRule();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                    CRUDHelperService.showServerError(isolationPolicyDetailsCtrl, result);
                });
            }
        }
        /**
         * Delete incoming rule from server
         */
        function deleteIncomingRule(key) {
            CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
            CRUDHelperService.startLoader(isolationPolicyDetailsCtrl);
            RulesModel.deleteUsingKey(key).then(function successCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                _.remove(isolationPolicyDetailsCtrl.incomingRules, function (n) {
                    return n.key == key;
                });
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                CRUDHelperService.showServerError(isolationPolicyDetailsCtrl, result);
            });
        }
        /**
         * Delete outgoing rule from server
         */
        function deleteOutgoingRule(key) {
            CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
            CRUDHelperService.startLoader(isolationPolicyDetailsCtrl);
            RulesModel.deleteUsingKey(key).then(function successCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                _.remove(isolationPolicyDetailsCtrl.outgoingRules, function (n) {
                    return n.key == key;
                });
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
                CRUDHelperService.showServerError(isolationPolicyDetailsCtrl, result);
            });
        }
        CRUDHelperService.stopLoader(isolationPolicyDetailsCtrl);
        CRUDHelperService.hideServerError(isolationPolicyDetailsCtrl);
        PoliciesModel.getModelByKey($stateParams.key)
            .then(function (policy) {
            isolationPolicyDetailsCtrl.policy = policy;
            RulesModel.getIncomingRules(policy.policyName, 'default').then(function (result) {
                isolationPolicyDetailsCtrl.incomingRules = result;
                resetNewIncomingRule();
            });
            RulesModel.getOutgoingRules(policy.policyName, 'default').then(function (result) {
                isolationPolicyDetailsCtrl.outgoingRules = result;
                resetNewOutgoingRule();
            });
        });
        getNetworks();
        getApplicationGroups();
        isolationPolicyDetailsCtrl.deletePolicy = deletePolicy;
        isolationPolicyDetailsCtrl.deleteIncomingRule = deleteIncomingRule;
        isolationPolicyDetailsCtrl.deleteOutgoingRule = deleteOutgoingRule;
        isolationPolicyDetailsCtrl.addIncomingRule = addIncomingRule;
        isolationPolicyDetailsCtrl.addOutgoingRule = addOutgoingRule;
        isolationPolicyDetailsCtrl.doneEditing = doneEditing;
        isolationPolicyDetailsCtrl.cancelEditing = cancelEditing;
        //Event Handlers
        isolationPolicyDetailsCtrl.onChangeOutgoingApplicationGroupSelection = onChangeOutgoingApplicationGroupSelection;
        isolationPolicyDetailsCtrl.onChangeIncomingApplicationGroupSelection = onChangeIncomingApplicationGroupSelection;
        isolationPolicyDetailsCtrl.onChangeOutgoingNetworkSelection = onChangeOutgoingNetworkSelection;
        isolationPolicyDetailsCtrl.onChangeIncomingNetworkSelection = onChangeIncomingNetworkSelection;
        isolationPolicyDetailsCtrl.onChangeIncomingIPAddress = onChangeIncomingIPAddress;
        isolationPolicyDetailsCtrl.onChangeOutgoingIPAddress = onChangeOutgoingIPAddress;
        setMode();
    }]);
//# sourceMappingURL=isolationpolicydetailsctrl.js.map
/**
 * Created by vjain3 on 3/9/16.
 */
angular.module('contiv.networkpolicies')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networkpolicies.list', {
            url: '/list',
            abstract: true,
            controller: 'NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl',
            templateUrl: 'network_policies/networkpoliciestabs.html'
        })
            .state('contiv.menu.networkpolicies.list.redirection', {
            url: '/redirection',
            template: ''
        });
    }])
    .controller('NetworkPoliciesTabsCtrl', ['$state', function ($state) {
        var networkPoliciesTabsCtrl = this;
        function createNetworkPolicy() {
            if ($state.$current.includes['contiv.menu.networkpolicies.list.isolation']) {
                $state.go('contiv.menu.networkpolicies.isolation.create');
            }
            if ($state.$current.includes['contiv.menu.networkpolicies.list.bandwidth']) {
                $state.go('contiv.menu.networkpolicies.bandwidth.create');
            }
        }
        networkPoliciesTabsCtrl.createNetworkPolicy = createNetworkPolicy;
    }]);
//# sourceMappingURL=networkpoliciestabsctrl.js.map
/**
 * Created by vjain3 on 2/19/16.
 */
angular.module('contiv.networks')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networks.create', {
            url: '/create',
            templateUrl: 'networks/networkcreate.html',
            controller: 'NetworkCreateCtrl as networkCreateCtrl'
        });
    }])
    .controller('NetworkCreateCtrl', ['$state', '$stateParams', 'NetworksModel', 'CRUDHelperService',
    function ($state, $stateParams, NetworksModel, CRUDHelperService) {
        var networkCreateCtrl = this;
        networkCreateCtrl.cidrPattern = ContivGlobals.CIDR_REGEX;
        function returnToNetworks() {
            $state.go('contiv.menu.networks.list');
        }
        function cancelCreating() {
            returnToNetworks();
        }
        function createNetwork() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (networkCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(networkCreateCtrl);
                CRUDHelperService.startLoader(networkCreateCtrl);
                networkCreateCtrl.newNetwork.key =
                    networkCreateCtrl.newNetwork.tenantName + ':' + networkCreateCtrl.newNetwork.networkName;
                NetworksModel.create(networkCreateCtrl.newNetwork).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(networkCreateCtrl);
                    returnToNetworks();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(networkCreateCtrl);
                    CRUDHelperService.showServerError(networkCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(networkCreateCtrl);
            CRUDHelperService.hideServerError(networkCreateCtrl);
            networkCreateCtrl.newNetwork = {
                networkName: '',
                encap: 'vxlan',
                subnet: '',
                gateway: '',
                tenantName: 'default' //TODO: Remove hardcoded tenant.
            };
        }
        networkCreateCtrl.createNetwork = createNetwork;
        networkCreateCtrl.cancelCreating = cancelCreating;
        resetForm();
    }]);
//# sourceMappingURL=networkcreatectrl.js.map
angular.module('contiv.networks')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.networks.details', {
            url: '/details/:key',
            controller: 'NetworkDetailsCtrl as networkDetailsCtrl',
            templateUrl: 'networks/networkdetails.html'
        })
            .state('contiv.menu.networks.details.info', {
            url: '/info',
            templateUrl: 'networks/networkinfo.html'
        })
            .state('contiv.menu.networks.details.stats', {
            url: '/stats',
            component: 'networkstat'
        });
    }])
    .controller('NetworkDetailsCtrl', ['$state', '$stateParams', '$scope', '$interval', '$filter', 'NetworksModel', 'ApplicationGroupsModel', 'CRUDHelperService',
    function ($state, $stateParams, $scope, $interval, $filter, NetworksModel, ApplicationGroupsModel, CRUDHelperService) {
        var networkDetailsCtrl = this;
        function returnToNetworks() {
            $state.go('contiv.menu.networks.list');
        }
        function deleteNetwork() {
            CRUDHelperService.hideServerError(networkDetailsCtrl);
            CRUDHelperService.startLoader(networkDetailsCtrl);
            NetworksModel.delete(networkDetailsCtrl.network).then(function successCallback(result) {
                CRUDHelperService.stopLoader(networkDetailsCtrl);
                returnToNetworks();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(networkDetailsCtrl);
                CRUDHelperService.showServerError(networkDetailsCtrl, result);
            });
        }
        /**
         * Get application groups belonging to a network
         */
        function getApplicationGroups(reload) {
            ApplicationGroupsModel.get(reload).then(function (result) {
                networkDetailsCtrl.applicationGroups = $filter('orderBy')(_.filter(result, {
                    'networkName': networkDetailsCtrl.network.networkName
                }), 'groupName');
            });
        }
        CRUDHelperService.stopLoader(networkDetailsCtrl);
        CRUDHelperService.hideServerError(networkDetailsCtrl);
        NetworksModel.getModelByKey($stateParams.key)
            .then(function (network) {
            networkDetailsCtrl.network = network;
            getApplicationGroups(false);
        });
        networkDetailsCtrl.deleteNetwork = deleteNetwork;
        var promise;
        //Don't do autorefresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getApplicationGroups(true);
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=networkdetailsctrl.js.map
angular.module('contiv.nodes')
    .factory('BgpService', ['$http', '$q', function ($http, $q) {
        function getBgp(ctrl) {
            var deferred = $q.defer();
            var url = ContivGlobals.BGPS_ENDPOINT + ctrl.key + '/';
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
                ctrl.neighbor = result.data;
                ctrl.neighbors.push({ 'name': ctrl.neighbor['neighbor'], 'value': ctrl.neighbor['neighbor-as'] });
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        function updateBgp(ctrl) {
            var url = ContivGlobals.BGPS_ENDPOINT + ctrl.key + '/';
            return $http.post(url, ctrl.neighbor);
        }
        ;
        function getBgpInspect(key) {
            var deferred = $q.defer();
            var url = ContivGlobals.BGPS_INSPECT_ENDPOINT + key + '/';
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        return {
            getBgp: getBgp,
            updateBgp: updateBgp,
            getBgpInspect: getBgpInspect
        };
    }]);
//# sourceMappingURL=bgpservice.js.map
angular.module("contiv.nodes")
    .directive("ctvLogs", function () {
    return {
        restrict: 'E',
        templateUrl: 'nodes/logs.html',
        scope: {
            log: "=",
            title: "@"
        }
    };
});
//# sourceMappingURL=logsdirective.js.map
angular.module('contiv.nodes')
    .factory('LogService', ['$http', '$q', function ($http, $q) {
        function getActiveLogs() {
            var deferred = $q.defer();
            var url = ContivGlobals.NODES_ACTIVE_JOB_ENDPOINT;
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        function getLastLogs() {
            var deferred = $q.defer();
            var url = ContivGlobals.NODES_LAST_JOB_ENDPOINT;
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        return {
            getActiveLogs: getActiveLogs,
            getLastLogs: getLastLogs
        };
    }]);
//# sourceMappingURL=logservice.js.map
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.activelog', {
            url: '/activelog',
            controller: 'NodeActiveJobLogsCtrl as nodeActiveJobLogsCtrl',
            template: '<ctv-logs title="Active Job" log="nodeActiveJobLogsCtrl.activeLogs"></ctv-logs>'
        });
    }])
    .controller('NodeActiveJobLogsCtrl', ['$scope', '$interval', 'LogService',
    function ($scope, $interval, LogService) {
        var nodeActiveJobLogsCtrl = this;
        function getActiveLogs() {
            LogService.getActiveLogs().then(function successCallback(result) {
                nodeActiveJobLogsCtrl.activeLogs = result;
            }, function errorCallback(result) {
                //Once the job finishes, endpoint returns 500 error. So reset the activeLogs
                nodeActiveJobLogsCtrl.activeLogs = {
                    desc: 'There is currently no active job. Check Last Job for a job that recently finished.'
                };
            });
        }
        getActiveLogs();
        var promise;
        //Don't do auto-refresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getActiveLogs();
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=nodeactivejoblogsctrl.js.map
/**
 * Created by vjain3 on 3/25/16.
 */
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.commission', {
            url: '/commission/:key',
            controller: 'NodeCommissionCtrl as nodeCommissionCtrl',
            templateUrl: 'nodes/nodecommission.html'
        });
    }])
    .controller('NodeCommissionCtrl', [
    '$state', '$stateParams', 'NodesModel', 'CRUDHelperService', 'NodesService',
    function ($state, $stateParams, NodesModel, CRUDHelperService, NodesService) {
        var nodeCommissionCtrl = this;
        function returnToNodeDetails() {
            $state.go('contiv.menu.nodes.details.info', { 'key': $stateParams.key });
        }
        function cancelCommissioningNode() {
            returnToNodeDetails();
        }
        function commission() {
            if (nodeCommissionCtrl.form.$valid) {
                CRUDHelperService.hideServerError(nodeCommissionCtrl);
                CRUDHelperService.startLoader(nodeCommissionCtrl);
                nodeCommissionCtrl.nodeOpsObj.nodes = [$stateParams.key];
                NodesService.cleanupExtraVars(nodeCommissionCtrl);
                NodesService.createExtraVars(nodeCommissionCtrl);
                NodesModel.commission(nodeCommissionCtrl.nodeOpsObj).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(nodeCommissionCtrl);
                    returnToNodeDetails();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(nodeCommissionCtrl);
                    CRUDHelperService.showServerError(nodeCommissionCtrl, result);
                });
            }
        }
        nodeCommissionCtrl.nodeOpsObj = {};
        nodeCommissionCtrl.extra_vars = {}; //TODO Intialize from global settings
        nodeCommissionCtrl.ansibleVariables = [];
        nodeCommissionCtrl.envVariables = [];
        NodesService.getSettings(nodeCommissionCtrl);
        nodeCommissionCtrl.cancelCommissioningNode = cancelCommissioningNode;
        nodeCommissionCtrl.commission = commission;
        CRUDHelperService.stopLoader(nodeCommissionCtrl);
        CRUDHelperService.hideServerError(nodeCommissionCtrl);
    }]);
//# sourceMappingURL=nodecommissionctrl.js.map
/**
 * Created by vjain3 on 3/25/16.
 */
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.details', {
            url: '/details/:key',
            controller: 'NodeDetailsCtrl as nodeDetailsCtrl',
            templateUrl: 'nodes/nodedetails.html'
        })
            .state('contiv.menu.nodes.details.info', {
            url: '/info',
            controller: 'NodeDetailsCtrl as nodeDetailsCtrl',
            templateUrl: 'nodes/nodeinfo.html'
        })
            .state('contiv.menu.nodes.details.stats', {
            url: '/stats',
            controller: 'NodeDetailsCtrl as nodeDetailsCtrl',
            templateUrl: 'nodes/nodestats.html'
        })
            .state('contiv.menu.nodes.details.logs', {
            url: '/logs',
            controller: 'NodeDetailsCtrl as nodeDetailsCtrl',
            templateUrl: 'nodes/nodelogs.html'
        })
            .state('contiv.menu.nodes.details.edit', {
            url: '/edit',
            controller: 'NodeDetailsCtrl as nodeDetailsCtrl',
            templateUrl: 'nodes/nodeinfo.html'
        });
    }])
    .controller('NodeDetailsCtrl', ['$state', '$stateParams', '$scope', '$interval', 'NodesModel', 'BgpService',
    function ($state, $stateParams, $scope, $interval, NodesModel, BgpService) {
        var nodeDetailsCtrl = this;
        nodeDetailsCtrl.numberpattern = ContivGlobals.NUMBER_REGEX;
        function decommission() {
            var nodeOpsObj = {
                nodes: [$stateParams.key]
            };
            NodesModel.decommission(nodeOpsObj).then(function (result) {
                //Disable all buttons initially. Poll will assign values appropriately.
                nodeDetailsCtrl.showCommissionButton = false;
                nodeDetailsCtrl.commissionButtonEnabled = false;
                nodeDetailsCtrl.upgradeButtonEnabled = false;
            });
        }
        function upgrade() {
            var nodeOpsObj = {
                nodes: [$stateParams.key]
            };
            NodesModel.upgrade(nodeOpsObj).then(function (result) {
                //Disable all buttons initially. Poll will assign values appropriately.
                nodeDetailsCtrl.showCommissionButton = false;
                nodeDetailsCtrl.commissionButtonEnabled = false;
                nodeDetailsCtrl.upgradeButtonEnabled = false;
            });
        }
        /**
         * Display buttons based on status of node
         */
        function setButtonDisplay() {
            switch (nodeDetailsCtrl.node['inventory_state'].status) {
                case 'Unallocated':
                    nodeDetailsCtrl.showCommissionButton = true;
                    nodeDetailsCtrl.commissionButtonEnabled = true;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
                case 'Decommissioned':
                    nodeDetailsCtrl.showCommissionButton = true;
                    nodeDetailsCtrl.commissionButtonEnabled = true;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
                case 'Provisioning':
                    nodeDetailsCtrl.showCommissionButton = true;
                    nodeDetailsCtrl.commissionButtonEnabled = false;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
                case 'Allocated':
                    nodeDetailsCtrl.showCommissionButton = false;
                    nodeDetailsCtrl.commissionButtonEnabled = true;
                    nodeDetailsCtrl.upgradeButtonEnabled = true;
                    break;
                case 'Cancelled':
                    nodeDetailsCtrl.showCommissionButton = false;
                    nodeDetailsCtrl.commissionButtonEnabled = false;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
                case 'Maintenance':
                    nodeDetailsCtrl.showCommissionButton = true;
                    nodeDetailsCtrl.commissionButtonEnabled = false;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
                default:
                    nodeDetailsCtrl.showCommissionButton = true;
                    nodeDetailsCtrl.commissionButtonEnabled = false;
                    nodeDetailsCtrl.upgradeButtonEnabled = false;
                    break;
            }
        }
        function getNodeInfo(reload) {
            NodesModel.getModelByKey($stateParams.key, reload)
                .then(function (node) {
                nodeDetailsCtrl.node = node;
                setButtonDisplay();
            });
        }
        function setMode() {
            if ($state.is('contiv.menu.nodes.details.edit')) {
                nodeDetailsCtrl.mode = 'edit';
            }
            else {
                nodeDetailsCtrl.mode = 'details';
            }
        }
        function returnToInfo() {
            $state.go('contiv.menu.nodes.details.info');
        }
        function updateBgpInfo() {
            if (nodeDetailsCtrl.form.$valid) {
                nodeDetailsCtrl.neighbor.key = $stateParams.key;
                // backend only supports adding one neighbor currently
                nodeDetailsCtrl.neighbors.forEach(function (item) {
                    nodeDetailsCtrl.neighbor['neighbor'] = item.name;
                    nodeDetailsCtrl.neighbor['neighbor-as'] = item.value;
                });
                BgpService.updateBgp(nodeDetailsCtrl).then(function successCallback(result) {
                    nodeDetailsCtrl.neighbor = result.config.data;
                    returnToInfo();
                }, function errorCallback(result) {
                });
            }
        }
        function getBgpInfo() {
            BgpService.getBgp(nodeDetailsCtrl).then(function successCallback(result) {
                nodeDetailsCtrl.neighbor = result;
            }, function errorCallback(result) {
            });
        }
        function getBgpInspect() {
            BgpService.getBgpInspect($stateParams.key).then(function successCallback(result) {
                nodeDetailsCtrl.inspect = result;
                nodeDetailsCtrl.routes = result.Oper.routes;
                nodeDetailsCtrl.filteredroutes = result.Oper.routes;
            }, function errorCallback(result) {
            });
        }
        nodeDetailsCtrl.decommission = decommission;
        nodeDetailsCtrl.upgrade = upgrade;
        nodeDetailsCtrl.setMode = setMode;
        nodeDetailsCtrl.updateBgpInfo = updateBgpInfo;
        nodeDetailsCtrl.returnToInfo = returnToInfo;
        nodeDetailsCtrl.neighbors = [];
        nodeDetailsCtrl.neighbor = {};
        nodeDetailsCtrl.key = $stateParams.key;
        getBgpInfo();
        getBgpInspect();
        setMode();
        //Load from cache for quick display initially
        getNodeInfo(false);
        var promise;
        //Don't do auto-refresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getNodeInfo(true);
            }, 5000);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=nodedetailsctrl.js.map
/**
 * Created by vjain3 on 6/14/16.
 */
angular.module("contiv.nodes")
    .directive("ctvNodestatus", function () {
    return {
        restrict: 'E',
        scope: {
            node: '='
        },
        templateUrl: 'nodes/nodestatus.html'
    };
})
    .directive("ctvNodestate", function () {
    return {
        restrict: 'E',
        scope: {
            node: '='
        },
        templateUrl: 'nodes/nodestate.html'
    };
});
//# sourceMappingURL=nodedirective.js.map
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.discover', {
            url: '/discover',
            controller: 'NodeDiscoverCtrl as nodeDiscoverCtrl',
            templateUrl: 'nodes/nodediscover.html'
        });
    }])
    .controller('NodeDiscoverCtrl', [
    '$state', '$stateParams', 'NodesModel', 'CRUDHelperService', 'NodesService',
    function ($state, $stateParams, NodesModel, CRUDHelperService, NodesService) {
        var nodeDiscoverCtrl = this;
        function returnToNodes() {
            $state.go('contiv.menu.nodes.list');
        }
        function cancelDiscoveringNode() {
            returnToNodes();
        }
        function discover() {
            if (nodeDiscoverCtrl.form.$valid) {
                CRUDHelperService.hideServerError(nodeDiscoverCtrl);
                CRUDHelperService.startLoader(nodeDiscoverCtrl);
                createIPAddrArray();
                NodesService.createExtraVars(nodeDiscoverCtrl);
                NodesModel.discover(nodeDiscoverCtrl.nodeOpsObj).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(nodeDiscoverCtrl);
                    returnToNodes();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(nodeDiscoverCtrl);
                    CRUDHelperService.showServerError(nodeDiscoverCtrl, result);
                });
            }
        }
        function createIPAddrArray() {
            nodeDiscoverCtrl.nodeOpsObj.addrs = _.words(nodeDiscoverCtrl.nodeIPAddr, /[^, ]+/g);
        }
        nodeDiscoverCtrl.nodeOpsObj = {};
        nodeDiscoverCtrl.extra_vars = {}; //TODO Intialize from global settings
        nodeDiscoverCtrl.ansibleVariables = [];
        nodeDiscoverCtrl.envVariables = [];
        nodeDiscoverCtrl.nodeIPAddr = ''; //IP address of nodes to discover
        NodesService.getSettings(nodeDiscoverCtrl);
        nodeDiscoverCtrl.discover = discover;
        nodeDiscoverCtrl.cancelDiscoveringNode = cancelDiscoveringNode;
        CRUDHelperService.stopLoader(nodeDiscoverCtrl);
        CRUDHelperService.hideServerError(nodeDiscoverCtrl);
    }]);
//# sourceMappingURL=nodediscoverctrl.js.map
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.lastlog', {
            url: '/lastlog',
            controller: 'NodeLastJobLogsCtrl as nodeLastJobLogsCtrl',
            template: '<ctv-logs title="Last Job" log="nodeLastJobLogsCtrl.lastLogs"></ctv-logs>'
        });
    }])
    .controller('NodeLastJobLogsCtrl', ['$scope', '$interval', 'LogService',
    function ($scope, $interval, LogService) {
        var nodeLastJobLogsCtrl = this;
        function getLastLogs() {
            LogService.getLastLogs().then(function successCallback(result) {
                nodeLastJobLogsCtrl.lastLogs = result;
            }, function errorCallback(result) {
            });
        }
        getLastLogs();
        var promise;
        //Don't do auto-refresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getLastLogs();
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=nodelastjoblogsctrl.js.map
/**
 * Created by vjain3 on 3/22/16.
 */
angular.module('contiv.nodes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.nodes.list', {
            url: '/list',
            controller: 'NodeListCtrl as nodeListCtrl',
            templateUrl: 'nodes/nodelist.html'
        });
    }])
    .controller('NodeListCtrl', ['$scope', '$interval', '$filter', 'NodesModel', 'CRUDHelperService',
    function ($scope, $interval, $filter, NodesModel, CRUDHelperService) {
        var nodeListCtrl = this;
        function getNodes(reload) {
            NodesModel.get(reload)
                .then(function successCallback(result) {
                CRUDHelperService.stopLoader(nodeListCtrl);
                nodeListCtrl.nodes = result;
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(nodeListCtrl);
            });
        }
        //Load from cache for quick display initially
        getNodes(false);
        var promise;
        //Don't do auto-refresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getNodes(true);
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=nodelistctrl.js.map
angular.module('contiv.organizations')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.organizations.create', {
            url: '/create',
            templateUrl: 'organizations/organizationcreate.html',
            controller: 'OrganizationCreateCtrl as organizationCreateCtrl'
        });
    }])
    .controller('OrganizationCreateCtrl', ['$state', 'OrganizationsModel', 'CRUDHelperService',
    function ($state, OrganizationsModel, CRUDHelperService) {
        var organizationCreateCtrl = this;
        function returnToOrganizations() {
            $state.go('contiv.menu.organizations.list');
        }
        function cancelCreating() {
            returnToOrganizations();
        }
        function createOrganization() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (organizationCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(organizationCreateCtrl);
                CRUDHelperService.startLoader(organizationCreateCtrl);
                organizationCreateCtrl.newOrganization.key = organizationCreateCtrl.newOrganization.tenantName;
                OrganizationsModel.create(organizationCreateCtrl.newOrganization).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(organizationCreateCtrl);
                    returnToOrganizations();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(organizationCreateCtrl);
                    CRUDHelperService.showServerError(organizationCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(organizationCreateCtrl);
            CRUDHelperService.hideServerError(organizationCreateCtrl);
            organizationCreateCtrl.newOrganization = {
                tenantName: ''
            };
        }
        organizationCreateCtrl.createOrganization = createOrganization;
        organizationCreateCtrl.cancelCreating = cancelCreating;
        resetForm();
    }]);
//# sourceMappingURL=organizationcreatectrl.js.map
angular.module('contiv.organizations')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.organizations.details', {
            url: '/details/:key',
            controller: 'OrganizationDetailsCtrl as organizationDetailsCtrl',
            templateUrl: 'organizations/organizationdetails.html'
        });
    }])
    .controller('OrganizationDetailsCtrl', ['$state', '$stateParams', 'OrganizationsModel', 'CRUDHelperService',
    function ($state, $stateParams, OrganizationsModel, CRUDHelperService) {
        var organizationDetailsCtrl = this;
        function returnToOrganizations() {
            $state.go('contiv.menu.organizations.list');
        }
        function deleteOrganization() {
            CRUDHelperService.hideServerError(organizationDetailsCtrl);
            CRUDHelperService.startLoader(organizationDetailsCtrl);
            OrganizationsModel.delete(organizationDetailsCtrl.organization).then(function successCallback(result) {
                CRUDHelperService.stopLoader(organizationDetailsCtrl);
                returnToOrganizations();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(organizationDetailsCtrl);
                CRUDHelperService.showServerError(organizationDetailsCtrl, result);
            });
        }
        CRUDHelperService.stopLoader(organizationDetailsCtrl);
        CRUDHelperService.hideServerError(organizationDetailsCtrl);
        OrganizationsModel.getModelByKey($stateParams.key)
            .then(function (organization) {
            organizationDetailsCtrl.organization = organization;
        });
        organizationDetailsCtrl.deleteOrganization = deleteOrganization;
    }]);
//# sourceMappingURL=organizationdetailsctrl.js.map
/**
 * Created by vjain3 on 5/12/16.
 */
angular.module('contiv.servicelbs')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.servicelbs.create', {
            url: '/create',
            templateUrl: 'service_lbs/servicelbcreate.html',
            controller: 'ServicelbCreateCtrl as servicelbCreateCtrl'
        });
    }])
    .controller('ServicelbCreateCtrl', [
    '$state', '$stateParams', 'ServicelbsModel', 'NetworksModel', 'CRUDHelperService',
    function ($state, $stateParams, ServicelbsModel, NetworksModel, CRUDHelperService) {
        var servicelbCreateCtrl = this;
        servicelbCreateCtrl.labelSelectors = [];
        servicelbCreateCtrl.networks = [];
        function returnToServicelbs() {
            $state.go('contiv.menu.servicelbs.list');
        }
        function cancelCreating() {
            returnToServicelbs();
        }
        /**
         * Get networks for the given tenant.
         */
        function getNetworks() {
            NetworksModel.get().then(function (result) {
                servicelbCreateCtrl.networks = _.filter(result, {
                    'tenantName': 'default' //TODO: Remove hardcoded tenant.
                });
            });
        }
        function createLabelSelectorStrings() {
            //Empty out the selectors. In case of server errors this needs to be reset.
            servicelbCreateCtrl.servicelb.selectors = [];
            angular.forEach(servicelbCreateCtrl.labelSelectors, function (labelSelector) {
                var selectorString = labelSelector.name + '=' + labelSelector.value;
                servicelbCreateCtrl.servicelb.selectors.push(selectorString);
            });
        }
        function createServicelb() {
            createLabelSelectorStrings();
            //form controller is injected by the html template
            //checking if all validations have passed
            if (servicelbCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(servicelbCreateCtrl);
                CRUDHelperService.startLoader(servicelbCreateCtrl);
                servicelbCreateCtrl.servicelb.key =
                    servicelbCreateCtrl.servicelb.tenantName + ':' + servicelbCreateCtrl.servicelb.serviceName;
                ServicelbsModel.create(servicelbCreateCtrl.servicelb).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(servicelbCreateCtrl);
                    returnToServicelbs();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(servicelbCreateCtrl);
                    CRUDHelperService.showServerError(servicelbCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(servicelbCreateCtrl);
            CRUDHelperService.hideServerError(servicelbCreateCtrl);
            servicelbCreateCtrl.servicelb = {
                serviceName: '',
                networkName: '',
                ipAddress: '',
                selectors: [],
                ports: [],
                tenantName: 'default' //TODO: Remove hardcoded tenant.
            };
        }
        servicelbCreateCtrl.createServicelb = createServicelb;
        servicelbCreateCtrl.cancelCreating = cancelCreating;
        getNetworks();
        resetForm();
    }]);
//# sourceMappingURL=servicelbcreatectrl.js.map
/**
 * Created by vjain3 on 5/11/16.
 */
angular.module('contiv.servicelbs')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.servicelbs.details', {
            url: '/details/:key',
            params: { state: null },
            controller: 'ServicelbDetailsCtrl as servicelbDetailsCtrl',
            templateUrl: 'service_lbs/servicelbdetails.html'
        })
            .state('contiv.menu.servicelbs.details.info', {
            url: '/info',
            controller: 'ServicelbDetailsCtrl as servicelbDetailsCtrl',
            templateUrl: 'service_lbs/servicelbinfo.html'
        })
            .state('contiv.menu.servicelbs.details.edit', {
            url: '/edit/:key',
            controller: 'ServicelbDetailsCtrl as servicelbDetailsCtrl',
            templateUrl: 'service_lbs/servicelbinfo.html'
        });
    }])
    .controller('ServicelbDetailsCtrl', ['$state', '$stateParams', 'ServicelbsModel', 'CRUDHelperService',
    function ($state, $stateParams, ServicelbsModel, CRUDHelperService) {
        var servicelbDetailsCtrl = this;
        servicelbDetailsCtrl.labelSelectors = [];
        /**
         * To show edit or details screen based on the route
         */
        function setMode() {
            if ($state.is('contiv.menu.servicelbs.details.edit')) {
                servicelbDetailsCtrl.mode = 'edit';
            }
            else {
                servicelbDetailsCtrl.mode = 'details';
            }
        }
        function returnToServicelbs() {
            $state.go('contiv.menu.servicelbs.list');
        }
        function returnToServicelbDetails() {
            $state.go('contiv.menu.servicelbs.details.info', { 'key': servicelbDetailsCtrl.servicelb.key, 'state': 'details' });
        }
        function cancelEditing() {
            returnToServicelbDetails();
        }
        function deleteServicelb() {
            CRUDHelperService.hideServerError(servicelbDetailsCtrl);
            CRUDHelperService.startLoader(servicelbDetailsCtrl);
            ServicelbsModel.delete(servicelbDetailsCtrl.servicelb).then(function successCallback(result) {
                CRUDHelperService.stopLoader(servicelbDetailsCtrl);
                returnToServicelbs();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(servicelbDetailsCtrl);
                CRUDHelperService.showServerError(servicelbDetailsCtrl, result);
            });
        }
        function saveServicelb() {
            CRUDHelperService.hideServerError(servicelbDetailsCtrl);
            CRUDHelperService.startLoader(servicelbDetailsCtrl);
            var existingLabels = servicelbDetailsCtrl.servicelb.selectors;
            createLabelSelectorStrings();
            ServicelbsModel.save(servicelbDetailsCtrl.servicelb).then(function successCallback(result) {
                CRUDHelperService.stopLoader(servicelbDetailsCtrl);
                returnToServicelbDetails();
            }, function errorCallback(result) {
                servicelbDetailsCtrl.servicelb.selectors = existingLabels;
                createLabelSelectors();
                CRUDHelperService.stopLoader(servicelbDetailsCtrl);
                CRUDHelperService.showServerError(servicelbDetailsCtrl, result);
            });
        }
        function createLabelSelectors() {
            angular.forEach(servicelbDetailsCtrl.servicelb.selectors, function (selectorStr) {
                var selector = {
                    name: selectorStr.split('=')[0],
                    value: selectorStr.split('=')[1]
                };
                servicelbDetailsCtrl.labelSelectors.push(selector);
            });
        }
        function createLabelSelectorStrings() {
            servicelbDetailsCtrl.servicelb.selectors = [];
            angular.forEach(servicelbDetailsCtrl.labelSelectors, function (labelSelector) {
                var selectorString = labelSelector.name + '=' + labelSelector.value;
                servicelbDetailsCtrl.servicelb.selectors.push(selectorString);
            });
        }
        CRUDHelperService.stopLoader(servicelbDetailsCtrl);
        CRUDHelperService.hideServerError(servicelbDetailsCtrl);
        ServicelbsModel.getModelByKey($stateParams.key)
            .then(function successCallback(servicelb) {
            servicelbDetailsCtrl.servicelb = servicelb;
            createLabelSelectors();
        });
        servicelbDetailsCtrl.saveServicelb = saveServicelb;
        servicelbDetailsCtrl.cancelEditing = cancelEditing;
        servicelbDetailsCtrl.deleteServicelb = deleteServicelb;
        setMode();
    }]);
//# sourceMappingURL=servicelbdetailsctrl.js.map
/**
 * Created by vjain3 on 5/13/16.
 */
angular.module("contiv.servicelbs")
    .directive("ctvServicelbports", function () {
    return {
        restrict: 'E',
        scope: {
            items: '='
        },
        link: function (scope) {
            /**
             * Compare if two items have same ports and protocols
             * @param val1
             * @param val2
             * @returns {boolean}
             */
            function compare(val1, val2) {
                return (val1 === val2);
            }
            function resetNewItem() {
                scope.newItem = {
                    servicePort: '',
                    providerPort: '',
                    protocol: ''
                };
            }
            function isEmptyItem(item) {
                return (item.servicePort === '' && item.providerPort === '' && item.protocol === '');
            }
            scope.add = function () {
                if (isEmptyItem(scope.newItem))
                    return;
                if (scope.items === undefined) {
                    scope.items = [];
                }
                var newItemStr = scope.newItem.servicePort + ':'
                    + scope.newItem.providerPort + ':'
                    + scope.newItem.protocol;
                //Removes existing item with the same value first if it exists.
                _.pullAllWith(scope.items, [newItemStr], compare);
                scope.items.push(newItemStr);
                resetNewItem();
            };
            scope.remove = function (passedItem) {
                _.remove(scope.items, function (item) {
                    return compare(item, passedItem);
                });
            };
            resetNewItem();
        },
        templateUrl: 'service_lbs/servicelbports.html'
    };
});
//# sourceMappingURL=servicelbportsdirective.js.map
angular.module('contiv.settings')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.settings.details.cluster', {
            url: '/cluster',
            controller: 'ClusterSettingCtrl as clusterSettingCtrl',
            templateUrl: 'settings/clustersettings.html'
        });
    }])
    .controller('ClusterSettingCtrl', ['$stateParams', 'CRUDHelperService', 'NodesService',
    function ($stateParams, CRUDHelperService, NodesService) {
        var clusterSettingCtrl = this;
        function updateClusterSettings() {
            if (clusterSettingCtrl.form.$valid) {
                CRUDHelperService.hideServerError(clusterSettingCtrl);
                CRUDHelperService.startLoader(clusterSettingCtrl);
                clusterSettingCtrl.nodeOpsObj.nodes = [$stateParams.key];
                NodesService.cleanupExtraVars(clusterSettingCtrl);
                NodesService.createExtraVars(clusterSettingCtrl);
                NodesService.updateSettings(clusterSettingCtrl.nodeOpsObj).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(clusterSettingCtrl);
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(clusterSettingCtrl);
                    CRUDHelperService.showServerError(clusterSettingCtrl, result);
                });
            }
        }
        clusterSettingCtrl.nodeOpsObj = {};
        clusterSettingCtrl.extra_vars = {}; //TODO Intialize from global settings
        clusterSettingCtrl.ansibleVariables = [];
        clusterSettingCtrl.envVariables = [];
        NodesService.getSettings(clusterSettingCtrl);
        clusterSettingCtrl.updateClusterSettings = updateClusterSettings;
        CRUDHelperService.stopLoader(clusterSettingCtrl);
        CRUDHelperService.hideServerError(clusterSettingCtrl);
    }]);
//# sourceMappingURL=clustersettingctrl.js.map
angular.module('contiv.settings')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.settings.details.networks', {
            url: '/networks',
            controller: 'NetworkSettingCtrl as networkSettingCtrl',
            templateUrl: 'settings/networksettings.html'
        });
    }])
    .controller('NetworkSettingCtrl', ['CRUDHelperService', 'NetworkService',
    function (CRUDHelperService, NetworkService) {
        var networkSettingCtrl = this;
        networkSettingCtrl.vlanPattern = ContivGlobals.VLAN_REGEX;
        networkSettingCtrl.vxlanPattern = ContivGlobals.VXLAN_REGEX;
        function updateNetworkSettings() {
            if (networkSettingCtrl.form.$valid) {
                CRUDHelperService.hideServerError(networkSettingCtrl);
                CRUDHelperService.startLoader(networkSettingCtrl);
                NetworkService.updateSettings(networkSettingCtrl.setting).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(networkSettingCtrl);
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(networkSettingCtrl);
                    CRUDHelperService.showServerError(networkSettingCtrl, result.data);
                });
            }
        }
        function getNetworkSettings() {
            NetworkService.getSettings().then(function successCallback(result) {
                networkSettingCtrl.setting = result;
            }, function errorCallback(result) {
            });
        }
        getNetworkSettings();
        networkSettingCtrl.updateNetworkSettings = updateNetworkSettings;
        CRUDHelperService.stopLoader(networkSettingCtrl);
        CRUDHelperService.hideServerError(networkSettingCtrl);
    }]);
//# sourceMappingURL=networksettingctrl.js.map
angular.module('contiv.settings')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.settings.details.volumes', {
            url: '/volumes',
            controller: 'VolumeSettingCtrl as volumeSettingCtrl',
            templateUrl: 'settings/volumesettings.html'
        });
    }])
    .controller('VolumeSettingCtrl', ['CRUDHelperService', 'VolumeSettingService',
    function (CRUDHelperService, VolumeSettingService) {
        var volumeSettingCtrl = this;
        function updateVolumeSettings() {
            if (volumeSettingCtrl.form.$valid) {
                CRUDHelperService.hideServerError(volumeSettingCtrl);
                CRUDHelperService.startLoader(volumeSettingCtrl);
                VolumeSettingService.updateSettings(volumeSettingCtrl.setting).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(volumeSettingCtrl);
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(volumeSettingCtrl);
                    CRUDHelperService.showServerError(volumeSettingCtrl, result);
                });
            }
        }
        function getVolumeSettings() {
            VolumeSettingService.getSettings().then(function successCallback(result) {
                volumeSettingCtrl.setting = result;
            }, function errorCallback(result) {
            });
        }
        getVolumeSettings();
        volumeSettingCtrl.updateVolumeSettings = updateVolumeSettings;
        CRUDHelperService.stopLoader(volumeSettingCtrl);
        CRUDHelperService.hideServerError(volumeSettingCtrl);
    }]);
//# sourceMappingURL=volumesettingctrl.js.map
/**
 * Created by vjain3 on 6/1/16.
 */
angular.module('contiv.storagepolicies')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.storagepolicies.create', {
            url: '/create',
            templateUrl: 'storage_policies/storagepolicycreate.html',
            controller: 'StoragePolicyCreateCtrl as storagePolicyCreateCtrl'
        });
    }])
    .controller('StoragePolicyCreateCtrl', ['$state', '$stateParams', 'StoragePoliciesModel', 'CRUDHelperService',
    function ($state, $stateParams, StoragePoliciesModel, CRUDHelperService) {
        var storagePolicyCreateCtrl = this;
        function returnToStoragePolicies() {
            $state.go('contiv.menu.storagepolicies.list');
        }
        function cancelCreating() {
            returnToStoragePolicies();
        }
        function createFilesystemCmds() {
            storagePolicyCreateCtrl.filesystemcmds.forEach(function (item) {
                storagePolicyCreateCtrl.newStoragePolicy.filesystems[item.name] = item.value;
            });
        }
        function createPolicy() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (storagePolicyCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(storagePolicyCreateCtrl);
                CRUDHelperService.startLoader(storagePolicyCreateCtrl);
                createFilesystemCmds();
                StoragePoliciesModel.create(storagePolicyCreateCtrl.newStoragePolicy)
                    .then(function successCallback(result) {
                    CRUDHelperService.stopLoader(storagePolicyCreateCtrl);
                    returnToStoragePolicies();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(storagePolicyCreateCtrl);
                    CRUDHelperService.showServerError(storagePolicyCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(storagePolicyCreateCtrl);
            CRUDHelperService.hideServerError(storagePolicyCreateCtrl);
            storagePolicyCreateCtrl.newStoragePolicy = {
                "name": "",
                "backends": {
                    "crud": "ceph",
                    "mount": "ceph",
                    "snapshot": "ceph"
                },
                "unlocked": false,
                "driver": {
                    "pool": "rbd"
                },
                "create": {
                    "size": "0",
                    "filesystem": ""
                },
                "runtime": {
                    "snapshots": true,
                    "snapshot": {
                        "frequency": "30m",
                        "keep": 20
                    },
                    "rate-limit": {
                        "write-iops": 0,
                        "read-iops": 0,
                        "write-bps": 0,
                        "read-bps": 0
                    }
                },
                "filesystems": {}
            };
        }
        storagePolicyCreateCtrl.createPolicy = createPolicy;
        storagePolicyCreateCtrl.cancelCreating = cancelCreating;
        storagePolicyCreateCtrl.filesystemcmds = [];
        resetForm();
    }]);
//# sourceMappingURL=storagepolicycreatectrl.js.map
/**
 * Created by vjain3 on 5/27/16.
 */
angular.module('contiv.storagepolicies')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.storagepolicies.details', {
            url: '/details/:key',
            controller: 'StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl',
            templateUrl: 'storage_policies/storagepolicydetails.html'
        })
            .state('contiv.menu.storagepolicies.edit', {
            url: '/details/:key',
            controller: 'StoragePolicyDetailsCtrl as storagePolicyDetailsCtrl',
            templateUrl: 'storage_policies/storagepolicydetails.html'
        });
    }])
    .controller('StoragePolicyDetailsCtrl', ['$state', '$stateParams', '$scope', '$interval', '$filter', 'StoragePoliciesModel', 'VolumesModel', 'CRUDHelperService',
    function ($state, $stateParams, $scope, $interval, $filter, StoragePoliciesModel, VolumesModel, CRUDHelperService) {
        var storagePolicyDetailsCtrl = this;
        storagePolicyDetailsCtrl.filesystemcmds = [];
        /**
         * To show edit or details screen based on the route
         */
        function setMode() {
            if ($state.is('contiv.menu.storagepolicies.edit')) {
                storagePolicyDetailsCtrl.mode = 'edit';
            }
            else {
                storagePolicyDetailsCtrl.mode = 'details';
            }
        }
        function returnToPolicies() {
            $state.go('contiv.menu.storagepolicies.list');
        }
        function returnToPolicyDetails() {
            $state.go('contiv.menu.storagepolicies.details', { 'key': storagePolicyDetailsCtrl.policy.name });
        }
        function cancelEditing() {
            returnToPolicyDetails();
        }
        function deletePolicy() {
            CRUDHelperService.hideServerError(storagePolicyDetailsCtrl);
            CRUDHelperService.startLoader(storagePolicyDetailsCtrl);
            StoragePoliciesModel.deleteUsingKey(storagePolicyDetailsCtrl.policy.name, 'name').then(function successCallback(result) {
                CRUDHelperService.stopLoader(storagePolicyDetailsCtrl);
                returnToPolicies();
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(storagePolicyDetailsCtrl);
                CRUDHelperService.showServerError(storagePolicyDetailsCtrl, result);
            });
        }
        /**
         * Get volumes belonging to a policy
         */
        function getVolumes(reload) {
            VolumesModel.get(reload).then(function (result) {
                storagePolicyDetailsCtrl.volumes = $filter('orderBy')(_.filter(result, {
                    'policy': storagePolicyDetailsCtrl.policy.name
                }), 'name');
            });
        }
        function initializeFilesystemCmdsArray() {
            angular.forEach(storagePolicyDetailsCtrl.policy.filesystems, function (value, key) {
                this.push({ name: key, value: value });
            }, storagePolicyDetailsCtrl.filesystemcmds);
        }
        function createFilesystemCmds() {
            storagePolicyDetailsCtrl.filesystemcmds.forEach(function (item) {
                storagePolicyDetailsCtrl.policy.filesystems[item.name] = item.value;
            });
        }
        function savePolicy() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (storagePolicyDetailsCtrl.form.$valid) {
                CRUDHelperService.hideServerError(storagePolicyDetailsCtrl);
                CRUDHelperService.startLoader(storagePolicyDetailsCtrl);
                createFilesystemCmds();
                StoragePoliciesModel.save(storagePolicyDetailsCtrl.policy).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(storagePolicyDetailsCtrl);
                    returnToPolicyDetails();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(storagePolicyDetailsCtrl);
                    CRUDHelperService.showServerError(storagePolicyDetailsCtrl, result);
                });
            }
        }
        CRUDHelperService.stopLoader(storagePolicyDetailsCtrl);
        CRUDHelperService.hideServerError(storagePolicyDetailsCtrl);
        StoragePoliciesModel.getModelByKey($stateParams.key, false, 'name')
            .then(function (policy) {
            storagePolicyDetailsCtrl.policy = policy;
            initializeFilesystemCmdsArray();
            getVolumes(false);
        });
        storagePolicyDetailsCtrl.deletePolicy = deletePolicy;
        storagePolicyDetailsCtrl.savePolicy = savePolicy;
        storagePolicyDetailsCtrl.cancelEditing = cancelEditing;
        setMode();
        var promise;
        //Don't do autorefresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getVolumes(true);
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=storagepolicydetailsctrl.js.map
/**
 * Created by vjain3 on 6/2/16.
 */
angular.module("contiv.storagepolicies")
    .directive("ctvStoragepolicybasicsettings", function () {
    return {};
})
    .directive("ctvStoragepolicyfilesystemsettings", function () {
    return {
        restrict: 'E',
        scope: {
            policy: '=',
            filesystemcmds: '='
        },
        link: function (scope) {
            scope.filesystems = ['ext4', 'btrfs'];
        },
        templateUrl: 'storage_policies/filesystemsettings.html'
    };
})
    .directive("ctvStoragepolicysnapshotsettings", function () {
    return {
        restrict: 'E',
        scope: {
            policy: '='
        },
        templateUrl: 'storage_policies/snapshotsettings.html'
    };
})
    .directive("ctvStoragepolicyrwopssettings", function () {
    return {
        restrict: 'E',
        scope: {
            policy: '='
        },
        templateUrl: 'storage_policies/rwopssettings.html'
    };
})
    .directive("ctvStoragepolicybackenddrivers", function () {
    return {
        restrict: 'E',
        scope: {
            policy: '='
        },
        templateUrl: 'storage_policies/backenddrivers.html'
    };
});
//# sourceMappingURL=storagepolicydirective.js.map


angular.module('contiv.visualization')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.visualization.edge', {
                url: '/edge/{sourceName, targetName, sourceList, targetList}',
                params: {
                    sourceName: null,
                    targetName: null,
                    sourceList: null,
                    targetList: null
                },
                controller: 'VisualizationEdgeCtrl as visualizationedgeCtrl',
                templateUrl: 'visualization/visualizationedge.html'
            })
        ;
    }])
    .controller('VisualizationEdgeCtrl', ["$scope", "$http", '$state', '$stateParams', 'VisualizationService', '$interval',
        function($scope, $http, $state, $stateParams, VisualizationService, $interval) {
            var sourceName = $stateParams.sourceName;
            var targetName = $stateParams.targetName;
            var sourceList = $stateParams.sourceList;
            var targetList = $stateParams.targetList;

            //If the page is reloaded, these state params are all null,
            //so it will route them back to the visualization tab top view
            if (sourceList == null || targetList == null) {
                $state.go('contiv.menu.visualization.list');
                return;
            }

            var d = new Date();
            var t = d.getSeconds();
            $scope.edgeDataInterval = 
                $interval(function() {
                    VisualizationService.getEdgeData(sourceList, targetList, t.toString())
                        .then(function successCallback(result) {
                            var results = result.results;
                            var data = 0;
                            _.forEach(results, function(r) {
                                if (_.isEmpty(r) === false) {
                                    data += r.series[0].values[0][1];
                                }
                            });
                            $scope.sourceName = sourceName;
                            $scope.targetName = targetName;
                            $scope.edgeData = data;
                            $scope.edgeDataTime = t;
                        }, function errorCallback(result) {
                        });
                    }, 3000);

            //Destroying the interval function on route change
            $scope.$on('$destroy', function () { $interval.cancel($scope.edgeDataInterval); });


            VisualizationService.getOldEdgeData(sourceList, targetList)
                .then(function successCallback(result) {
                    var results = result.results;
                    var edgeData = [];
                    //results, if not empty, are expected to have
                    //6 data entries
                    _.forEach(results, function(r) {
                        if (_.isEmpty(r) === false) {
                            var data = r.series[0].values;
                            if (_.isEmpty(edgeData)) {
                                _.forEach(data, function(d) {
                                    edgeData.push(d[1]);
                                })
                            } else {
                                _.forEach(data, function(d, i) {
                                    edgeData[i] += d[1];
                                })
                            }
                        }
                    });

                    $scope.sourceName = sourceName;
                    $scope.targetName = targetName;
                    $scope.sourceList = sourceList;
                    $scope.targetList = targetList;
                    $scope.oldEdgeData = edgeData;
                }, function errorCallback(result) {
                });
    }]);







angular.module('contiv.visualization')
    .directive("visualizationEdge", ['$window',
        function($window) {
            function visualizationEdgeD3(scope, d3) {
                var bodyEl = document.getElementsByTagName('body')[0];
              
                var width = bodyEl.clientWidth - 400,
                    height =  bodyEl.clientHeight - 400;


                //taken from http://bl.ocks.org/simenbrekken/6634070
                // /** MAIN SVG **/
                var limit = 59,
                duration = 750,
                now = new Date(Date.now() - duration);

                var groups = {
                    current: {
                        value: 0,
                        color: 'orange',
                        data: d3.range(limit).map(function(d) {
                            return scope.oldEdgeData[Math.floor(d/10)] || 0;
                        })
                    }
                };
                var x = d3.time.scale()
                    .domain([now - (limit - 2), now - duration])
                    .range([0, width]);

                var y = d3.scale.linear()
                    .domain([0, d3.max(groups.current.data, function (d) { return d + 10; })])
                    .range([height, 0]);

                var line = d3.svg.line()
                    .interpolate('basis')
                    .x(function(d, i) {
                        return x(now - (limit - 1 - i) * duration)
                    })
                    .y(function(d) {
                        return y(d)
                    });

                var xSvg = d3.select('.graph').append('svg')
                    .attr('width', 25)
                    .style('overflow', 'visible')
                    .style('position', 'fixed');

                

                var yAxis = xSvg.append('g')
                    .attr('class', 'y axis')
                    // .attr('transform', 'translate(0,' + width + ')')
                    .call(y.axis = d3.svg.axis().scale(y).orient('left'));
                
                var svg= d3.select('.graph').append('svg')
                    .attr('class', 'chart')
                    .attr('width', width - 50)
                    .attr('height', height + 50);
                    // .style('overflow', "visible");

                var axis = svg.append('g')
                    .attr('class', 'x axis')
                    .attr('transform', 'translate(0,' + height + ')')
                    .call(x.axis = d3.svg.axis().scale(x).orient('bottom'));

                var paths = svg.append('g');

                for (var name in groups) {
                    var group = groups[name];
                    group.path = paths.append('path')
                        .data([group.data])
                        .attr('class', name + ' group')
                        .style('stroke', group.color)
                }

                function tick() {
                    now = new Date();

                    // Add new values
                    for (var name in groups) {
                        var group = groups[name];
                        group.data.push(scope.edgeData || 0);
                        group.path.attr('d', line)
                    }

                    // Shift domain
                    x.domain([now - (limit - 2) * duration, now - duration]);

                    // Slide x-axis left
                    axis.transition()
                        .duration(duration)
                        .ease('linear')
                        .call(x.axis);

                    yAxis.transition()
                        .duration(duration)
                        .ease('linear')
                        .call(y.axis);

                    // Slide paths left
                    paths.attr('transform', null)
                        .transition()
                        .duration(duration)
                        .ease('linear')
                        .attr('transform', 'translate(' + x(now - (limit - 1) * duration) + ')')
                        .each('end', function() {
                            tick()
                        });

                    // Remove oldest data point from each group
                    for (var name in groups) {
                        var group = groups[name];
                        group.data.shift()
                    }
                }
                tick()
            }

            return{
                restrict:'EA',
                replace: false,
                templateUrl: 'visualization/visualizationedgetemplate.html',
                link: function(scope){
                    scope.$watchGroup(['edgeData', 'oldEdgeData'],
                        function() {
                            if (scope.edgeData != null &&
                                    scope.oldEdgeData != null ) {
                                if (!scope.initialize) {
                                    scope.initialize = true;
                                    var d3 = $window.d3;  
                                    visualizationEdgeD3(scope, d3);
                                }
                            } 
                        });
               }
           };
        }
    ]
);


angular.module('contiv.visualization')
    .service('StateSave', function () {
        this.savedStates = {};
    })
    .directive("visualizationGraph", ['$window', '$state', 'VisualizerGraph', 'PolicyService', 'VisualizerDataSource', 'StateSave',
        function($window, $state, VisualizerGraph, PolicyService, VisualizerDataSource, StateSave) {
            function visualizationlistd3(scope, elem, VisualizerGraph, PolicyService, VisualizerDataSource, StateSave) {
                //don't run until all initialization calls have returned
                if (scope.nodes === undefined || scope.links === undefined || scope.children_struct === undefined ||
                    scope.ancestors_struct === undefined) {
                    return;
                }

                //creating DataSource
                var dataSource = new VisualizerDataSource.DataSource(scope.nodes, scope.links, scope.children_struct, 
                                    scope.ancestors_struct, scope.labels, scope.serviceSelectors);
                dataSource.setAncestors();

                var nodes, links;

                var topData = dataSource.getTopLevelFlow();
                nodes = dataSource.processNodeData(topData.nodeData);
                links = dataSource.processLinkData(topData.linkData, nodes);

                var bodyEl = document.getElementsByTagName('body')[0];
              
                var width = bodyEl.clientWidth,
                    height =  bodyEl.clientHeight;

                /** MAIN SVG **/
                var rawSvg=elem.find('svg');

                var offset = $(rawSvg.parent()).offset();

                var divWidth = $(rawSvg.parent()).width();

                var svg = d3.select(rawSvg[0])
                    .attr("width", divWidth)
                    .attr("height", height - offset.top - 20);

                //installing policies
                scope.visualizationGraph = new VisualizerGraph.Graph(svg, nodes, links, dataSource, 
                            scope.children_struct, scope.ancestors_struct);
                scope.visualizationGraph.installDefaultPathPolicy(new PolicyService.SaveStatePolicy(StateSave.savedStates));
                scope.visualizationGraph.installDefaultPathPolicy(new PolicyService.PathChangeViewPolicy($state));
                //QTipPolicy is for both Nodes and Paths, install same one on both
                var qTipPolicy = new PolicyService.QTipPolicy();
                scope.visualizationGraph.installDefaultNodePolicy(qTipPolicy);
                scope.visualizationGraph.installDefaultPathPolicy(qTipPolicy);
                var splitJoinViewPolicy = new PolicyService.SplitJoinViewPolicy();
                scope.visualizationGraph.installDefaultNodePolicy(splitJoinViewPolicy);
                splitJoinViewPolicy.installBackButton($('#backButton'));
                splitJoinViewPolicy.installTitle($('#graph-title'));

                //load old view if it exists.
                if (_.isEmpty(StateSave.savedStates) == false) {
                    var graph = scope.visualizationGraph;
                    graph.load(StateSave.savedStates);
                } else {
                    scope.visualizationGraph.updateGraph();
                }
            }

            return{
                restrict:'EA',
                replace: false,
                templateUrl: 'visualization/visualizationtemplate.html',
                link: function(scope, elem){
                    scope.$on('$destroy', function () { 
                        $('#visualization-graph').unbind();
                        scope.visualizationGraph.destroy();});
                    scope.$watchGroup(['nodes', 'links', 'children_struct', 'ancestors_struct'],
                            function() {
                        if (scope.nodes != null &&
                                scope.links != null &&
                                scope.children_struct != null &&
                                scope.ancestors_struct != null) {
                            if (!scope.initialized) {
                                scope.initialized = true;
                                visualizationlistd3(scope, elem, VisualizerGraph, PolicyService, VisualizerDataSource, StateSave);
                            } else {
                                scope.visualizationGraph.dataSource.links = scope.links;
                                scope.visualizationGraph.updateLinkData();
                            }
                        }
                    });
               }
           };
        }
    ]
);













angular.module('contiv.visualization')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.visualization.list', {
                url: '/list',
                controller: 'VisualizationListCtrl as visualizationListCtrl',
                templateUrl: 'visualization/visualizationlist.html'
            })
        ;
    }])
    .controller('VisualizationListCtrl', ["$scope", "$http", 'VisualizationService', '$interval', 
        function($scope, $http, VisualizationService, $interval) {
            //to see the expected format to be returned from these calls,
            //look at app/components/graphobjects/datasource/visualizerdatasource.js
            var successGraphDataCallback = function(result) {
                var nodes = [];
                var links = [];
                var nodeIds = [];
                _.forEach(result.results[0].series, function(series) {
                    var endpoint = series.tags.EndpointIP;
                    var provider = series.tags.ProviderIP;
                    var node;
                    //creating nodes
                    if (_.includes(nodeIds, endpoint) == false) {
                        node = {
                            name: endpoint,
                            id: endpoint,
                            parent: null,
                            ancestors: null
                        };
                        nodes.push(node);
                        nodeIds.push(endpoint);
                    }
                    if (_.includes(nodeIds, provider) == false) {
                        node = {
                            name: provider,
                            id: provider,
                            parent: null,
                            ancestors: null
                        };
                        nodes.push(node);
                        nodeIds.push(provider);
                    }
                    //creating links
                    var linkOut = {
                        source: endpoint,
                        target: provider,
                        weight: series.values[0][2]
                    };
                    links.push(linkOut);
                    var linkIn = {
                        source: provider,
                        target: endpoint,
                        weight: series.values[0][1]
                    };
                    links.push(linkIn);
                });
                $scope.nodes = nodes;
                $scope.links = links;
            };
            //initial call
            VisualizationService.getGraphData().then(successGraphDataCallback, function errorCallback(result) {
                //will fail silently, graph won't be displayed
            });

            $scope.$on('$destroy', function () { $interval.cancel($scope.graphDataInterval); });

            VisualizationService.getStructureData().then(function successCallback(result) {
                //to see the expected form of ancestor_struct and children_struct, 
                //look at app/components/graphobjects/datasource/visualizerdatasource.js
                $scope.ancestors_struct = result.ancestors_struct;
                $scope.children_struct = result.children_struct;
                $scope.labels = result.labels;
                $scope.serviceSelectors = result.serviceSelectors;
            }, function errorCallback(result) {
                //will fail silently, graph won't be displayed
            });
    }]);












angular.module('contiv.visualization')
    .factory('VisualizationService', ['$http', '$q', function ($http, $q) {
        /**
         * Makes a get request with the url and config.
         *
         * @param      {string}  url     The url
         * @param      {Object}  config  The configurations
         * @return     {$Http Promise}   Promise of the request
         */
        function makeGet(url, config) {
            var deferred = $q.defer();
            $http.get(url, config).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }

        /**
         * Makes a post request with the url and data
         *
         * @param      {string}  url     The url
         * @param      {JSON}    data    The data
         * @return     {$Http Promise}   Promise of the request
         */
        function makePost(url, data) {
            /**
             * converts the data into x-www-from-urlencoded
             *
             * @param      {JSON}  obj     JSON data object
             * @return     {string}  x-www-form-urlencoded string
             */
            var param = function(obj) {
                var query = '', name, value, fullSubName, subName, subValue, innerObj, i;
                for (name in obj) {
                  value = obj[name];

                    if (value instanceof Array) {
                        for (i=0; i<value.length; ++i) {
                            subValue = value[i];
                            fullSubName = name + '[' + i + ']';
                            innerObj = {};
                            innerObj[fullSubName] = subValue;
                            query += param(innerObj) + '&';
                        }
                    } else if (value instanceof Object) {
                        for (subName in value) {
                            subValue = value[subName];
                            fullSubName = name + '[' + subName + ']';
                            innerObj = {};
                            innerObj[fullSubName] = subValue;
                            query += param(innerObj) + '&';
                        }
                    } else if(value !== undefined && value !== null) {
                        query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
                   }
                }

                return query.length ? query.substr(0, query.length - 1) : query;
            };

            var deferred = $q.defer();
            $http({
                url:url,
                method:'POST',
                data: data,
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded'
                },
                transformRequest: [function(data) {
                    return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
                  }]
            })
            .then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }

        function getGraphData() {
            var url = ContivGlobals.VISUALIZATION_ENDPOINT;
            url += 'influx/query';
            var config = {
                params: {
                    db:"telegraf",
                    q:"SELECT BytesIn, BytesOut, EndpointIP, ProviderIP FROM httpjson_svcstats WHERE time > now() - 1m GROUP BY * LIMIT 1"
                }
            };
            return makeGet(url, config);
        }

        function getStructureData() {
            var url = ContivGlobals.VISUALIZATION_ENDPOINT;
            url += 'services';
            return makeGet(url);
        }

        function buildWhereQuery(points, type) {
            var query = "(";
            query += type + "=";
            query += "'" + points[0] + "' ";
            //starts at 1, so will not run if length is 1
            for (var i = 1; i < points.length; i++) {
                query += 'OR ';
                query += type + "=";
                query += "'" + points[i] + "' ";
            }
            query += ")";
            return query;
        }

        function getEdgeData(sourceList, targetList, time) {
            var url = ContivGlobals.VISUALIZATION_ENDPOINT;
            url += 'influx/query';

            var data = {
                    db : "telegraf",
                    q: "SELECT sum(" + 'BytesOut' + ") from httpjson_svcstats WHERE time > now() - 15s AND "
                         + buildWhereQuery(sourceList, "EndpointIP") +" AND " 
                         + buildWhereQuery(targetList, 'ProviderIP') 
                         + "GROUP BY time(20s) LIMIT 1; SELECT sum(" + 'BytesIn' + ") from httpjson_svcstats WHERE time > now() - 15s AND "
                         + buildWhereQuery(sourceList, 'ProviderIP') +" AND " 
                         + buildWhereQuery(targetList, 'EndpointIP') 
                         + "GROUP BY time(20s) fill(0) LIMIT 1"
                     };
            return makePost(url, data);
        }

        

        function getOldEdgeData(sourceList, targetList) {
            var url = ContivGlobals.VISUALIZATION_ENDPOINT;
            url += 'influx/query';
            var data = {
                    db : "telegraf",
                    q: "SELECT sum(" + 'BytesOut' + ") FROM httpjson_svcstats WHERE time > now() - 1m AND "
                         + buildWhereQuery(sourceList, "EndpointIP") +" AND " 
                         + buildWhereQuery(targetList, "ProviderIP") 
                         + " GROUP BY time(10s) fill(0) LIMIT 6; SELECT sum(" + 'BytesIn' + ") FROM httpjson_svcstats WHERE time > now() - 1m AND "
                         + buildWhereQuery(sourceList, "ProviderIP") +" AND " 
                         + buildWhereQuery(targetList, "EndpointIP") 
                         + " GROUP BY time(10s) fill(0) LIMIT 6"
                     };
            return makePost(url, data);
        }

        return {
            getGraphData: getGraphData,
            getStructureData: getStructureData,
            getEdgeData: getEdgeData,
            getOldEdgeData: getOldEdgeData
        }
    }]);







/**
 * Created by vjain3 on 6/3/16.
 */
angular.module('contiv.volumes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.volumes.create', {
            url: '/create',
            templateUrl: 'volumes/volumecreate.html',
            controller: 'VolumeCreateCtrl as volumeCreateCtrl'
        });
    }])
    .controller('VolumeCreateCtrl', ['$state', '$stateParams', 'VolumesModel', 'StoragePoliciesModel', 'CRUDHelperService',
    function ($state, $stateParams, VolumesModel, StoragePoliciesModel, CRUDHelperService) {
        var volumeCreateCtrl = this;
        volumeCreateCtrl.filesystems = ['ext4', 'btrfs'];
        function returnToVolumesModel() {
            $state.go('contiv.menu.volumes.list');
        }
        function cancelCreating() {
            returnToVolumesModel();
        }
        /**
         * Get storage policies.
         */
        function getStoragePolicies() {
            StoragePoliciesModel.get().then(function (result) {
                volumeCreateCtrl.policies = result;
            });
        }
        function applyPolicySettings() {
            volumeCreateCtrl.newVolume.policy = volumeCreateCtrl.selectedPolicy.name;
            volumeCreateCtrl.newVolume.backends = volumeCreateCtrl.selectedPolicy.backends;
            volumeCreateCtrl.newVolume.driver = volumeCreateCtrl.selectedPolicy.driver;
            volumeCreateCtrl.newVolume.create = volumeCreateCtrl.selectedPolicy.create;
            volumeCreateCtrl.newVolume.runtime = volumeCreateCtrl.selectedPolicy.runtime;
        }
        function createVolume() {
            //form controller is injected by the html template
            //checking if all validations have passed
            if (volumeCreateCtrl.form.$valid) {
                CRUDHelperService.hideServerError(volumeCreateCtrl);
                CRUDHelperService.startLoader(volumeCreateCtrl);
                applyPolicySettings();
                VolumesModel.create(volumeCreateCtrl.newVolume).then(function successCallback(result) {
                    CRUDHelperService.stopLoader(volumeCreateCtrl);
                    returnToVolumesModel();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(volumeCreateCtrl);
                    CRUDHelperService.showServerError(volumeCreateCtrl, result);
                });
            }
        }
        function resetForm() {
            CRUDHelperService.stopLoader(volumeCreateCtrl);
            CRUDHelperService.hideServerError(volumeCreateCtrl);
            volumeCreateCtrl.newVolume = {
                "name": "",
                "backends": {},
                "driver": {},
                "create": {},
                "runtime": {}
            };
        }
        volumeCreateCtrl.createVolume = createVolume;
        volumeCreateCtrl.cancelCreating = cancelCreating;
        getStoragePolicies();
        resetForm();
    }]);
//# sourceMappingURL=volumecreatectrl.js.map
/**
 * Created by vjain3 on 4/15/16.
 */
angular.module('contiv.volumes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.volumes.details', {
            url: '/details/:key',
            controller: 'VolumeDetailsCtrl as volumeDetailsCtrl',
            templateUrl: 'volumes/volumedetails.html'
        });
    }])
    .controller('VolumeDetailsCtrl', ['$state', '$stateParams', '$scope', '$interval', '$http', 'VolumesModel', 'VolumeService', 'CRUDHelperService',
    function ($state, $stateParams, $scope, $interval, $http, VolumesModel, VolumeService, CRUDHelperService) {
        var volumeDetailsCtrl = this;
        function returnToVolumes() {
            $state.go('contiv.menu.volumes.list');
        }
        function deleteVolume() {
            CRUDHelperService.hideServerError(volumeDetailsCtrl);
            CRUDHelperService.startLoader(volumeDetailsCtrl);
            VolumesModel.delete(volumeDetailsCtrl.volume).then(function (result) {
                CRUDHelperService.stopLoader(volumeDetailsCtrl);
                returnToVolumes();
            });
        }
        function getVolumeInfo(reload) {
            var tokens = $stateParams.key.split('/');
            var model = {};
            model.policy = tokens[0];
            model.name = tokens[1];
            VolumesModel.getModel(model, reload)
                .then(function (volume) {
                volumeDetailsCtrl.volume = volume;
                getVolumeUseInfo();
                getVolumeSnapshots();
            });
        }
        function getVolumeUseInfo() {
            VolumeService.getVolumeUseInfo(volumeDetailsCtrl.volume).then(function successCallback(result) {
                volumeDetailsCtrl.volumeUse = result;
            }, function errorCallback(result) {
                //Returns error if volume is not mounted by any container
            });
        }
        function getVolumeSnapshots() {
            VolumeService.getVolumeSnapshots(volumeDetailsCtrl.volume).then(function successCallback(result) {
                volumeDetailsCtrl.snapshots = result;
            }, function errorCallback(result) {
            });
        }
        function triggerVolumeSnapshot() {
            volumeDetailsCtrl.snapshotSuccess = false;
            CRUDHelperService.hideServerError(volumeDetailsCtrl);
            CRUDHelperService.startLoader(volumeDetailsCtrl);
            VolumeService.triggerSnapshot(volumeDetailsCtrl.volume).then(function successCallback(result) {
                CRUDHelperService.stopLoader(volumeDetailsCtrl);
                volumeDetailsCtrl.snapshotSuccess = true;
            }, function errorCallback(result) {
                CRUDHelperService.stopLoader(volumeDetailsCtrl);
                CRUDHelperService.showServerError(volumeDetailsCtrl, result);
            });
        }
        volumeDetailsCtrl.deleteVolume = deleteVolume;
        volumeDetailsCtrl.triggerVolumeSnapshot = triggerVolumeSnapshot;
        //Load from cache for quick display initially
        getVolumeInfo(false);
        var promise;
        //Don't do auto-refresh if one is already in progress
        if (!angular.isDefined(promise)) {
            promise = $interval(function () {
                getVolumeInfo(true);
            }, ContivGlobals.REFRESH_INTERVAL);
        }
        //stop polling when user moves away from the page
        $scope.$on('$destroy', function () {
            $interval.cancel(promise);
        });
    }]);
//# sourceMappingURL=volumedetailsctrl.js.map
/**
 * Created by vjain3 on 6/5/16.
 */
angular.module('contiv.volumes')
    .factory('VolumeService', ['$http', '$q', function ($http, $q) {
        function getVolumeUseInfo(volume) {
            var deferred = $q.defer();
            var url = ContivGlobals.VOLUMES_USES_ENDPOINT
                + volume.policy
                + '/' + volume.name;
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                //Returns error if volume is not mounted by any container
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        function getVolumeSnapshots(volume) {
            var deferred = $q.defer();
            var url = ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT
                + volume.policy
                + '/' + volume.name;
            $http.get(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        function triggerSnapshot(volume) {
            var deferred = $q.defer();
            var url = ContivGlobals.VOLUMES_SNAPSHOTS_ENDPOINT + "take/"
                + volume.policy
                + '/' + volume.name;
            $http.post(url).then(function successCallback(result) {
                deferred.resolve(result.data);
            }, function errorCallback(result) {
                deferred.reject(result.data);
            });
            return deferred.promise;
        }
        return {
            getVolumeUseInfo: getVolumeUseInfo,
            getVolumeSnapshots: getVolumeSnapshots,
            triggerSnapshot: triggerSnapshot
        };
    }]);
//# sourceMappingURL=volumeservice.js.map
/**
 * Created by cshampur on 8/9/16.
 */
angular.module('contiv.volumes')
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('contiv.menu.volumes.copy', {
            url: '/copy/',
            params: { snapshot: null, policy: null, volume: null },
            controller: 'VolumeSnapshotCopyCtrl as volumeSnapshotCopyCtrl',
            templateUrl: 'volumes/volumesnapshotcopy.html'
        });
    }])
    .controller('VolumeSnapshotCopyCtrl', ['$state', '$stateParams', '$scope', '$interval', '$http', 'VolumesModel', 'CRUDHelperService',
    function ($state, $stateParams, $scope, $interval, $http, VolumesModel, CRUDHelperService) {
        var volumeSnapshotCopyCtrl = this;
        function cancelCopy() {
            $state.go('contiv.menu.volumes.details', { key: $stateParams.policy + '/' + $stateParams.volume });
        }
        function goToNewVolume() {
            $state.go('contiv.menu.volumes.details', { key: $stateParams.policy + '/' + volumeSnapshotCopyCtrl.newvolume });
        }
        function copySnapshot() {
            if (volumeSnapshotCopyCtrl.form.$valid) {
                CRUDHelperService.hideServerError(volumeSnapshotCopyCtrl);
                CRUDHelperService.startLoader(volumeSnapshotCopyCtrl);
                var model = {};
                model.policy = $stateParams.policy;
                model.name = $stateParams.volume;
                VolumesModel.copy(model, $stateParams.snapshot, volumeSnapshotCopyCtrl.newvolume)
                    .then(function successCallback(result) {
                    CRUDHelperService.stopLoader(volumeSnapshotCopyCtrl);
                    goToNewVolume();
                }, function errorCallback(result) {
                    CRUDHelperService.stopLoader(volumeSnapshotCopyCtrl);
                    CRUDHelperService.showServerError(volumeSnapshotCopyCtrl, result);
                });
            }
        }
        volumeSnapshotCopyCtrl.policy = $stateParams.policy;
        volumeSnapshotCopyCtrl.volume = $stateParams.volume;
        volumeSnapshotCopyCtrl.snapshot = $stateParams.snapshot;
        volumeSnapshotCopyCtrl.copySnapshot = copySnapshot;
        volumeSnapshotCopyCtrl.cancelCopy = cancelCopy;
    }]);
//# sourceMappingURL=volumesnapshotcopyctrl.js.map
/**
 * Created by vjain3 on 6/2/16.
 */
angular.module("contiv.directives")
    .directive("ctvCollapsible", function () {
    return {
        restrict: 'E',
        scope: {
            title: '@',
            collapsed: '@'
        },
        transclude: true,
        link: function (scope) {
            if (scope.collapsed === undefined)
                scope.collapsed = true;
        },
        templateUrl: 'components/directives/collapsible.html'
    };
});
//# sourceMappingURL=collapsibledirective.js.map
/**
 * Created by vjain3 on 5/11/16.
 */
angular.module("contiv.directives")
    .directive("ctvNamevalue", function () {
    return {
        restrict: 'E',
        scope: {
            items: '=',
            nameheader: '@',
            valueheader: '@',
            type: '@',
            options: '=' //To be used when type is 'select'
        },
        link: function (scope) {
            /**
             * Compare if two items have same name
             * @param val1
             * @param val2
             * @returns {boolean}
             */
            function compare(val1, val2) {
                return val1.name == val2.name;
            }
            function resetNewItem() {
                scope.newItem = {
                    name: '',
                    value: ''
                };
            }
            function isEmptyItem(item) {
                return (item.name === '' && item.value === '');
            }
            scope.add = function () {
                if (isEmptyItem(scope.newItem))
                    return;
                if (scope.item === undefined) {
                    scope.item = [];
                }
                //Removes existing item with the same name first if it exists.
                _.pullAllWith(scope.items, [scope.newItem], compare);
                scope.items.push(scope.newItem);
                resetNewItem();
            };
            scope.remove = function (passedItem) {
                _.remove(scope.items, function (item) {
                    return item.name == passedItem.name;
                });
            };
            resetNewItem();
            if (scope.nameheader === undefined)
                scope.nameheader = 'Name';
            if (scope.valueheader === undefined)
                scope.valueheader = 'Value';
            if (scope.type === undefined)
                scope.type = 'text';
        },
        templateUrl: 'components/directives/namevalue.html'
    };
});
//# sourceMappingURL=namevaluedirective.js.map
angular.module("contiv.directives")
    .directive("ctvAcivalid", function () {
        return {
            restrict: 'E',
            templateUrl: 'components/directives/nodes/acivalid.html',
            scope: {
                form: "="
            }
        };
    });
angular.module("contiv.directives")
    .directive("ctvControlinterface", function () {
        return {
            restrict: 'E',
            templateUrl: 'components/directives/nodes/controlinterface.html',
            scope: {
                extravars: "="
            }
        };
    });
angular.module("contiv.directives")
    .directive("ctvNetworkmode", function () {
        return {
            restrict: 'E',
            templateUrl: 'components/directives/nodes/networkmode.html',
            scope: {
                extravars: "="
            }
        };
    });
angular.module("contiv.directives")
    .directive("ctvScheduler", function () {
        return {
            restrict: 'E',
            templateUrl: 'components/directives/nodes/scheduler.html',
            scope: {
                extravars: "="
            }
        };
    });
<<<<<<< f82eb548d8608d2f69b7337ad3ed28644a3fbd0e
<<<<<<< cd3977d9f9009e2cdbfd5b833ada19d6ed1fee40
//# sourceMappingURL=data:application/json;base64,
>>>>>>> converting volumelist, servicelist ctrl to ang2
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> adding storage policy list - angular 2
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> organizationlist to angular 2
