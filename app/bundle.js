function BaseCollection(e,t,o){this.models=[],this.$http=e,this.$q=t,this.url=o}function Collection(e,t,o){BaseCollection.call(this,e,t,o)}function NodesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.NODES_LIST_ENDPOINT)}function StoragePoliciesCollection(e,t){function o(e){return e.data}function n(e){return i=o(e)}var i,r=this;r.get=function(o){return void 0===o&&(o=!1),!o&&i?t.when(i):e.get(ContivGlobals.STORAGEPOLICIES_ENDPOINT).then(n)},r.getModelByKey=function(e,o){function n(){return _.find(i,function(t){return t.name==e.name})}void 0===o&&(o=!1);var l=t.defer();return!o&&i?l.resolve(n()):r.get().then(function(){l.resolve(n())}),l.promise}}function VolumesCollection(e,t){BaseCollection.call(this,e,t,ContivGlobals.VOLUMES_ENDPOINT)}angular.module("contiv.directives",[]),angular.module("contiv.models",[]);var ContivGlobals=function(){var e="",t="",o="";return{NETWORKS_ENDPOINT:e+"/api/networks/",POLICIES_ENDPOINT:e+"/api/policys/",RULES_ENDPOINT:e+"/api/rules/",APPLICATIONGROUPS_ENDPOINT:e+"/api/endpointGroups/",SERVICELBS_ENDPOINT:e+"/api/serviceLBs/",VOLUMES_ENDPOINT:o+"/list",VOLUMES_DELETE_ENDPOINT:o+"/remove/",STORAGEPOLICIES_ENDPOINT:o+"/policy",NODES_LIST_ENDPOINT:t+"/info/nodes",NODES_DISCOVER_ENDPOINT:t+"/discover/nodes",NODES_COMMISSION_ENDPOINT:t+"/commission/nodes",NODES_DECOMMISSION_ENDPOINT:t+"/decommission/nodes",NODES_MAINTENANCE_ENDPOINT:t+"/maintenance/nodes",REFRESH_INTERVAL:5e3,CIDR_REGEX:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$"}}();angular.module("contiv.utils",[]),angular.module("contiv.applicationgroups",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups",{url:"/applicationgroups","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.dashboard",["contiv.models"]),angular.module("contiv.login",["contiv.utils"]),angular.module("contiv.networks",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.networks",{url:"/networks","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.menu",[]),angular.module("contiv.nodes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.nodes",{url:"/nodes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.networkpolicies",["contiv.models","contiv.directives","contiv.utils"]),angular.module("contiv.servicelbs",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs",{url:"/servicelbs","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.storagepolicies",["contiv.models"]).config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies",{url:"/storagepolicies","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contiv.volumes",["contiv.models","contiv.directives","contiv.utils"]).config(["$stateProvider",function(e){e.state("contiv.menu.volumes",{url:"/volumes","abstract":!0,template:'<div ui-view class="ui container"/>'})}]),angular.module("contivApp",["ui.router","contiv.login","contiv.menu","contiv.dashboard","contiv.applicationgroups","contiv.networks","contiv.networkpolicies","contiv.storagepolicies","contiv.servicelbs","contiv.volumes","contiv.nodes"]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("contiv",{url:"","abstract":!0,template:'<div ui-view class="ui fluid container"/>'}),t.otherwise("/")}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.create",{url:"/create",controller:"ApplicationGroupCreateCtrl as applicationGroupCreateCtrl",templateUrl:"applicationgroups/applicationgroupcreate.html"})}]).controller("ApplicationGroupCreateCtrl",["$state","ApplicationGroupsModel","NetworksModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.applicationgroups.list")}function a(){c()}function s(){o.get().then(function(e){f.networks=_.filter(e,{tenantName:"default"})})}function u(){n.get().then(function(e){f.isolationPolicies=_.filter(e,{tenantName:"default"})})}function d(){r.addIsolationPolicy(f)}function p(e){r.removeIsolationPolicy(f,e)}function v(){f.form.$valid&&(l.hideServerError(f),l.startLoader(f),f.applicationGroup.networkName=f.selectedNetwork.networkName,f.applicationGroup.key=t.generateKey(f.applicationGroup),t.create(f.applicationGroup).then(function(e){l.stopLoader(f),c()},function(e){l.stopLoader(f),l.showServerError(f,e)}))}function m(){l.stopLoader(f),l.hideServerError(f),f.applicationGroup={groupName:"",networkName:"",policies:[],tenantName:"default"}}var f=this;f.networks=[],f.isolationPolicies=[],f.applicationGroup={},f.selectedNetwork={},f.selectedPolicy={},f.selectedPolicies=[],f.incomingRules=[],f.outgoingRules=[],f.isolationPoliciesVisible=!1,s(),u(),f.createApplicationGroup=v,f.cancelCreating=a,f.addIsolationPolicy=d,f.removeIsolationPolicy=p,m()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.details",{url:"/details/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"}).state("contiv.menu.applicationgroups.edit",{url:"/edit/:key",controller:"ApplicationGroupDetailsCtrl as applicationGroupDetailsCtrl",templateUrl:"applicationgroups/applicationgroupdetails.html"})}]).controller("ApplicationGroupDetailsCtrl",["$state","$stateParams","ApplicationGroupsModel","PoliciesModel","RulesModel","ApplicationGroupService","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.is("contiv.menu.applicationgroups.edit")?h.mode="edit":h.mode="details"}function a(){e.go("contiv.menu.applicationgroups.list")}function s(){e.go("contiv.menu.applicationgroups.details",{key:h.applicationGroup.key})}function u(){s()}function d(){h.applicationGroup.policies.forEach(function(e){i.getIncomingRules(e,"default").then(function(e){Array.prototype.push.apply(h.incomingRules,e)}),i.getOutgoingRules(e,"default").then(function(e){Array.prototype.push.apply(h.outgoingRules,e)})})}function p(){l.hideServerError(h),l.startLoader(h),o["delete"](h.applicationGroup).then(function(e){l.stopLoader(h),a()},function(e){l.stopLoader(h),l.showServerError(h,e)})}function v(){n.get().then(function(e){h.isolationPolicies=_.filter(e,{tenantName:"default"})})}function m(){r.addIsolationPolicy(h)}function f(e){r.removeIsolationPolicy(h,e)}function g(){l.hideServerError(h),l.startLoader(h),o.save(h.applicationGroup).then(function(e){l.stopLoader(h),s()},function(e){l.stopLoader(h),l.showServerError(h,e)})}var h=this;h.isolationPolicies=[],h.applicationGroup={},h.selectedNetwork={},h.selectedPolicy={},h.selectedPolicies=[],h.incomingRules=[],h.outgoingRules=[],h.isolationPoliciesVisible=!1,l.stopLoader(h),l.hideServerError(h),o.getModelByKey(t.key).then(function(e){h.applicationGroup=e,void 0===h.applicationGroup.policies&&(h.applicationGroup.policies=[]),d()}),v(),h.saveApplicationGroup=g,h.cancelEditing=u,h.addIsolationPolicy=m,h.removeIsolationPolicy=f,h.deleteApplicationGroup=p,c()}]),angular.module("contiv.applicationgroups").config(["$stateProvider",function(e){e.state("contiv.menu.applicationgroups.list",{url:"/list",controller:"ApplicationGroupListCtrl as applicationGroupListCtrl",templateUrl:"applicationgroups/applicationgrouplist.html"})}]).controller("ApplicationGroupListCtrl",["$scope","$interval","$filter","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.groups=o("orderBy")(e,"groupName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},5e3)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.applicationgroups").factory("ApplicationGroupService",["RulesModel",function(e){function t(t){void 0===_.find(t.selectedPolicies,t.selectedPolicy)&&(t.selectedPolicies.push(t.selectedPolicy),e.getIncomingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.incomingRules,e)}),e.getOutgoingRules(t.selectedPolicy.policyName,"default").then(function(e){Array.prototype.push.apply(t.outgoingRules,e)}),t.applicationGroup.policies.push(t.selectedPolicy.policyName))}function o(e,t){_.remove(e.applicationGroup.policies,function(e){return e==t}),_.remove(e.incomingRules,function(e){return e.policyName==t}),_.remove(e.outgoingRules,function(e){return e.policyName==t})}return{addIsolationPolicy:t,removeIsolationPolicy:o}}]),angular.module("contiv.dashboard").config(["$stateProvider",function(e){e.state("contiv.menu.dashboard",{url:"/dashboard",controller:"DashboardCtrl as dashboardCtrl",templateUrl:"dashboard/dashboard.html"})}]).controller("DashboardCtrl",["$scope","$interval","NodesModel","NetworksModel","VolumesModel","ApplicationGroupsModel","PoliciesModel","StoragePoliciesModel",function(e,t,o,n,i,r,l,c){function a(e){o.get(e).then(function(e){s.nodes=e.length}),n.get(e).then(function(e){s.networks=e.length}),i.get(e).then(function(e){s.volumes=e.length}),r.get(e).then(function(e){s.groups=e.length}),l.get(e).then(function(e){s.networkpolicies=e.length}),c.get(e).then(function(e){s.storagepolicies=e.length})}var s=this;s.nodes=0,s.networks=0,s.volumes=0,s.groups=0,s.networkpolicies=0,s.storagepolicies=0,a(!1);var u=t(function(){a(!0)},5e3);e.$on("$destroy",function(){t.cancel(u)})}]),angular.module("contiv.login").config(["$stateProvider",function(e){e.state("contiv.login",{url:"/",templateUrl:"login/login.html",controller:"LoginCtrl as loginCtrl"})}]).controller("LoginCtrl",["$state","CRUDHelperService",function(e,t){function o(){e.go("contiv.menu.dashboard",{username:i.username})}function n(){o()}var i=this;t.stopLoader(i),t.hideServerError(i),i.login=n}]),angular.module("contiv.menu").config(["$stateProvider",function(e){e.state("contiv.menu",{url:"/m",templateUrl:"menu/menu.html",controller:"MenuCtrl as menuCtrl",params:{username:null}})}]).controller("MenuCtrl",["$state","$stateParams",function(e,t){function o(){e.go("contiv.login")}var n=this;n.username=t.username,n.logout=o}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.create",{url:"/create",controller:"IsolationPolicyCreateCtrl as isolationPolicyCreateCtrl",templateUrl:"network_policies/isolationpolicycreate.html"})}]).controller("IsolationPolicyCreateCtrl",["$state","PoliciesModel","CRUDHelperService",function(e,t,o){function n(){e.go("contiv.menu.networkpolicies.isolation.list")}function i(){n()}function r(){c.form.$valid&&(o.hideServerError(c),o.startLoader(c),c.newPolicy.key=t.generateKey(c.newPolicy),t.create(c.newPolicy).then(function(e){o.stopLoader(c),n()},function(e){o.stopLoader(c),o.showServerError(c,e)}))}function l(){o.stopLoader(c),o.hideServerError(c),c.newPolicy={policyName:"",tenantName:"default"}}var c=this;c.createPolicy=r,c.cancelCreating=i,l()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.details",{url:"/details/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.edit",{url:"/edit/:key",controller:"IsolationPolicyDetailsCtrl as isolationPolicyDetailsCtrl",templateUrl:"network_policies/isolationpolicydetails.html"})}]).controller("IsolationPolicyDetailsCtrl",["$state","$stateParams","PoliciesModel","RulesModel","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l){function c(){e.go("contiv.menu.networkpolicies.isolation.list")}function a(){e.go("contiv.menu.networkpolicies.isolation.details",{key:b.policy.key})}function s(){a()}function u(){a()}function d(){l.hideServerError(b),l.startLoader(b),o["delete"](b.policy).then(function(e){l.stopLoader(b),c()},function(e){l.stopLoader(b),l.showServerError(b,e)})}function p(){e.is("contiv.menu.networkpolicies.isolation.edit")?b.mode="edit":b.mode="details"}function v(){b.newIncomingRule={ruleId:"",priority:1,action:"allow",fromEndpointGroup:"",fromNetwork:"",fromIPAddress:"",protocol:"tcp",port:"",direction:"in",tenantName:"default",policyName:b.policy.policyName}}function m(){b.newOutgoingRule={ruleId:"",priority:1,action:"allow",toEndpointGroup:"",toNetwork:"",toIPAddress:"",protocol:"tcp",port:"",direction:"out",tenantName:"default",policyName:b.policy.policyName}}function f(){i.get().then(function(e){b.networks=_.filter(e,{tenantName:"default"})})}function g(){r.get().then(function(e){b.applicationGroups=_.filter(e,{tenantName:"default"})})}function h(){null!=b.newOutgoingSelectedApplicationGroup?(b.newOutgoingRule.toEndpointGroup=b.newOutgoingSelectedApplicationGroup.groupName,b.newOutgoingRule.toNetwork=b.newOutgoingSelectedApplicationGroup.networkName,b.disableOutgoingNetworkSelection=!0):(b.newOutgoingRule.toEndpointGroup="",b.disableOutgoingNetworkSelection=!1)}function w(){null!=b.newIncomingSelectedApplicationGroup?(b.newIncomingRule.fromEndpointGroup=b.newIncomingSelectedApplicationGroup.groupName,b.newIncomingRule.fromNetwork=b.newIncomingSelectedApplicationGroup.networkName,b.disableIncomingNetworkSelection=!0):(b.newIncomingRule.fromEndpointGroup="",b.disableIncomingNetworkSelection=!1)}function C(e){e.ruleId=(b.incomingRules.length+b.outgoingRules.length+1).toString()+"-"+Date.now().toString()}function N(){l.hideServerError(b),l.startLoader(b),C(b.newIncomingRule),b.newIncomingRule.key=n.generateKey(b.newIncomingRule),n.create(b.newIncomingRule).then(function(e){l.stopLoader(b),b.incomingRules.push(e),v()},function(e){l.stopLoader(b),l.showServerError(b,e)})}function y(){l.hideServerError(b),l.startLoader(b),C(b.newOutgoingRule),b.newOutgoingRule.key=n.generateKey(b.newOutgoingRule),n.create(b.newOutgoingRule).then(function(e){l.stopLoader(b),b.outgoingRules.push(e),m()},function(e){l.stopLoader(b),l.showServerError(b,e)})}function k(e){l.hideServerError(b),l.startLoader(b),n.deleteUsingKey(e).then(function(t){l.stopLoader(b),_.remove(b.incomingRules,function(t){return t.key==e})},function(e){l.stopLoader(b),l.showServerError(b,e)})}function E(e){l.hideServerError(b),l.startLoader(b),n.deleteUsingKey(e).then(function(t){l.stopLoader(b),_.remove(b.outgoingRules,function(t){return t.key==e})},function(e){l.stopLoader(b),l.showServerError(b,e)})}var b=this;b.networks=[],b.applicationGroups=[],b.disableOutgoingNetworkSelection=!1,b.disableIncomingNetworkSelection=!1,b.newIncomingSelectedApplicationGroup="",b.newOutgoingSelectedApplicationGroup="",l.stopLoader(b),l.hideServerError(b),o.getModelByKey(t.key).then(function(e){b.policy=e,n.getIncomingRules(e.policyName,"default").then(function(e){b.incomingRules=e,v()}),n.getOutgoingRules(e.policyName,"default").then(function(e){b.outgoingRules=e,m()})}),f(),g(),b.deletePolicy=d,b.deleteIncomingRule=k,b.deleteOutgoingRule=E,b.addIncomingRule=N,b.addOutgoingRule=y,b.doneEditing=u,b.cancelEditing=s,b.onChangeOutgoingApplicationGroupSelection=h,b.onChangeIncomingApplicationGroupSelection=w,p()}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies.isolation.list",{url:"/list",controller:"IsolationPolicyListCtrl as isolationPolicyListCtrl",templateUrl:"network_policies/isolationpolicylist.html"})}]).controller("IsolationPolicyListCtrl",["$scope","$interval","$filter","PoliciesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.policies=o("orderBy")(e,"policyName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.networkpolicies").config(["$stateProvider",function(e){e.state("contiv.menu.networkpolicies",{url:"/networkpolicies",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/networkpoliciestabs.html"}).state("contiv.menu.networkpolicies.isolation",{url:"/isolation","abstract":!0,template:"<ui-view/>"}).state("contiv.menu.networkpolicies.prioritization",{url:"/prioritization",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/prioritizationpolicylist.html"}).state("contiv.menu.networkpolicies.bandwidth",{url:"/bandwidth",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/bandwidthpolicylist.html"}).state("contiv.menu.networkpolicies.redirection",{url:"/redirection",controller:"NetworkPoliciesTabsCtrl as networkPoliciesTabsCtrl",templateUrl:"network_policies/redirectionpolicylist.html"})}]).controller("NetworkPoliciesTabsCtrl",["$state",function(e){}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.create",{url:"/create",templateUrl:"networks/networkcreate.html",controller:"NetworkCreateCtrl as networkCreateCtrl"})}]).controller("NetworkCreateCtrl",["$state","$stateParams","NetworksModel","CRUDHelperService",function(e,t,o,n){function i(){e.go("contiv.menu.networks.list")}function r(){i()}function l(){a.form.$valid&&(n.hideServerError(a),n.startLoader(a),a.newNetwork.key=a.newNetwork.tenantName+":"+a.newNetwork.networkName,o.create(a.newNetwork).then(function(e){n.stopLoader(a),i()},function(e){n.stopLoader(a),n.showServerError(a,e)}))}function c(){n.stopLoader(a),n.hideServerError(a),a.newNetwork={networkName:"",encap:"vxlan",subnet:"",gateway:"",tenantName:"default"}}var a=this;a.cidrPattern=ContivGlobals.CIDR_REGEX,a.createNetwork=l,a.cancelCreating=r,c()}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.details",{url:"/details/:key",controller:"NetworkDetailsCtrl as networkDetailsCtrl",templateUrl:"networks/networkdetails.html"})}]).controller("NetworkDetailsCtrl",["$state","$stateParams","$scope","$interval","$filter","NetworksModel","ApplicationGroupsModel","CRUDHelperService",function(e,t,o,n,i,r,l,c){function a(){e.go("contiv.menu.networks.list")}function s(){c.hideServerError(d),c.startLoader(d),r["delete"](d.network).then(function(e){c.stopLoader(d),a()},function(e){c.stopLoader(d),c.showServerError(d,e)})}function u(e){l.get(e).then(function(e){d.applicationGroups=i("orderBy")(_.filter(e,{networkName:d.network.networkName}),"groupName")})}var d=this;c.stopLoader(d),c.hideServerError(d),r.getModelByKey(t.key).then(function(e){d.network=e,u(!1)}),d.deleteNetwork=s;var p;angular.isDefined(p)||(p=n(function(){u(!0)},ContivGlobals.REFRESH_INTERVAL)),o.$on("$destroy",function(){n.cancel(p)})}]),angular.module("contiv.networks").config(["$stateProvider",function(e){e.state("contiv.menu.networks.list",{url:"/list",controller:"NetworksListCtrl as networksListCtrl",templateUrl:"networks/networklist.html"})}]).controller("NetworksListCtrl",["$scope","$interval","$filter","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.networks=o("orderBy")(e,"networkName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.commission",{url:"/commission/:key",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"}).state("contiv.menu.nodes.discover",{url:"/discover",controller:"NodeCommissionCtrl as nodeCommissionCtrl",templateUrl:"nodes/nodecommission.html"})}]).controller("NodeCommissionCtrl",["$state","$stateParams","NodesModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.nodes.commission")?m.mode="commission":m.mode="discover"}function r(){e.go("contiv.menu.nodes.details.info",{key:t.key})}function l(){e.go("contiv.menu.nodes.list")}function c(){r()}function a(){l()}function s(){m.ansibleVariables.forEach(function(e){m.extra_vars[e.name]=e.value});var e={};m.envVariables.forEach(function(t){e[t.name]=t.value}),m.extra_vars.env=e,m.nodeOpsObj.extra_vars=JSON.stringify(m.extra_vars)}function u(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),m.nodeOpsObj.nodes=[t.key],p(),s(),o.commission(m.nodeOpsObj).then(function(e){n.stopLoader(m),r()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function d(){m.form.$valid&&(n.hideServerError(m),n.startLoader(m),v(),s(),o.discover(m.nodeOpsObj).then(function(e){n.stopLoader(m),l()},function(e){n.stopLoader(m),n.showServerError(m,e)}))}function p(){"aci"==m.extra_vars.contiv_network_mode?delete m.extra_vars.fwd_mode:(delete m.extra_vars.apic_url,delete m.extra_vars.apic_username,delete m.extra_vars.apic_password,delete m.extra_vars.apic_leaf_nodes,delete m.extra_vars.apic_phys_domain,delete m.extra_vars.apic_epg_bridge_domain,delete m.extra_vars.apic_contracts_unrestricted_mode),"native-swarm"==m.extra_vars.scheduler_provider&&delete m.extra_vars.ucp_bootstrap_node_name}function v(){m.nodeOpsObj.addrs=_.words(m.nodeIPAddr,/[^, ]+/g)}var m=this;m.nodeOpsObj={},m.extra_vars={},m.ansibleVariables=[],m.envVariables=[],m.nodeIPAddr="",m.cancelCommissioningNode=c,m.commission=u,m.discover=d,m.cancelDiscoveringNode=a,i(),n.stopLoader(m),n.hideServerError(m)}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.details",{url:"/details/:key",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodedetails.html"}).state("contiv.menu.nodes.details.info",{url:"/info",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodeinfo.html"}).state("contiv.menu.nodes.details.stats",{url:"/stats",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodestats.html"}).state("contiv.menu.nodes.details.logs",{url:"/logs",controller:"NodeDetailsCtrl as nodeDetailsCtrl",templateUrl:"nodes/nodelogs.html"})}]).controller("NodeDetailsCtrl",["$state","$stateParams","$scope","$interval","NodesModel",function(e,t,o,n,i){function r(){var e={nodes:[t.key]};i.decommission(e).then(function(e){s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1})}function l(){var e={nodes:[t.key]};i.upgrade(e).then(function(e){s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1})}function c(){switch(s.node.inventory_state.status){case"Unallocated":s.showCommissionButton=!0,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!1;break;case"Decommissioned":s.showCommissionButton=!0,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!1;break;case"Provisioning":s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;case"Allocated":s.showCommissionButton=!1,s.commissionButtonEnabled=!0,s.upgradeButtonEnabled=!0;break;case"Cancelled":s.showCommissionButton=!1,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;case"Maintenance":s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1;break;default:s.showCommissionButton=!0,s.commissionButtonEnabled=!1,s.upgradeButtonEnabled=!1}}function a(e){i.getModelByKey(t.key,e).then(function(e){s.node=e,c()})}var s=this;s.decommission=r,s.upgrade=l,a(!1);var u;angular.isDefined(u)||(u=n(function(){a(!0)},5e3)),o.$on("$destroy",function(){n.cancel(u)})}]),angular.module("contiv.nodes").config(["$stateProvider",function(e){e.state("contiv.menu.nodes.list",{url:"/list",controller:"NodeListCtrl as nodeListCtrl",templateUrl:"nodes/nodelist.html"})}]).controller("NodeListCtrl",["$scope","$interval","$filter","NodesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.nodes=o("orderBy")(e,"key")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.create",{url:"/create",templateUrl:"service_lbs/servicelbcreate.html",controller:"ServicelbCreateCtrl as servicelbCreateCtrl"})}]).controller("ServicelbCreateCtrl",["$state","$stateParams","ServicelbsModel","NetworksModel","CRUDHelperService",function(e,t,o,n,i){function r(){e.go("contiv.menu.servicelbs.list")}function l(){r()}function c(){n.get().then(function(e){d.networks=_.filter(e,{tenantName:"default"})})}function a(){angular.forEach(d.labelSelectors,function(e){var t=e.name+"="+e.value;d.servicelb.selectors.push(t)})}function s(){d.form.$valid&&(i.hideServerError(d),i.startLoader(d),d.servicelb.key=d.servicelb.tenantName+":"+d.servicelb.serviceName,a(),o.create(d.servicelb).then(function(e){i.stopLoader(d),r()},function(e){i.stopLoader(d),i.showServerError(d,e)}))}function u(){i.stopLoader(d),i.hideServerError(d),d.servicelb={serviceName:"",networkName:"",ipAddress:"",selectors:[],ports:[],tenantName:"default"}}var d=this;d.labelSelectors=[],d.networks=[],d.createServicelb=s,d.cancelCreating=l,c(),u()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.details",{url:"/details/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"}).state("contiv.menu.servicelbs.edit",{url:"/edit/:key",controller:"ServicelbDetailsCtrl as servicelbDetailsCtrl",templateUrl:"service_lbs/servicelbdetails.html"})}]).controller("ServicelbDetailsCtrl",["$state","$stateParams","ServicelbsModel","CRUDHelperService",function(e,t,o,n){function i(){e.is("contiv.menu.servicelbs.edit")?p.mode="edit":p.mode="details"}function r(){e.go("contiv.menu.servicelbs.list")}function l(){e.go("contiv.menu.servicelbs.details",{key:p.servicelb.key})}function c(){l()}function a(){n.hideServerError(p),n.startLoader(p),o["delete"](p.servicelb).then(function(e){n.stopLoader(p),r()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function s(){n.hideServerError(p),n.startLoader(p),d(),o.save(p.servicelb).then(function(e){n.stopLoader(p),l()},function(e){n.stopLoader(p),n.showServerError(p,e)})}function u(){angular.forEach(p.servicelb.selectors,function(e){var t={name:e.split("=")[0],value:e.split("=")[1]};p.labelSelectors.push(t)})}function d(){void 0===p.servicelb.selectors&&(p.servicelb.selectors=[]),angular.forEach(p.labelSelectors,function(e){var t=e.name+"="+e.value;p.servicelb.selectors.push(t)})}var p=this;p.labelSelectors=[],n.stopLoader(p),n.hideServerError(p),o.getModelByKey(t.key).then(function(e){p.servicelb=e,u()}),p.saveServicelb=s,p.cancelEditing=c,p.deleteServicelb=a,i()}]),angular.module("contiv.servicelbs").config(["$stateProvider",function(e){e.state("contiv.menu.servicelbs.list",{url:"/list",controller:"ServicelbListCtrl as servicelbListCtrl",templateUrl:"service_lbs/servicelblist.html"})}]).controller("ServicelbListCtrl",["$scope","$interval","$filter","ServicelbsModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.servicelbs=o("orderBy")(e,"serviceName")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.servicelbs").directive("ctvServicelbports",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e===t}function o(){e.newItem={servicePort:"",providerPort:"",protocol:""}}function n(e){return""===e.servicePort&&""===e.providerPort&&""===e.protocol}e.add=function(){if(!n(e.newItem)){void 0===e.items&&(e.items=[]);var i=e.newItem.servicePort+":"+e.newItem.providerPort+":"+e.newItem.protocol;_.pullAllWith(e.items,[i],t),e.items.push(i),o()}},e.remove=function(o){_.remove(e.items,function(e){return t(e,o)})},o()},templateUrl:"service_lbs/servicelbports.html"}}),angular.module("contiv.storagepolicies").config(["$stateProvider",function(e){e.state("contiv.menu.storagepolicies.list",{url:"/list",controller:"StoragePolicyListCtrl as storagePolicyListCtrl",templateUrl:"storage_policies/storagepolicylist.html"})}]).controller("StoragePolicyListCtrl",["$scope","$interval","StoragePoliciesModel",function(e,t,o){function n(e){o.get(e).then(function(e){i.policies=e})}var i=this;n(!1);var r;angular.isDefined(r)||(r=t(function(){n(!0)},5e3)),e.$on("$destroy",function(){t.cancel(r)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.details",{url:"/details/:key",controller:"VolumeDetailsCtrl as volumeDetailsCtrl",templateUrl:"volumes/volumedetails.html"})}]).controller("VolumeDetailsCtrl",["$state","$stateParams","$scope","$interval","VolumesModel",function(e,t,o,n,i){function r(){e.go("contiv.menu.volumes.list")}function l(){i["delete"](a.volume).then(function(e){r()})}function c(e){var o=t.key.split("/"),n={};n.policy=o[0],n.name=o[1],i.getModel(n,e).then(function(e){a.volume=e})}var a=this;a.deleteVolume=l,c(!1);var s;angular.isDefined(s)||(s=n(function(){c(!0)},5e3)),o.$on("$destroy",function(){n.cancel(s)})}]),angular.module("contiv.volumes").config(["$stateProvider",function(e){e.state("contiv.menu.volumes.list",{url:"/list",controller:"VolumeListCtrl as volumeListCtrl",templateUrl:"volumes/volumelist.html"})}]).controller("VolumeListCtrl",["$scope","$interval","$filter","VolumesModel","CRUDHelperService",function(e,t,o,n,i){function r(e){n.get(e).then(function(e){i.stopLoader(l),l.volumes=o("orderBy")(e,"name")},function(e){i.stopLoader(l)})}var l=this;r(!1);var c;angular.isDefined(c)||(c=t(function(){r(!0)},ContivGlobals.REFRESH_INTERVAL)),e.$on("$destroy",function(){t.cancel(c)})}]),angular.module("contiv.directives").directive("ctvError",function(){return{restrict:"E",scope:{header:"@",error:"="},link:function(e,t,o){t.find("i").on("click",function(){t.addClass("ng-hide")})},templateUrl:"components/directives/errormessage.html"}}),angular.module("contiv.directives").directive("ctvNamevalue",function(){return{restrict:"E",scope:{items:"="},link:function(e){function t(e,t){return e.name==t.name}function o(){e.newItem={name:"",value:""}}function n(e){return""===e.name&&""===e.value}e.add=function(){n(e.newItem)||(void 0===e.item&&(e.item=[]),_.pullAllWith(e.items,[e.newItem],t),e.items.push(e.newItem),o())},e.remove=function(t){_.remove(e.items,function(e){return e.name==t.name})},o()},templateUrl:"components/directives/namevalue.html"}}),angular.module("contiv.directives").directive("ctvTable",["filterFilter","limitToFilter",function(e,t){return{restrict:"E",transclude:!0,scope:{items:"=",filtereditems:"=",size:"@"},controller:["$scope","$element","$attrs",function(o,n,i){function r(n,i){if(s.searchText=i,(void 0===n||0>n)&&(n=0),s.pageNo=n,void 0!==o.items){var r=e(o.items,s.searchText),l=Math.ceil(r.length/s.size);0==l&&(l=1),s.chunks=[];for(var c=0;l>c;c++)s.chunks.push({selected:!1,pageNo:c});if(n>=s.chunks.length&&(s.pageNo=0),s.chunks[s.pageNo].selected=!0,s.chunks.length>5){var a,u;a=s.pageNo-2,u=s.pageNo+3,0>a&&(u-=a,a=0),u>s.chunks.length&&(a-=u-s.chunks.length,u=s.chunks.length),o.paginationMenu.chunks=s.chunks.slice(a,u)}else o.paginationMenu.chunks=s.chunks;s.filteredItems=t(r,s.size,s.pageNo*s.size),o.filtereditems=s.filteredItems}return!1}function l(){var e;return e=s.pageNo<=0?0:s.pageNo-1,r(e)}function c(){var e;return e=s.pageNo+1,e>s.chunks.length-1&&(e=s.chunks.length-1),r(e)}function a(e){o.paginationMenu=e}var s=this;s.chunks=[],s.pageNo=0,s.size=parseInt(o.size,10),isNaN(s.size)&&(s.size=12),s.showChunk=r,s.showNextChunk=c,
s.showPrevChunk=l,s.addPaginationMenu=a}],link:function(e,t,o,n){e.$parent.$watch(o.items,function(){n.showChunk(n.pageNo,n.searchText)})},templateUrl:"components/directives/table.html"}}]).directive("ctvThead",function(){return{restrict:"E",transclude:!0,replace:!0,template:"<thead ng-transclude></thead>"}}).directive("ctvTh",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{"class":"@"},template:'<th ng-class="class" ng-transclude></th>'}}).directive("ctvTbody",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tbody ng-transclude></tbody>"}}).directive("ctvTfoot",function(){return{restrict:"E",scope:{},transclude:!0,replace:!0,template:"<tfoot ng-transclude></tfoot>"}}).directive("ctvTsearch",function(){return{restrict:"E",require:"^^ctvTable",scope:{placeholder:"@",size:"@"},link:function(e,t,o,n){e.showChunk=function(){n.showChunk(n.pageNo,e.searchText)}},templateUrl:"components/directives/searchinput.html"}}).directive("ctvTr",function(){return{restrict:"E",transclude:"true",replace:!0,scope:{},template:"<tr ng-transclude></tr>"}}).directive("ctvTd",function(){return{restrict:"E",transclude:!0,replace:!0,scope:!0,template:"<td ng-transclude></td>"}}).directive("ctvTpagination",function(){return{restrict:"E",require:"^^ctvTable",scope:{},link:function(e,t,o,n){n.addPaginationMenu(e),n.showChunk(n.pageNo,n.searchText),e.showChunk=function(e){n.showChunk(e,n.searchText)},e.showPrevChunk=n.showPrevChunk,e.showNextChunk=n.showNextChunk},templateUrl:"components/directives/paginationmenu.html"}}),angular.module("contiv.models").factory("ApplicationGroupsModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.APPLICATIONGROUPS_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.networkName+":"+e.groupName},o}]),BaseCollection.prototype.extract=function(e){return e.data},BaseCollection.prototype.get=function(e){var t=this;return void 0===e&&(e=!1),!e&&t.models.length>0?t.$q.when(t.models):t.$http.get(t.url).then(function(e){return t.models=t.extract(e),t.models})},BaseCollection.prototype.getModelByKey=function(e,t){function o(){return _.find(n.models,function(t){return t.key==e})}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},BaseCollection.prototype.getModel=function(e,t){function o(){return _.find(n.models,e)}var n=this;void 0===t&&(t=!1);var i=n.$q.defer();return!t&&n.models.length>0?i.resolve(o()):n.get(t).then(function(){i.resolve(o())}),i.promise},Collection.prototype=Object.create(BaseCollection.prototype),Collection.prototype.create=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.post(n,e).then(function(e){t.models.push(t.extract(e)),o.resolve(t.extract(e))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.save=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http.put(n,e).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),t.models.push(t.extract(n)),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype["delete"]=function(e){var t=this,o=t.$q.defer(),n=t.url+e.key+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e.key}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},Collection.prototype.deleteUsingKey=function(e){var t=this,o=t.$q.defer(),n=t.url+e+"/";return t.$http["delete"](n).then(function(n){_.remove(t.models,function(t){return t.key==e}),o.resolve(t.extract(n))},function(e){o.reject(t.extract(e))}),o.promise},angular.module("contiv.models").factory("NetworksModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.NETWORKS_ENDPOINT)}]),angular.module("contiv.models").factory("NodesModel",["$http","$q",function(e,t){var o=new NodesCollection(e,t);return o}]),NodesCollection.prototype=Object.create(BaseCollection.prototype),NodesCollection.prototype.extract=function(e){return _.map(e.data,function(e,t){return e.key=t,e})},NodesCollection.prototype.commission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_COMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.decommission=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DECOMMISSION_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.upgrade=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_MAINTENANCE_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},NodesCollection.prototype.discover=function(e){var t=this,o=t.$q.defer(),n=ContivGlobals.NODES_DISCOVER_ENDPOINT;return t.$http.post(n,e,{headers:{"Content-Type":"application/json"}}).then(function(e){o.resolve()},function(e){o.reject(e)}),o.promise},angular.module("contiv.models").factory("PoliciesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.POLICIES_ENDPOINT);return o.generateKey=function(e){return e.tenantName+":"+e.policyName},o}]),angular.module("contiv.models").factory("RulesModel",["$http","$q",function(e,t){var o=new Collection(e,t,ContivGlobals.RULES_ENDPOINT);return o.getIncomingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"in",tenantName:t})})},o.getOutgoingRules=function(e,t){return o.get().then(function(o){return _.filter(o,{policyName:e,direction:"out",tenantName:t})})},o.generateKey=function(e){return e.tenantName+":"+e.policyName+":"+e.ruleId},o}]),angular.module("contiv.models").factory("ServicelbsModel",["$http","$q",function(e,t){return new Collection(e,t,ContivGlobals.SERVICELBS_ENDPOINT)}]),angular.module("contiv.models").factory("StoragePoliciesModel",["$http","$q",function(e,t){var o=new StoragePoliciesCollection(e,t);return o}]),angular.module("contiv.models").factory("VolumesModel",["$http","$q",function(e,t){var o=new VolumesCollection(e,t);return o}]),VolumesCollection.prototype=Object.create(BaseCollection.prototype),VolumesCollection.prototype["delete"]=function(e){var t=this,o=ContivGlobals.VOLUMES_DELETE_ENDPOINT+e.policy+"/"+e.name;t.$http.post(o,e).then(function(o){_.remove(t.models,function(t){return t.name==e.name&&t.policy==e.name})},function(e){})},angular.module("contiv.utils").factory("CRUDHelperService",function(){function e(e){e.showLoader=!0}function t(e){e.showLoader=!1}function o(e,t){e.showServerError=!0,e.serverErrorMessage=t}function n(e){e.showServerError=!1}return{startLoader:e,stopLoader:t,showServerError:o,hideServerError:n}});
//# sourceMappingURL=data:application/json;base64,
